/*
 * This script generates training data from Hyperlambda files.
 *
 * The script loops through all files recursively inside your '/modules/fine-tune-hyperlambda/snippets/'
 * folder and loads Hyperlambda files, converts to lambda, extracts the top comment, uses it as a prompt value,
 * for then to transform the rest of the lambda object back to Hyperlambda again (minus the first comment).
 *
 * The transformed Hyperlambda is then used as 'code' when inserted into database, while the validation
 * column is set to true only if the file was found inside a /validation/ folder.
 *
 * If the file is not a Hyperlambda file, but instead a markdown file, it will split it on '---' and
 * us the first part as prompt and the second part as completion, and insert with `is_static` set to true.
 */

.arguments
   randomize:int

// Applying default value for [randomize].
validators.default:x:@.arguments
   randomize:int:1

// Deleting old records
data.connect:fine-tune
   data.execute:delete from hyperlambda

// Loading all files recursively
execute:magic.io.file.load-recursively
   .:/modules/fine-tune-hyperlambda/snippets/

// Counting training data
.no:int:0

// Looping through all files.
for-each:x:@execute/*

   // Making sure we catch exceptions such that we can see which file fails.
   try

      // Verifying we're dealing with a Hyperlambda file.
      if
         strings.ends-with:x:@.dp/#
            .:.hl
         .lambda

            // Transforming file to lambda object.
            hyper2lambda:x:@.dp/#/0
               comments:true

            .prompt
            set-value:x:-
               get-value:x:@hyper2lambda/0
            remove-nodes:x:@hyper2lambda/0

            // Creating our code segment
            lambda2hyper:x:@hyper2lambda/*
               comments:true

            // Checking if this is validation data.
            .validation:int:0
            if
               and
                  eq:x:@.arguments/*/randomize
                     .:int:1
                  eq
                     math.modulo:x:@.no
                        .:int:8
                     .:int:0
               .lambda
                  set-value:x:@.validation
                     .:int:1
            else-if
               strings.contains:x:@.dp/#
                  .:/validation/
               .lambda
                  set-value:x:@.validation
                     .:int:1

            // Checking if this is validation data.
            .synthesised:int:0
            if
               strings.contains:x:@.dp/#
                  .:/synthesised
               .lambda
                  set-value:x:@.synthesised
                     .:int:1

            // Saving above code snippet.
            data.connect:fine-tune

               // Verifying that code doesn't already exist in file.
               .exists:bool:false
               data.read
                  table:hyperlambda
                  where
                     and
                        prompt.eq:x:@.prompt
                        code.eq:x:@lambda2hyper
                  limit:1
               if
                  not-exists:x:@data.read/*
                  .lambda

                     // Making sure we avoid double inserts.
                     data.create
                        table:hyperlambda
                        values
                           prompt:x:@.prompt
                           code:x:@lambda2hyper
                           validation:x:@.validation
                           synthesised:x:@.synthesised

                     // Counting how many training snippets we're inserting
                     math.increment:x:@.no

               else

                  // Deleting file since it's a duplicate!
                  io.file.delete:x:@.dp/#

   .catch
   
      // This throws an exception being the name of the currently processed filename
      throw:x:@.dp/#

yield
   count:x:@.no
