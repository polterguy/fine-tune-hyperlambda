/*
 * Loads all Hyperlambda files, finds all individual expressions in these, and
 * creates a training snippet of whatever these expressions are pointing to.
 *
 * This breaks up larger pieces of code into smaller snippets.
 */
.arguments
   limit:long
   offset:long
.type:public

// Ensuring both arguments are specified by caller!
validators.mandatory:x:@.arguments/*/limit
validators.mandatory:x:@.arguments/*/offset

// Loading our system message file.
.system-message
set-value:x:@.system-message
   io.file.load:/modules/fine-tune-hyperlambda/system-message-synthesiser.md

vocabulary

// Connecting to our fine-tune database.
data.connect:fine-tune

   // Selecting records.
   data.select:"select * from hyperlambda where is_static = 0 and synthesised = 0 order by length(code) + length(prompt) desc limit @limit offset @offset"
      @limit:x:@.arguments/*/limit
      @offset:x:@.arguments/*/offset

   // Looping through each record returned from above.
   for-each:x:@data.select/*

      // Converting code to lambda.
      hyper2lambda:x:@.dp/#/*/code

      // Looping through all nodes in lambda object.
      for-each:x:@hyper2lambda/**/*

         // Verifying currently iterated node's name is a slot invocation.
         if
            and
               not-null:x:@.dp/#
               eq
                  type:x:@.dp/#
                  .:x
            .lambda

               // Creating a temporary string of the expression.
               .tmp
               set-value:x:@.tmp
                  strings.concat
                     .:".:x:"
                     convert:x:@.dp/#
                        type:string

               // Making sure we've NOT previously dealt with this exact snippet.
               data.read
                  table:hyperlambda
                  where
                     and
                        code.eq:x:@.tmp
               if
                  not-exists:x:@data.read/*
                  .lambda

                     // Logging
                     log.info:Creating synthetic snippet
                        expression:x:@.tmp

                     /*
                      * Invokes OpenAI's chat API with the specified [model], [max_tokens], [context],
                      * [instruction] and [query].
                      *
                      * Will use the default API key found from configurations.
                      *
                      * [context] is additional data you can supply to OpenAI such that it responds using
                      * your data as its source for information. [instruction] is a system message allowing
                      * you to change how OpenAI responds.
                      */
                     execute:magic.workflows.actions.execute
                        name:openai-query
                        filename:/modules/openai/workflows/actions/openai-query.hl
                        arguments
                           model:gpt-4o
                           max_tokens:int:1500
                           instruction:x:@.system-message
                           query:x:@.tmp

                     // Injecting comment into Hyperlambda.
                     .foo
                     unwrap:x:+/*/*
                     add:x:@.foo
                        .
                           ..:x:@.tmp
                     lambda2hyper:x:@.foo/*
                        comments:true
                     set-value:x:@.tmp
                        strings.concat
                           get-value:x:@lambda2hyper
                           .:"\r\n"
                           get-value:x:@.tmp

                     // Saving with a random filename in /synthesised4/ folder
                     .filename
                     set-value:x:@.filename
                        strings.concat
                           .:/modules/fine-tune-hyperlambda/snippets/hyperlambda/synthesised4/
                           .:id-
                           get-value:x:@for-each/@.dp/#/*/hyperlambda_id
                           .:-
                           crypto.random
                              min:10
                              max:10
                           .:.hl
                     io.file.save:x:@.filename
                        get-value:x:@.tmp

               else

                  log.info:Snippet already exists.
