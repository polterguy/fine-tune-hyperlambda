/*
 * Cleans up files that went wrong.
 */

.arguments

// Loading all files recursively
execute:magic.io.file.load-recursively
   .:/modules/fine-tune-hyperlambda/snippets/

// Counting training data
.no:int:0

// Looping through all files.
for-each:x:@execute/*

   // Making sure we catch exceptions such that we can see which file fails.
   try

      // Verifying we're dealing with a Hyperlambda file.
      if
         strings.ends-with:x:@.dp/#
            .:.hl
         .lambda
         
            if
               or
                  strings.contains:x:@.dp/#/0
                     .:" * /*"
                  strings.contains:x:@.dp/#/0
                     .:" * //"
               .lambda
                  io.file.delete:x:@.dp/#

            else

               // Transforming file to lambda object.
               hyper2lambda:x:@.dp/#/0
                  comments:true
               if
                  or
                     and
                        eq
                           get-name:x:@hyper2lambda/0
                           .:..
                        eq
                           get-name:x:@hyper2lambda/1
                           .:sort
                        eq
                           get-value:x:@hyper2lambda/1
                           .:string
                        eq
                           get-count:x:@hyper2lambda/*
                           .:int:2
                     and
                        eq
                           get-name:x:@hyper2lambda/0
                           .:..
                        eq
                           get-name:x:@hyper2lambda/1
                           .:type
                        neq
                           type:x:@hyper2lambda/1
                           .:x
                        eq
                           get-count:x:@hyper2lambda/*
                           .:int:2
                  .lambda

                     // Deleting file since it's syntactically wrong, or comment is bogus.
                     io.file.delete:x:@.dp/#

                     // Counting how many training snippets we're deleting
                     math.increment:x:@.no

   .catch

      // This throws an exception being the name of the currently processed filename
      throw:x:@.dp/#

yield
   count:x:@.no
