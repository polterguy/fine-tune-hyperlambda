{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Declaring and accessing data nodes"},{"role":"assistant","content":".data\\n   name:John Doe\\n   age:int:30\\nlog.info:x:@.data/*/name\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"If with a condition based on another node's value"},{"role":"assistant","content":".args\\n   flag:bool:true\\n.result\\nif\\n   get-value:x:@.args/*/flag\\n   .lambda\\n      set-value:x:@.result\\n         .:Yes\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"eq returns true if two values are exactly equal"},{"role":"assistant","content":".src:int:5\\neq\\n   get-value:x:@.src\\n   .:int:5\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"lte returns true if the left value is less than or equal to the right"},{"role":"assistant","content":".x:int:5\\nlte\\n   get-value:x:@.x\\n   .:int:5\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"[and] returns true only if all arguments are true"},{"role":"assistant","content":"and\\n   .:bool:true\\n   .:bool:true\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Add children from multiple sources into multiple destinations"},{"role":"assistant","content":".dest\\n.dest\\n.src1\\n   foo1:bar1\\n.src2\\n   foo2:bar2\\nadd:x:../*/.dest\\n   get-nodes:x:@.src1/*\\n   get-nodes:x:@.src2/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Change the name of a node"},{"role":"assistant","content":".parent\\n   old-name:foo\\nset-name:x:@.parent/*/old-name\\n   .:new-name\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"[exists] returns true if the expression finds any node"},{"role":"assistant","content":".present\\n   node\\nexists:x:@.present/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Pass a node by reference and modify it inside another slot"},{"role":"assistant","content":".foo\\nreference:x:@.foo\\nset-value:x:-/#\\n   .:Updated\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Get the type name of a given value"},{"role":"assistant","content":".val:bool:true\\ntype:x:@.val\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"List all available slots (functions) in the system"},{"role":"assistant","content":"vocabulary\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns unique and distinct values from your Album table in your chinook database"},{"role":"assistant","content":".arguments\\n\\n   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME\\n   distinct_column:string\\n\\n   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.\\n   limit:long\\n\\n   // Offset into the dataset of where to start retrieving records\\n   offset:long\\n\\n   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format\\n   order:string\\n\\n   // What direction to order, can be 'asc' or 'desc' implying ascending and descending\\n   direction:string\\n\\n   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.\\n   operator:string\\n   Album.AlbumId.mt:long\\n   Album.AlbumId.lt:long\\n   Album.AlbumId.mteq:long\\n   Album.AlbumId.lteq:long\\n   Album.AlbumId.neq:long\\n   Album.AlbumId.eq:long\\n   Album.Title.like:string\\n   Album.Title.mt:string\\n   Album.Title.lt:string\\n   Album.Title.mteq:string\\n   Album.Title.lteq:string\\n   Album.Title.neq:string\\n   Album.Title.eq:string\\n   Album.ArtistId.mt:long\\n   Album.ArtistId.lt:long\\n   Album.ArtistId.mteq:long\\n   Album.ArtistId.lteq:long\\n   Album.ArtistId.neq:long\\n   Album.ArtistId.eq:long\\n   ArtistId.Name.eq:string\\n   ArtistId.Name.like:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-distinct\\n\\n// Sanity checking that distinct column was passed in.\\nvalidators.mandatory:x:@.arguments/*/distinct_column\\n\\n// Sanity checking distinct column's name.\\nvalidators.enum:x:@.arguments/*/distinct_column\\n   .:Album.AlbumId\\n   .:Album.Title\\n   .:Album.ArtistId\\n   .:ArtistId.Name\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Sanity checking invocation.\\nvalidators.enum:x:@.arguments/*/operator\\n   .:or\\n   .:and\\n\\n/*\\n * Checking if user supplied an [operator] argument, and if so\\n * changing the boolean operator for comparison operations.\\n */\\nif\\n   exists:x:@.arguments/*/operator\\n   .lambda\\n\\n      // User provided a boolean comparison [operator] argument.\\n      set-name:x:../*/data.connect/*/data.read/*/where/0\\n         get-value:x:@.arguments/*/operator\\n      remove-nodes:x:@.arguments/*/operator\\n\\n// Opening up our database connection.\\ndata.connect:[generic|chinook]\\n   database-type:sqlite\\n\\n   // Making sure we're using correct function.\\n   set-name:x:./*/data.read/*/columns/*/distinct_functor\\n      strings.concat\\n         .:distinct(\\n         get-value:x:@.arguments/*/distinct_column\\n         .:)\\n\\n   // Removing distinct argument to simplify adding other arguments.\\n   remove-nodes:x:@.arguments/*/distinct_column\\n\\n   // Adding [limit] and [offset] arguments\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n      get-nodes:x:@.arguments/*/order\\n      get-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/order\\n   remove-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/limit\\n   remove-nodes:x:@.arguments/*/offset\\n\\n   // Adding filtering arguments.\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:Album\\n         join:Artist\\n            as:ArtistId\\n            type:left\\n            on\\n               and\\n                  Album.ArtistId:ArtistId.ArtistId\\n      columns\\n         distinct_functor\\n            as:.\\n      where\\n         and\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Count unique and distinct items from your Artist table in your chinook database"},{"role":"assistant","content":".arguments\\n\\n   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME\\n   distinct_column:string\\n\\n   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.\\n   operator:string\\n   Artist.ArtistId.mt:long\\n   Artist.ArtistId.lt:long\\n   Artist.ArtistId.mteq:long\\n   Artist.ArtistId.lteq:long\\n   Artist.ArtistId.neq:long\\n   Artist.ArtistId.eq:long\\n   Artist.Name.like:string\\n   Artist.Name.mt:string\\n   Artist.Name.lt:string\\n   Artist.Name.mteq:string\\n   Artist.Name.lteq:string\\n   Artist.Name.neq:string\\n   Artist.Name.eq:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-count-distinct\\n\\n// Sanity checking that distinct column was passed in.\\nvalidators.mandatory:x:@.arguments/*/distinct_column\\n\\n// Sanity checking distinct column's name.\\nvalidators.enum:x:@.arguments/*/distinct_column\\n   .:Artist.ArtistId\\n   .:Artist.Name\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Sanity checking invocation.\\nvalidators.enum:x:@.arguments/*/operator\\n   .:or\\n   .:and\\n\\n/*\\n * Checking if user supplied an [operator] argument, and if so\\n * changing the boolean operator for comparison operations.\\n */\\nif\\n   exists:x:@.arguments/*/operator\\n   .lambda\\n\\n      // User provided a boolean comparison [operator] argument.\\n      set-name:x:../*/data.connect/*/data.read/*/where/0\\n         get-value:x:@.arguments/*/operator\\n      remove-nodes:x:@.arguments/*/operator\\n\\n// Opening up our database connection.\\ndata.connect:[generic|chinook]\\n   database-type:sqlite\\n\\n   // Making sure we're using correct function.\\n   set-name:x:./*/data.read/*/columns/*/distinct_functor\\n      strings.concat\\n         .:\"count(distinct \"\\n         get-value:x:@.arguments/*/distinct_column\\n         .:)\\n\\n   // Removing distinct argument to simplify adding other arguments.\\n   remove-nodes:x:@.arguments/*/distinct_column\\n\\n   // Adding filtering arguments.\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:Artist\\n      columns\\n         distinct_functor\\n            as:count\\n      where\\n         and\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Update one record in your Artist table in your chinook database"},{"role":"assistant","content":".arguments\\n\\n   // ArtistId column value being primary key of record to update, mandatory argument\\n   ArtistId:long\\n\\n   // Name column's new value\\n   Name:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-update\\n\\n// Sanity checking invocation, making sure primary key(s) are specified.\\nvalidators.mandatory:x:@.arguments/*/ArtistId\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Opening up our database connection.\\ndata.connect:[generic|chinook]\\n   database-type:sqlite\\n\\n   // Parametrising our invocation.\\n   add:x:./*/data.update/*/values\\n      get-nodes:x:@.arguments/*/[1,1000]\\n   add:x:./*/data.update/*/where/*/and\\n      get-nodes:x:@.arguments/*/[0,1]\\n\\n   // Invoking our update slot.\\n   data.update\\n      database-type:sqlite\\n      table:Artist\\n      values\\n      where\\n         and\\n\\n   // Verifying record exists.\\n   if\\n      eq\\n         get-value:x:@data.update\\n         .:int:0\\n      .lambda\\n         response.status.set:404\\n         return\\n            result:Record not found\\n\\n   // Returning the correct status code.\\n   response.status.set:202\\n\\n   // Returning success to caller.\\n   unwrap:x:+/*\\n   return\\n      affected:x:@data.update\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Divide a number by the result of a nested subtraction"},{"role":"assistant","content":".a:int:10\\n.b:int:4\\n\\n// outer operation (division)\\nmath.divide\\n\\n   // nested inner operation (subtraction)\\n   math.subtract\\n\\n      // fetches 10\\n      get-value:x:@.a\\n\\n      // subtracts 4, yielding 6\\n      get-value:x:@.b\\n\\n   // divides the base (6 from inner op) by 2 -> result 3\\n   .:int:2\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Creates a bar chart"},{"role":"assistant","content":"image.chart:bars\\n   filename:/chart.png\\n   width:600\\n   height:300\\n   bars\\n      Spring:int:2\\n      Summer:int:5\\n      Autumn:int:10\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Pattern not found yields an empty result set."},{"role":"assistant","content":"strings.matches:no digits here\\n   .:\"\\\\d+\"\\n\\n// Result: No child nodes (no matches found)\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Capitalize a fully lowercase word."},{"role":"assistant","content":"\\n// Result: \"Hyperlambda\"\\nstrings.capitalize:hyperlambda\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Replace all occurrences of a substring."},{"role":"assistant","content":".text:abababab\\nstrings.replace:x:@.text\\n   .:ab\\n   .:AB\\n\\n// Result: \"ABABABAB\"\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Check for a special character in a string."},{"role":"assistant","content":"\\n// Returns true\\nstrings.contains:Hello, world!\\n   .:!\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Check if a string starts with a substring that is not at the beginning."},{"role":"assistant","content":"\\n// Returns false\\nstrings.starts-with:HelloWorld\\n   .:World\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Get the length of an empty string."},{"role":"assistant","content":"\\n// Returns 0\\nstrings.length:\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Perform a case-insensitive replacement."},{"role":"assistant","content":".input:Yes yes YES\\nstrings.regex-replace:x:@.input\\n   .:(?i)yes\\n   .:no\\n\\n// Result: \"no no no\"\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Remove a substring by replacing it with an empty string."},{"role":"assistant","content":".sentence:Apples and oranges\\nstrings.replace:x:@.sentence\\n   .:\"and \"\\n   .:\\n\\n// Result: \"Apples oranges\" (removed \"and \")\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Convert an already uppercase string (no change)."},{"role":"assistant","content":"\\n// Result: \"HELLO\"\\nstrings.to-upper:HELLO\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Trim a string consisting only of trim characters (result is empty)."},{"role":"assistant","content":"\\n// Result: \"\" (empty string)\\nstrings.trim:!!!\\n   .:!\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Use variables for string and trim characters (start only)."},{"role":"assistant","content":".text:...Hello\\n.trimchars:.\\n\\n// Result: \"Hello\"\\nstrings.trim-start:x:@.text\\n   get-value:x:@.trimchars\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Remove all non-digit characters from a string (keep only digits)."},{"role":"assistant","content":".mixed:\"Phone: 555-1234!\"\\nstrings.replace-not-of:x:@.mixed\\n   .:0123456789\\n   .:\\n\\n// Result: \"5551234\" (only digits remain)\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Extract a substring given a start index and length."},{"role":"assistant","content":".text:HelloWorld\\nstrings.substring:x:@.text\\n   .:5\\n   .:3\\n\\n// Result: \"Wor\"\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns minimum, maximum, average, sum or count from your categories table in your cms database grouped by a column"},{"role":"assistant","content":".arguments\\n\\n   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME\\n   group_column:string\\n\\n   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.\\n   limit:long\\n\\n   // Offset into the dataset of where to start retrieving records\\n   offset:long\\n\\n   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format\\n   order:string\\n\\n   // What direction to order, can be 'asc' or 'desc' implying ascending and descending\\n   direction:string\\n\\n   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count\\n   aggregate_function:string\\n\\n   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.\\n   aggregate_column:string\\n\\n   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.\\n\\n   // Offset into the dataset of where to start retrieving records\\n\\n   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format\\n\\n   // What direction to order, can be 'asc' or 'desc' implying ascending and descending\\n   categories.id.eq:long\\n   categories.name.like:string\\n   categories.name.eq:string\\n   categories.description.like:string\\n   categories.description.eq:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-group\\n\\n// Sanity checking mandatory arguments.\\nvalidators.mandatory:x:@.arguments/*/group_column\\nvalidators.mandatory:x:@.arguments/*/aggregate_function\\nvalidators.mandatory:x:@.arguments/*/aggregate_column\\n\\n// Sanity checking name of aggregate function.\\nvalidators.enum:x:@.arguments/*/aggregate_function\\n   .:min\\n   .:max\\n   .:sum\\n   .:avg\\n   .:count\\n\\n// Sanity checking group column.\\nvalidators.enum:x:@.arguments/*/group_column\\n   .:categories.id\\n   .:categories.name\\n   .:categories.description\\n\\n// Sanity checking agggregate column name.\\nvalidators.enum:x:@.arguments/*/aggregate_column\\n   .:categories.id\\n   .:categories.name\\n   .:categories.description\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:enterprise,root\\n\\n// Opening up our database connection.\\ndata.connect:[generic|cms]\\n   database-type:sqlite\\n\\n   // Making sure we're using the correct group column\\n   set-name:x:@data.connect/*/data.read/*/group/*/group_column\\n      get-value:x:@.arguments/*/group_column\\n\\n   // Making sure we return group column as a part of the result\\n   set-name:x:+/*/*\\n      get-value:x:@.arguments/*/group_column\\n   insert-before:x:@data.connect/*/data.read/*/columns/0\\n      .\\n         group_column\\n\\n   // Changing name of aggregate column returned to caller.\\n   set-value:x:@data.connect/*/data.read/*/columns/1/*/as\\n      get-value:x:@.arguments/*/aggregate_function\\n\\n   // Removing group column to simplify adding other arguments\\n   remove-nodes:x:@.arguments/*/group_column\\n\\n   // Adding paging arguments\\n   add:x:@data.connect/*/data.read\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n   remove-nodes:x:@.arguments/*/limit\\n   remove-nodes:x:@.arguments/*/offset\\n\\n   // Parametrising our read invocation with ordering arguments if specified.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/order\\n      get-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/order\\n   remove-nodes:x:@.arguments/*/direction\\n\\n   // Making sure we're using correct aggregate function.\\n   set-name:x:./*/data.read/*/columns/*/aggregate_functor\\n      strings.concat\\n         get-value:x:@.arguments/*/aggregate_function\\n         .:(\\n         get-value:x:@.arguments/*/aggregate_column\\n         .:)\\n\\n   // Removing aggregate arguments to simplify adding other arguments.\\n   remove-nodes:x:@.arguments/*/[0,2]\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:categories\\n      columns\\n         aggregate_functor\\n            as:result\\n      where\\n         and\\n      group\\n         group_column\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Count unique and distinct items from your comments table in your cms database"},{"role":"assistant","content":".arguments\\n\\n   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME\\n   distinct_column:string\\n\\n   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.\\n\\n   // Offset into the dataset of where to start retrieving records\\n\\n   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format\\n\\n   // What direction to order, can be 'asc' or 'desc' implying ascending and descending\\n   comments.id.eq:long\\n   comments.post_id.eq:long\\n   comments.user_id.eq:long\\n   comments.content.like:string\\n   comments.content.eq:string\\n   comments.created_at.eq:date\\n   post_id.title.eq:string\\n   post_id.title.like:string\\n   user_id.username.eq:string\\n   user_id.username.like:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-count-distinct\\n\\n// Sanity checking that distinct column was passed in.\\nvalidators.mandatory:x:@.arguments/*/distinct_column\\n\\n// Sanity checking distinct column's name.\\nvalidators.enum:x:@.arguments/*/distinct_column\\n   .:comments.id\\n   .:comments.post_id\\n   .:comments.user_id\\n   .:comments.content\\n   .:comments.created_at\\n   .:post_id.title\\n   .:user_id.username\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:enterprise,root\\n\\n// Opening up our database connection.\\ndata.connect:[generic|cms]\\n   database-type:sqlite\\n\\n   // Making sure we're using correct function.\\n   set-name:x:./*/data.read/*/columns/*/distinct_functor\\n      strings.concat\\n         .:\"count(distinct \"\\n         get-value:x:@.arguments/*/distinct_column\\n         .:)\\n\\n   // Removing distinct argument to simplify adding other arguments.\\n   remove-nodes:x:@.arguments/*/distinct_column\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:comments\\n         join:posts\\n            as:post_id\\n            type:left\\n            on\\n               and\\n                  comments.post_id:post_id.id\\n         join:users\\n            as:user_id\\n            type:left\\n            on\\n               and\\n                  comments.user_id:user_id.id\\n      columns\\n         distinct_functor\\n            as:count\\n      where\\n         and\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Update one record in your comments table in your cms database"},{"role":"assistant","content":".arguments\\n\\n   // id column value being primary key of record to update, mandatory argument\\n   id:long\\n\\n   // post_id column's new value\\n   post_id:long\\n\\n   // user_id column's new value\\n   user_id:long\\n\\n   // content column's new value\\n   content:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-update\\n\\n// Sanity checking invocation, making sure primary key(s) are specified.\\nvalidators.mandatory:x:@.arguments/*/id\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:enterprise,root\\n.foreign-keys\\n   .\\n      column:post_id\\n      table:posts\\n      foreign_column:id\\n      foreign_name:title\\n      long:bool:true\\n   .\\n      column:user_id\\n      table:users\\n      foreign_column:id\\n      foreign_name:username\\n      long:bool:true\\n\\n// Opening up our database connection.\\ndata.connect:[generic|cms]\\n   database-type:sqlite\\n\\n   // Parametrising our invocation.\\n   add:x:./*/data.update/*/values\\n      get-nodes:x:@.arguments/*/[1,1000]\\n   add:x:./*/data.update/*/where/*/and\\n      get-nodes:x:@.arguments/*/[0,1]\\n\\n   // Invoking our update slot.\\n   data.update\\n      database-type:sqlite\\n      table:comments\\n      values\\n      where\\n         and\\n\\n   // Verifying record exists.\\n   if\\n      eq\\n         get-value:x:@data.update\\n         .:int:0\\n      .lambda\\n         response.status.set:404\\n         return\\n            result:Record not found\\n\\n   // Returning the correct status code.\\n   response.status.set:202\\n\\n   // Publishing socket message.\\n   add:x:./*/sockets.signal/*/args\\n      get-nodes:x:@.arguments/*\\n   add:x:./*/sockets.signal\\n      get-nodes:x:@auth.ticket.verify\\n   set-name:x:./*/sockets.signal/*/auth.ticket.verify\\n      .:roles\\n   sockets.signal:cms.comments.put\\n      args\\n\\n   // Returning success to caller.\\n   unwrap:x:+/*\\n   return\\n      affected:x:@data.update\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Updates an item in your DATABASE_NAME database in TABLE_NAME table with id of WHATEVER_ID_HERE."},{"role":"assistant","content":"data.connect:DATABASE_NAME\\n   database-type:sqlite\\n\\n   // Invoking our update slot.\\n   data.update\\n      database-type:sqlite\\n      table:TABLE_NAME\\n      values\\n         column1:NEW_VALUE_HERE\\n         column2:ANOTHER NEW_VALUE_HERE\\n      where\\n         and\\n            id.eq:x:@WHATEVER_ID_HERE\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns unique and distinct values from your Customer table in your chinook database"},{"role":"assistant","content":".arguments\\n\\n   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME\\n   distinct_column:string\\n\\n   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.\\n   limit:long\\n\\n   // Offset into the dataset of where to start retrieving records\\n   offset:long\\n\\n   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format\\n   order:string\\n\\n   // What direction to order, can be 'asc' or 'desc' implying ascending and descending\\n   direction:string\\n\\n   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.\\n   operator:string\\n   Customer.CustomerId.mt:long\\n   Customer.CustomerId.lt:long\\n   Customer.CustomerId.mteq:long\\n   Customer.CustomerId.lteq:long\\n   Customer.CustomerId.neq:long\\n   Customer.CustomerId.eq:long\\n   Customer.FirstName.like:string\\n   Customer.FirstName.mt:string\\n   Customer.FirstName.lt:string\\n   Customer.FirstName.mteq:string\\n   Customer.FirstName.lteq:string\\n   Customer.FirstName.neq:string\\n   Customer.FirstName.eq:string\\n   Customer.LastName.like:string\\n   Customer.LastName.mt:string\\n   Customer.LastName.lt:string\\n   Customer.LastName.mteq:string\\n   Customer.LastName.lteq:string\\n   Customer.LastName.neq:string\\n   Customer.LastName.eq:string\\n   Customer.Company.like:string\\n   Customer.Company.mt:string\\n   Customer.Company.lt:string\\n   Customer.Company.mteq:string\\n   Customer.Company.lteq:string\\n   Customer.Company.neq:string\\n   Customer.Company.eq:string\\n   Customer.Address.like:string\\n   Customer.Address.mt:string\\n   Customer.Address.lt:string\\n   Customer.Address.mteq:string\\n   Customer.Address.lteq:string\\n   Customer.Address.neq:string\\n   Customer.Address.eq:string\\n   Customer.City.like:string\\n   Customer.City.mt:string\\n   Customer.City.lt:string\\n   Customer.City.mteq:string\\n   Customer.City.lteq:string\\n   Customer.City.neq:string\\n   Customer.City.eq:string\\n   Customer.State.like:string\\n   Customer.State.mt:string\\n   Customer.State.lt:string\\n   Customer.State.mteq:string\\n   Customer.State.lteq:string\\n   Customer.State.neq:string\\n   Customer.State.eq:string\\n   Customer.Country.like:string\\n   Customer.Country.mt:string\\n   Customer.Country.lt:string\\n   Customer.Country.mteq:string\\n   Customer.Country.lteq:string\\n   Customer.Country.neq:string\\n   Customer.Country.eq:string\\n   Customer.PostalCode.like:string\\n   Customer.PostalCode.mt:string\\n   Customer.PostalCode.lt:string\\n   Customer.PostalCode.mteq:string\\n   Customer.PostalCode.lteq:string\\n   Customer.PostalCode.neq:string\\n   Customer.PostalCode.eq:string\\n   Customer.Phone.like:string\\n   Customer.Phone.mt:string\\n   Customer.Phone.lt:string\\n   Customer.Phone.mteq:string\\n   Customer.Phone.lteq:string\\n   Customer.Phone.neq:string\\n   Customer.Phone.eq:string\\n   Customer.Fax.like:string\\n   Customer.Fax.mt:string\\n   Customer.Fax.lt:string\\n   Customer.Fax.mteq:string\\n   Customer.Fax.lteq:string\\n   Customer.Fax.neq:string\\n   Customer.Fax.eq:string\\n   Customer.Email.like:string\\n   Customer.Email.mt:string\\n   Customer.Email.lt:string\\n   Customer.Email.mteq:string\\n   Customer.Email.lteq:string\\n   Customer.Email.neq:string\\n   Customer.Email.eq:string\\n   Customer.SupportRepId.mt:long\\n   Customer.SupportRepId.lt:long\\n   Customer.SupportRepId.mteq:long\\n   Customer.SupportRepId.lteq:long\\n   Customer.SupportRepId.neq:long\\n   Customer.SupportRepId.eq:long\\n   SupportRepId.LastName.eq:string\\n   SupportRepId.LastName.like:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-distinct\\n\\n// Sanity checking that distinct column was passed in.\\nvalidators.mandatory:x:@.arguments/*/distinct_column\\n\\n// Sanity checking distinct column's name.\\nvalidators.enum:x:@.arguments/*/distinct_column\\n   .:Customer.CustomerId\\n   .:Customer.FirstName\\n   .:Customer.LastName\\n   .:Customer.Company\\n   .:Customer.Address\\n   .:Customer.City\\n   .:Customer.State\\n   .:Customer.Country\\n   .:Customer.PostalCode\\n   .:Customer.Phone\\n   .:Customer.Fax\\n   .:Customer.Email\\n   .:Customer.SupportRepId\\n   .:SupportRepId.LastName\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Sanity checking invocation.\\nvalidators.enum:x:@.arguments/*/operator\\n   .:or\\n   .:and\\n\\n/*\\n * Checking if user supplied an [operator] argument, and if so\\n * changing the boolean operator for comparison operations.\\n */\\nif\\n   exists:x:@.arguments/*/operator\\n   .lambda\\n\\n      // User provided a boolean comparison [operator] argument.\\n      set-name:x:../*/data.connect/*/data.read/*/where/0\\n         get-value:x:@.arguments/*/operator\\n      remove-nodes:x:@.arguments/*/operator\\n\\n// Opening up our database connection.\\ndata.connect:[generic|chinook]\\n   database-type:sqlite\\n\\n   // Making sure we're using correct function.\\n   set-name:x:./*/data.read/*/columns/*/distinct_functor\\n      strings.concat\\n         .:distinct(\\n         get-value:x:@.arguments/*/distinct_column\\n         .:)\\n\\n   // Removing distinct argument to simplify adding other arguments.\\n   remove-nodes:x:@.arguments/*/distinct_column\\n\\n   // Adding [limit] and [offset] arguments\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n      get-nodes:x:@.arguments/*/order\\n      get-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/order\\n   remove-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/limit\\n   remove-nodes:x:@.arguments/*/offset\\n\\n   // Adding filtering arguments.\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:Customer\\n         join:Employee\\n            as:SupportRepId\\n            type:left\\n            on\\n               and\\n                  Customer.SupportRepId:SupportRepId.EmployeeId\\n      columns\\n         distinct_functor\\n            as:.\\n      where\\n         and\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Retrieve orders that are either pending OR processing"},{"role":"assistant","content":"data.connect:shopDB\\n   data.read\\n      table:orders\\n      limit:-1\\n      where\\n\\n         // Either status equals \"pending\" OR department not equal \"hr\"\\n         or\\n            status.eq:pending\\n            department.neq:hr\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create a new order and update product stock in one atomic transaction"},{"role":"assistant","content":"data.connect:shopDB\\n   data.transaction.create\\n      data.create\\n         table:orders\\n         values\\n            customer_id:42\\n            total:100.00\\n      data.update\\n         table:products\\n         values\\n            stock:long:50\\n         where\\n            and\\n               product_id:123\\n\\n      // Commit the transaction to save both changes\\n      data.transaction.commit\\n\\n   // Both the new order and the stock update are committed together\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Retrieve all pending orders of amount 100 (using AND conditions in where clause)"},{"role":"assistant","content":"data.connect:shopDB\\n   data.read\\n      table:orders\\n\\n      // No limit on results (-1 means no limit)\\n      limit:long:-1\\n      where\\n\\n         // Both conditions must be true (AND)\\n         and\\n            status.eq:pending\\n            amount.eq:long:100\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Check if folder exists"},{"role":"assistant","content":"io.folder.exists:/misc/foo/\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Execute a Hyperlambda file"},{"role":"assistant","content":"io.file.execute:/misc/some-hyperlambda-file.hl\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create three different types of hashes from specified data"},{"role":"assistant","content":".data:Some data to hash\\ncrypto.hash:x:@.data\\n   format:fingerprint\\ncrypto.hash:x:@.data\\n   format:text\\ncrypto.hash:x:@.data\\n   format:raw\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create a Hyperlambda file concatenating two strings"},{"role":"assistant","content":".arguments\\n   arg1:string\\n   arg2:int\\nstrings.concat\\n   get-value:x:@.arguments/*/arg1\\n   .:\" - \"\\n   get-value:x:@.arguments/*/arg2\\n\\n// Unwrap must be used here or [return] would return the expression and not its result\\nunwrap:x:+/*\\nreturn\\n   result:x:@strings.concat\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Convert lambda to JSON"},{"role":"assistant","content":"lambda2json:x:@.lambda/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Retrieve a node's value using expressions"},{"role":"assistant","content":"get-value:x:@.data/*/item2\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Change the value of all children of [.data]"},{"role":"assistant","content":"for-each:x:@.data/*\\n   set-value:x:@.dp/#\\n      .:Loop was here ...\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"If/else-if and else lambda object"},{"role":"assistant","content":".src:int:3\\n.dest\\nif\\n   eq\\n      get-value:x:@.src\\n      .:int:1\\n   .lambda\\n      set-value:x:@.dest\\n         .:yup!\\nelse-if\\n   eq\\n      get-value:x:@.src\\n      .:int:2\\n   .lambda\\n      set-value:x:@.dest\\n         .:yup2.0!\\nelse\\n   set-value:x:@.dest\\n      .:nope\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"More then"},{"role":"assistant","content":".src1:int:7\\nmt\\n   get-value:x:@.src1\\n   .:int:5\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Complex if with both [and] and [or]"},{"role":"assistant","content":".foo1:bar\\n.foo2:bool:false\\n.foo3:bool:true\\n.result\\nif\\n   and\\n      eq:x:@.foo1\\n         .:bar\\n      or\\n         get-value:x:@.foo2\\n         get-value:x:@.foo3\\n   .lambda\\n      set-value:x:@.result\\n         .:Yup!\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Sets value of multiple nodes at the same time"},{"role":"assistant","content":".foo\\n.foo\\nset-value:x:../*/.foo\\n   .:SUCCESS\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Check if nodes exists"},{"role":"assistant","content":".src1\\n   foo\\n.src2\\nexists:x:@.src1/*\\nexists:x:@.src2/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Changes the value of all nodes in [.data]"},{"role":"assistant","content":".data\\n   foo1\\n   foo2\\nfor-each:x:-/*\\n   set-value:x:@.dp/#\\n      .:hello\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Replace everything not being a lower case character"},{"role":"assistant","content":"strings.replace-not-of:foo bar1howdy\\n   .:abcdefghijklmnopqrstuvwxyz\\n   .:-\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Clear all cache items starting out with 'foo.bar' as their key"},{"role":"assistant","content":"cache.clear:foo.bar\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Divide [.arg]'s value by 2"},{"role":"assistant","content":"math.divide\\n   get-value:x:@.arg\\n   .:int:2\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Increment [.arg]'s value by 2"},{"role":"assistant","content":".arg:int:5\\nmath.increment:x:@.arg\\n   .:int:2\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Validate [date] argument is between some date range"},{"role":"assistant","content":"validators.date:x:@.arguments/*/date\\n   min:date:\"2005-01-21T23:59:47.000\"\\n   max:date:\"2023-01-21T23:59:47.000\"\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Validates the [.some-url] node's value is a valid URL"},{"role":"assistant","content":"validators.url:x:@.some-url\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Verifies the currently authenticated user belongs to root, admin or user roles"},{"role":"assistant","content":"auth.ticket.verify:root, admin, user\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Verifies the specified JWT token"},{"role":"assistant","content":"auth.token.verify\\n   token:SOME_JWT_TOKEN_HERE\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Return the length of some string found through an expression"},{"role":"assistant","content":"strings.length:x:@.source\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns ALL items (limit is -1) from table1 where field1 equals 'howdy' and field2 equals 'world'"},{"role":"assistant","content":"sql.read\\n   table:table1\\n   limit:-1\\n   where\\n      and\\n         field1.eq:howdy\\n         field2.eq:world\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example: Turn the [.g] into uppercase"},{"role":"assistant","content":"strings.to-upper:x:@.g\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Resize the specified image"},{"role":"assistant","content":"image.resize:/some-image.png\\n   height:250\\n   type:png\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Converts CSV to lambda object"},{"role":"assistant","content":".csv:@\"name,age\\nThomas Hansen,47\\nJohn Doe,67\"\\ncsv2lambda:x:@.csv\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"List all plugins"},{"role":"assistant","content":"system.plugin.list\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create a MIME message"},{"role":"assistant","content":"mime.create:multipart/mixed\\n   structured:false\\n   entity:text/plain\\n      content:this is the body text\\n   entity:text/plain\\n      content:this is another body text\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Execute a task once"},{"role":"assistant","content":"tasks.execute:foo-bar-task-4\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create a task, then schedule it"},{"role":"assistant","content":"tasks.create:task-id-xyx\\n   .lambda\\n      log.info:It is the 1st of the month, any month, and the time is 5AM at night.\\ntasks.schedule:task-id-xyx\\n   repeats:**.01.05.00.00\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Return configuration key with default value being value of expression to [.foo]"},{"role":"assistant","content":".foo:foo\\nconfig.get:\"magic:foo:non-existing-key\"\\n   get-value:x:@.foo\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create HTTP GET with automatic conversion to JSON"},{"role":"assistant","content":"http.get:\"https://jsonplaceholder.typicode.com/posts\"\\n   convert:bool:true\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Evaluates specified [.lambda] if condition evaluates to true."},{"role":"assistant","content":"if\\n   eq:x:@SOME_EXPRESSION\\n      .:SOME_VALUE\\n   .lambda\\n\\n      // Lambda evaluates if condition is true.\\nelse\\n\\n   // Lambda evaluated if condition is NOT true.\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"A small script that connects to a POP3 server,\\nand retrieves all emails on the server, simply\\ncreating a log entry for each email found on POP3\\nserver."},{"role":"assistant","content":"mail.pop3.fetch\\n   .lambda\\n\\n      /*\\n       * Lambda object evaluated once for every\\n       * email fetched from POP3 server.\\n       */\\n      log.info\\n         lambda2hyper:x:./.\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Delete one record from your media table in your cms database"},{"role":"assistant","content":".arguments\\n\\n   // Primary key of record to delete, mandatory argument\\n   id:long\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-delete\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\nvalidators.mandatory:x:@.arguments/*/id\\n\\n// Opening up our database connection.\\ndata.connect:[generic|cms]\\n   database-type:sqlite\\n\\n   // Parametrising our delete invocation.\\n   add:x:./*/data.delete/*/where/*/and\\n      get-nodes:x:@.arguments/*\\n\\n   // Deleting item from database.\\n   data.delete\\n      database-type:sqlite\\n      table:media\\n      where\\n         and\\n\\n   // Publishing socket message.\\n   add:x:./*/sockets.signal/*/args\\n      get-nodes:x:@.arguments/*\\n   add:x:./*/sockets.signal\\n      get-nodes:x:@auth.ticket.verify\\n   set-name:x:./*/sockets.signal/*/auth.ticket.verify\\n      .:roles\\n   sockets.signal:cms.media.delete\\n      args\\n\\n   // Returning result of above invocation to caller.\\n   unwrap:x:+/*\\n   return\\n      affected:x:@data.delete\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example of nested expression"},{"role":"assistant","content":".arg1:.data\\n.arg2:foo2\\n.result\\n.data\\n   foo1:john\\n   foo2:thomas\\n   foo3:peter\\nset-value:x:@.result\\n   get-value:x:../*/{@.arg1}/*/{@.arg2}\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Example of how to use [strings.concat] to concatenate two or more strings together."},{"role":"assistant","content":"strings.concat\\n   .:foo\\n   .:-\\n   .:bar\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"This snippet defines a node with a float value (alias of single)."},{"role":"assistant","content":".pi:float:3.14\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"This snippet defines a node with a short (Int16) integer value."},{"role":"assistant","content":".count:short:-123\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"This snippet uses the '--' iterator to get all ancestors and older siblings of a node."},{"role":"assistant","content":".root\\n   sibling:one\\n   parent\\n      elderChild:X\\n      target:Y\\nfor-each:x:@.root/*/parent/*/target/--\\n   set-value:x:@.dp/#\\n      :marked\\n\\n// The expression finds 'target', then '--' gathers its parent (\"parent\"), that parent's older sibling (\"sibling\"), and the parent's ancestor(s) (\".root\"). The loop sets each of those nodes' values to \"marked\".\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"This snippet defines a node with an int (Int32) value."},{"role":"assistant","content":".amount:int:1000\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Startup Hyperlambda file, executed as system is initially started.\\n\\nCreates the magic database, and applies some sane default configuration\\nsettings."},{"role":"assistant","content":"\\n// Before we can check if magic db exists, we'll need the slots that does the heavy lifting for us.\\nio.file.execute:/system/sql/magic.startup/mssql/magic.db.mssql.databases.hl\\nio.file.execute:/system/sql/magic.startup/mysql/magic.db.mysql.databases.hl\\nio.file.execute:/system/sql/magic.startup/pgsql/magic.db.pgsql.databases.hl\\nio.file.execute:/system/sql/magic.startup/sqlite/magic.db.sqlite.databases.hl\\n\\n// Creating our magic database.\\nio.file.execute:/system/ensure-magic-database.hl\\n\\n// Executing all magic.startup Hyperlambda files.\\nio.file.list-recursively:/system/\\nio.file.list-recursively:/modules/\\nfor-each:x:./*/io.file.list-recursively/*\\n\\n   // Checking if file is a startup Hyperlambda file.\\n   if\\n      and\\n         strings.contains:x:@.dp/#\\n            .:/magic.startup/\\n         strings.ends-with:x:@.dp/#\\n            .:.hl\\n      .lambda\\n\\n         // Executing file.\\n         strings.concat\\n            .:\"Executing startup file '\"\\n            get-value:x:@.dp/#\\n            .:.\\n         console.log:x:-\\n         try\\n            io.file.execute:x:@.dp/#\\n         .catch\\n            log.error:Error while executing startup file\\n               exception:x:@.arguments/*/message\\n               file:x:@.dp/#\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Retrieves the specified URL using HTTP GET\\n\\nUses HTTP GET to retrieve the specified [url], optionally with Basic or Bearer authentication."},{"role":"assistant","content":".arguments\\n\\n   // Mandatory argument being the actual URL to retrieve.\\n   url:string\\n\\n   // Optional argument being the type of token. This value must be either 'Bearer' or 'Basic' if supplied. If this argument is 'Bearer' then one of [token_key] or [token] must be specified. If this argument is 'Basic' then [username] and [password] must be specified.\\n   token_type:string\\n\\n   // Optional argument for 'Bearer' authentication, and if specified must be a configuration key reference to a token that will be extracted from your configuration, such as for instance 'magic:my_app:my_token'.\\n   token_key:string\\n\\n   // Optional argument for 'Bearer' authentication, and if specified must be a valid Bearer token.\\n   token:string\\n\\n   // Optional username for Basic authentication. If [token_type] is 'Basic' this argument becomes mandatory.\\n   username:string\\n\\n   // Optional password for Basic authentication. If [token_type] is 'Basic' this argument becomes mandatory.\\n   password:string\\n\\n   // Optional argument being a key/value list of arguments that will be passed in as QUERY arguments to the endpoint.\\n   params:*\\n.type:public\\n\\n// Checking if caller provided a [token].\\nif\\n   and\\n      exists:x:@.arguments/*/token_key\\n      not-null:x:@.arguments/*/token_key\\n      neq:x:@.arguments/*/token_key\\n         .:\\n   .lambda\\n\\n      // Parametrizing action invocation.\\n      config.get:x:@.arguments/*/token_key\\n      unwrap:x:+/*/*\\n      add:x:../*/execute/*/arguments\\n         .\\n            token:x:@config.get\\n            token_type:x:@.arguments/*/token_type\\nelse-if\\n   and\\n      exists:x:@.arguments/*/token\\n      not-null:x:@.arguments/*/token\\n      neq:x:@.arguments/*/token\\n         .:\\n   .lambda\\n\\n      // Parametrizing action invocation.\\n      unwrap:x:+/*/*\\n      add:x:../*/execute/*/arguments\\n         .\\n            token:x:@.arguments/*/token\\n            token_type:x:@.arguments/*/token_type\\nelse-if\\n   and\\n      exists:x:@.arguments/*/username\\n      not-null:x:@.arguments/*/username\\n      neq:x:@.arguments/*/username\\n         .:\\n      exists:x:@.arguments/*/password\\n      not-null:x:@.arguments/*/password\\n      neq:x:@.arguments/*/password\\n         .:\\n   .lambda\\n\\n      // Parametrising action invocation.\\n      unwrap:x:+/*/*\\n      add:x:../*/execute/*/arguments\\n         .\\n            token_type:x:@.arguments/*/token_type\\n            username:x:@.arguments/*/username\\n            password:x:@.arguments/*/password\\n\\n// Checking if caller provided QUERY [params].\\nif\\n   exists:x:@.arguments/*/params/0\\n   .lambda\\n\\n      // Parametrising action invocation.\\n      add:x:./0/-/add/*\\n         get-nodes:x:@.arguments/*/params\\n      add:x:../*/execute/*/arguments\\n         .\\n\\n// Invokes some HTTP GET resource.\\nexecute:magic.workflows.actions.execute\\n   name:http-get\\n   filename:/misc/workflows/actions/http/http-get.hl\\n   arguments\\n      url:x:@.arguments/*/url\\n\\n// Returns the result of your last action.\\nreturn-nodes:x:@execute/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns all dynamic slots in the system."},{"role":"assistant","content":".type:internal\\n\\n// Ensures user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Retrieving all system slots.\\nslots.vocabulary\\n\\n// Returning results of the above to caller.\\nreturn-nodes:x:@slots.vocabulary/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"List all tasks that have been registered in the system."},{"role":"assistant","content":".arguments\\n   offset:long\\n   limit:long\\n   filter:string\\n.type:internal\\n\\n// Ensures user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Retrieves all scheduled tasks in the system.\\nadd:x:../*/tasks.list\\n   get-nodes:x:@.arguments/*/offset\\n   get-nodes:x:@.arguments/*/limit\\ntasks.list:x:@.arguments/*/filter\\n\\n// Retrieving schedules for tasks, if any.\\ninclude:x:@tasks.list/*\\n   tasks.get:x:@.dp/#/*/id\\n      schedules:true\\n   add:x:+/*\\n      get-nodes:x:@tasks.get/*/schedules/*\\n   add:x:./*/return/*/schedules\\n      .\\n   return\\n      schedules\\n\\n// Returning the results of the evaluation to caller.\\nreturn-nodes:x:@tasks.list/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"dynamically populated"},{"role":"assistant","content":".arguments\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-delete\\n\\n// Opening up our database connection.\\ndata.connect:{database}\\n   database-type:{database-type}\\n\\n   // Parametrising our delete invocation.\\n   add:x:./*/data.delete/*/where/*/and\\n      get-nodes:x:@.arguments/*\\n\\n   // Deleting item from database.\\n   data.delete\\n      database-type:{database-type}\\n      table:{table}\\n      where\\n         and\\n\\n   // Returning result of above invocation to caller.\\n   unwrap:x:+/*\\n   return\\n      affected:x:@data.delete\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"dynamically populated"},{"role":"assistant","content":".arguments\\n\\n// Type of endpoint\\n.type:openapi\\n\\n// URL of endpoint.\\n.url:URL\\n\\n// Exchanging dynamic parts of URL.\\n.args\\nfor-each:x:@.arguments/*\\n   .tmp\\n   set-value:x:@.tmp\\n      strings.concat\\n         .:{\\n         get-name:x:@.dp/#\\n         .:}\\n   if\\n      strings.contains:x:@.url\\n         get-value:x:@.tmp\\n      .lambda\\n\\n         // Replacing dynamic parts of URL.\\n         set-value:x:@.url\\n            strings.replace:x:@.url\\n               get-value:x:@.tmp\\n               get-value:x:@.dp/#\\n   else\\n\\n      // Not a dynamic argument.\\n      add:x:@.args\\n         get-nodes:x:@.dp/#\\n\\n// Invoking HTTP endpoint.\\nhttp.put:x:@.url\\n   convert:true\\n   payload\\n   query\\n\\n// Making sure invocation was a success.\\nif\\n   and\\n      not\\n         mte:x:@http.put\\n            .:int:200\\n      not\\n         lt:x:@http.put\\n            .:int:300\\n   .lambda\\n\\n      // Oops ...!!\\n      lambda2hyper:x:@http.put\\n      throw:Could not invoke 3rd party HTTP endpoint\\n         status:int:500\\n         public:bool:true\\n         url:x:@.url\\n         response:x:@lambda2hyper\\n\\n// Returning result to caller.\\nreturn-nodes:x:@http.put/*/content/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Endpoint counting items in your ml_requests table in your magic database"},{"role":"assistant","content":".arguments\\n   filter:string\\n   ml_requests.id.eq:long\\n   ml_requests.created.eq:date\\n   ml_requests.type.like:string\\n   ml_requests.type.eq:string\\n   ml_requests.prompt.like:string\\n   ml_requests.prompt.eq:string\\n   ml_requests.completion.like:string\\n   ml_requests.completion.eq:string\\n   ml_requests.finish_reason.like:string\\n   ml_requests.finish_reason.eq:string\\n.type:crud-count\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Opening up our database connection.\\ndata.connect:[generic|magic]\\n\\n   // Checking if user provided a [filter]\\n   if\\n      exists:x:@.arguments/*/filter\\n      .lambda\\n\\n         // Adding filter and removing it from arguments collection.\\n         strings.concat\\n            .:%\\n            get-value:x:@.arguments/*/filter\\n            .:%\\n         unwrap:x:+/*/*/*\\n         add:x:@data.connect/*/data.read/*/where/*/and\\n            .\\n               or\\n                  ml_requests.prompt.like:x:@strings.concat\\n                  ml_requests.user_id.eq:x:@.arguments/*/filter\\n         remove-nodes:x:@.arguments/*/filter\\n\\n   // Adding all other arguments.\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      table:ml_requests\\n      columns\\n         count(*)\\n            as:count\\n      where\\n         and\\n      limit:long:1\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Endpoint counting items in your ml_training_snippets table in your magic database"},{"role":"assistant","content":".arguments\\n   ml_training_snippets.type.eq:string\\n   ml_training_snippets.pushed.eq:long\\n   ml_training_snippets.uri.like:string\\n   ml_training_snippets.uri.eq:string\\n   ml_training_snippets.prompt.like:string\\n   ml_training_snippets.prompt.eq:string\\n   ml_training_snippets.completion.like:string\\n   ml_training_snippets.completion.eq:string\\n   not_embedded:bool\\n.type:crud-count\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Opening up our database connection.\\ndata.connect:[generic|magic]\\n\\n   // Checking if caller only wants to count records without embeddings.\\n   if\\n      and\\n         exists:x:@.arguments/*/not_embedded\\n         get-value:x:@.arguments/*/not_embedded\\n      .lambda\\n         add:x:@data.connect/*/data.read/*/where/*/and\\n            .\\n               embedding.eq\\n         remove-nodes:x:@.arguments/*/not_embedded\\n\\n   // Parametrising our read invocation with filtering arguments.\\n   add:x:./*/data.read/*/where/*/*/or\\n      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.like\\n      get-nodes:x:@.arguments/*/ml_training_snippets.completion.like\\n      get-nodes:x:@.arguments/*/ml_training_snippets.uri.like\\n      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq\\n      get-nodes:x:@.arguments/*/ml_training_snippets.completion.eq\\n      get-nodes:x:@.arguments/*/ml_training_snippets.uri.eq\\n   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.like\\n   remove-nodes:x:@.arguments/*/ml_training_snippets.completion.like\\n   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.like\\n   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq\\n   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.eq\\n   add:x:./*/data.read/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Removing [or] parts unless we've got something to actually or.\\n   if\\n      not-exists:x:@data.connect/*/data.read/*/where/*/and/*/or/*\\n      .lambda\\n         remove-nodes:x:@data.connect/*/data.read/*/where/*/and/*/or\\n\\n   // Reading data from database.\\n   data.read\\n      table:ml_training_snippets\\n      columns\\n         count(*)\\n            as:count\\n      where\\n         and\\n            or\\n      limit:long:1\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"CRUD read endpoint with paging, sorting, filtering selecting records from your ml_types table in your magic database returning type, model, max_tokens, temperature filtering on type, model, max_tokens, temperature with authentication and authorisation for root roles"},{"role":"assistant","content":".arguments\\n   limit:long\\n   offset:long\\n   order:string\\n   direction:string\\n   ml_types.type.like:string\\n   ml_types.type.eq:string\\n   ml_types.model.like:string\\n   ml_types.model.eq:string\\n   ml_types.max_tokens.eq:long\\n   ml_types.max_request_tokens.eq:long\\n   ml_types.max_context_tokens.eq:long\\n   ml_types.temperature.eq:double\\n   ml_types.base_url.like:string\\n   ml_types.base_url.eq:string\\n   ml_types.contact_us.like:string\\n   ml_types.contact_us.eq:string\\n   ml_types.lead_email.like:string\\n   ml_types.lead_email.eq:string\\n   ml_types.api_key.like:string\\n   ml_types.api_key.eq:string\\n   ml_types.twilio_account_sid.like:string\\n   ml_types.twilio_account_sid.eq:string\\n   ml_types.system_message.like:string\\n   ml_types.system_message.eq:string\\n.type:crud-read\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify\\n\\n// Opening up our database connection.\\ndata.connect:[generic|magic]\\n\\n   // Parametrising our read invocation with ordering arguments if specified.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/order\\n      get-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/order\\n   remove-nodes:x:@.arguments/*/direction\\n\\n   // Parametrising our read invocation with paging arguments if specified.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n   remove-nodes:x:@.arguments/*/limit\\n   remove-nodes:x:@.arguments/*/offset\\n\\n   // Parametrising our read invocation with filtering arguments.\\n   add:x:./*/data.read/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      table:ml_types\\n      columns\\n         ml_types.type\\n         ml_types.model\\n         ml_types.max_tokens\\n         ml_types.max_request_tokens\\n         ml_types.max_context_tokens\\n         ml_types.temperature\\n         ml_types.recaptcha\\n         ml_types.auth\\n         ml_types.supervised\\n         ml_types.cached\\n         ml_types.prefix\\n         ml_types.use_embeddings\\n         ml_types.threshold\\n         ml_types.vector_model\\n         ml_types.greeting\\n         ml_types.base_url\\n         ml_types.contact_us\\n         ml_types.lead_email\\n         ml_types.api_key\\n         ml_types.twilio_account_id\\n         ml_types.twilio_account_sid\\n         ml_types.webhook_incoming\\n         ml_types.webhook_outgoing\\n         ml_types.webhook_incoming_url\\n         ml_types.initial_questionnaire\\n         ml_types.webhook_outgoing_url\\n         ml_types.system_message\\n         ml_types.no_requests\\n         ml_types.max_requests\\n         ml_types.search_postfix\\n         ml_types.conversation_starters\\n         ml_types.max_function_invocations\\n         ml_types.max_session_items\\n         ml_types.completion_slot\\n      where\\n         and\\n\\n   // Filtering out models not accessible to currently authenticated user.\\n   .models\\n   auth.ticket.get\\n   if\\n      not-null:x:@auth.ticket.get\\n      .lambda\\n\\n         // User is authenticated, only adding models user have access to.\\n         for-each:x:@data.read/*\\n\\n            // Checking if model does not require auth at all.\\n            if\\n               or\\n                  exists:x:@auth.ticket.get/*/roles/*/=root\\n                  null:x:@.dp/#/*/auth\\n                  eq:x:@.dp/#/*/auth\\n                     .:\\n               .lambda\\n\\n                  // Model does not require auth at all, all users have access.\\n                  add:x:@.models\\n                     get-nodes:x:@.dp/#\\n            else\\n\\n               // Model has auth requirements, making sure user belongs to at least one of the roles.\\n               strings.split:x:@.dp/#/*/auth\\n                  .:,\\n               for-each:x:@strings.split/*\\n                  strings.trim:x:@.dp/#\\n                     .:\" \\t\"\\n                  if\\n                     and\\n                        exists:x:@auth.ticket.get/*/roles/*/={@strings.trim}\\n                        not-exists:x:\"@.models/*/*/type/\\\"={@for-each/@.dp/#/*/type}\\\"\"\\n                     .lambda\\n\\n                        // User belongs to at least one role that's allowed access to model.\\n                        add:x:@.models\\n                           get-nodes:x:@for-each/@.dp/#\\n   else\\n\\n      // User is not authenticated, filtering out all models with auth requirements.\\n      for-each:x:@data.read/*\\n         if\\n            or\\n               null:x:@.dp/#/*/auth\\n               eq:x:@.dp/#/*/auth\\n                  .:\\n            .lambda\\n\\n               // Model have no auth requirements.\\n               add:x:@.models\\n                  get-nodes:x:@.dp/#\\n\\n   // Returning result of above filter invocation to caller.\\n   return-nodes:x:@.models/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Endpoint counting items in your questions table in your magic database"},{"role":"assistant","content":".arguments\\n   questions.question_id.eq:long\\n   questions.question.like:string\\n   questions.question.eq:string\\n   questions.questionnaire.like:string\\n   questions.questionnaire.eq:string\\n.type:crud-count\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Opening up our database connection.\\ndata.connect:[generic|magic]\\n   database-type:sqlite\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:questions\\n      columns\\n         count(*)\\n            as:count\\n      where\\n         and\\n      limit:long:1\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Template for HTTP GET CRUD requests.\\nThis file was automatically generated using Magic's CRUDifier."},{"role":"assistant","content":".arguments\\n   limit:long\\n   offset:long\\n   order:string\\n   direction:string\\n   operator:string\\n   name.eq:string\\n   name.like:string\\n   description.like:string\\n.type:crud-read\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Sanity checking invocation.\\nvalidators.enum:x:@.arguments/*/operator\\n   .:or\\n   .:and\\n\\n/*\\n * Checking if user supplied an [operator] argument, and if so\\n * changing the boolean operator for comparison operations.\\n */\\nif\\n   exists:x:@.arguments/*/operator\\n   .lambda\\n\\n      // User provided a boolean comparison [operator] argument.\\n      set-name:x:../*/data.connect/*/data.read/*/where/0\\n         get-value:x:@.arguments/*/operator\\n\\n// Opening up our database connection.\\ndata.connect:[generic|magic]\\n\\n   // Parametrising our read invocation.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n      get-nodes:x:@.arguments/*/order\\n      get-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/operator\\n   remove-nodes:x:@.arguments/*/limit\\n   remove-nodes:x:@.arguments/*/offset\\n   remove-nodes:x:@.arguments/*/order\\n   remove-nodes:x:@.arguments/*/direction\\n   add:x:./*/data.read/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      table:roles\\n      columns\\n         roles.name\\n         roles.description\\n      where\\n         and\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Template for HTTP GET CRUD requests.\\nThis file was automatically generated using Magic's CRUDifier."},{"role":"assistant","content":".arguments\\n   operator:string\\n   role.eq:string\\n   user.eq:string\\n.type:crud-count\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Sanity checking invocation.\\nvalidators.enum:x:@.arguments/*/operator\\n   .:or\\n   .:and\\n\\n/*\\n * Checking if user supplied an [operator] argument, and if so\\n * changing the boolean operator for comparison operations.\\n */\\nif\\n   exists:x:@.arguments/*/operator\\n   .lambda\\n\\n      // User provided a boolean comparison [operator] argument.\\n      set-name:x:../*/data.connect/*/data.read/*/where/0\\n         get-value:x:@.arguments/*/operator\\n\\n// Opening up our database connection.\\ndata.connect:[generic|magic]\\n\\n   // Parametrising our read invocation.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/operator\\n   remove-nodes:x:@.arguments/*/operator\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      table:users_roles\\n      columns\\n         count(*)\\n            as:count\\n      where\\n         and\\n      limit:long:1\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Template for HTTP PUT CRUD requests.\\nThis file was automatically generated using Magic's CRUDifier."},{"role":"assistant","content":".arguments\\n   username:string\\n   password:string\\n.type:crud-update\\n\\n// Verifying user is authorized to access endpoint.\\nvalidators.mandatory:x:@.arguments/*/username\\nauth.ticket.verify:root\\n\\n// Sanity checking invocation\\nvalidators.mandatory:x:@.arguments/*/username\\neval:x:+\\nsignal:transformers.hash-password\\n   reference:x:@.arguments/*/password\\n\\n// Opening up our database connection.\\ndata.connect:[generic|magic]\\n\\n   // Parametrising our invocation.\\n   add:x:./*/data.update/*/values\\n      get-nodes:x:@.arguments/*/[1,1000]\\n   add:x:./*/data.update/*/where/*/and\\n      get-nodes:x:@.arguments/*/[0,1]\\n\\n   // Invoking our update slot.\\n   data.update\\n      table:users\\n      values\\n      where\\n         and\\n\\n   // Verifying record exists.\\n   if\\n      eq\\n         get-value:x:@data.update\\n         .:int:0\\n      .lambda\\n         response.status.set:404\\n         return\\n            result:Record not found\\n\\n   // Returning success to caller.\\n   response.status.set:202\\n   unwrap:x:+/*\\n   return\\n      affected:x:@data.update\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns all dynamic HTTP endpoints in the system,\\nwith their associated verb(s), and roles that are\\nallowed to access the endpoint."},{"role":"assistant","content":".type:public\\n\\n// Declares how many seconds the operation should be cached.\\n.cache-seconds:int:300\\n\\n/*\\n * Invokes [endpoints.list], making sure we cache the results, since it's a\\n * fairly expensive operation.\\n */\\ncache.try-get:magic.auth.endpoints\\n   expiration:x:@.cache-seconds\\n   .lambda\\n\\n      // Cache miss, retrieving endpoints, and returning to caller.\\n      .result\\n      endpoints.list\\n      for-each:x:@endpoints.list/*\\n         if\\n            exists:x:@.dp/#/*/auth/*\\n            .lambda\\n               add:x:+/*/*\\n                  get-nodes:x:@.dp/#/*/auth/*\\n               add:x:@if/+/+/*/*\\n                  .\\n                     auth\\n         unwrap:x:+/*/*/*\\n         add:x:@.result\\n            .\\n               .\\n                  path:x:@.dp/#/*/path\\n                  verb:x:@.dp/#/*/verb\\n      lambda2hyper:x:@.result/*\\n      return:x:-\\n\\n// Returning results of above invocation to caller.\\nhyper2lambda:x:@cache.try-get\\nadd:x:../*/return\\n   get-nodes:x:@hyper2lambda/*\\nreturn\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Will verify JWT token and return success if token is valid."},{"role":"assistant","content":".type:public\\n\\n// Ensures user is authorized to access endpoint.\\ntry\\n   auth.ticket.verify\\n   return\\n      result:success\\n.catch\\n   return\\n      result:failure\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Applies the specified arguments and file comment description\\nto the specified Hyperlambda."},{"role":"assistant","content":".arguments\\n   hyperlambda:string\\n   description:string\\n   args:*\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Converting input Hyperlambda to lambda object.\\nhyper2lambda:x:@.arguments/*/hyperlambda\\n   comments:true\\n\\n// Removing old file comment description.\\nremove-nodes:x:\"@hyper2lambda/0/\\\\..\"\\n\\n// Removing old [.arguments] collection.\\nremove-nodes:x:@hyper2lambda/0/.arguments\\n\\n// Creating supporting node at the end of lambda object.\\nadd:x:@hyper2lambda\\n   .\\n      .support\\n\\n// Checking if caller provided an [.arguments] collection for Hyperlambda.\\nif\\n   exists:x:@.arguments/*/args\\n   .lambda\\n\\n      // Inserting arguments at top of lambda object.\\n      add:x:+/*/*\\n         get-nodes:x:@.arguments/*/args/*\\n      insert-before:x:@hyper2lambda/0\\n         .\\n            .arguments\\nelse\\n\\n   // Checking if we've got a file level comment.\\n   if\\n      eq\\n         get-name:x:@hyper2lambda/0\\n         .:..\\n      .lambda\\n\\n         // We have a file level comment, hence applying [.arguments] node after it.\\n         insert-after:x:@hyper2lambda/0\\n            .\\n               .arguments\\n   else\\n\\n      // We don't have a file level comment, applying [.arguments] as the first node in the file.\\n      insert-before:x:@hyper2lambda/0\\n         .\\n            .arguments\\n\\n// Defaulting file [.type] to public.\\ninsert-after:x:@hyper2lambda/*/.arguments\\n   .\\n      .type:public\\n\\n// Checking if caller provided a [description] for Hyperlambda.\\nif\\n   and\\n      exists:x:@.arguments/*/description\\n      not-null:x:@.arguments/*/description\\n   .lambda\\n\\n      // Normalising [description] CR/LF characters.\\n      strings.replace:x:@.arguments/*/description\\n         .:@\"\\n\"\\n         .:\"\\n\"\\n      strings.replace:x:@strings.replace\\n         .:\"\\n\"\\n         .:@\"\\n\"\\n\\n      // Inserting file comment / description at top of lambda object.\\n      unwrap:x:+/*/*\\n      insert-before:x:@hyper2lambda/0\\n         .\\n            ..:x:@strings.replace\\n\\n// Removing supporting node.\\nremove-nodes:x:@hyper2lambda/0/-/.support\\n\\n// Converting lambda to Hyperlambda again.\\nlambda2hyper:x:@hyper2lambda/*\\n   comments:true\\n\\n// Returning updated Hyperlambda to caller.\\nyield\\n   result:x:@lambda2hyper\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Ensures the specified [role] exists from before, and if not,\\ncreates it.\\n\\nArguments.\\n\\n- [role] - Name of role to create.\\n- [description] - Description of role."},{"role":"assistant","content":"slots.create:magic.auth.ensure-role\\n\\n   // Sanity checking invocation.\\n   validators.mandatory:x:@.arguments/*/role\\n   validators.mandatory:x:@.arguments/*/description\\n\\n   /*\\n    * Ensures the [role] role exists.\\n    * \\n    * Notice, in case system hasn't been setup yet, we'll need to silently\\n    * catch all exceptions.\\n    */\\n   try\\n\\n      // Connecting to Magic database.\\n      data.connect:[generic|magic]\\n\\n         // Checking to see if [role] role exists.\\n         data.read\\n            table:roles\\n            where\\n               and\\n                  name.eq:x:@.arguments/*/role\\n\\n         // Checking result of above invocation.\\n         if\\n            not\\n               exists:x:@data.read/*/*\\n            .lambda\\n\\n               // We need to insert [role] role into Magic database.\\n               data.create\\n                  table:roles\\n                  values\\n                     name:x:@.arguments/*/role\\n                     description:x:@.arguments/*/description\\n   .catch\\n\\n      /*\\n       * Silently catching here, to avoid application crash\\n       * if system hasn't been setup yet.\\n       */\\n      .silent\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Installs the specified module by executing all magic.startup Hyperlambda\\nfiles inside of it.\\n\\nArguments.\\n\\n- [module] - Name of module to install."},{"role":"assistant","content":"slots.create:magic.modules.install-module\\n\\n   // Sanity checking invocation.\\n   validators.mandatory:x:@.arguments/*/module\\n\\n   /*\\n    * Loops through all files recursively from within the module's\\n    * \"magic.startup\" folder.\\n    */\\n   strings.concat\\n      .:/modules/\\n      get-value:x:@.arguments/*/module\\n      .:/\\n\\n   // Executing all magic.startup Hyperlambda files inside module.\\n   io.file.list-recursively:x:@strings.concat\\n   for-each:x:@io.file.list-recursively/*\\n\\n      // Checking if file is a startup Hyperlambda file.\\n      if\\n         and\\n            strings.contains:x:@.dp/#\\n               .:/magic.startup/\\n            strings.ends-with:x:@.dp/#\\n               .:.hl\\n         .lambda\\n\\n            // Executing file.\\n            io.file.execute:x:@.dp/#\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Loads the specified file and returns to caller as 'application/octet-stream' Content-Type."},{"role":"assistant","content":".arguments\\n   access_token:string\\n   file:string\\n.type:internal\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/file\\nvalidators.mandatory:x:@.arguments/*/access_token\\n\\n/*\\n * Loading file and returning it, as text content to caller, making\\n * sure we return the correct Content-Type in the process.\\n */\\nstrings.split:x:@.arguments/*/file\\n   .:/\\nstrings.concat\\n   .:\"attachment; filename=\\\"\"\\n   get-value:x:@strings.split/0/-\\n   .:\"\\\"\"\\nresponse.headers.set\\n   Content-Type:application/octet-stream\\n   Content-Disposition:x:@strings.concat\\n   Access-Control-Expose-Headers:Content-Disposition\\nio.stream.open-file:x:@.arguments/*/file\\nreturn:x:-\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"List all files in the specified [folder] argument."},{"role":"assistant","content":".arguments\\n   folder:string\\n   filter:string\\n.type:internal\\n\\n// Ensures user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Listing all files in specified folder.\\nio.file.list:x:@.arguments/*/folder\\n\\n// Checking if we have a filter, and if so, only return files matching filter.\\nif\\n   exists:x:@.arguments/*/filter\\n   .lambda\\n\\n      // Filtering out files not matching filter condition.\\n      for-each:x:@io.file.list/*\\n         if\\n            strings.contains:x:@.dp/#\\n               get-value:x:@.arguments/*/filter\\n            .lambda\\n               add:x:@for-each/./*/return-nodes\\n                  get-nodes:x:@.dp/#\\n      return-nodes\\nelse\\n\\n   // Returning all files from above invocation to caller.\\n   return-nodes:x:@io.file.list/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns all available workflows from the backend."},{"role":"assistant","content":".arguments\\n   private:bool\\n.type:internal\\n\\n// Making sure user has access to invoked endpoint.\\nauth.ticket.verify:root\\n\\n// Contains list of workflows we find.\\n.result\\n\\n// Listing files recursively.\\nio.file.list-recursively:/modules/\\nio.file.list-recursively:/system/\\nfor-each:x:../*/io.file.list-recursively/*\\n\\n   // Checking if this is a workflow file.\\n   if\\n      and\\n\\n         // We're only dealing with Hyperlambda files.\\n         strings.ends-with:x:@.dp/#\\n            .:.hl\\n\\n         // Ignoring startup files.\\n         not\\n            strings.contains:x:@.dp/#\\n               .:/magic.startup/\\n\\n         // Making sure this is a file of interest.\\n         or\\n\\n            // If private is true, we return everything.\\n            eq:x:@.arguments/*/private\\n               .:bool:true\\n\\n            // Making sure we return workflow files\\n            strings.contains:x:@.dp/#\\n               .:/workflows/workflows/\\n\\n            // Making sure we return anything inside of modules.\\n            strings.starts-with:x:@.dp/#\\n               .:/modules/\\n            and\\n               strings.contains:x:@.dp/#\\n                  .:/workflows/\\n\\n               // Ignoring actions\\n               not\\n                  strings.contains:x:@.dp/#\\n                     .:/workflows/actions/\\n\\n               // Ignoring workflow HTTP endpoints.\\n               not\\n                  strings.starts-with:x:@.dp/#\\n                     .:/system/workflows/\\n      .lambda\\n\\n         /*\\n          * This is a workflow Hyperlambda file.\\n          * \\n          * Figuring out its name, description, and arguments (if any).\\n          */\\n         strings.split:x:@.dp/#\\n            .:/\\n         strings.split:x:@strings.split/0/-\\n            .:.\\n         io.file.load:x:@.dp/#\\n         hyper2lambda:x:@io.file.load\\n            comments:true\\n\\n         // Making sure we do NOT return \"internal\" workflow files.\\n         if\\n            and\\n               eq\\n                  get-name:x:@hyper2lambda/0\\n                  .:..\\n               or\\n                  eq:x:@.arguments/*/private\\n                     .:bool:true\\n                  eq:x:@hyper2lambda/*/.type\\n                     .:public\\n                  strings.starts-with:x:@hyper2lambda/*/.type\\n                     .:crud-\\n            .lambda\\n\\n               // Removing comments for arguments.\\n               remove-nodes:x:\"@hyper2lambda/*/.arguments/*/\\\\..\"\\n\\n               // Adding workflow to [.result].\\n               add:x:+/+/*/*/*/arguments\\n                  get-nodes:x:@hyper2lambda/*/.arguments/*\\n               unwrap:x:+/*/*/*\\n               add:x:@.result\\n                  .\\n                     .\\n                        description:x:\"@hyper2lambda/*/\\\\../[0,1]\"\\n                        name:x:@strings.split/0\\n                        file:x:@.dp/#\\n                        arguments\\n\\n// Returning result to caller.\\nreturn-nodes:x:@.result/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns the specified TXT training data file to client."},{"role":"assistant","content":".arguments\\n   file:string\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/file\\n\\n// Figuringout full path of file.\\nstrings.concat\\n   .:/etc/system/openai/pdf/\\n   get-value:x:@.arguments/*/file\\n\\n// Getting our response HTTP headers sorted out.\\nstrings.concat\\n   .:\"attachment; filename=\\\"\"\\n   get-value:x:@.arguments/*/file\\n   .:\"\\\"\"\\nresponse.headers.set\\n   Content-Type:text/plain\\n   Content-Disposition:x:@strings.concat\\n   Access-Control-Expose-Headers:Content-Disposition\\n\\n// Returning file to caller.\\nio.stream.open-file:x:@strings.concat/@strings.concat\\nreturn:x:-\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns the specified JavaScript file wrapping the specified model to caller."},{"role":"assistant","content":".arguments\\n   placeholder:string\\n   button:string\\n   type:string\\n   css:string\\n   max:int\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/placeholder\\nvalidators.mandatory:x:@.arguments/*/button\\nvalidators.mandatory:x:@.arguments/*/type\\nvalidators.mandatory:x:@.arguments/*/css\\nvalidators.mandatory:x:@.arguments/*/max\\n\\n// Figuring out API URL.\\n.scheme\\nrequest.host\\nif\\n   strings.contains:x:@request.host\\n      .:localhost\\n   .lambda\\n      set-value:x:@.scheme\\n         .:http\\nelse\\n   set-value:x:@.scheme\\n      .:https\\n.url\\nset-value:x:@.url\\n   strings.concat\\n      get-value:x:@.scheme\\n      .:\"://\"\\n      request.host\\n\\n// Loading search JavaScript file.\\n.result\\nset-value:x:@.result\\n   io.file.load:/system/openai/front.files/search/search.js\\n\\n// Retrieving reCAPTCHA key.\\n.captcha\\nset-value:x:@.captcha\\n   config.get:\"magic:auth:recaptcha:key\"\\n      .:\\n\\n// Dynamically exchanging template fields in JavaScript file.\\nset-value:x:@.result\\n   strings.replace:x:@.result\\n      .:[[url]]\\n      get-value:x:@.url\\nset-value:x:@.result\\n   strings.replace:x:@.result\\n      .:[[recaptcha]]\\n      get-value:x:@.captcha\\nset-value:x:@.result\\n   strings.replace:x:@.result\\n      .:[[max]]\\n      get-value:x:@.arguments/*/max\\nset-value:x:@.result\\n   strings.replace:x:@.result\\n      .:[[placeholder]]\\n      get-value:x:@.arguments/*/placeholder\\nset-value:x:@.result\\n   strings.replace:x:@.result\\n      .:[[button]]\\n      get-value:x:@.arguments/*/button\\nset-value:x:@.result\\n   strings.replace:x:@.result\\n      .:[[type]]\\n      get-value:x:@.arguments/*/type\\nset-value:x:@.result\\n   strings.replace:x:@.result\\n      .:[[css]]\\n      get-first-value\\n         get-value:x:@.arguments/*/css\\n         get-value:x:@.arguments/*/file\\n         .:\\n\\n// Making sure we return correct Content-Type to caller, and applying some cache.\\nresponse.headers.set\\n   Content-Type:application/javascript\\n\\n// Returning result to caller.\\nreturn:x:@.result\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Creates a permalink for current chat conversation"},{"role":"assistant","content":".arguments\\n   session:string\\n.type:internal\\n\\n// Making sure user has access to invoked endpoint.\\nauth.ticket.verify\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/session\\n\\n// Retrieving session items.\\ncache.get:x:@.arguments/*/session\\n\\n// Checking that cache didn't expire.\\nif\\n   or\\n      null:x:@cache.get\\n      eq:x:@cache.get\\n         .:\\n   .lambda\\n\\n      // Cache expired!\\n      throw:Cache expired, items no longer available\\n         status:int:500\\n         public:bool:true\\n\\n// Creating a unique URL.\\ncrypto.random\\n   min:20\\n   max:20\\n\\n// Storing items in database.\\ndata.connect:[generic|magic]\\n\\n   // Verifying we didn't already create a permalink for this previously.\\n   data.select:select id from ml_permalinks where messages = @messages limit 1\\n      @messages:x:@cache.get\\n   if\\n      exists:x:@data.select/*\\n      .lambda\\n\\n         // Permalink exists from before.\\n         yield\\n            url:x:@data.select/*/*/id\\n\\n   // Creating a title for the article by asking OpenAI to summarize conversation.\\n   .token\\n   set-value:x:@.token\\n      strings.concat\\n         .:\"Bearer \"\\n         get-first-value\\n            get-value:x:@.arguments/*/api_key\\n            config.get:\"magic:openai:key\"\\n   http.post:\"https://api.openai.com/v1/chat/completions\"\\n      convert:bool:true\\n      headers\\n         Authorization:x:@.token\\n         Content-Type:application/json\\n      payload\\n         model:o3-mini\\n         max_completion_tokens:int:1000\\n         messages\\n            .\\n               role:system\\n               content:Create an SEO optimised summary of the following content intended to serve as a title\\n            .\\n               role:user\\n               content:x:@cache.get\\n\\n   // Sanity checking above invocation.\\n   if\\n      not\\n         and\\n            mte:x:@http.post\\n               .:int:200\\n            lt:x:@http.post\\n               .:int:300\\n      .lambda\\n\\n         // Oops, error - Logging error and throwing exception.\\n         lambda2hyper:x:@http.post\\n         log.error:Something went wrong while invoking OpenAI\\n            message:x:@http.post/*/content/*/error/*/message\\n            status:x:@http.post\\n            error:x:@lambda2hyper\\n\\n   // Saving title temporary\\n   .title2\\n   set-value:x:@.title2\\n      get-first-value\\n         get-value:x:@http.post/*/content/*/choices/0/*/message/*/content\\n         .:\\n   set-value:x:@.title2\\n      strings.trim:x:@.title2\\n         .:@\"\"\"\\n\t \"\\n   set-value:x:@.title2\\n      strings.replace:x:@.title2\\n         .:\"\\\"\"\\n         .:\"'\"\\n\\n   // Creating a description for the article by asking OpenAI to summarize conversation.\\n   http.post:\"https://api.openai.com/v1/chat/completions\"\\n      convert:bool:true\\n      headers\\n         Authorization:x:@.token\\n         Content-Type:application/json\\n      payload\\n         model:o3-mini\\n         max_completion_tokens:int:1000\\n         messages\\n            .\\n               role:system\\n               content:Create a short and SEO optimised one sentence description of the following content intended to serve as a description for an HTML page with its content\\n            .\\n               role:user\\n               content:x:@cache.get\\n\\n   // Sanity checking above invocation.\\n   if\\n      not\\n         and\\n            mte:x:@http.post\\n               .:int:200\\n            lt:x:@http.post\\n               .:int:300\\n      .lambda\\n\\n         // Oops, error - Logging error and returning HTTP status code to caller.\\n         lambda2hyper:x:@http.post\\n         log.error:Something went wrong while invoking OpenAI\\n            message:x:@http.post/*/content/*/error/*/message\\n            status:x:@http.post\\n            error:x:@lambda2hyper\\n\\n   // Saving title temporary\\n   .description2\\n   set-value:x:@.description2\\n      get-first-value\\n         get-value:x:@http.post/*/content/*/choices/0/*/message/*/content\\n         .:\\n   set-value:x:@.description2\\n      strings.trim:x:@.description2\\n         .:@\"\"\"\\n\t \"\\n   set-value:x:@.description2\\n      strings.replace:x:@.description2\\n         .:\"\\\"\"\\n         .:\"'\"\\n\\n   // Inserting item.\\n   data.create\\n      table:ml_permalinks\\n      values\\n         id:x:@crypto.random\\n         messages:x:@cache.get\\n         title:x:@.title2\\n         description:x:@.description2\\n\\n// Returning success to caller.\\nyield\\n   url:x:@crypto.random\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns all available themes from the backend."},{"role":"assistant","content":".arguments\\n.type:internal\\n\\n// Making sure user has access to invoked endpoint.\\nauth.ticket.verify:root\\n\\n// Checking if custom CSS file exists.\\n.result\\n\\n// Listing custom files.\\nif\\n   io.folder.exists:/etc/system/openai/css/chat/\\n   .lambda\\n      io.file.list:/etc/system/openai/css/chat/\\n      for-each:x:@io.file.list/*\\n         if\\n            strings.ends-with:x:@.dp/#\\n               .:css\\n            .lambda\\n               strings.split:x:@.dp/#\\n                  .:/\\n               strings.split:x:@strings.split/0/-\\n                  .:.\\n               unwrap:x:+/*/*\\n               add:x:@.result\\n                  .\\n                     .:x:@strings.split/0\\n\\n// Listing system files.\\nif\\n   io.folder.exists:/system/openai/front.files/chat/\\n   .lambda\\n      io.file.list:/system/openai/front.files/chat/\\n      for-each:x:@io.file.list/*\\n         if\\n            strings.ends-with:x:@.dp/#\\n               .:css\\n            .lambda\\n               strings.split:x:@.dp/#\\n                  .:/\\n               strings.split:x:@strings.split/0/-\\n                  .:.\\n               if\\n                  not-exists:x:\"@.result/*/\\\"={@strings.split/0}\\\"\"\\n                  .lambda\\n                     unwrap:x:+/*/*\\n                     add:x:@.result\\n                        .\\n                           .:x:@strings.split/0\\n\\n// Returning result to caller.\\nreturn-nodes:x:@.result/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Deletes all existing vectors for specified model."},{"role":"assistant","content":".arguments\\n   type:string\\n.type:internal\\n\\n// Ensures user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/type\\n\\n// Connecting to database.\\ndata.connect:[generic|magic]\\n\\n   // Deleting VSS data.\\n   data.execute:delete from vss_ml_training_snippets where rowid in (select id as rowid from ml_training_snippets where type = @type)\\n      @type:x:@.arguments/*/type\\n\\n   // Deleting embeddings.\\n   data.execute:update ml_training_snippets set embedding = null where type = @type\\n      @type:x:@.arguments/*/type\\n\\n// Returning success to caller.\\nreturn\\n   result:success\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Creates a system message using OpenAI and GPT-4 based upon the specified template.\\n\\nNotice, any [[XYZ]] fields in the specified template will be dynamically substituted by\\nOpenAI according to the instruction you provide.\\n\\nArguments:\\n\\n- [url] - URL from where to find context data used to populate template fields.\\n- [template] - The starting template containing your template fields.\\n- [instruction] - How to deal with the template.\\n\\nBasically, the [url] will be scraped, and the [instruction] will be used to modify the\\n[template] according to the information found at [url] and the [instruction] provided."},{"role":"assistant","content":"slots.create:magic.ai.create-system-message\\n\\n   // Sanity checking invocation.\\n   validators.mandatory:x:@.arguments/*/url\\n   validators.mandatory:x:@.arguments/*/template\\n   validators.mandatory:x:@.arguments/*/instruction\\n   validators.url:x:@.arguments/*/url\\n\\n   // Retrieving context.\\n   execute:magic.http.scrape-url\\n      url:x:@.arguments/*/url\\n   if\\n      not-null:x:@execute\\n      .lambda\\n\\n         // Oops ...!!\\n         throw:Could not scrape URL\\n            public:bool:true\\n            status:x:@execute\\n\\n   // Building our context based upon the [url] specified.\\n   .context:\\n   while\\n      and\\n         exists:x:@execute/0\\n         lt\\n            openai.tokenize:x:@.context\\n            .:int:4000\\n      .lambda\\n\\n         // Temporary value.\\n         .tmp\\n         set-value:x:@.tmp\\n            strings.concat\\n               get-value:x:@.context\\n               .:\"\\n\\n\"\\n               get-value:x:@execute/0/*/prompt\\n               .:\"\\n\\n\"\\n               get-value:x:@execute/0/*/completion\\n         if\\n            lt\\n               openai.tokenize:x:@.tmp\\n               .:int:4000\\n            .lambda\\n\\n               // Still below [max_tokes].\\n               set-value:x:@.context\\n                  get-value:x:@.tmp\\n\\n         // Removing top snippet.\\n         remove-nodes:x:@execute/0/*/snippets/0\\n         if\\n            not-exists:x:@execute/0/*/snippets/0\\n            .lambda\\n\\n               // Removing currently iterated URL.\\n               remove-nodes:x:@execute/0\\n\\n   // Trimming result.\\n   set-value:x:@.context\\n      strings.trim:x:@.context\\n\\n   // Retrieving OpenAI API token from configuration settings.\\n   .token\\n   set-value:x:@.token\\n      strings.concat\\n         .:\"Bearer \"\\n         config.get:\"magic:openai:key\"\\n\\n   // Invokes OpenAI.\\n   http.post:\"https://api.openai.com/v1/chat/completions\"\\n      convert:bool:true\\n      headers\\n         Authorization:x:@.token\\n         Content-Type:application/json\\n      payload\\n         model:gpt-4o\\n         max_tokens:int:3600\\n         temperature:decimal:0.3\\n         messages\\n            .\\n               role:system\\n               content:x:@.arguments/*/instruction\\n            .\\n               role:user\\n               content:x:@.arguments/*/template\\n            .\\n               role:user\\n               content:x:@.context\\n\\n   // Sanity checking above invocation.\\n   if\\n      not\\n         and\\n            mte:x:@http.post\\n               .:int:200\\n            lt:x:@http.post\\n               .:int:300\\n      .lambda\\n\\n         // Oops, error - Logging error and returning status 500 to caller.\\n         lambda2hyper:x:@http.post\\n         log.error:Something went wrong while invoking OpenAI\\n            message:x:@http.post/*/content/*/error/*/message\\n            status:x:@http.post\\n            error:x:@lambda2hyper\\n         throw:Something went wrong while invoking OpenAI\\n            message:x:@http.post/*/content/*/error/*/message\\n            status:x:@http.post\\n            error:x:@lambda2hyper\\n\\n   // Returning answer to caller.\\n   strings.replace:x:@http.post/*/content/*/choices/0/*/message/*/content\\n      .:\"\\r\"\\n      .:\\n   strings.replace:x:-\\n      .:\"\\n\"\\n      .:@\"\\n\"\\n   return:x:-\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Creates scheduled task that deletes all cached questions / answers\\nfrom machine learning models that are older than 2 weeks, to preserve\\nstorage space.\\n\\nNotice, task ONLY executes if default database is SQLite, since database\\nmanagement is up to db-admin for serious databases."},{"role":"assistant","content":"if\\n   eq\\n      config.get:\"magic:databases:default\"\\n      .:sqlite\\n   .lambda\\n\\n      // Wrapping in try/catch in case task already exists.\\n      try\\n\\n         // Deleting old task if existing.\\n         tasks.list:reset-no_requests\\n         if\\n            exists:x:@tasks.list/*\\n            .lambda\\n               tasks.delete:x:@tasks.list/0/*/id\\n\\n         // Creating task that periodically deletes old historical requests.\\n         tasks.create:reset-no_requests\\n            description:Resets no_requests at the first day of the month\\n            repeats:**.01.01.01.01\\n            .lambda\\n               sqlite.connect:magic\\n                  sqlite.execute:update ml_types set no_requests = 0\\n               log.info:All machine learning models had their no_requests values reset\\n      .catch\\n\\n         // Task already exists.\\n         console.log:Task to reset no_requests already exists\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Slot for sending a message using Twilio."},{"role":"assistant","content":"slots.create:magic.twilio.send-message\\n\\n   // Sanity checking invocation.\\n   validators.mandatory:x:@.arguments/*/to\\n   validators.mandatory:x:@.arguments/*/from\\n   validators.mandatory:x:@.arguments/*/body\\n   validators.mandatory:x:@.arguments/*/twilio_account_id\\n   validators.mandatory:x:@.arguments/*/twilio_account_sid\\n\\n   // Creating Basic auth header.\\n   .auth\\n   set-value:x:@.auth\\n      strings.concat\\n         get-value:x:@.arguments/*/twilio_account_id\\n         .:\":\"\\n         get-value:x:@.arguments/*/twilio_account_sid\\n   set-value:x:@.auth\\n      convert:x:@.auth\\n         type:bytes\\n   set-value:x:@.auth\\n      strings.concat\\n         .:\"Basic \"\\n         convert:x:@.auth\\n            type:base64\\n\\n   // Removing Markdown images since Twilio doesn't support Markdown.\\n   .content\\n   set-value:x:@.content\\n      strings.regex-replace:x:@.arguments/*/body\\n         .:\"!\\\\[.*\\\\]\\\\(.*\\\\)\"\\n         .:\\n   set-value:x:@.content\\n      strings.trim:x:@.content\\n   .cont:bool:true\\n   while:x:@.cont\\n      if\\n         not\\n            strings.contains:x:@.content\\n               .:@\"\\n\\n\\n\"\\n         .lambda\\n            set-value:x:@.cont\\n               .:bool:false\\n      else\\n         set-value:x:@.content\\n            strings.replace:x:@.content\\n               .:@\"\\n\\n\\n\"\\n               .:@\"\\n\\n\"\\n\\n   // Fixing Markdown hyperlinks by removing brackets.\\n   set-value:x:@.content\\n      strings.replace:x:@.content\\n         .:[\\n         .:\\n   set-value:x:@.content\\n      strings.replace:x:@.content\\n         .:](\\n         .:\" (\"\\n\\n   // Creating our URL to invoke Twilio API.\\n   .url\\n   set-value:x:@.url\\n      strings.concat\\n         .:\"https://api.twilio.com/2010-04-01/Accounts/\"\\n         get-value:x:@.arguments/*/twilio_account_id\\n         .:/Messages.json\\n\\n   // Invoking Twilio.\\n   http.post:x:@.url\\n      convert:true\\n      headers\\n         Content-Type:application/x-www-form-urlencoded\\n         Authorization:x:@.auth\\n      payload\\n         Body:x:@.content\\n         From:x:@.arguments/*/from\\n         To:x:@.arguments/*/to\\n\\n   // Making sure above invocation succeeded.\\n   if\\n      not\\n         and\\n            mte:x:@http.post\\n               .:int:200\\n            lt:x:@http.post\\n               .:int:300\\n      .lambda\\n\\n         // Something went wrong while invoking Twilio\\n         lambda2hyper:x:@http.post/*/content\\n         log.error:Something went wrong while invoking Twilio\\n            response:x:@lambda2hyper\\n         throw:Something went wrong as we invoked Twilio, check your log for details\\n\\n   // Logging success.\\n   log.info:Successfully sent message using Twilio\\n      body:x:@.arguments/*/body\\n      to:x:@.arguments/*/to\\n      from:x:@.arguments/*/from\\n      twilio_account_id:x:@.arguments/*/twilio_account_id\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Override exception handler to make sure we return information to root users\\nas they're using Magic to develop or modify things."},{"role":"assistant","content":"log.error:x:@.arguments/*/message\\n   url:x:@.arguments/*/path\\n   exception:x:@.arguments/*/stack\\nadd:x:+\\n   get-nodes:x:@.arguments/*/status\\n   get-nodes:x:@.arguments/*/field\\n   get-nodes:x:@.arguments/*/message\\nreturn\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Creates a migration script of the specified SQL for the specified module.\\n\\nArguments;\\n- [databaseType] - Type of database\\n- [module] - Name of module\\n- [sql] - SQL script to export"},{"role":"assistant","content":".arguments\\n   databaseType:string\\n   module:string\\n   sql:string\\n.type:internal\\n\\n// Ensures user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/sql\\nvalidators.mandatory:x:@.arguments/*/module\\nvalidators.mandatory:x:@.arguments/*/databaseType\\nvalidators.enum:x:@.arguments/*/databaseType\\n   .:mysql\\n   .:sqlite\\n   .:mssql\\n   .:pgsql\\n\\n// Ensuring folders exists.\\nstrings.concat\\n   .:/modules/\\n   get-value:x:@.arguments/*/module\\n   .:/\\nif\\n   not\\n      io.folder.exists:x:@strings.concat\\n   .lambda\\n      io.folder.create:x:@strings.concat\\nstrings.concat\\n   .:/modules/\\n   get-value:x:@.arguments/*/module\\n   .:/magic.startup/\\nif\\n   not\\n      io.folder.exists:x:@strings.concat\\n   .lambda\\n      io.folder.create:x:@strings.concat\\nstrings.concat\\n   .:/modules/\\n   get-value:x:@.arguments/*/module\\n   .:/magic.startup/db-migrations/\\nif\\n   not\\n      io.folder.exists:x:@strings.concat\\n   .lambda\\n      io.folder.create:x:@strings.concat\\nstrings.concat\\n   .:/modules/\\n   get-value:x:@.arguments/*/module\\n   .:/magic.startup/db-migrations/\\n   get-value:x:@.arguments/*/databaseType\\n   .:/\\nif\\n   not\\n      io.folder.exists:x:@strings.concat\\n   .lambda\\n      io.folder.create:x:@strings.concat\\n\\n// Figuring out filename for next migration script file.\\n.no:int:1\\nio.file.list:x:@strings.concat\\nfor-each:x:-/*\\n   if\\n      strings.ends-with:x:@.dp/#\\n         .:.sql\\n      .lambda\\n         strings.split:x:@.dp/#\\n            .:/\\n         strings.split:x:-/0/-\\n            .:-\\n         convert:x:-/0\\n            type:int\\n         if\\n            mte:x:@convert\\n               get-value:x:@.no\\n            .lambda\\n               set-value:x:@.no\\n                  math.add:x:@convert\\n                     .:int:1\\n\\n// Figuring out complete filename for migration script file.\\nstrings.concat\\n   .:/modules/\\n   get-value:x:@.arguments/*/module\\n   .:/magic.startup/db-migrations/\\n   get-value:x:@.arguments/*/databaseType\\n   .:/\\n   format:x:@.no\\n      pattern:\"{0:D4}\"\\n   .:-migration-script.sql\\n\\n// Saving migration script.\\nio.file.save:x:-\\n   get-value:x:@.arguments/*/sql\\n\\n// Returning result to caller.\\nunwrap:x:+/*\\nreturn\\n   result:success\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Adds the specified link table to the specified database.\\n\\nArguments;\\n- [databaseType] - Database type, typically 'mssql' or 'mysql'.\\n- [connectionString] - Connection string to use\\n- [databaseName] - Name of database\\n- [args] - Link table declaration\\n- [generate] - If true will not execute SQL but only return DDL to caller"},{"role":"assistant","content":".arguments\\n   databaseType:string\\n   connectionString:string\\n   databaseName:string\\n   args\\n      name:string\\n      table1:string\\n      table2:string\\n      table1pk\\n         .\\n            name:string\\n            type:string\\n            length:int\\n      table2pk\\n         .\\n            name:string\\n            type:string\\n            length:int\\n   generate:bool\\n.type:internal\\n\\n// Ensures user is authorized to access endpoint.\\nauth.ticket.verify:root\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/connectionString\\nvalidators.mandatory:x:@.arguments/*/databaseName\\nvalidators.mandatory:x:@.arguments/*/args\\nvalidators.mandatory:x:@.arguments/*/databaseType\\nvalidators.enum:x:@.arguments/*/databaseType\\n   .:mysql\\n   .:sqlite\\n   .:pgsql\\n   .:mssql\\n\\n// Creating our DDL SQL.\\n.sql\\n\\n// Create table DDL.\\nset-value:x:@.sql\\n   strings.concat\\n      .:\"create table \"\\n      get-value:x:@.arguments/*/args/*/name\\n      .:(\\n\\n// Looping through primary keys in table1.\\n.first:bool:true\\n.pk:\\n.fk:\\nfor-each:x:@.arguments/*/args/*/table1pk/*\\n\\n   // Checking if this is our first column or not.\\n   if:x:@.first\\n      set-value:x:@.first\\n         .:bool:false\\n      set-value:x:@.sql\\n         strings.concat\\n            get-value:x:@.sql\\n            .:@\"\\n  \"\\n   else\\n      set-value:x:@.sql\\n         strings.concat\\n            get-value:x:@.sql\\n            .:@\",\\n  \"\\n\\n   // Adding column name and type.\\n   set-value:x:@.sql\\n      strings.concat\\n         get-value:x:@.sql\\n         get-value:x:@.dp/#/*/name\\n         .:\" \"\\n         get-value:x:@.dp/#/*/type\\n\\n   // Checking if type has a length.\\n   if\\n      and\\n         exists:x:@.dp/#/*/length\\n         not-null:x:@.dp/#/*/length\\n      .lambda\\n         set-value:x:@.sql\\n            strings.concat\\n               get-value:x:@.sql\\n               .:(\\n               get-value:x:@.dp/#/*/length\\n               .:)\\n\\n   // Adding references constraint for column if not MySQL.\\n   if\\n      neq:x:@.arguments/*/databaseType\\n         .:mysql\\n      .lambda\\n         set-value:x:@.sql\\n            strings.concat\\n               get-value:x:@.sql\\n               .:\" references \"\\n               get-value:x:@.arguments/*/args/*/table1\\n               .:\" (\"\\n               get-value:x:@.dp/#/*/name\\n               .:)\\n   else\\n      set-value:x:@.fk\\n         strings.concat\\n            get-value:x:@.fk\\n            .:@\",\\n foreign key (\"\\n            get-value:x:@.dp/#/*/name\\n            .:\") references \"\\n            get-value:x:@.arguments/*/args/*/table1\\n            .:\" (\"\\n            get-value:x:@.dp/#/*/name\\n            .:)\\n\\n   // Storing primary key's name.\\n   set-value:x:@.pk\\n      strings.concat\\n         get-value:x:@.pk\\n         get-value:x:@.dp/#/*/name\\n         .:,\\n\\n// Looping through primary keys in table2.\\nfor-each:x:@.arguments/*/args/*/table2pk/*\\n\\n   // Checking if this is our first column or not.\\n   if:x:@.first\\n      set-value:x:@.first\\n         .:bool:false\\n      set-value:x:@.sql\\n         strings.concat\\n            get-value:x:@.sql\\n            .:@\"\\n  \"\\n   else\\n      set-value:x:@.sql\\n         strings.concat\\n            get-value:x:@.sql\\n            .:@\",\\n  \"\\n\\n   // Adding column name and type.\\n   set-value:x:@.sql\\n      strings.concat\\n         get-value:x:@.sql\\n         get-value:x:@.dp/#/*/name\\n         .:\" \"\\n         get-value:x:@.dp/#/*/type\\n\\n   // Checking if type has a length.\\n   if\\n      and\\n         exists:x:@.dp/#/*/length\\n         not-null:x:@.dp/#/*/length\\n      .lambda\\n         set-value:x:@.sql\\n            strings.concat\\n               get-value:x:@.sql\\n               .:(\\n               get-value:x:@.dp/#/*/length\\n               .:)\\n\\n   // Adding references constraint for column if not MySQL.\\n   if\\n      neq:x:@.arguments/*/databaseType\\n         .:mysql\\n      .lambda\\n         set-value:x:@.sql\\n            strings.concat\\n               get-value:x:@.sql\\n               .:\" references \"\\n               get-value:x:@.arguments/*/args/*/table2\\n               .:\" (\"\\n               get-value:x:@.dp/#/*/name\\n               .:)\\n   else\\n      set-value:x:@.fk\\n         strings.concat\\n            get-value:x:@.fk\\n            .:@\",\\n foreign key (\"\\n            get-value:x:@.dp/#/*/name\\n            .:\") references \"\\n            get-value:x:@.arguments/*/args/*/table2\\n            .:\" (\"\\n            get-value:x:@.dp/#/*/name\\n            .:)\\n\\n   // Storing primary key's name.\\n   set-value:x:@.pk\\n      strings.concat\\n         get-value:x:@.pk\\n         get-value:x:@.dp/#/*/name\\n         .:,\\n\\n// Adding primary key to table.\\nstrings.trim:x:@.pk\\n   .:,\\nset-value:x:@.sql\\n   strings.concat\\n      get-value:x:@.sql\\n      .:@\",\\n  primary key(\"\\n      get-value:x:@strings.trim\\n      .:)\\n\\n// Adding closing paranthesis and semi colon.\\nset-value:x:@.sql\\n   strings.concat\\n      get-value:x:@.sql\\n      get-value:x:@.fk\\n      .:);\\n\\n// Checking if caller only wants to generate SQL statement.\\nif:x:@.arguments/*/generate\\n   unwrap:x:+/*\\n   return\\n      sql:x:@.sql\\n\\n// Creating our database connection and executing our SQL.\\nstrings.concat\\n   .:[\\n   get-value:x:@.arguments/*/connectionString\\n   .:|\\n   get-value:x:@.arguments/*/databaseName\\n   .:]\\ndata.connect:x:-\\n   database-type:x:@.arguments/*/databaseType\\n   data.execute:x:@.sql\\n      database-type:x:@.arguments/*/databaseType\\n\\n// Flushing database cache.\\nstrings.concat\\n   .:magic.sql.databases.\\n   get-value:x:@.arguments/*/databaseType\\n   :.\\n   get-value:x:@.arguments/*/connectionString\\ncache.set:x:-\\n\\n// Returning result to caller.\\nunwrap:x:+/*\\nreturn\\n   result:success\\n   sql:x:@.sql\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Lists all columns in some MySQL table.\\n\\nArguments\\n\\n- [connection-string] - What connection string to use\\n- [database] - What database you want to check\\n- [table] - What table you want to check"},{"role":"assistant","content":"slots.create:magic.db.mysql.columns\\n\\n   // Sanity checking invocation.\\n   validators.mandatory:x:@.arguments/*/database\\n   validators.mandatory:x:@.arguments/*/table\\n\\n   // Opens up our connection\\n   .connection:[information_schema]\\n   if\\n      and\\n         not\\n            eq\\n               get-value:x:@.arguments/*/connection-string\\n               .\\n         not\\n            eq\\n               get-value:x:@.arguments/*/connection-string\\n               .:\\n      .lambda\\n         set-value:x:@.connection\\n            strings.concat\\n               .:[\\n               get-value:x:@.arguments/*/connection-string\\n               .:|\\n               get-value:x:@.arguments/*/database\\n               .:]\\n   else\\n      set-value:x:@.connection\\n         strings.concat\\n            .:[generic|\\n            get-value:x:@.arguments/*/database\\n            .:]\\n   mysql.connect:x:@.connection\\n\\n      // Making sure we support table names with special characters.\\n      strings.concat\\n         .:\"describe \"\\n         .:`\\n         get-value:x:@.arguments/*/table\\n         .:`\\n      mysql.select:x:@strings.concat\\n\\n      /*\\n       * Creating our return value, by projecting it into\\n       * a generic form, that does not rely upon MySQL's syntactic\\n       * details.\\n       */\\n      for-each:x:@mysql.select/*\\n         unwrap:x:+/*/*\\n         .tmp\\n            \"\"\\n               name:x:@.dp/#/*/Field\\n               db:x:@.dp/#/*/Type\\n\\n         // Checking if column is nullable.\\n         if\\n            eq\\n               get-value:x:@.dp/#/*/Null\\n               .:NO\\n            .lambda\\n               add:x:@.tmp/*\\n                  .\\n                     nullable:bool:false\\n         else\\n            add:x:@.tmp/*\\n               .\\n                  nullable:bool:true\\n\\n         // Checking if column is a part of the primary key.\\n         if\\n            eq\\n               get-value:x:@.dp/#/*/Key\\n               .:PRI\\n            .lambda\\n               add:x:@.tmp/*\\n                  .\\n                     primary:bool:true\\n         else\\n            add:x:@.tmp/*\\n               .\\n                  primary:bool:false\\n\\n         // Checking if column has a default value.\\n         if\\n            or\\n               and\\n                  not\\n                     eq\\n                        get-value:x:@.dp/#/*/Default\\n                        .:\\n                  not\\n                     eq\\n                        get-value:x:@.dp/#/*/Default\\n                        .\\n               eq\\n                  get-value:x:@.dp/#/*/Extra\\n                  .:auto_increment\\n               eq\\n                  get-value:x:@.dp/#/*/Extra\\n                  .:DEFAULT_GENERATED\\n            .lambda\\n               add:x:@.tmp/*\\n                  .\\n                     automatic:bool:true\\n         else\\n            add:x:@.tmp/*\\n               .\\n                  automatic:bool:false\\n\\n         /*\\n          * Figuring our which Hyperlambda type to project\\n          * its database type to.\\n          */\\n         .type\\n\\n         // Checking for boolean types.\\n         if\\n            or\\n               eq\\n                  get-value:x:@.dp/#/*/Type\\n                  .:tinyint(1)\\n               eq\\n                  get-value:x:@.dp/#/*/Type\\n                  .:bool\\n               eq\\n                  get-value:x:@.dp/#/*/Type\\n                  .:boolean\\n            .lambda\\n\\n               // This is some sort of boolean type.\\n               set-value:x:@.type\\n                  .:bool\\n         else\\n\\n            // Anything BUT booleans.\\n            strings.regex-replace:x:@.dp/#/*/Type\\n               .:\"\\\\([0-9,]+\\\\)\"\\n               .:\\n            strings.replace:x:@strings.regex-replace\\n               .:\" unsigned\"\\n               .:\\n            switch:x:@strings.replace\\n\\n               // Everything transformed into date values.\\n               case:date\\n               case:datetime\\n               case:timestamp\\n                  set-value:x:@.type\\n                     .:date\\n\\n               // Everything transformed into decimal values.\\n               case:float\\n               case:double\\n               case:double precision\\n               case:decimal\\n               case:dec\\n                  set-value:x:@.type\\n                     .:decimal\\n\\n               // Everything transformed into integer long values.\\n               case:bit\\n               case:tinyint\\n               case:bool\\n               case:boolean\\n               case:smallint\\n               case:mediumint\\n               case:integer\\n               case:bigint\\n               case:int\\n               case:int unsigned\\n                  set-value:x:@.type\\n                     .:long\\n\\n               // Everything transformed into string values.\\n               case:char\\n               case:varchar\\n               case:binary\\n               case:varbinary\\n               case:tinyblob\\n               case:tinytext\\n               case:text\\n               case:blob\\n               case:mediumtext\\n               case:mediumblob\\n               case:longtext\\n               case:longblob\\n               case:enum\\n               case:set\\n                  set-value:x:@.type\\n                     .:string\\n\\n               // Everything transformed into boolean.\\n               case:tinyint\\n                  set-value:x:@.type\\n                     .:bool\\n\\n               // Default/special cases.\\n               default\\n                  if\\n                     strings.starts-with:x:@strings.replace\\n                        .:enum\\n                     .lambda\\n\\n                        // Enum type\\n                        set-value:x:@.type\\n                           .:string\\n                  else\\n\\n                     // Defaulting to string type.\\n                     set-value:x:@.type\\n                        .:string\\n\\n         // Adding Hyperlambda type to [.tmp] above.\\n         unwrap:x:+/*/*\\n         add:x:@.tmp/*\\n            .\\n               hl:x:@.type\\n\\n         // Adding [.tmp] to [return-nodes] below.\\n         add:x:../*/mysql.connect/*/return-nodes\\n            get-nodes:x:@.tmp/*\\n\\n      // Returning results to caller.\\n      return-nodes\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Lists all indexes in some PostgreSQL table.\\n\\nArguments\\n\\n- [connection-string] - What connection string to use\\n- [database] - What database you want to check\\n- [table] - What table you want to check"},{"role":"assistant","content":"slots.create:magic.db.pgsql.indexes\\n\\n   // Sanity checking invocation.\\n   validators.mandatory:x:@.arguments/*/database\\n   validators.mandatory:x:@.arguments/*/table\\n\\n   // Opens up our connection\\n   .connection:[postgres]\\n   if\\n      and\\n         not\\n            eq\\n               get-value:x:@.arguments/*/connection-string\\n               .\\n         not\\n            eq\\n               get-value:x:@.arguments/*/connection-string\\n               .:\\n      .lambda\\n         set-value:x:@.connection\\n            strings.concat\\n               .:[\\n               get-value:x:@.arguments/*/connection-string\\n               .:|\\n               get-value:x:@.arguments/*/database\\n               .:]\\n   else\\n      set-value:x:@.connection\\n         strings.concat\\n            .:[generic|\\n            get-value:x:@.arguments/*/database\\n            .:]\\n   pgsql.connect:x:@.connection\\n\\n      // Dynamically creating our SQL.\\n      strings.concat\\n         .:\"\\nselect\\n    t.relname as table_name,\\n    i.relname as index_name,\\n    a.attname as column_name\\nfrom\\n    pg_class t,\\n    pg_class i,\\n    pg_index ix,\\n    pg_attribute a\\nwhere\\n    t.oid = ix.indrelid\\n    and i.oid = ix.indexrelid\\n    and a.attrelid = t.oid\\n    and a.attnum = ANY(ix.indkey)\\n    and t.relkind = 'r'\\n    and t.relname = '\"\\n         get-value:x:@.arguments/*/table\\n         .:\"'\"\\n      pgsql.select:x:@strings.concat\\n\\n      /*\\n       * Creating our return value, by projecting it into\\n       * a generic form, that does not rely upon MySQL's syntactic\\n       * details.\\n       */\\n      for-each:x:@pgsql.select/*\\n         unwrap:x:+/*/*/*\\n         add:x:@pgsql.connect/*/return-nodes\\n            .\\n               .\\n                  name:x:@.dp/#/*/index_name\\n                  columns\\n         unwrap:x:+/*/*\\n         add:x:@pgsql.connect/*/return-nodes/0/-/*/columns\\n            .\\n               .:x:@.dp/#/*/column_name\\n      return-nodes\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns a grouped chart image to caller.\\n\\nValues is a mandatory comma separated list of values."},{"role":"assistant","content":".arguments:*\\n.type:public\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/legend\\n\\n// Creating our individual bars.\\n.bars\\nfor-each:x:@.arguments/*\\n   get-name:x:@.dp/#\\n   if\\n      not\\n         strings.starts-with:x:@get-name\\n            .:legend\\n      .lambda\\n\\n         // Adding primary node for bar.\\n         set-name:x:+/*/*\\n            get-value:x:@get-name\\n         add:x:@.bars\\n            .\\n               .\\n\\n         // Adding values for individual cells.\\n         add:x:@.bars/0/-\\n            strings.split:x:@.dp/#\\n               .:,\\n\\n// Creating our legend.\\nadd:x:../*/image.chart/*/legend\\n   strings.split:x:@.arguments/*/legend\\n      .:,\\n\\n// Parametrizing [image.chart] invocation.\\nadd:x:../*/image.chart/*/bars\\n   get-nodes:x:@.bars/*\\nimage.chart:grouped\\n   width:800\\n   height:500\\n   bars\\n   legend\\n\\n// Applying correct HTTP header.\\nresponse.headers.set\\n   Content-Type:image/png\\n\\n// Returning chart to caller.\\nreturn:x:@image.chart\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns the company with the specified org. number.\\n\\nThis function will return company information such as the address, founding date, status, activity description, etc."},{"role":"assistant","content":".arguments\\n   org_number:string\\n.type:public\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/org_number\\nset-value:x:@.arguments/*/org_number\\n   strings.replace-not-of:x:@.arguments/*/org_number\\n      .:0123456789\\n      .:\\nvalidators.string:x:@.arguments/*/org_number\\n   min:10\\n   max:10\\n\\n// Connecting to database.\\ndata.connect:[finovo|finovo]\\n   database-type:pgsql\\n\\n   // Retrieving items.\\n   data.read\\n      database-type:pgsql\\n      table:basic\\n      columns\\n         org_number\\n         complete_ef_pnr\\n         company_name\\n         post_co_street\\n         post_street\\n         post_zipcode\\n         post_town\\n         post_community_code\\n         post_community_name\\n         post_region_code\\n         post_region_name\\n         registered_co_street\\n         registered_street\\n         registered_zipcode\\n         registered_town\\n         registered_community_code\\n         registered_community_name\\n         registered_region_code\\n         registered_region_name\\n         visiting_street\\n         visiting_zipcode\\n         visiting_town\\n         visiting_community_code\\n         visiting_community_name\\n         visiting_region_code\\n         visiting_region_name\\n         phone_number\\n         fax_number\\n         status_date\\n         status_code\\n         status_text_high\\n         status_text_detailed\\n         orgnr_status_affected\\n         company_formed_date\\n         registration_date\\n         deregistration_date\\n         legalgroup_code\\n         legalgroup_text\\n         f_tax_reg\\n         f_tax_yes_no\\n         f_tax_reg_spec\\n         f_tax_start_date\\n         f_tax_end_date\\n         f_tax_dereg_reason_code\\n         moms_reg\\n         moms_yes_no\\n         moms_start_date\\n         moms_end_date\\n         sni_code\\n         sni_text\\n         accountant_reservation\\n         date_accountant_reservation\\n         number_of_units\\n         top_director_name\\n         top_director_function\\n         turnover_interval\\n         nbr_employees_interval\\n      where\\n         and\\n            legalgroup_code.eq:AB\\n            org_number.eq:x:@.arguments/*/org_number\\n\\n   // Checking if we've got data.\\n   if\\n      not-exists:x:@data.read/*\\n      .lambda\\n         return\\n            result:No results were found\\n\\n   // Making sure we return basic company information.\\n   add:x:../*/return-nodes/*/basic\\n      get-nodes:x:@data.read/*\\n\\n   // Retrieving items.\\n   data.read\\n      database-type:pgsql\\n      table:activity_text\\n      columns\\n         sequence\\n         activity_text\\n      where\\n         and\\n            org_number.eq:x:@.arguments/*/org_number\\n\\n   // Making sure we return activity_text information, but only if existing\\n   if\\n      exists:x:@data.read/*\\n      .lambda\\n\\n         // Making sure we return activity_text information.\\n         add:x:+/*/*\\n            get-nodes:x:@data.read/*\\n         add:x:../*/return-nodes\\n            .\\n               activity_text\\n\\n   // Retrieving items.\\n   data.read\\n      database-type:pgsql\\n      table:accountant_comments\\n      columns\\n         account_period_start\\n         account_period_end\\n         account_not_approved_code\\n         accountant_comment_code\\n         accountant_comment_text\\n         other_accountant_comment\\n      where\\n         and\\n            accountant_comment_text.neq:\\n            accountant_comment_text.neq\\n            org_number.eq:x:@.arguments/*/org_number\\n\\n   // Making sure we return accountant_comments information, but only if existing\\n   if\\n      exists:x:@data.read/*\\n      .lambda\\n\\n         // Making sure we return accountant_comments information.\\n         add:x:+/*/*\\n            get-nodes:x:@data.read/*\\n         add:x:../*/return-nodes\\n            .\\n               accountant_comment\\n\\n   // Retrieving items.\\n   data.read\\n      database-type:pgsql\\n      table:company_sign\\n      columns\\n         company_sign_text\\n      where\\n         and\\n            org_number.eq:x:@.arguments/*/org_number\\n      order:sequence\\n\\n   // Making sure we return company_sign information, but only if existing\\n   if\\n      exists:x:@data.read/*\\n      .lambda\\n\\n         // Making sure we return company_sign information.\\n         add:x:+/*/*\\n            get-nodes:x:@data.read/*\\n         add:x:../*/return-nodes\\n            .\\n               company_sign\\n\\n   // Retrieving items.\\n   data.read\\n      database-type:pgsql\\n      table:group_structure\\n      columns\\n         company_name\\n         company_country_code\\n         company_country_name\\n         owned_percent\\n         company_level\\n         closest_group_mother_orgnumber\\n         group_mother_orgnumber\\n         date_last_group_struct_update\\n      where\\n         and\\n            org_number.eq:x:@.arguments/*/org_number\\n\\n   // Making sure we return company_sign information, but only if existing\\n   if\\n      exists:x:@data.read/*\\n      .lambda\\n\\n         // Making sure we return company_sign information.\\n         add:x:+/*/*\\n            get-nodes:x:@data.read/*\\n         add:x:../*/return-nodes\\n            .\\n               group_structure\\n\\n   // Figuring out who is the actual owner of the company\\n   execute:finovo.get-actual-owner\\n      org_number:x:@.arguments/*/org_number\\n   if\\n      exists:x:@execute/*\\n      .lambda\\n\\n         // We have an actual owner of the company.\\n         add:x:../*/return-nodes\\n            .\\n               actual_owners\\n         for-each:x:@execute/*\\n            unwrap:x:+/*/*/*\\n            add:x:../*/return-nodes/*/actual_owners\\n               .\\n                  .\\n                     name:x:@.dp/#/*/name\\n                     ownership:x:@.dp/#/*/ownership\\n                     control_text:x:@.dp/#/*/control_text\\n                     director_id:x:@.dp/#/*/director_id\\nreturn-nodes\\n   basic\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Deletes the specified cloudlet"},{"role":"assistant","content":".arguments\\n   cloudlet_name:string\\n\\n/*\\n * Ensures the specified [arg] was given.\\n * \\n * This action will throw an exception with a descriptive text explaining if the argument is missing.\\n */\\nexecute:magic.workflows.actions.execute\\n   name:validators-mandatory\\n   filename:/misc/workflows/actions/security/validators-mandatory.hl\\n   arguments\\n      arg:x:@.arguments/*/cloudlet_name\\n\\n/*\\n * Ensures user is authorized to access endpoint.\\n * \\n * If you don't supply a list of [roles] this action only verifies the user is authenticated,\\n * and does not care about what roles the user belongs to.\\n */\\nexecute:magic.workflows.actions.execute\\n   name:authorize\\n   filename:/misc/workflows/actions/security/authorize.hl\\n   arguments\\n      roles\\n         .:root\\n         .:gpt\\n\\n/*\\n * Returns the username of the currently authenticated user,\\n * or null if user isn't authenticated.\\n */\\nexecute:magic.workflows.actions.execute\\n   name:username-get\\n   filename:/misc/workflows/actions/security/username-get.hl\\n   arguments\\n\\n// Deletes the specified cloudlet\\nexecute:magic.workflows.actions.execute\\n   name:hub-cloudlets-delete\\n   filename:/modules/hub/workflows/actions/hub-cloudlets-delete.hl\\n   arguments\\n      cloudlet_name:x:@.arguments/*/cloudlet_name\\n      username:x:--/execute/=username-get/*/username\\n\\n// Returns the result of your last action.\\nreturn-nodes:x:@execute/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Scrapes the specified [url] and returns as context data to caller"},{"role":"assistant","content":".arguments\\n   url:string\\n\\n/*\\n * Ensures user is authorized to access endpoint.\\n * \\n * If you don't supply a list of [roles] this action only verifies the user is authenticated,\\n * and does not care about what roles the user belongs to.\\n */\\nexecute:magic.workflows.actions.execute\\n   name:authorize\\n   filename:/modules/auth/workflows/actions/authorize.hl\\n   arguments\\n      roles\\n         .:root\\n         .:gpt\\n\\n// Returns [max_tokens] context from the specified [url].\\nexecute:magic.workflows.actions.execute\\n   name:openai-context-from-url\\n   filename:/modules/openai/workflows/actions/openai-context-from-url.hl\\n   arguments\\n      url:x:@.arguments/*/url\\n      max_tokens:int:2000\\n\\n// Returns the result of your last action.\\nreturn-nodes:x:@execute/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns all cloudlets belonging to the currently authenticated user"},{"role":"assistant","content":".type:crud-read\\n\\n// Ensuring user is authorised to invoke endpoint.\\nauth.ticket.verify:root, guest, impersonated\\n\\n/*\\n * Retrieving currently authenticated user to prevent a user\\n * from retrieving cloudlets not belonging to him/her.\\n */\\nauth.ticket.get\\n\\n// Opening up our database connection.\\ndata.connect:[generic|hub]\\n\\n   // Reading data from database.\\n   data.read\\n      table:cloudlets\\n         join:plans\\n            type:inner\\n            on\\n               and\\n                  cloudlets.plan.eq:plans.name\\n         join:clusters\\n            type:inner\\n            on\\n               and\\n                  cloudlets.cluster.eq:clusters.id\\n      columns\\n         cloudlets.id\\n         cloudlets.created\\n         cloudlets.name\\n         cloudlets.plan\\n         cloudlets.cluster\\n         cloudlets.destruction_date\\n         cloudlets.enabled\\n         cloudlets.source_cloudlet\\n         plans.price\\n         plans.storage\\n         plans.cpu\\n         plans.memory\\n         plans.frontend\\n         plans.max_upload\\n         plans.bandwidth\\n         plans.max_timeout\\n         clusters.country\\n         clusters.name\\n            as:node_name\\n         plans.description\\n      where\\n         and\\n            user.eq:x:@auth.ticket.get\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Deletes a cloudlet belonging to the currently authenticated user"},{"role":"assistant","content":".arguments\\n   id:long\\n.type:crud-delete\\n\\n// Ensuring user is authorised to invoke endpoint.\\nauth.ticket.verify:root, admin, account_manager\\n\\n// Sanity checking invocation\\nvalidators.mandatory:x:@.arguments/*/id\\n\\n// Retrieving name of cloudlet.\\n.name\\n.username\\n.cluster\\ndata.connect:[generic|hub]\\n   data.read\\n      table:cloudlets\\n      columns\\n         name\\n         user\\n         cluster\\n      where\\n         and\\n            id.eq:x:@.arguments/*/id\\n\\n   // Making sure cloudlet exists\\n   if\\n      not-exists:x:@data.read/*\\n      .lambda\\n         throw:Cloudlet does not exist\\n            public:true\\n            status:404\\n\\n   // Setting temporary values.\\n   set-value:x:@.name\\n      get-value:x:@data.read/*/*/name\\n   set-value:x:@.username\\n      get-value:x:@data.read/*/*/user\\n   set-value:x:@.cluster\\n      get-value:x:@data.read/*/*/cluster\\n\\n/*\\n * Checking if there exists a subscription for cloudlet,\\n * at which point we forward deletion to stripe module since the Stripe\\n * module will delete the cloudlet automatically through its callback sinks.\\n */\\ndata.connect:[generic|stripe]\\n\\n   // Checking if we can find subscription for cloudlet.\\n   data.read\\n      table:subscriptions\\n      values\\n         subscription\\n      where\\n         and\\n            username.eq:x:@.username\\n            meta.eq:x:@.name\\n\\n   // Checking if subscription exists for cloudlet.\\n   if\\n      exists:x:@data.read/*/*\\n      .lambda\\n\\n         /*\\n          * Deleting subscription information associated with cloudlet.\\n          * Due to the way the Stripe module and HUB is connected, this will invoke\\n          * Stripe callback sink, deleting the cloudlet after the subscription is deleted.\\n          */\\n         unwrap:x:+/*\\n         io.file.execute:/modules/stripe/admin/subscriptions.delete.hl\\n            subscription:x:@data.read/*/*/subscription\\n            username:x:../*/.username\\n\\n         // Returning success to caller\\n         return\\n            affected:int:1\\n            subscriptions_deleted:int:1\\n   else\\n\\n      // No Stripe subscription associated with cloudlet, hence manually deleting it.\\n      .name\\n      set-value:x:@.name\\n         strings.concat\\n            get-value:x:../*/.name\\n            .:-\\n            get-value:x:@.username\\n      unwrap:x:+/*\\n      signal:hub.cloudlets.hard-delete\\n         cluster:x:@.cluster\\n         name:x:@.name\\n\\n      /*\\n       * Checking if there exists scheduled tasks associated with the cloudlet,\\n       * and if so deleting all tasks associated with cloudlet.\\n       */\\n      strings.concat\\n         .:cloudlet-\\n         get-value:x:@.name\\n         .:-%\\n      tasks.list:x:@strings.concat\\n         limit:1000\\n      for-each:x:@tasks.list/*\\n         tasks.delete:x:@.dp/#/*/id\\n\\n      // Doing some basic logging.\\n      get-count:x:@tasks.list/*\\n      log.debug:Tasks associated with cloudlet has been deleted\\n         name:x:@.name\\n         user:x:@.username\\n         no_tasks:x:@get-count\\n\\n      // Deleting item from database.\\n      data.connect:[generic|hub]\\n         data.delete\\n            table:cloudlets\\n            where\\n               and\\n                  name.eq:x:../*/.name\\n                  user.eq:x:@.username\\n\\n         // Doing some basic logging\\n         log.info:Cloudlet successfully destroyed\\n            name:x:../*/.name\\n            user:x:@.username\\n\\n         // Returning result of above invocation to caller.\\n         unwrap:x:+/*\\n         return\\n            affected:x:@data.delete\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Template for HTTP PUT CRUD requests.\\nThis file was automatically generated using Magic's CRUDifier."},{"role":"assistant","content":".arguments\\n   id:string\\n   country:string\\n   name:string\\n   enabled:bool\\n.type:crud-update\\n\\n// Verifying user is authorized to access endpoint.\\nvalidators.mandatory:x:@.arguments/*/id\\nauth.ticket.verify:root\\n\\n// Opening up our database connection.\\ndata.connect:[generic|hub]\\n   add:x:./*/data.update/*/where/*/and\\n      get-nodes:x:@.arguments/*/[0,1]\\n   add:x:./*/data.update/*/values\\n      get-nodes:x:@.arguments/*/[1,1000]\\n\\n   // Invoking our update slot.\\n   data.update\\n      table:clusters\\n      values\\n      where\\n         and\\n\\n   // Verifying record exists.\\n   if\\n      eq\\n         get-value:x:@data.update\\n         .:int:0\\n      .lambda\\n         response.status.set:404\\n         return\\n            result:Record not found\\n\\n   // Returning success to caller.\\n   response.status.set:202\\n   unwrap:x:+/*\\n   return\\n      affected:x:@data.update\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns a single plan"},{"role":"assistant","content":".arguments\\n   plan\\n      type:string\\n      mandatory:bool:true\\n\\n// Returns all plans in the system.\\ndata.connect:[generic|hub]\\n   data.read\\n      table:plans\\n      columns\\n         name\\n         description\\n         cpu\\n         memory\\n         storage\\n         price\\n         price_reference\\n      where\\n         and\\n            name.eq:x:@.arguments/*/plan\\n\\n   // Returning result of above invocation to caller.\\n   yield\\n      name:x:@data.read/*/*/name\\n      description:x:@data.read/*/*/description\\n      cpu:x:@data.read/*/*/cpu\\n      memory:x:@data.read/*/*/memory\\n      storage:x:@data.read/*/*/storage\\n      price:x:@data.read/*/*/price\\n      price_reference:x:@data.read/*/*/price_reference\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Enables a cloudlet when a subscription payment has gone through."},{"role":"assistant","content":"slots.create:payments.subscriptions.subscribed.cloudlets.enable\\n\\n   // Checking if invocation is for us.\\n   if\\n      neq:x:@.arguments/*/type\\n         .:subscription\\n      .lambda\\n\\n         // Not our guy.\\n         return:bool:false\\n\\n   // Sanity checking invocation.\\n   validators.mandatory:x:@.arguments/*/meta\\n   validators.mandatory:x:@.arguments/*/username\\n   validators.mandatory:x:@.arguments/*/price\\n\\n   // Cloudlet name.\\n   .cloudlet:x:@.arguments/*/meta\\n   unwrap:x:-\\n\\n   // Connecting to hub database to retrieve cluster and plan.\\n   .cluster\\n   .plan\\n   data.connect:[generic|hub]\\n\\n      // Figuring out cluster from cloudlet+username.\\n      data.read\\n         table:cloudlets\\n         values\\n            cluster\\n         where\\n            and\\n               user.eq:x:@.arguments/*/username\\n               name.eq:x:@.cloudlet\\n      if\\n         not-exists:x:@data.read/*/*\\n         .lambda\\n\\n            // Oops ...!!\\n            log.error:No such cloudlet\\n            throw:Cloudlet not found\\n               public:true\\n               status:400\\n\\n      // Updating cluster.\\n      set-value:x:@.cluster\\n         get-value:x:@data.read/*/*/cluster\\n\\n      // Figuring out plan from specified [price].\\n      data.read\\n         datbase-type:mysql\\n         table:plans\\n         values\\n            name\\n         where\\n            or\\n               price_reference.eq:x:@.arguments/*/price\\n               yearly_price_reference.eq:x:@.arguments/*/price\\n\\n      // Updating plan.\\n      set-value:x:@.plan\\n         get-value:x:@data.read/*/*/name\\n\\n      /*\\n       * Removing scheduled tasks that soft deletes cloudlet once trial period\\n       * is over if existing.\\n       */\\n      strings.concat\\n         .:cloudlet-\\n         get-value:x:@.cloudlet\\n         .:-\\n         get-value:x:@.arguments/*/username\\n         .:-delete\\n      tasks.list:x:-\\n      if\\n         exists:x:@tasks.list/0/*/id\\n         .lambda\\n            tasks.delete:x:@tasks.list/0/*/id\\n            log.info:Task to automatically soft delete cloudlet was deleted\\n               task-name:x:@strings.concat\\n               cloudlet:x:@.cloudlet\\n               username:x:@.arguments/*/username\\n               cluster:x:@.cluster\\n      else\\n         log.error:Could not find task to delete\\n            task-name:x:@strings.concat\\n      strings.concat\\n         .:cloudlet-\\n         get-value:x:@.cloudlet\\n         .:-\\n         get-value:x:@.arguments/*/username\\n         .:-hard-delete\\n      tasks.list:x:-\\n      if\\n         exists:x:@tasks.list/0/*/id\\n         .lambda\\n            tasks.delete:x:@tasks.list/0/*/id\\n            log.info:Task to automatically hard delete cloudlet was deleted\\n               task-name:x:@strings.concat\\n               cloudlet:x:@.cloudlet\\n               username:x:@.arguments/*/username\\n               cluster:x:@.cluster\\n      else\\n         log.error:Could not find task to delete\\n            task-name:x:@strings.concat\\n      strings.concat\\n         .:cloudlet-\\n         get-value:x:@.cloudlet\\n         .:-\\n         get-value:x:@.arguments/*/username\\n         .:-warn-about-destruction\\n      tasks.list:x:-\\n      if\\n         exists:x:@tasks.list/0/*/id\\n         .lambda\\n            tasks.delete:x:@tasks.list/0/*/id\\n            log.info:Task to automatically warn user was deleted\\n               task-name:x:@strings.concat\\n               cloudlet:x:@.cloudlet\\n               username:x:@.arguments/*/username\\n               cluster:x:@.cluster\\n      else\\n         log.error:Could not find task to delete\\n            task-name:x:@strings.concat\\n\\n      /*\\n       * Updating the cloudlet type to correct type, such that the\\n       * user can see in his dashboard that the cloudlet is no longer a trial cloudlet.\\n       */\\n      data.update\\n         table:cloudlets\\n         values\\n            plan:x:@.plan\\n            enabled:bool:true\\n            destruction_date\\n         where\\n            and\\n               name.eq:x:@.cloudlet\\n               cluster.eq:x:@.cluster\\n               user.eq:x:@.arguments/*/username\\n\\n   // Returning true to indicate we handled the callback.\\n   return:bool:true\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns balance information for affiliate."},{"role":"assistant","content":".arguments\\n.type:custom\\n\\n// Making sure user is authorised to invoke endpoint.\\nauth.ticket.verify:root, admin, guest\\nconfig.get:\"magic:databases:default\"\\nswitch:x:@config.get\\n   case:mysql\\n   case:sqlite\\n      strings.concat\\n         .:/modules/hub/affiliates/db.overrides/\\n         get-value:x:@config.get\\n         .:.affiliate-balance.get.hl\\n      add:x:+\\n         get-nodes:x:@.arguments/*\\n      io.file.execute:x:@strings.concat\\n      return-nodes:x:-/*\\n   default\\n      throw:Unsupport database type for Hub\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Special implementation for MySQL."},{"role":"assistant","content":"\\n// Needed to parametrise invocations towards database.\\nauth.ticket.get\\n\\n// Used to store commision percent for affiliate.\\n.percent\\n\\n// Ensuring user is an affiliate\\ndata.connect:[generic|magic]\\n\\n   /*\\n    * Retrieving affiliate percent for user.\\n    * Notice, if user doesn't have an affiliate percent, user ir\\n    * not an affiliate.\\n    */\\n   data.read\\n      table:users_extra\\n      columns\\n         value\\n      where\\n         and\\n            type.eq:affiliate_percent\\n            user.eq:x:@auth.ticket.get\\n   if\\n      not-exists:x:@data.read/*/*/value\\n      .lambda\\n\\n         // Oops ...!!\\n         log.error:User is not affiliate\\n            username:x:@auth.ticket.get\\n         throw:You are not an affiliate\\n            public:true\\n            status:400\\n\\n   // Retrieving transactions from database.\\n   data.select:\"\\nselect date_format(u.created, '%Y-%m-%d') as date, count(*) as users\\n   from users u\\n      inner join users_extra ue on u.username = ue.user and ue.type = 'affiliate'\\n      where u.created > now() - interval 6 week and ue.value = @affiliate\\n   group by date\\n   order by date asc\"\\n      @affiliate:x:@auth.ticket.get\\n\\n   // Looping through all days the last 6 weeks.\\n   .buffer\\n   .cur\\n   set-value:x:@.cur\\n      math.subtract\\n         date.now\\n         time\\n            days:42\\n   while\\n      lt:x:@.cur\\n         date.now\\n      .lambda\\n         date.format:x:@.cur\\n            format:yyyy-MM-dd\\n         if\\n            exists:x:@data.select/*/*/date/={@date.format}\\n            .lambda\\n               get-nodes:x:@data.select/*/*/date/={@date.format}/.\\n               add:x:@.buffer\\n                  get-nodes:x:@data.select/*/*/date/={@date.format}/.\\n         else\\n            unwrap:x:+/*/*/*\\n            add:x:@.buffer\\n               .\\n                  .\\n                     date:x:@date.format\\n                     users:int:0\\n\\n         // Decrementing current day.\\n         set-value:x:@.cur\\n            math.add:x:@.cur\\n               time\\n                  days:1\\n\\n   // Applying some HTTP caching since endpoint is kind of expensive to invoke.\\n   response.headers.set\\n      Cache-Control:private, max-age=3600\\n\\n   // Returning result to caller.\\n   return-nodes:x:@.buffer/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Creates a contact in HubSpot\\n\\nThis workflow will create a new contact in your HubSpot account.\\n[email] is mandatory, but all other arguments are optional."},{"role":"assistant","content":".arguments\\n   email:string\\n   first_name:string\\n   last_name:string\\n   phone:string\\n   company:string\\n   website:string\\n   lifecyclestage:string\\n.type:public\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/email\\n\\n// Forwarding request to our HTTP POST Hyperlambda file.\\nadd:x:./*/execute-file\\n   get-nodes:x:@.arguments/*\\nexecute-file:/modules/hubspot/contacts.post.hl\\n\\n// Returning whatever above invocation returned.\\nadd:x:./*/return\\n   get-nodes:x:@execute-file/*\\nreturn\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Executes the specified SuiteQL query towards your NetSuite account.\\n\\nThe [q] argument is mandatory and declares the query you want to execute towards NetSuite."},{"role":"assistant","content":".arguments\\n\\n   // Mandatory argument being your NetSuite query to execute.\\n   q:string\\n.type:public\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/q\\n\\n/*\\n * Returns an access token for NetSuite.\\n * \\n * Returns a JWT token that can be used to invoke NetSuite according to your configuration settings.\\n * Notice, this will read account-id, certificate-id, and consumer-key from your configuration settings,\\n * in addition to assume your private key exists in the file '/etc/netsuite/private-key.txt'.\\n */\\nexecute:magic.workflows.actions.execute\\n   name:netsuite-get-access-token\\n   filename:/modules/netsuite/workflows/actions/netsuite-get-access-token.hl\\n   arguments\\n\\n// Creating our idempotency key to prevent replay attacks.\\nguid.new\\n\\n// Creating invocation URL.\\n.url\\nset-value:x:@.url\\n   strings.concat\\n      .:\"https://\"\\n      config.get:\"magic:netsuite:account-id\"\\n      .:.suitetalk.api.netsuite.com/services/rest/query/v1/suiteql\\n\\n// Parametrizing our payload.\\nadd:x:./*/http.post/*/payload\\n   get-nodes:x:@.arguments/*/q\\n\\n// Invoking our HTTP GET endpoint, now correctly parametrised.\\nhttp.post:x:@.url\\n   token:x:--/execute/=netsuite-get-access-token/*/access-token\\n   headers\\n      Prefer:transient\\n      X-NetSuite-Idempotency-Key:x:@guid.new\\n   payload\\n\\n// Converts the result to a lambda object.\\njson2lambda:x:@http.post/*/content\\n\\n// Sanity checking above invocation.\\nif\\n   not\\n      and\\n         mte:x:@http.post\\n            .:int:200\\n         lt:x:@http.post\\n            .:int:300\\n   .lambda\\n\\n      // Oops, error ...!!\\n      lambda2hyper:x:@json2lambda\\n      log.error:x:@lambda2hyper\\n      throw:Could not create entity in NetSuite, check your log for details.\\n\\n// Cleaning up redundant stuff.\\nremove-nodes:x:@json2lambda/*/items/*/*/links\\n\\n// Returning entities to caller.\\nyield\\n   items:x:@json2lambda/*/items/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns Swagger and OpenAPI specifications for the specified [type].\\n\\nThe [type] agrument is mandatory and declares what type of object you want the OpenAPI specification for."},{"role":"assistant","content":".arguments\\n\\n   // Mandatory argument declaring the type of object to retrieve OpenAPI specification for.\\n   type:string\\n\\n// Ensuring user is authorized to invoking endpoint.\\nauth.ticket.verify:netsuite\\n\\n// Forwarding heavy lifting to workflow file.\\nadd:x:./*/execute-file\\n   get-nodes:x:@.arguments/*\\nexecute-file:/modules/netsuite/workflows/workflows/netsuite-openapi-spec.hl\\n\\n// Returning result to caller.\\nreturn-nodes:x:@execute-file/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Creates a new training snippet from the specified [url]\\n\\nThis function will scrape the specified URL and create new training snippets from the content found during scraping.\\nTraining snippets created with this function will become a part of your RAG / VSS database allowing the AI to use these as context data when answering questions later, arguably creating long term memory for the AI based upon content taken from a URL."},{"role":"assistant","content":".arguments\\n   _type:string\\n\\n   // Mandatory and is the URL from where to scrape training data from\\n   url:string\\n.type:public\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/_type\\nvalidators.mandatory:x:@.arguments/*/url\\nexecute:magic.ai.url.scrape\\n   url:x:@.arguments/*/url\\n   type:x:@.arguments/*/_type\\n   threshold:int:150\\n   summarize:bool:true\\n   lists:bool:false\\n   images:bool:true\\n   code:bool:false\\n\\n// Re-vectorising the type.\\nexecute:magic.ai.vectorise\\n   type:x:@.arguments/*/_type\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Searches through your training data for records matching a filtering condition\\n\\nThis function will perform an SQL LIKE type of select SQL into your training data database, and return a maximum of [max_tokens] training data context back to caller to use as context data for the AI."},{"role":"assistant","content":".arguments\\n   _type:string\\n\\n   // Mandatory argument and becomes an SQL LIKE type of condition snippets must match to be considered.\\n   query:string\\n\\n   // Maximum number of tokens to return.\\n   max_tokens:int\\n.type:public\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/_type\\nvalidators.mandatory:x:@.arguments/*/query\\n\\n// Applying defaults.\\nvalidators.default:x:@.arguments\\n   max_tokens:int:4000\\n\\n// Opening up our database connection.\\ndata.connect:[generic|magic]\\n\\n   // Creating our filter string\\n   .filter\\n   set-value:x:@.filter\\n      strings.concat\\n         .:%\\n         get-value:x:@.arguments/*/query\\n         .:%\\n   data.read\\n      table:ml_training_snippets\\n      columns\\n         id\\n         prompt\\n         completion\\n         uri\\n      where\\n         or\\n            prompt.like:x:@.filter\\n            completion.like:x:@.filter\\n   .cont:bool:true\\n   while:x:@.cont\\n      lambda2hyper:x:@data.read/*\\n      if\\n         lt\\n            openai.tokenize:x:@lambda2hyper\\n            convert:x:@.arguments/*/max_tokens\\n               type:int\\n         .lambda\\n            set-value:x:@.cont\\n               .:bool:false\\n      else\\n         remove-nodes:x:@data.read/0/-\\n   return-nodes:x:@data.read/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns context for the specified [query] from the specified [type],\\nand returns to caller.\\n\\nOptionally add [threshold] and [max_tokens] to specify similarity and maximum\\ntokens to return. [type] is a machine learning type from your ml_types database table in\\nyour magic database."},{"role":"assistant","content":".arguments\\n   type\\n      type:string\\n      mandatory:bool:true\\n   query\\n      type:string\\n      mandatory:bool:true\\n   threshold\\n      type:decimal\\n      mandatory:bool:false\\n   max_tokens\\n      type:int\\n      mandatory:bool:false\\n.icon:extension\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/type\\nvalidators.mandatory:x:@.arguments/*/query\\n\\n// Applying default values for optional arguments.\\nvalidators.default:x:@.arguments\\n   threshold:decimal:0.3\\n   max_tokens:int:4000\\n\\n// Converting to decimal to be sure.\\nset-value:x:@.arguments/*/threshold\\n   convert:x:@.arguments/*/threshold\\n      type:decimal\\n\\n// Converting to decimal to be sure.\\nset-value:x:@.arguments/*/max_tokens\\n   convert:x:@.arguments/*/max_tokens\\n      type:int\\n\\n// Retrieving context.\\nexecute:magic.ai.get-context\\n   type:x:@.arguments/*/type\\n   prompt:x:@.arguments/*/query\\n   threshold:x:@.arguments/*/threshold\\n   max_tokens:x:@.arguments/*/max_tokens\\n\\n// Returning result of invocation to caller.\\nyield\\n   context:x:@execute/*/context\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Vectorizing the specified [type].\\n\\nNotice, this action will take a lot of time, so it is being executed on a background thread,\\nimplying when it returns, it is highly unlikely finished with the vectorization process."},{"role":"assistant","content":".arguments\\n   type\\n      type:string\\n      mandatory:bool:true\\n.icon:chat_bubble\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/type\\n\\n// Vectorizing model.\\nunwrap:x:+/*/*\\nfork\\n   signal:magic.ai.vectorise\\n      type:x:@.arguments/*/type\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Read, list or find records from your accounts table"},{"role":"assistant","content":".arguments\\n\\n   // Number of records to return\\n   limit:long\\n\\n   // Offset into the dataset of where to start retrieving records\\n   offset:long\\n\\n   // Fully qualified name of column to order by, implying TABLE_NAME.COLUMN_NAME.\\n   order:string\\n\\n   // What direction to order, can be 'asc' or 'desc' implying ascending and descending\\n   direction:string\\n\\n   // accounts table account_id column equality exact match filtering\\n   accounts.account_id.eq:long\\n\\n   // accounts table status column equality exact match filtering\\n   accounts.status.eq:string\\n\\n   // accounts table name column wildcard filtering with SQL like '%' comparison\\n   accounts.name.like:string\\n\\n   // accounts table name column equality exact match filtering\\n   accounts.name.eq:string\\n\\n   // accounts table website column wildcard filtering with SQL like '%' comparison\\n   accounts.website.like:string\\n\\n   // accounts table website column equality exact match filtering\\n   accounts.website.eq:string\\n\\n   // accounts table description column wildcard filtering with SQL like '%' comparison\\n   accounts.description.like:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-read\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Opening up our database connection.\\ndata.connect:[generic|robo-crm]\\n   database-type:sqlite\\n\\n   // Parametrising our read invocation with ordering arguments if specified.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/order\\n      get-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/order\\n   remove-nodes:x:@.arguments/*/direction\\n\\n   // Parametrising our read invocation with paging arguments if specified.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n   remove-nodes:x:@.arguments/*/limit\\n   remove-nodes:x:@.arguments/*/offset\\n\\n   // Parametrising our read invocation with filtering arguments.\\n   add:x:./*/data.read/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:accounts\\n      columns\\n         accounts.account_id\\n         accounts.status\\n         accounts.created\\n         accounts.name\\n         accounts.website\\n         accounts.description\\n      where\\n         and\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Read or list records from your status table"},{"role":"assistant","content":".arguments\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-read\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Opening up our database connection.\\ndata.connect:[generic|robo-crm]\\n   database-type:sqlite\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:status\\n      columns\\n         status.status\\n         status.description\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Runs during startup of Magic, and basically just ensures the module's database exists,\\nand is updated by running migration scripts after attempting to create the database.\\n\\nIf the database doesn't exist, this script will create it by executing the SQL in the file"},{"role":"assistant","content":"signal:magic.modules.ensure-database\\n   module:robo-crm\\n   database:robo-crm\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"KPI file for accounts that was created each day the last 14 days."},{"role":"assistant","content":".name:New accounts\\n.enabled:bool:false\\n.type:line\\n.lambda\\n   .now\\n   set-value:x:-\\n      math.subtract\\n         date.now\\n         time\\n            days:13\\n   data.connect:[generic|robo-crm]\\n      while\\n         lt:x:@.now\\n            date.now\\n         .lambda\\n            .max\\n            set-value:x:@.max\\n               math.add:x:@.now\\n                  time\\n                     days:1\\n            date.format:x:@.now\\n               format:yyyy-MM-dd\\n            date.format:x:@.max\\n               format:yyyy-MM-dd\\n            data.read\\n               table:accounts\\n               columns\\n                  count(*)\\n                     as:name\\n               where\\n                  and\\n                     created.mt:x:@date.format/@date.format\\n                     created.lt:x:@date.format\\n            unwrap:x:+/*/*/*\\n            add:x:../*/return\\n               .\\n                  .\\n                     name:x:@date.format/@date.format\\n                     value:x:@data.read/*/*\\n            set-value:x:@.now\\n               math.add:x:@.now\\n                  time\\n                     days:1\\n   return\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Counts items from your crawl_urls table in your scraper database"},{"role":"assistant","content":".arguments\\n\\n   // crawl_urls table crawl_url_id column equality exact match filtering\\n   crawl_urls.crawl_url_id.eq:long\\n\\n   // crawl_urls table url column wildcard filtering with SQL like '%' comparison\\n   crawl_urls.url.like:string\\n\\n   // crawl_urls table url column equality exact match filtering\\n   crawl_urls.url.eq:string\\n\\n   // crawl_urls table type column wildcard filtering with SQL like '%' comparison\\n   crawl_urls.type.like:string\\n\\n   // crawl_urls table type column equality exact match filtering\\n   crawl_urls.type.eq:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-count\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Opening up our database connection.\\ndata.connect:[generic|scraper]\\n   database-type:sqlite\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:crawl_urls\\n      columns\\n         count(*)\\n            as:count\\n      where\\n         and\\n      limit:long:1\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create endpoint inserting one record into your spice_urls table in your scraper database taking url, type with authentication and authorisation for root,admin roles"},{"role":"assistant","content":".arguments\\n\\n   // url column value\\n   url:string\\n\\n   // type column value\\n   type:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-create\\n\\n// Columns with custom handling as we generate a frontend\\n.handling\\n   url:url\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Opening up database connection.\\ndata.connect:[generic|scraper]\\n   database-type:sqlite\\n\\n   // Parametrising our create invocation.\\n   add:x:./*/data.create/*/values\\n      get-nodes:x:@.arguments/*\\n\\n   // Creating our record.\\n   data.create\\n      database-type:sqlite\\n      table:spice_urls\\n      return-id:bool:true\\n      values\\n\\n   // Returning the correct status code.\\n   response.status.set:201\\n\\n   // Returning result of above invocation to caller.\\n   unwrap:x:+/*\\n   return\\n      id:x:@data.create\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Search for anything using Google.\\n\\nThis function allows users to search for anything using Google."},{"role":"assistant","content":".arguments\\n\\n   // Mandatory query to search for.\\n   query:string\\n\\n   // Optional parameter filtering result by country. If specified must be a two letter country code such as US or NO.\\n   gl:string\\n.type:public\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/query\\n\\n// Retrieving SERP API's API key and making sure we've got one.\\n.api-key\\nset-value:x:@.api-key\\n   config.get:\"magic:serp-api:api_key\"\\nif\\n   or\\n      null:x:@.api-key\\n      eq:x:@.api-key\\n         .:\\n   .lambda\\n\\n      // Oops ...!!\\n      throw:Could not find a SERP API key to use for fetching hotels.\\n\\n// Creating our URL.\\n.url\\nset-value:x:@.url\\n   strings.concat\\n      .:\"https://serpapi.com/search.json?engine=google&api_key=\"\\n      get-value:x:@.api-key\\n      .:&q=\\n      strings.url-encode:x:@.arguments/*/query\\n\\n// Checking if we've got a country argument.\\nif\\n   and\\n      exists:x:@.arguments/*/gl\\n      not-null:x:@.arguments/*/gl\\n      neq:x:@.arguments/*/gl\\n         .:\\n   .lambda\\n\\n      // Concatenating country to URL.\\n      set-value:x:@.url\\n         strings.concat\\n            get-value:x:@.url\\n            .:&gl=\\n            strings.url-encode:x:@.arguments/*/gl\\n\\n// Retrieving result.\\nhttp.get:x:@.url\\n   convert:true\\n\\n// Sanity checking result of above invocation.\\nif\\n   not\\n      and\\n         mte:x:@http.get\\n            .:int:200\\n         lt:x:@http.get\\n            .:int:300\\n   .lambda\\n\\n      // Oops ...!!\\n      lambda2hyper:x:../*\\n      log.info:x:-\\n      throw:Something went wrong while invoking SERP API\\n\\n// Iterating through result, making sure we return the result to caller.\\nfor-each:x:@http.get/*/content/*/organic_results/*\\n   unwrap:x:+/*/*/*\\n   add:x:../*/return-nodes/*/result\\n      .\\n         .\\n            title:x:@.dp/#/*/title\\n            link:x:@.dp/#/*/link\\n            snippet:x:@.dp/#/*/snippet\\n            source:x:@.dp/#/*/source\\n\\n// Returning result to caller.\\nunwrap:x:+/*\\nreturn-nodes\\n   result\\n   total_matches:x:@http.get/*/content/*/search_information/*/total_results\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Runs during startup of Magic, and basically just ensures the module's database exists,\\nand is updated by running migration scripts after attempting to create the database.\\n\\nIf the database doesn't exist, this script will create it by executing the SQL in the file"},{"role":"assistant","content":"signal:magic.modules.ensure-database\\n   module:shopify\\n   database:shopify\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Counts items from your products table in your shopping-cart-demo database"},{"role":"assistant","content":".arguments\\n\\n   // products table product_id column equality exact match filtering\\n   products.product_id.eq:long\\n\\n   // products table name column wildcard filtering with SQL like '%' comparison\\n   products.name.like:string\\n\\n   // products table name column equality exact match filtering\\n   products.name.eq:string\\n\\n   // products table description column wildcard filtering with SQL like '%' comparison\\n   products.description.like:string\\n\\n   // products table description column equality exact match filtering\\n   products.description.eq:string\\n\\n   // products table sku column wildcard filtering with SQL like '%' comparison\\n   products.sku.like:string\\n\\n   // products table sku column equality exact match filtering\\n   products.sku.eq:string\\n\\n   // products table price column equality exact match filtering\\n   products.price.eq:decimal\\n\\n   // products table image_url column wildcard filtering with SQL like '%' comparison\\n   products.image_url.like:string\\n\\n   // products table image_url column equality exact match filtering\\n   products.image_url.eq:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-count\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Opening up our database connection.\\ndata.connect:[generic|shopping-cart-demo]\\n   database-type:sqlite\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:products\\n      columns\\n         count(*)\\n            as:count\\n      where\\n         and\\n      limit:long:1\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Lists all available products\\n\\nReturns all products that user can purchase in shop"},{"role":"assistant","content":".arguments\\n.type:public\\n\\n/*\\n * Invokes the SQL CRUD Read slot with the specified parameters.\\n * \\n * Provide [connection-string], [database-type], [database], and [table] to inform the action of\\n * what database/table you want to execute your SQL towards, and add [and] or [or] arguments\\n * to filter your returns, in addition to [limit] and [offset] to apply paging. Use [order]\\n * and [direction] to sort either ascending or descending. Notice, you can only use one of [or]\\n * or [and], and not both.\\n */\\nexecute:magic.workflows.actions.execute\\n   name:sql-read\\n   filename:/misc/workflows/actions/sql/sql-read.hl\\n   arguments\\n      columns\\n         .:name\\n         .:description\\n         .:sku\\n         .:image_url\\n         .:price\\n      database:shopping-cart-demo\\n      table:products\\n\\n// Returns the result of your last action.\\nreturn-nodes:x:@execute/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Charge POST webhook helper action, allowing you to embed into a Stripe webhook,\\nto extract its most important information.\\n\\nDO NOT change the default expression for the [node_reference] argument since these\\nare arguments forwarded by Stripe the action depends upon to function.\\n\\nNotice, the [type] returned from this action will have one of these values.\\n\\n- charge.captured\\n- charge.expired\\n- charge.failed\\n- charge.pending\\n- charge.refunded\\n- charge.succeeded\\n- charge.updated\\n- charge.dispute.closed\\n- charge.dispute.created\\n- charge.dispute.funds_reinstated\\n- charge.dispute.funds_withdrawn\\n- charge.dispute.updated\\n- charge.refund.updated"},{"role":"assistant","content":".arguments\\n   node_reference\\n      type:string\\n      mandatory:bool:true\\n      default:\":x:@.arguments\"\\n.icon:payment\\n\\n// Converting amount to decimal and dividing by 100.\\nmath.divide\\n   convert:x:@.arguments/*/node_reference/#/*/data/*/object/*/amount\\n      type:decimal\\n   .:decimal:100\\n\\n// Returning result to caller.\\nyield\\n   customer_id:x:@.arguments/*/node_reference/#/*/data/*/object/*/customer\\n   amount:x:@math.divide\\n   currency:x:@.arguments/*/node_reference/#/*/data/*/object/*/currency\\n   receipt_url:x:@.arguments/*/node_reference/#/*/data/*/object/*/receipt_url\\n   type:x:@.arguments/*/node_reference/#/*/type\\n   metadata:x:@.arguments/*/node_reference/#/*/data/*/object/*/metadata/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Creates a new Stripe payment method with the given [card_no], [exp_month],\\n[exp_year] and [cvs] and attaches the payment metho to the specified\\n[customer_id] object.\\n\\nWill use your Stripe API token found from your settings as it's interacting\\nwith the Stripe API."},{"role":"assistant","content":".arguments\\n   customer_id\\n      type:string\\n      mandatory:bool:true\\n   card_no\\n      type:string\\n      mandatory:bool:true\\n   exp_year\\n      type:int\\n      mandatory:bool:true\\n   exp_month\\n      type:int\\n      mandatory:bool:true\\n   cvs\\n      type:int\\n      mandatory:bool:true\\n.icon:payment\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/customer_id\\nvalidators.mandatory:x:@.arguments/*/card_no\\nvalidators.mandatory:x:@.arguments/*/exp_month\\nvalidators.mandatory:x:@.arguments/*/exp_year\\nvalidators.mandatory:x:@.arguments/*/cvs\\n\\n// Retrieving token to use for invocations towards Stripe.\\n.token\\nset-value:x:-\\n   strings.concat\\n      .:\"Bearer \"\\n      config.get:\"magic:stripe:token\"\\n\\n// Invoking Stripe REST API.\\nhttp.post:\"https://api.stripe.com/v1/payment_methods\"\\n   headers\\n      Content-Type:application/x-www-form-urlencoded\\n      Authorization:x:@.token\\n   payload\\n      card[number]:x:@.arguments/*/card_no\\n      card[exp_month]:x:@.arguments/*/exp_month\\n      card[exp_year]:x:@.arguments/*/exp_year\\n      card[cvc]:x:@.arguments/*/cvs\\n      type:card\\n   convert:true\\n\\n// Sanity checking above invocation.\\nif\\n   mte\\n      get-value:x:@http.post\\n      .:int:400\\n   .lambda\\n\\n      // Oops, something went wrong ...!!\\n      lambda2hyper:x:@http.post\\n      log.error:Something went wrong while invoking Stripe, could not create payment method\\n         result:x:@lambda2hyper\\n         provider:Stripe\\n      throw:Something went wrong while invoking Stripe, could not create payment method\\n         public:true\\n         status:500\\n\\n// Attaching payment method to customer.\\nstrings.concat\\n   .:\"https://api.stripe.com/v1/payment_methods/\"\\n   get-value:x:@http.post/*/content/*/id\\n   .:/attach\\nhttp.post:x:@strings.concat\\n   headers\\n      Content-Type:application/x-www-form-urlencoded\\n      Authorization:x:@.token\\n   payload\\n      customer:x:@.arguments/*/customer_id\\n   convert:true\\n\\n// Sanity checking above invocation.\\nif\\n   mte\\n      get-value:x:@http.post\\n      .:int:400\\n   .lambda\\n\\n      // Oops, something went wrong ...!!\\n      lambda2hyper:x:@http.post\\n      log.error:Something went wrong while invoking Stripe API, could not attach payment method to customer\\n         result:x:@lambda2hyper\\n         provider:Stripe\\n      throw:Something went wrong while invoking Stripe API, could not attach payment method to customer\\n         public:true\\n         status:500\\n\\n// Returning payment method information to caller.\\nyield\\n   payment_method_id:x:@http.post/@http.post/*/content/*/id\\n   payment_method_brand:x:@http.post/@http.post/*/content/*/card/*/brand\\n   last4:x:@http.post/@http.post/*/content/*/card/*/last4\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Imports pages, and optionally blogs from a WordPress account using the WP API.\\n\\nWill use WordPress REST API to retrieve pages, and optionally blogs, and ingest\\nas training snippets into the specified [type].\\n\\n[vectorize] and [blogs] are false by default unless explicitly specified.\\nAll other arguments are mandatory."},{"role":"assistant","content":".arguments\\n   url:string\\n   type:string\\n   username:string\\n   password:string\\n   vectorize:bool\\n   blogs:bool\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/url\\nvalidators.mandatory:x:@.arguments/*/type\\nvalidators.mandatory:x:@.arguments/*/username\\nvalidators.mandatory:x:@.arguments/*/password\\n\\n// Defaulting vectorize.\\nvalidators.default:x:@.arguments\\n   vectorize:bool:false\\n   blogs:bool:false\\n\\n// Normalizing URL.\\nset-value:x:@.arguments/*/url\\n   strings.trim-end:x:@.arguments/*/url\\n      .:/\\n\\n// Making sure we log and trap exceptions\\ntry\\n\\n   // Creating our basic auth token to invoke API.\\n   .key\\n   strings.concat\\n      get-value:x:@.arguments/*/username\\n      .:\":\"\\n      get-value:x:@.arguments/*/password\\n   strings.url-encode:x:-\\n   convert:x:-\\n      type:base64\\n   set-value:x:@.key\\n      strings.concat\\n         .:\"Basic \"\\n         get-value:x:@convert\\n\\n   // First we retrieve pages.\\n\\n   // Creating our URL to retrieve pages.\\n   .pages\\n   set-value:x:@.pages\\n      strings.concat\\n         get-value:x:@.arguments/*/url\\n         .:/wp-json/wp/v2/pages?per_page=100\\n\\n   // Basic logging.\\n   log.info:Deleting training snippets to prepare for import using WordPress API\\n      url:x:@.arguments/*/url\\n      type:x:@.arguments/*/type\\n\\n   // Deleting existing WP imported ml_training_snippets for model.\\n   data.connect:[generic|magic]\\n      data.execute:\"delete from vss_ml_training_snippets where rowid in (select id as rowid from ml_training_snippets where type = @type and meta = 'wordpress-import')\"\\n         @type:x:@.arguments/*/type\\n      data.delete\\n         table:ml_training_snippets\\n         where\\n            and\\n               type.eq:x:@.arguments/*/type\\n               meta.eq:wordpress-import\\n\\n   // Basic logging.\\n   log.info:Retrieving pages from WordPress\\n      url:x:@.arguments/*/url\\n      type:x:@.arguments/*/type\\n\\n   // Retrieving pages.\\n   http.get:x:@.pages\\n      convert:true\\n      headers\\n         User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36\\n         Authorization:x:@.key\\n\\n   // Sanity checking HTTP request.\\n   if\\n      not\\n         and\\n            mte:x:@http.get\\n               .:int:200\\n            lt:x:@http.get\\n               .:int:300\\n      .lambda\\n\\n         // Oops ...!!\\n         lambda2hyper:x:@http.get\\n         log.error:Something went wrong while invoking WordPress to fetch pages\\n            result:x:@lambda2hyper\\n         throw:Something went wrong while invoking WordPress to fetch pages, check your log for details.\\n\\n   // Opening up database connection.\\n   data.connect:[generic|magic]\\n\\n      // Iterating through each page.\\n      for-each:x:@http.get/*/content/*\\n\\n         // Some pages don't have content, such as the blog landing page, etc.\\n         if\\n            and\\n               not-null:x:@.dp/#/*/content/*/rendered\\n               neq:x:@.dp/#/*/content/*/rendered\\n                  .:\\n               not-null:x:@.dp/#/*/title/*/rendered\\n               neq:x:@.dp/#/*/title/*/rendered\\n                  .:\\n            .lambda\\n\\n               // Removing irrelevant elementor stuff and transforming to Markdown.\\n               strings.regex-replace:x:@.dp/#/*/content/*/rendered\\n                  .:\"\\\\[[^\\\\]]*\\\\]\"\\n                  .:\\n               html2markdown:x:-\\n                  url:x:@.arguments/*/url\\n               html-decode:x:@.dp/#/*/title/*/rendered\\n\\n               // Inserting page into database as snippet.\\n               data.create\\n                  table:ml_training_snippets\\n                  values\\n                     type:x:@.arguments/*/type\\n                     prompt:x:@html-decode\\n                     completion:x:@html2markdown\\n                     meta:wordpress-import\\n                     uri:x:@.dp/#/*/link\\n\\n   /*\\n    * Then we retrieve blogs.\\n    * \\n    * Notice, we only do this if caller explicitly told us he wanted blogs.\\n    */\\n   if:x:@.arguments/*/blogs\\n\\n      // Basic logging.\\n      log.info:Retrieving posts from WordPress\\n         url:x:@.arguments/*/url\\n         type:x:@.arguments/*/type\\n\\n      // Creating our URL to retrieve blogs.\\n      .posts\\n      set-value:x:@.posts\\n         strings.concat\\n            get-value:x:@.arguments/*/url\\n            .:/wp-json/wp/v2/posts?per_page=100\\n\\n      // Retrieving pages.\\n      http.get:x:@.posts\\n         convert:true\\n         headers\\n            User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36\\n            Authorization:x:@.key\\n\\n      // Sanity checking HTTP request.\\n      if\\n         not\\n            and\\n               mte:x:@http.get\\n                  .:int:200\\n               lt:x:@http.get\\n                  .:int:300\\n         .lambda\\n\\n            // Oops ...!!\\n            lambda2hyper:x:@http.get\\n            log.error:Something went wrong while invoking WordPress to fetch posts\\n               result:x:@lambda2hyper\\n            throw:Something went wrong while invoking WordPress to fetch posts, check your log for details.\\n\\n      // Opening up database connection.\\n      data.connect:[generic|magic]\\n\\n         // Iterating through each page.\\n         for-each:x:@http.get/*/content/*\\n\\n            // Some pages don't have content, such as the blog landing page, etc.\\n            if\\n               and\\n                  not-null:x:@.dp/#/*/content/*/rendered\\n                  neq:x:@.dp/#/*/content/*/rendered\\n                     .:\\n                  not-null:x:@.dp/#/*/title/*/rendered\\n                  neq:x:@.dp/#/*/title/*/rendered\\n                     .:\\n               .lambda\\n\\n                  // Removing irrelevant elementor stuff and transforming to Markdown.\\n                  strings.regex-replace:x:@.dp/#/*/content/*/rendered\\n                     .:\"\\\\[[^\\\\]]*\\\\]\"\\n                     .:\\n                  html2markdown:x:-\\n                     url:x:@.arguments/*/url\\n                  html-decode:x:@.dp/#/*/title/*/rendered\\n\\n                  // Inserting page into database as snippet.\\n                  data.create\\n                     table:ml_training_snippets\\n                     values\\n                        type:x:@.arguments/*/type\\n                        prompt:x:@html-decode\\n                        completion:x:@html2markdown\\n                        meta:wordpress-import\\n                        uri:x:@.dp/#/*/link\\n\\n   // Basic logging.\\n   log.info:Done importing from WordPress\\n      url:x:@.arguments/*/url\\n      type:x:@.arguments/*/type\\n\\n   // Checking if we should vectorize model or not.\\n   if:x:@.arguments/*/vectorize\\n\\n      // Basic logging.\\n      log.info:Started vectorizing model after WordPress import\\n         type:x:@.arguments/*/type\\n\\n      // Vectorizing model.\\n      execute:magic.ai.vectorise\\n         type:x:@.arguments/*/type\\n\\n      // Basic logging.\\n      log.info:Done vectorizing model after WordPress import\\n         type:x:@.arguments/*/type\\n.catch\\n\\n   // Oops ...!!\\n   log.error:Something went wrong as we tried to import products from WordPress\\n      url:x:@.arguments/*/url\\n      type:x:@.arguments/*/type\\n      error:x:@.arguments/*/message\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create a temporary slot 'temp'"},{"role":"assistant","content":"slots.create:temp\\n   return-value:Temporary\\n\\n// Delete the dynamic slot 'temp'\\nslots.delete:temp\\n\\n// Check if 'temp' still exists\\nslots.exists:temp\\n\\n// Returns false (since 'temp' was removed)\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"First, create a dynamic slot 'hello'"},{"role":"assistant","content":"slots.create:hello\\n   return-value:Hello\\n\\n// Invoke the 'hello' slot\\nsignal:hello\\n\\n// The signal node now holds the value \"Hello\"\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create two dynamic slots 'alpha' and 'beta'"},{"role":"assistant","content":"slots.create:alpha\\n   return-value:1\\nslots.create:beta\\n   return-value:2\\n\\n// Get all dynamic slot names\\nslots.vocabulary\\n\\n// Returns [\"alpha\", \"beta\"] (the list of all slot names defined dynamically), in addition to all other dynamic slots in the system.\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Getting configuration setting and assigning the value to [.result]"},{"role":"assistant","content":".result\\nset-value:x:@.result\\n   config.get:\"magic:smtp:host\"\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Performing addition operation"},{"role":"assistant","content":".num1:int:5\\n.num2:int:10\\n.result\\nset-value:x:@.result\\n   math.add\\n      get-value:x:@.num1\\n      get-value:x:@.num2\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Switching based on a value inside an anonymous lambda object, returning size of [.value]"},{"role":"assistant","content":".lambda\\n   .value:medium\\n   switch:x:@.value\\n      case:small\\n         return:Size is small\\n      case:medium\\n         return:Size is medium\\n      case:large\\n         return:Size is large\\n      default\\n         .result:Unknown size\\ninvoke:x:@.lambda\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Inserts training data into database\\n\\nSaves training data for using to fine-tune an LLM."},{"role":"assistant","content":".arguments\\n\\n   // Mandatory prompt used to generate specified Hyperlambda\\n   prompt:string\\n\\n   // Mandatory reference to Hyperlambda file.\\n   file-no:int\\n.type:public\\n\\n// Getting Hyperlambda.\\nexecute-file:/modules/fine-tune/workflows/create-training-data.hl\\n   file-no:x:@.arguments/*/file-no\\n\\n// Inserting item.\\ndata.connect:fine-tune\\n   data.create\\n      table:hyperlambda\\n      values\\n         prompt:x:@.arguments/*/prompt\\n         code:x:@execute-file/*/hyperlambda\\n\\n// Returning success.\\nreturn\\n   result:success\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Converts the specified lambda to XML"},{"role":"assistant","content":".lambda\\n   customers\\n      customer\\n         name\\n            #text:John Doe\\n         email\\n            #text:john@doe.com\\n\\n// Expression referencing above [.lambda] node's children nodes\\nlambda2xml:x:@.lambda/*\\n\\n/*\\n * Resulting Hyperlambda;\\n * lambda2xml:@\"<customers>\\n * <customer>\\n * <name>John Doe</name>\\n * <email>john@doe.com</email>\\n * </customer>\\n * </customers>\"\\n */\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Lists all cookies in current request"},{"role":"assistant","content":"request.cookies.list\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create a new transaction"},{"role":"assistant","content":"pgsql.transaction.create\\n\\n// Notice, must be invoked inside a pgsql.connect or data.connect with database-type being 'pgsql'\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Insert a new user into the 'users' table"},{"role":"assistant","content":"pgsql.create\\n   table:users\\n   values\\n      username:john_doe\\n      email:john.doe@example.com\\n      created_at:date:\"2025-03-18T09:09:13.000\"\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Generate a cryptographically secure random integer between 1 and 100"},{"role":"assistant","content":"crypto.random.int\\n   min:int:1\\n   max:int:100\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Load a binary file and returns content as raw bytes"},{"role":"assistant","content":"io.file.load.binary:/whatever-path.png\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"CRUD endpoint that lists records from your Categories table in your northwind database"},{"role":"assistant","content":".arguments\\n\\n   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.\\n   limit:long\\n\\n   // Offset into the dataset of where to start retrieving records\\n   offset:long\\n\\n   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format\\n   order:string\\n\\n   // What direction to order, can be 'asc' or 'desc' implying ascending and descending\\n   direction:string\\n   Categories.CategoryID.eq:long\\n   Categories.CategoryName.like:string\\n   Categories.CategoryName.eq:string\\n   Categories.Description.like:string\\n   Categories.Description.eq:string\\n   Categories.Picture.like:string\\n   Categories.Picture.eq:string\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-read\\n\\n// Columns with custom handling as frontend is generated.\\n.handling\\n   Categories.Picture:image\\n\\n// Opening up our database connection.\\ndata.connect:[generic|northwind]\\n   database-type:sqlite\\n\\n   // Parametrising our read invocation with ordering arguments if specified.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/order\\n      get-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/order\\n   remove-nodes:x:@.arguments/*/direction\\n\\n   // Parametrising our read invocation with paging arguments if specified.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n   remove-nodes:x:@.arguments/*/limit\\n   remove-nodes:x:@.arguments/*/offset\\n\\n   // Parametrising our read invocation with filtering arguments.\\n   add:x:./*/data.read/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:Categories\\n      columns\\n         Categories.CategoryID\\n         Categories.CategoryName\\n         Categories.Description\\n         Categories.Picture\\n      where\\n         and\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create hyperlambda that allows me to generate the fibonacci series up to 100"},{"role":"assistant","content":".fibonacci_return\\n.a:int:0\\n.b:int:1\\nwhile\\n   lt\\n      get-value:x:@.b\\n      .:int:100\\n   .lambda\\n\\n      // Compute next Fibonacci number\\n      .next.int\\n      set-value:x:@.next.int\\n         math.add\\n            get-value:x:@.a\\n            get-value:x:@.b\\n      if\\n         lt\\n            get-value:x:@.b\\n            .:int:100\\n         .lambda\\n            unwrap:x:+/*/*\\n            add:x:../*/.fibonacci_return\\n               .\\n                  .:x:@.next.int\\n      set-value:x:@.a\\n         get-value:x:@.b\\n      set-value:x:@.b\\n         get-value:x:@.next.int\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Show me Hyperlambda that selects all contacts from an employees database, extracts their name and email, and send these an email each. I will provide the subject and body myself."},{"role":"assistant","content":"data.connect:employees\\n   data.select:select name, email from contacts\\n   for-each:x:@data.select/*\\n      unwrap:x:+/**\\n      mail.smtp.send\\n         message\\n            to\\n               .\\n                  name:x:@.dp/#/*/name\\n                  email:x:@.dp/#/*/email\\n            subject:REPLACE WITH YOUR SUBJECT\\n            entity:text/plain\\n               content:REPLACE WITH YOUR BODY\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Generate Hyperlambda endpoint that takes a file as text, and a filename, and saves to disc on server"},{"role":"assistant","content":".arguments\\n   file_content:string\\n   file_path:string\\nio.file.save:x:@.arguments/*/file_path\\n   get-value:x:@.arguments/*/file_content\\nyield\\n   result:success!\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Hyperlambda endpoint that returns true if the specified text contains 'xyz'"},{"role":"assistant","content":".arguments\\n   arg:string\\n\\n// Making sure argument was given\\nvalidators.mandatory:x:@.arguments/*/arg\\n\\n// Checking if 'xyz' exists in string\\nstrings.contains:x:@.arguments/*/arg\\n   .:xyz\\n\\n// Returning result to caller\\nyield\\n   result:x:@strings.contains\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns minimum, maximum, average, sum or count from your actor table in your sakila database grouped by a column with authorization and verbose filtering"},{"role":"assistant","content":".arguments\\n\\n   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME\\n   group_column:string\\n\\n   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.\\n   limit:long\\n\\n   // Offset into the dataset of where to start retrieving records\\n   offset:long\\n\\n   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format\\n   order:string\\n\\n   // What direction to order, can be 'asc' or 'desc' implying ascending and descending\\n   direction:string\\n\\n   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count\\n   aggregate_function:string\\n\\n   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.\\n   aggregate_column:string\\n\\n   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.\\n   operator:string\\n   actor.actor_id.mt:long\\n   actor.actor_id.lt:long\\n   actor.actor_id.mteq:long\\n   actor.actor_id.lteq:long\\n   actor.actor_id.neq:long\\n   actor.actor_id.eq:long\\n   actor.first_name.like:string\\n   actor.first_name.mt:string\\n   actor.first_name.lt:string\\n   actor.first_name.mteq:string\\n   actor.first_name.lteq:string\\n   actor.first_name.neq:string\\n   actor.first_name.eq:string\\n   actor.last_name.like:string\\n   actor.last_name.mt:string\\n   actor.last_name.lt:string\\n   actor.last_name.mteq:string\\n   actor.last_name.lteq:string\\n   actor.last_name.neq:string\\n   actor.last_name.eq:string\\n   actor.last_update.mt:date\\n   actor.last_update.lt:date\\n   actor.last_update.mteq:date\\n   actor.last_update.lteq:date\\n   actor.last_update.neq:date\\n   actor.last_update.eq:date\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-group\\n\\n// Sanity checking mandatory arguments.\\nvalidators.mandatory:x:@.arguments/*/group_column\\nvalidators.mandatory:x:@.arguments/*/aggregate_function\\nvalidators.mandatory:x:@.arguments/*/aggregate_column\\n\\n// Sanity checking name of aggregate function.\\nvalidators.enum:x:@.arguments/*/aggregate_function\\n   .:min\\n   .:max\\n   .:sum\\n   .:avg\\n   .:count\\n\\n// Sanity checking group column.\\nvalidators.enum:x:@.arguments/*/group_column\\n   .:actor.actor_id\\n   .:actor.first_name\\n   .:actor.last_name\\n   .:actor.last_update\\n\\n// Sanity checking agggregate column name.\\nvalidators.enum:x:@.arguments/*/aggregate_column\\n   .:actor.actor_id\\n   .:actor.first_name\\n   .:actor.last_name\\n   .:actor.last_update\\n\\n// Verifying user is authorized to access endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Sanity checking invocation.\\nvalidators.enum:x:@.arguments/*/operator\\n   .:or\\n   .:and\\n\\n/*\\n * Checking if user supplied an [operator] argument, and if so\\n * changing the boolean operator for comparison operations.\\n */\\nif\\n   exists:x:@.arguments/*/operator\\n   .lambda\\n\\n      // User provided a boolean comparison [operator] argument.\\n      set-name:x:../*/data.connect/*/data.read/*/where/0\\n         get-value:x:@.arguments/*/operator\\n      remove-nodes:x:@.arguments/*/operator\\n\\n// Opening up our database connection.\\ndata.connect:[generic|sakila]\\n   database-type:sqlite\\n\\n   // Making sure we're using the correct group column\\n   set-name:x:@data.connect/*/data.read/*/group/*/group_column\\n      get-value:x:@.arguments/*/group_column\\n\\n   // Making sure we return group column as a part of the result\\n   set-name:x:+/*/*\\n      get-value:x:@.arguments/*/group_column\\n   insert-before:x:@data.connect/*/data.read/*/columns/0\\n      .\\n         group_column\\n\\n   // Changing name of aggregate column returned to caller.\\n   set-value:x:@data.connect/*/data.read/*/columns/1/*/as\\n      get-value:x:@.arguments/*/aggregate_function\\n\\n   // Removing group column to simplify adding other arguments\\n   remove-nodes:x:@.arguments/*/group_column\\n\\n   // Adding paging arguments\\n   add:x:@data.connect/*/data.read\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n   remove-nodes:x:@.arguments/*/limit\\n   remove-nodes:x:@.arguments/*/offset\\n\\n   // Parametrising our read invocation with ordering arguments if specified.\\n   add:x:./*/data.read\\n      get-nodes:x:@.arguments/*/order\\n      get-nodes:x:@.arguments/*/direction\\n   remove-nodes:x:@.arguments/*/order\\n   remove-nodes:x:@.arguments/*/direction\\n\\n   // Making sure we're using correct aggregate function.\\n   set-name:x:./*/data.read/*/columns/*/aggregate_functor\\n      strings.concat\\n         get-value:x:@.arguments/*/aggregate_function\\n         .:(\\n         get-value:x:@.arguments/*/aggregate_column\\n         .:)\\n\\n   // Removing aggregate arguments to simplify adding other arguments.\\n   remove-nodes:x:@.arguments/*/[0,2]\\n\\n   // Adding filtering arguments.\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:actor\\n      columns\\n         aggregate_functor\\n            as:result\\n      where\\n         and\\n      group\\n         group_column\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Counts items from your address table in your sakila database without authorization"},{"role":"assistant","content":".arguments\\n\\n   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.\\n   operator:string\\n   address.address_id.mt:long\\n   address.address_id.lt:long\\n   address.address_id.mteq:long\\n   address.address_id.lteq:long\\n   address.address_id.neq:long\\n   address.address_id.eq:long\\n   address.address.like:string\\n   address.address.mt:string\\n   address.address.lt:string\\n   address.address.mteq:string\\n   address.address.lteq:string\\n   address.address.neq:string\\n   address.address.eq:string\\n   address.address2.like:string\\n   address.address2.mt:string\\n   address.address2.lt:string\\n   address.address2.mteq:string\\n   address.address2.lteq:string\\n   address.address2.neq:string\\n   address.address2.eq:string\\n   address.district.like:string\\n   address.district.mt:string\\n   address.district.lt:string\\n   address.district.mteq:string\\n   address.district.lteq:string\\n   address.district.neq:string\\n   address.district.eq:string\\n   address.city_id.mt:long\\n   address.city_id.lt:long\\n   address.city_id.mteq:long\\n   address.city_id.lteq:long\\n   address.city_id.neq:long\\n   address.city_id.eq:long\\n   address.postal_code.like:string\\n   address.postal_code.mt:string\\n   address.postal_code.lt:string\\n   address.postal_code.mteq:string\\n   address.postal_code.lteq:string\\n   address.postal_code.neq:string\\n   address.postal_code.eq:string\\n   address.phone.like:string\\n   address.phone.mt:string\\n   address.phone.lt:string\\n   address.phone.mteq:string\\n   address.phone.lteq:string\\n   address.phone.neq:string\\n   address.phone.eq:string\\n   address.last_update.mt:date\\n   address.last_update.lt:date\\n   address.last_update.mteq:date\\n   address.last_update.lteq:date\\n   address.last_update.neq:date\\n   address.last_update.eq:date\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-count\\n\\n// Sanity checking invocation.\\nvalidators.enum:x:@.arguments/*/operator\\n   .:or\\n   .:and\\n\\n/*\\n * Checking if user supplied an [operator] argument, and if so\\n * changing the boolean operator for comparison operations.\\n */\\nif\\n   exists:x:@.arguments/*/operator\\n   .lambda\\n\\n      // User provided a boolean comparison [operator] argument.\\n      set-name:x:../*/data.connect/*/data.read/*/where/0\\n         get-value:x:@.arguments/*/operator\\n      remove-nodes:x:@.arguments/*/operator\\n\\n// Opening up our database connection.\\ndata.connect:[generic|sakila]\\n   database-type:sqlite\\n\\n   // Adding filtering arguments.\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:address\\n      columns\\n         count(*)\\n            as:count\\n      where\\n         and\\n      limit:long:1\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Returns minimum, maximum, average or sum from your category table in your sakila database without authorization"},{"role":"assistant","content":".arguments\\n\\n   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg\\n   aggregate_function:string\\n\\n   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.\\n   aggregate_column:string\\n\\n   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.\\n   operator:string\\n   category.category_id.mt:long\\n   category.category_id.lt:long\\n   category.category_id.mteq:long\\n   category.category_id.lteq:long\\n   category.category_id.neq:long\\n   category.category_id.eq:long\\n   category.name.like:string\\n   category.name.mt:string\\n   category.name.lt:string\\n   category.name.mteq:string\\n   category.name.lteq:string\\n   category.name.neq:string\\n   category.name.eq:string\\n   category.last_update.mt:date\\n   category.last_update.lt:date\\n   category.last_update.mteq:date\\n   category.last_update.lteq:date\\n   category.last_update.neq:date\\n   category.last_update.eq:date\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-aggregate\\n\\n// Sanity checking mandatory arguments.\\nvalidators.mandatory:x:@.arguments/*/aggregate_function\\nvalidators.mandatory:x:@.arguments/*/aggregate_column\\n\\n// Sanity checking name of aggregate function.\\nvalidators.enum:x:@.arguments/*/aggregate_function\\n   .:min\\n   .:max\\n   .:sum\\n   .:avg\\n\\n// Sanity checking agggregate column name.\\nvalidators.enum:x:@.arguments/*/aggregate_column\\n   .:category.category_id\\n   .:category.name\\n   .:category.last_update\\n\\n// Sanity checking invocation.\\nvalidators.enum:x:@.arguments/*/operator\\n   .:or\\n   .:and\\n\\n/*\\n * Checking if user supplied an [operator] argument, and if so\\n * changing the boolean operator for comparison operations.\\n */\\nif\\n   exists:x:@.arguments/*/operator\\n   .lambda\\n\\n      // User provided a boolean comparison [operator] argument.\\n      set-name:x:../*/data.connect/*/data.read/*/where/0\\n         get-value:x:@.arguments/*/operator\\n      remove-nodes:x:@.arguments/*/operator\\n\\n// Opening up our database connection.\\ndata.connect:[generic|sakila]\\n   database-type:sqlite\\n\\n   // Making sure we're using correct aggregate function.\\n   set-name:x:./*/data.read/*/columns/*/aggregate_functor\\n      strings.concat\\n         get-value:x:@.arguments/*/aggregate_function\\n         .:(\\n         get-value:x:@.arguments/*/aggregate_column\\n         .:)\\n\\n   // Removing aggregate arguments to simplify adding other arguments.\\n   remove-nodes:x:@.arguments/*/[0,2]\\n\\n   // Adding filtering arguments.\\n   add:x:+/*/where/*\\n      get-nodes:x:@.arguments/*\\n\\n   // Reading data from database.\\n   data.read\\n      database-type:sqlite\\n      table:category\\n      columns\\n         aggregate_functor\\n            as:result\\n      where\\n         and\\n      limit:long:1\\n\\n   // Returning result of above read invocation to caller.\\n   return-nodes:x:@data.read/*/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Create one record in your category table in your sakila database without authorization. Log invocation."},{"role":"assistant","content":".arguments\\n\\n   // name column value\\n   name:string\\n\\n   // last_update column value\\n   last_update:date\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-create\\n\\n// Logging invocation.\\nauth.ticket.get\\nlambda2hyper:x:@.arguments/*\\nlog.info:sakila.category entry created\\n   username:x:@auth.ticket.get\\n   arguments:x:@lambda2hyper\\n\\n// Opening up database connection.\\ndata.connect:[generic|sakila]\\n   database-type:sqlite\\n\\n   // Parametrising our create invocation.\\n   add:x:./*/data.create/*/values\\n      get-nodes:x:@.arguments/*\\n\\n   // Creating our record.\\n   data.create\\n      database-type:sqlite\\n      table:category\\n      return-id:bool:true\\n      values\\n\\n   // Returning the correct status code.\\n   response.status.set:201\\n\\n   // Publishing socket message.\\n   add:x:./*/sockets.signal/*/args\\n      get-nodes:x:@.arguments/*\\n   sockets.signal:sakila.category.post\\n      args\\n\\n   // Returning result of above invocation to caller.\\n   unwrap:x:+/*\\n   return\\n      id:x:@data.create\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Delete one record from your city table in your sakila database"},{"role":"assistant","content":".arguments\\n\\n   // Primary key of record to delete, mandatory argument\\n   recaptcha:string\\n\\n   // Primary key of record to delete, mandatory argument\\n   city_id:long\\n\\n// Meta data description for endpoint\\n\\n// Type of endpoint\\n.type:crud-delete\\n\\n// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.\\nconfig.get:\"magic:auth:recaptcha:key\"\\nconfig.get:\"magic:auth:recaptcha:secret\"\\nif\\n   and\\n      neq:x:@config.get\\n         .\\n      neq:x:@config.get\\n         .:\\n      neq:x:@config.get/@config.get\\n         .\\n      neq:x:@config.get/@config.get\\n         .:\\n   .lambda\\n\\n      // reCAPTCHA configuration settings found.\\n      validators.mandatory:x:@.arguments/*/recaptcha\\n      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]\\n         site-key:x:@config.get/@config.get\\n         secret:x:@config.get\\n         min:decimal:0.3\\n\\n// To remove reCAPTCHA value preventing it from being used as an argument further down in file.\\nremove-nodes:x:@.arguments/*/recaptcha/[0,1]\\nvalidators.mandatory:x:@.arguments/*/city_id\\n\\n// Opening up our database connection.\\ndata.connect:[generic|sakila]\\n   database-type:sqlite\\n\\n   // Parametrising our delete invocation.\\n   add:x:./*/data.delete/*/where/*/and\\n      get-nodes:x:@.arguments/*\\n\\n   // Deleting item from database.\\n   data.delete\\n      database-type:sqlite\\n      table:city\\n      where\\n         and\\n\\n   // Returning result of above invocation to caller.\\n   unwrap:x:+/*\\n   return\\n      affected:x:@data.delete\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Hyperlambda endpoint taking arguments. The SQL aggregates and returns the top 25 artists with the most albums from the chinook database.\\n\\nThis SQL script is designed to retrieve and aggregate data from the chinook database, specifically focusing on the number of albums associated with each artist. The script joins the Album and Artist tables on the ArtistId field, counts the number of albums per artist, and orders the results in descending order based on the album count. It then limits the output to the top 25 artists with the highest number of albums. This query is useful for analyzing the distribution of albums across different artists within the database, providing insights into which artists have the most extensive discographies. The SQL is executed within a controlled environment where user authorization is verified, and a connection to the SQLite database is established before running the query. The results are then returned to the caller, ensuring that only authorized users can access this aggregated data."},{"role":"assistant","content":".arguments\\n\\n// Making sure user is authorized to invoke endpoint.\\nauth.ticket.verify:root,admin\\n\\n// Connecting to database.\\ndata.connect:chinook\\n   database-type:sqlite\\n\\n   // Executing [data.select] slot with our SQL.\\n   data.select:\"\\n/*\\n * Script to aggregate records for each artist in chinook database.\\n * Make sure you select the chinook database before execxuting the script.\\n */\\nselect ar.Name, count(*) as count\\n  from Album al, Artist ar where al.ArtistId = ar.ArtistId\\n  group by al.ArtistId\\n  order by count desc\\n  limit 25\\n\"\\n      database-type:sqlite\\n\\n   // Returning a result of above invocation to caller.\\n   return-nodes:x:@data.select/*\\n"}]}
{"messages":[{"role":"system","content":"You are a Hyperlambda coding assistant. Respond with Hyperlambda code."},{"role":"user","content":"Searches for a company\\n\\nWill search for a company having a name containing the specified query."},{"role":"assistant","content":".arguments\\n   query:string\\n   limit:long\\n   offset:long\\n.type:public\\n\\n// Sanity checking invocation.\\nvalidators.mandatory:x:@.arguments/*/query\\nvalidators.default:x:@.arguments\\n   limit:long:10\\n   offset:long:0\\n\\n// Connecting to database.\\ndata.connect:[finovo|finovo]\\n   database-type:pgsql\\n\\n   /*\\n    * Parametrising invocations below.\\n    * \\n    * Notice, we're parametrising both count and get items invocations here!\\n    */\\n   .query\\n   set-value:x:@.query\\n      strings.concat\\n         .:%\\n         get-value:x:@.arguments/*/query\\n         .:%\\n   unwrap:x:+/*/*\\n   add:x:./*/data.read/*/where/*/and\\n      .\\n         company_name.ilike:x:@.query\\n\\n   // Applying paging if existing.\\n   add:x:@data.connect/*/data.read/[0,1]\\n      get-nodes:x:@.arguments/*/limit\\n      get-nodes:x:@.arguments/*/offset\\n\\n   // Retrieving items.\\n   data.read\\n      database-type:pgsql\\n      table:basic\\n      columns\\n         org_number\\n         company_name\\n      where\\n         and\\n            legalgroup_code.eq:AB\\n\\n   // Checking we've got data.\\n   if\\n      not-exists:x:@data.read/*\\n      .lambda\\n         return\\n            result:No results were found\\n\\n   // Making sure we return company information related to the account.\\n   add:x:./*/yield/*/companies\\n      get-nodes:x:@data.read/*\\n\\n   // Retrieving items.\\n   data.read\\n      database-type:pgsql\\n      table:basic\\n      columns\\n         count(*)\\n            as:count\\n      where\\n         and\\n            legalgroup_code.eq:AB\\n\\n   // Returning result to caller.\\n   yield\\n      companies\\n      total_companies:x:@data.read/0/0\\n"}]}
