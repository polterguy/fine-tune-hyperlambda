
/*
 * This Hyperlambda endpoint performs aggregation functions such as [min], [max], [sum], and [avg]
 * on the [Artist] table in the [chinook] SQLite database. It is open to all users and does not require authorization.
 *
 * 1. [.arguments]
 *    * Accepts the following arguments:
 *      - [aggregate_function]: Required. Must be one of [min], [max], [sum], or [avg].
 *      - [aggregate_column]: Required. Must be either [Artist.ArtistId] or [Artist.Name].
 *      - [Artist.ArtistId.eq]: Optional filter by ArtistId.
 *      - [Artist.Name.like]: Optional SQL LIKE filter on Name.
 *      - [Artist.Name.eq]: Optional filter by exact Name.
 *
 * 2. [validators.mandatory]
 *    * Ensures that [aggregate_function] and [aggregate_column] are provided before proceeding.
 *
 * 3. [validators.enum]
 *    * Validates that [aggregate_function] is one of the supported operations.
 *    * Ensures [aggregate_column] is a valid column in the [Artist] table.
 *
 * 4. [data.connect:[generic|chinook]]
 *    * Establishes a connection to the [chinook] SQLite database using the [generic] provider.
 *
 * 5. [set-name:x:./*/data.read/*/columns/*/aggregate_functor]
 *    * Dynamically sets the function name used for aggregation using [strings.concat].
 *    * Constructs an expression such as [sum(Artist.ArtistId)] or [avg(Artist.Name)].
 *
 * 6. [remove-nodes:x:@.arguments/*/[0,2]]
 *    * Removes the first and third arguments ([aggregate_function] and [aggregate_column])
 *      so that only filtering arguments are passed to the [where] clause.
 *
 * 7. [add]
 *    * Adds remaining filter arguments as children of the [and] node dynamically.
 *
 * 8. [data.read]
 *    * Executes the SQL query:
 *      - Reads from the [Artist] table.
 *      - Selects the aggregated result using the function specified.
 *      - Applies filters using [and] conditions.
 *      - Limits result to a single row.
 *
 * 9. [yield]
 *    * Returns the result as a node named [rows], pointing to the aggregated value from [data.read].
 *
 * Result:
 * Allows clients to calculate statistical values (min, max, sum, avg) from the Artist table
 * with optional filters, without requiring authentication.
 */
.arguments
   aggregate_function:string
   aggregate_column:string
   Artist.ArtistId.eq:long
   Artist.Name.like:string
   Artist.Name.eq:string
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
validators.enum:x:@.arguments/*/aggregate_column
   .:Artist.ArtistId
   .:Artist.Name
data.connect:[generic|chinook]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Artist
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1
   yield
      rows:x:@data.read/*/*
