
/*
 * This endpoint returns the total **count of records** from the 'Treatments' table 
 * in a hospital database. It supports **optional dynamic filtering** to count either 
 * all records or a subset that matches specific conditions.
 *
 * The [.arguments] node includes several **optional filters**, such as:
 * - 'Treatments.TreatmentDate.eq', 'Treatments.Description.like', and 
 *   'PatientID.FirstName.eq', among others.
 * - These filtering arguments allow the query to be tailored to count only records 
 *   matching the provided conditions.
 * - All filter arguments are optional â€” if none are provided, the endpoint will return 
 *   the count of all records in the table.
 *
 * The [response.headers.set] slot adds a 'Cache-Control' header to cache the response 
 * for 300 seconds, improving performance on repeated queries.
 *
 * The [auth.ticket.verify] slot ensures that only users with roles 'admin', 'guest', 
 * or 'root' can access this endpoint, providing proper access control.
 *
 * The [data.connect] slot opens a connection to the 'hospital' database using the 
 * 'sqlite' engine and the 'generic' connector.
 *
 * Inside the database connection:
 * - The [add] slot dynamically includes any filtering arguments provided into the [where] clause 
 *   under an [and] node. This enables **dynamic filtering**, meaning only provided filters are 
 *   applied, making the query flexible and context-sensitive.
 *
 * The [data.read] slot performs the count query:
 * - It queries the 'Treatments' table and joins the 'Patients' table using a left join on PatientID.
 * - The [columns] node includes a `count(*)` expression to return the number of matched rows.
 * - The [where] clause is initialized as an [and] block and is populated at runtime with any 
 *   user-specified filters.
 * - A [limit] of 1 ensures that only one row (the count) is returned.
 *
 * The [yield] slot returns the result under the [count] key, containing the final evaluated 
 * number of matched records. This structure is ideal for downstream consumption or front-end 
 * rendering of aggregated totals.
 */
.arguments
   Treatments.TreatmentID.eq:long
   Treatments.PatientID.eq:long
   Treatments.TreatmentDate.eq:date
   Treatments.Description.like:string
   Treatments.Description.eq:string
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Treatments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Treatments.PatientID:PatientID.PatientID
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   yield
      count:x:@data.read/*/*
