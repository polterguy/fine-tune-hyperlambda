
/*
 * This Hyperlambda endpoint performs a keyword-based distinct search over the [Carriers] table in the [logistics] SQLite database.
 * The search is case-insensitive and calculates both keyword density and count to rank results.
 * It supports paging via [limit] and [offset], and does not require authentication.
 *
 * 1. [.arguments]
 *    * Accepts:
 *      - [query]: Required. A string containing space-separated keywords.
 *      - [limit]: Optional. Number of results to return. Defaults to 10 if not specified.
 *      - [offset]: Optional. Offset for paginated results.
 *
 * 2. [validators.mandatory]
 *    * Ensures that [query] is provided.
 *
 * 3. [validators.default]
 *    * Sets a default value of 10 for [limit] if not explicitly provided.
 *
 * 4. [.words]
 *    * Splits the query into individual lowercase words for processing.
 *
 * 5. [.columns]
 *    * Specifies the columns to be included in the keyword matching process: [Name], [Phone], and [Email].
 *
 * 6. [data.connect:[generic|logistics]]
 *    * Connects to the [logistics] SQLite database.
 *
 * 7. Keyword density and count logic:
 *    * Dynamically constructs a SQL query using [coalesce], [lower], [replace], and [length] functions.
 *    * Calculates:
 *      - [keyword_density]: Normalized occurrence density.
 *      - [keyword_count]: Total keyword match occurrences.
 *    * Adds [@pN] SQL parameters for safe binding.
 *
 * 8. SQL composition via [strings.concat]
 *    * Builds a dynamic SQL [SELECT] query from the [Carriers] table with:
 *      - WHERE clause: [keyword_count > 0]
 *      - ORDER BY: [keyword_count DESC, keyword_density DESC]
 *      - LIMIT/OFFSET based on pagination
 *
 * 9. [data.select]
 *    * Executes the composed SQL string with the provided parameters.
 *    * Returns only relevant data by removing helper columns [keyword_density] and [keyword_count].
 *
 * 10. [return-nodes]
 *     * Returns the final filtered and ranked result set to the caller.
 *
 * Result:
 * Publicly accessible endpoint that enables advanced full-text-like keyword search against the [Carriers] table,
 * with ranked and paginated output.
 */
.arguments
   query:string
   limit:long
   offset:long
validators.mandatory:x:@.arguments/*/query
validators.default:x:@.arguments
   limit:long:10
.words
add:x:@.words
   strings.split:x:@.arguments/*/query
      .:" "
.no:int:0
for-each:x:@.words/*
   set-value:x:@.dp/#
      strings.to-lower:x:@.dp/#
.columns
   .:Name
   .:Phone
   .:Email
data.connect:[generic|logistics]
   database-type:sqlite
   .sql:select *, (
   .fields
   for-each:x:@.columns/*
      strings.concat
         .:coalesce(
         get-value:x:@.dp/#
         .:", '')"
      unwrap:x:+/*/*
      add:x:@.fields
         .
            .:x:@strings.concat
   set-value:x:@.fields
      strings.join:x:@.fields/*
         .:" || "
   remove-nodes:x:@.fields/*
   .no:int:0
   for-each:x:@.words/*

      // Adding SQL parameter.
      set-name:x:+/+/*/*
         strings.concat
            .:@p
            get-value:x:@.no
      unwrap:x:+/*/*
      add:x:@data.connect/*/data.select
         .
            .:x:@.dp/#
      if
         eq:x:@.no
            .:int:0
         .lambda

            // First keyword => no leading plus
            set-value:x:@.sql
               strings.concat:x:@.sql
                  get-value:x:@.sql
                  .:" (length("
                  get-value:x:@.fields
                  .:) - length(replace(lower(
                  get-value:x:@.fields
                  .:), @p
                  get-value:x:@.no
                  .:", ''))) / length(@p"
                  get-value:x:@.no
                  .:)
      else
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" + (length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)
      math.increment:x:@.no
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:) * 1.0 / length(
         get-value:x:@.fields
         .:) as keyword_density, (
   .no:int:0
   for-each:x:@.words/*
      if
         eq:x:@.no
            .:int:0
         .lambda
            set-value:x:@.sql
               strings.concat:x:@.sql
                  get-value:x:@.sql
                  .:" CASE WHEN ((length("
                  get-value:x:@.fields
                  .:) - length(replace(lower(
                  get-value:x:@.fields
                  .:), @p
                  get-value:x:@.no
                  .:", ''))) / length(@p"
                  get-value:x:@.no
                  .:)) > 0 THEN 1 ELSE 0 END
      else
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" + CASE WHEN ((length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)) > 0 THEN 1 ELSE 0 END
      math.increment:x:@.no
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:) as keyword_count
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" from "
         .:Carriers
         .:" where keyword_count > 0"
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" order by keyword_count desc, keyword_density desc limit "
         get-value:x:@.arguments/*/limit
   if
      exists:x:@.arguments/*/offset
      .lambda
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" offset "
               get-value:x:@.arguments/*/offset
   data.select:x:@.sql
      database-type:sqlite
   remove-nodes:x:@data.select/*/*/keyword_density
   remove-nodes:x:@data.select/*/*/keyword_count
   return-nodes:x:@data.select/*
