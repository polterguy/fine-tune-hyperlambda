
/*
 * This Hyperlambda endpoint reads data from the [Artist] table in the [chinook] SQLite database.
 * It supports filtering, sorting, and paging, and returns the result as an array.
 *
 * 1. [.arguments]
 *    * Accepts the following arguments:
 *      - [limit]: Limits the number of rows returned.
 *      - [offset]: Skips a specified number of rows before returning results.
 *      - [order]: Specifies the column name to sort by.
 *      - [direction]: Sorting direction, either "asc" or "desc".
 *      - [Artist.ArtistId.eq]: Optional filter to match specific artist ID.
 *      - [Artist.Name.like]: Optional filter for partial name matches.
 *      - [Artist.Name.eq]: Optional filter to match exact artist name.
 *
 * 2. [data.connect:[generic|chinook]]
 *    * Opens a connection to the [chinook] database using the [generic] provider and sets [sqlite] as the database type.
 *
 * 3. [add:x:./*/data.read]
 *    * Injects sorting and paging arguments into the [data.read] invocation.
 *    * Sorting: [order] and [direction]
 *    * Paging: [limit] and [offset]
 *
 * 4. [remove-nodes]
 *    * Removes sorting and paging arguments from [.arguments] to avoid polluting the [where] clause.
 *
 * 5. [add:x:./*/data.read/*/where/*/and]
 *    * Dynamically inserts any remaining filters (e.g. [Artist.ArtistId.eq], [Artist.Name.eq/like]) under the [where -> and] clause.
 *
 * 6. [data.read]
 *    * Executes the actual SQL SELECT on the [Artist] table.
 *    * Retrieves the [ArtistId] and [Name] columns.
 *    * Applies filtering, paging, and sorting as specified.
 *
 * 7. [return-nodes]
 *    * Returns all resulting rows as a flat array.
 *
 * Result:
 * A public, paged, and sortable data reader endpoint for the [Artist] table with filtering support on [ArtistId] and [Name].
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   Artist.ArtistId.eq:long
   Artist.Name.like:string
   Artist.Name.eq:string
data.connect:[generic|chinook]
   database-type:sqlite
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Artist
      columns
         Artist.ArtistId
         Artist.Name
      where
         and
   return-nodes:x:@data.read/*
