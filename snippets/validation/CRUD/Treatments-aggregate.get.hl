
/*
 * This endpoint performs an **aggregation operation** (min, max, avg, or sum) over a specified column 
 * in the 'Treatments' table of a hospital database, and supports dynamic filtering through optional arguments.
 *
 * The [.arguments] node includes:
 * - [aggregate_function], a **mandatory** argument that defines the aggregation type to apply. 
 *   Only 'min', 'max', 'sum', and 'avg' are allowed.
 * - [aggregate_column], also **mandatory**, specifies which column to aggregate. The format must be 
 *   'TABLE_NAME.COLUMN_NAME' (e.g., 'Treatments.TreatmentDate').
 * - A collection of **optional filtering arguments**—like 'Treatments.Description.like' or 
 *   'PatientID.FirstName.eq'—which are used to narrow down the dataset before aggregation. 
 *   These are **dynamically applied** only if provided.
 *
 * The [validators.mandatory] slots ensure that both [aggregate_function] and [aggregate_column] 
 * are supplied, enforcing proper usage of the endpoint.
 *
 * The [validators.enum] slots validate:
 * - That [aggregate_function] is one of the accepted operations.
 * - That [aggregate_column] is a valid, predefined field from either the 'Treatments' or joined 'Patients' table.
 *
 * The [response.headers.set] slot adds a cache header to the HTTP response, allowing the result 
 * to be cached for up to 300 seconds.
 *
 * The [auth.ticket.verify] slot restricts access to authorized users with roles 'admin', 'guest', or 'root'.
 *
 * The [data.connect] slot connects to the 'hospital' database using the 'sqlite' engine via the 'generic' connector.
 *
 * Inside the database context:
 * - The [set-name] slot dynamically constructs the aggregation expression using [strings.concat], 
 *   resulting in SQL like `avg(Treatments.TreatmentID)`, and assigns it to a node named [aggregate_functor].
 *
 * - The [remove-nodes] slot removes the processed [aggregate_function] and [aggregate_column] 
 *   to reduce clutter in the structure.
 *
 * - The [add] slot injects any **optional filtering arguments** dynamically into the [where] clause. 
 *   These filters are applied only if they are present, providing **dynamic filtering behavior**.
 *
 * The [data.read] slot executes the SQL query:
 * - It queries the 'Treatments' table and left joins the 'Patients' table via the [PatientID] key.
 * - The [columns] node includes the dynamically created [aggregate_functor], which is aliased as [result].
 * - The [where] clause starts as an empty [and] block and is populated at runtime with filtering conditions.
 * - The [limit] is set to 1 since only one aggregated value is expected.
 *
 * The [yield] slot returns the evaluated aggregation result under the key [treatments], 
 * making it easy to consume in client applications or downstream logic.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Treatments.TreatmentID.eq:long
   Treatments.PatientID.eq:long
   Treatments.TreatmentDate.eq:date
   Treatments.Description.like:string
   Treatments.Description.eq:string
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Treatments.TreatmentID
   .:Treatments.PatientID
   .:Treatments.TreatmentDate
   .:Treatments.Description
   .:PatientID.FirstName

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Treatments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Treatments.PatientID:PatientID.PatientID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   yield
      treatments:x:@data.read/*/*
