
/*
 * This endpoint performs a **grouped aggregation** on the 'Treatments' table of a hospital database.
 * It calculates aggregate values such as min, max, sum, avg, or count for a specified column,
 * grouped by another column. It also supports dynamic filtering, pagination, and sorting.
 *
 * The [.arguments] node includes:
 * - [group_column], [aggregate_function], and [aggregate_column] are **mandatory**:
 *   - [group_column] specifies the field to group by (e.g., 'Treatments.TreatmentDate').
 *   - [aggregate_function] defines the operation to perform (e.g., 'count').
 *   - [aggregate_column] defines the field to aggregate (e.g., 'Treatments.TreatmentID').
 * - [limit], [offset], [order], and [direction] provide optional support for pagination and sorting.
 * - A set of **optional filtering arguments** (e.g., 'Treatments.Description.like', 'PatientID.FirstName.eq') 
 *   can be provided to restrict which records are included in the group aggregation.
 *
 * The [validators.mandatory] slots ensure that all required aggregation arguments are supplied.
 * The [validators.enum] slots ensure that [aggregate_function], [group_column], and [aggregate_column] 
 * are restricted to approved and valid values for security and correctness.
 *
 * The [response.headers.set] slot adds a cache directive to the HTTP response, enabling clients 
 * to cache results for up to 300 seconds.
 *
 * The [auth.ticket.verify] slot restricts access to users with roles 'admin', 'guest', or 'root'.
 *
 * The [data.connect] slot connects to the 'hospital' database using the 'sqlite' engine.
 *
 * Inside the database context:
 * - The [set-name] slot dynamically assigns the provided [group_column] into the [group] node of the query.
 * - Another [set-name] slot ensures that the [group_column] is also included in the results.
 * - The [insert-before] slot guarantees the group column appears first in the returned [columns].
 *
 * - The [set-value] slot renames the resulting aggregation field (e.g., the result of `count(...)`) 
 *   using the name of the [aggregate_function] for clarity in the response.
 *
 * - The [remove-nodes] slot removes [group_column] from the argument list after processing.
 *
 * - [add] and [remove-nodes] manage pagination ([limit], [offset]) and sorting ([order], [direction]) arguments, 
 *   dynamically injecting them into the [data.read] query if provided.
 *
 * - The [set-name] slot constructs the full aggregate expression using [strings.concat] (e.g., `avg(Treatments.PatientID)`) 
 *   and stores it as [aggregate_functor] in the [columns] node.
 *
 * - The [remove-nodes] slot then removes [aggregate_function] and [aggregate_column] after theyâ€™ve been processed.
 *
 * - An additional [add] slot dynamically injects any **remaining optional filtering arguments** into the [where] clause, 
 *   supporting **dynamic filtering**. If filters are provided, they are added to the query under an [and] node; if not, 
 *   the query operates on the full dataset.
 *
 * The [data.read] slot performs the actual SQL query:
 * - It selects from the 'Treatments' table, left-joining the 'Patients' table for additional filtering options.
 * - It groups results by [group_column], applies the aggregate function, and returns both.
 * - Filtering conditions are applied dynamically through the [where] node.
 *
 * The [return-nodes] slot returns the grouped and aggregated result set to the caller.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Treatments.TreatmentID.eq:long
   Treatments.PatientID.eq:long
   Treatments.TreatmentDate.eq:date
   Treatments.Description.like:string
   Treatments.Description.eq:string
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Treatments.TreatmentID
   .:Treatments.PatientID
   .:Treatments.TreatmentDate
   .:Treatments.Description
   .:PatientID.FirstName

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Treatments.TreatmentID
   .:Treatments.PatientID
   .:Treatments.TreatmentDate
   .:Treatments.Description
   .:PatientID.FirstName

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Treatments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Treatments.PatientID:PatientID.PatientID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
