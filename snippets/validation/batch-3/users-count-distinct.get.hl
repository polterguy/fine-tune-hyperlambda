
/*
 * Count distinct values from a column in the users table of your CRM database.
 *
 * Requires:
 * - [distinct_column] in the format TABLE_NAME.COLUMN_NAME (e.g. users.role)
 *
 * Optional:
 * - Filtering using any supported user fields, such as user_id, password, email, role.
 *
 * Notes:
 * - Returns the result as [count].
 * - Adds Cache-Control headers.
 * - Verifies guest-level user access.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments.
    *
    * Since these are added to [where] condition using [add], these arguments are optional
    */
   users.user_id.mt:long
   users.user_id.lt:long
   users.user_id.mteq:long
   users.user_id.lteq:long
   users.user_id.neq:long
   users.user_id.eq:long
   users.password.like:string
   users.password.mt:string
   users.password.lt:string
   users.password.mteq:string
   users.password.lteq:string
   users.password.neq:string
   users.password.eq:string
   users.email.like:string
   users.email.mt:string
   users.email.lt:string
   users.email.mteq:string
   users.email.lteq:string
   users.email.neq:string
   users.email.eq:string
   users.role.like:string
   users.role.mt:string
   users.role.lt:string
   users.role.mteq:string
   users.role.lteq:string
   users.role.neq:string
   users.role.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:users.user_id
   .:users.username
   .:users.password
   .:users.email
   .:users.role

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:users
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
