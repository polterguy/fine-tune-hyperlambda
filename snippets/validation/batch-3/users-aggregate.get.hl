
/*
 * Return an aggregated value (min, max, avg, or sum) from a column in the users table in your CRM database.
 *
 * Requires:
 * - [aggregate_function] - must be one of: min, max, sum, avg
 * - [aggregate_column] - fully qualified format: TABLE_NAME.COLUMN_NAME
 *
 * Applies optional filtering via user_id, password, email, or role.
 * Verifies guest-level authentication.
 * Adds Cache-Control response headers.
 * Aggregated result is returned in the [result] node.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    *
    * Since these are added to [where] condition using [add], these arguments are optional
    */
   users.user_id.mt:long
   users.user_id.lt:long
   users.user_id.mteq:long
   users.user_id.lteq:long
   users.user_id.neq:long
   users.user_id.eq:long
   users.password.like:string
   users.password.mt:string
   users.password.lt:string
   users.password.mteq:string
   users.password.lteq:string
   users.password.neq:string
   users.password.eq:string
   users.email.like:string
   users.email.mt:string
   users.email.lt:string
   users.email.mteq:string
   users.email.lteq:string
   users.email.neq:string
   users.email.eq:string
   users.role.like:string
   users.role.mt:string
   users.role.lt:string
   users.role.mteq:string
   users.role.lteq:string
   users.role.neq:string
   users.role.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:users.user_id
   .:users.username
   .:users.password
   .:users.email
   .:users.role

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:users
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
