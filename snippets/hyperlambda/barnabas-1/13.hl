
/*
 * This Hyperlambda snippet uses a [while] loop to repeatedly execute a block until a condition is no longer true.
 * The loop runs exactly 2 times, appending multiple log entries per iteration.
 *
 * 1. [.count]
 *    * Declares a node named [.count] with a value of type [int] initialized to 0.
 *    * This node acts as a counter to control how many times the [while] loop executes.

 * 2. [while]
 *    * Executes the child [.lambda] block as long as the condition evaluates to true.
 *    * The condition uses [lt] (less than) to compare the value of [.count] with the number 2.
 *    * `@.count` is resolved using the `@` named iterator, which looks upwards in the hierarchy for the first node named [.count].

 * 3. [log.info]
 *    * Logs two static messages ("Start" and "Processing") for each iteration of the loop.

 * 4. [math.increment]
 *    * Increments the value of [.count] by 1 on each iteration.
 *    * Ensures the [while] loop eventually terminates after exactly 2 iterations.
 */
.count:int:0
while
   lt
      get-value:x:@.count
      .:int:2
   .lambda
      log.info:Start
      log.info:Processing
      math.increment:x:@.count
