/*
 * This Hyperlambda code illustrates the use of nested [try] blocks with [.finally].
 * The inner [try] block raises an exception, yet the [finally] block is executed.
 * The outcome should set [.errorOccurred] to `true`.
 *
 * Notice, the [.catch] node will still execute, since the [.finally] lambda doesn't prevent the exception from propagating.
 * So the value of the [.error] node will be `true` after execution.
 */
.errorOccurred:bool:false
.error
try
   try
      throw:bar
   .finally
      set-value:x:@.errorOccurred
         .:bool:true
.catch
   set-value:x:@.error
      .:bool:true