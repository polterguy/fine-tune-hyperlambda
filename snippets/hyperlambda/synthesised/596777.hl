/*
 * This Hyperlambda code defines a dynamic slot named "generate_fibonacci_until_100".
 * The slot calculates the Fibonacci sequence up to the number 100.
 * It initializes two variables, [.x] and [.y], to represent the first two numbers in the sequence.
 * The while loop continues as long as the current Fibonacci number is less than 100.
 * Within the loop, it calculates the next Fibonacci number, checks if it's below 100, and adds it to the [.fibonacci_sequence] node.
 * It then updates the variables [.x] and [.y] to the next numbers in the sequence.
 * Finally, it yields the sequence of Fibonacci numbers calculated.
 */
slots.create:generate_fibonacci_until_100
   .fibonacci_sequence
   .x:int:0
   .y:int:1
   while
      lt
         get-value:x:@.y
         .:int:100
      .lambda

         // Calculate the next Fibonacci number
         .next_value.int
         set-value:x:@.next_value.int
            math.add
               get-value:x:@.x
               get-value:x:@.y
         if
            lt
               get-value:x:@.y
               .:int:100
            .lambda
               unwrap:x:+/*/*
               add:x:../*/.fibonacci_sequence
                  .
                     .:x:@.next_value.int
         set-value:x:@.x
            get-value:x:@.y
         set-value:x:@.y
            get-value:x:@.next_value.int
   yield
      sequence:x:@.fibonacci_sequence/*
