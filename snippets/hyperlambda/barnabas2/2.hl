
/*
 * This Hyperlambda snippet creates a dynamic slot named [math.average] that calculates the average of a list of integers.
 * It performs validation, computes the total sum, counts the elements, and returns the average using [yield].
 *
 * 1. [slots.create]
 *    * Declares a new custom slot named [math.average] that can be executed using [execute].

 * 2. [validators.mandatory]
 *    * Ensures that the [numbers] argument is present when the slot is invoked.

 * 3. [validators.integer]
 *    * Validates that each child node under [numbers] contains an integer value.

 * 4. [.sum]
 *    * A temporary node initialized to [0] to accumulate the total sum of all numbers.

 * 5. [for-each]
 *    * Iterates through each number under [numbers].

 * 6. [set-value] (within loop)
 *    * Updates [.sum] by adding the current number’s value to the existing sum.
 *    * Uses `@.dp/#` to access the current loop item’s value.

 * 7. [.count] and [get-count]
 *    * Creates a [.count] node that stores the number of elements in the [numbers] list.

 * 8. [math.divide]
 *    * Divides the total sum by the count of numbers to compute the average.

 * 9. [yield]
 *    * Returns the computed average to the caller inside a node named [average].
 */
slots.create:math.average

   // Making sure caller supplied at least one integer value in [numbers] argument collection.
   validators.mandatory:x:@.arguments/*/numbers
   validators.integer:x:@.arguments/*/numbers/*

   // Initialize sum to 0
   .sum:int:0

   // Add each number to the sum
   for-each:x:@.arguments/*/numbers/*
      set-value:x:@.sum
         math.add
            get-value:x:@.sum
            get-value:x:@.dp/#

   // Count the number of values
   .count
   set-value:x:@.count
      get-count:x:@.arguments/*/numbers/*

   // Divide sum by count
   math.divide
      get-value:x:@.sum
      get-value:x:@.count

   // Return average
   yield
      average:x:@math.divide