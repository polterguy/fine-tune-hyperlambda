
/*
 * This Hyperlambda snippet defines an HTTP endpoint that determines if a number is even or odd.
 * It returns a [result] node with a value of either 'even' or 'odd'.
 *
 * 1. [.arguments]
 *    * Declares the input arguments for the HTTP endpoint.
 *    * Accepts a single required argument named [number] of type [int].

 * 2. [if]
 *    * Evaluates a condition to determine whether the number is even.
 *    * Inside the [if], the expression uses [math.modulo] to compute the remainder of [number] divided by 2.

 * 3. [math.modulo]
 *    * Computes the remainder of dividing [number] by 2.
 *    * `@.arguments` is resolved using the `@` named iterator, locating the nearest [.arguments] node upwards.
 *    * `*` retrieves all children, and `number` matches the target argument node.

 * 4. [eq]
 *    * Compares the result of [math.modulo] to [0] to check if the number is evenly divisible by 2.
 *    * If the result is [0], the number is even.

 * 5. [yield]
 *    * Returns the result to the HTTP caller.
 *    * If the number is even, [result] is set to 'even'; otherwise, itâ€™s set to 'odd'.

 * 6. [else]
 *    * Provides the fallback branch for the [if] condition.
 *    * Executed when the number is not evenly divisible by 2.
 */
.arguments
   number:int
if
   eq
      math.modulo
         get-value:x:@.arguments/*/number
         .:int:2
      .:int:0
   .lambda
      yield
         result:even
else
   yield
      result:odd
