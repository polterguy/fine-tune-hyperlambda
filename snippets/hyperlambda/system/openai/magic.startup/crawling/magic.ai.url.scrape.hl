
/*
 * Scrapes specified [url] and creates machine learning training snippets from page,
 * by semantically chopping up page into training snippets.
 *
 * Arguments:
 *
 * - [url] - What URL to scrape.
 * - [type] - What type to import training snippets into.
 * - [summarize] - If true will summarize all training snippets that are larger than 1,000 tokens.
 * - [headers] - Optional collection of HTTML headers we should associate with HTTP request.
 * - [images] - If true will import images
 * - [lists] - If true will import lists
 * - [code] - If true will import code
 */
slots.create:magic.ai.url.scrape

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/url
   validators.mandatory:x:@.arguments/*/type
   validators.url:x:@.arguments/*/url

   // Ensuring defaults.
   validators.default:x:@.arguments
      summarize:bool:true
      images:bool:true
      lists:bool:true
      code:bool:true

   // Signaling frontend.
   .msg
   set-value:x:@.msg
      strings.concat
         .:"Scraping "
         get-value:x:@.arguments/*/url
   unwrap:x:+/**
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:x:@.msg
         type:info
   sleep:100

   // Making sure we trap exceptions.
   try

      // Fetching HTML from URL.
      .html
      add:x:+/+
         get-nodes:x:@.arguments/*/headers
         get-nodes:x:@.arguments/*/feedback-channel
      unwrap:x:+/*
      signal:magic.ai.url.get
         url:x:@.arguments/*/url
      set-value:x:@.html
         get-value:x:@signal

      // Creating training snippets from page.
      unwrap:x:+/*
      signal:magic.ai.html.extract
         html:x:@.html
         url:x:@.arguments/*/url
         feedback-channel:x:@.arguments/*/feedback-channel
         images:x:@.arguments/*/images
         lists:x:@.arguments/*/lists
         code:x:@.arguments/*/code

      // URLs we return to caller.
      .urls
      add:x:@.urls
         get-nodes:x:@signal/*/urls/*

      /*
       * Signaling frontend with meta data extracted from page.
       *
       * This provides valuable feedback to user about what training
       * snippets we found on page.
       */
      if
         mt
            get-count:x:@signal/*/snippets/*
            .:int:0
         .lambda

            // We found at least one main section on page.
            get-count:x:@signal/*/snippets/*
            strings.concat
               .:"Found "
               get-count:x:@signal/*/snippets/*
               .:" training snippets on page"
            unwrap:x:+/**
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:x:@strings.concat
                  type:info
            sleep:100

      // Buffer for training snippets found as we chopped up page.
      .snippets
      add:x:@.snippets
         get-nodes:x:@signal/*/snippets/*

      // Making sure we found anything on page, and if not, warning user.
      if
         eq
            get-count:x:@.snippets/*
            .:int:0
         .lambda

            // Warning user.
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:WARNING! We could not find any training snippets at the specified URL!
                  type:warning
            sleep:100

      else

         /*
          * Checking if caller wants to summarize snippets that are too long, and if
          * yes, we invoke OpenAI to have it summarize all training snippets that
          * are too long to be useful as training snippets.
          */
         if
            and
               exists:x:@.arguments/*/summarize
               eq:x:@.arguments/*/summarize
                  .:bool:true
            .lambda

               /*
                * Caller wants to summarize long snippets, figuring out max size of snippets,
                * which are max_context_tokens * 0.80.
                *
                * This ensures that a text context will almost always have extra room for images.
                */
               .max-size
               .api-key
               .model
               data.connect:[generic|magic]

                  // Retrieving maximum context tokens for type from database.
                  data.read
                     table:ml_types
                     columns
                        max_context_tokens
                        api_key
                        model
                     where
                        and
                           type.eq:x:@.arguments/*/type

                  // Making sure we use 80% of max context tokens as maximum size for snippets.
                  set-value:x:@.max-size
                     math.multiply
                        convert:x:@data.read/*/*/max_context_tokens
                           type:decimal
                        .:decimal:0.8
                  set-value:x:@.max-size
                     convert:x:@.max-size
                        type:int
                  set-value:x:@.api-key
                     get-value:x:@data.read/*/*/api_key
                  set-value:x:@.model
                     get-value:x:@data.read/*/*/model

               // Looping through all snippets to check their size.
               for-each:x:@.snippets/*

                  // Concatenating prompt and completion.
                  .tmp
                  set-value:x:@.tmp
                     strings.concat
                        get-value:x:@.dp/#/*/prompt
                        .:"\r\n"
                        .:"\r\n"
                        get-value:x:@.dp/#/*/completion


                  // Checking if there are too many tokens in snippet.
                  if
                     mt
                        openai.tokenize:x:@.tmp
                        get-value:x:@.max-size
                     .lambda

                        // Informing frontend of that we're about to summarize snippet.
                        sockets.signal:x:@.arguments/*/feedback-channel
                           args
                              message:Summarizing snippet since it is larger than 80% of maximum context size for type
                              type:info
                        sleep:100

                        // Creating our bearer token.
                        .token
                        set-value:x:@.token
                           strings.concat
                              .:"Bearer "
                              get-first-value
                                 get-value:x:@.api-key
                                 config.get:"magic:openai:key"

                        // Making sure we try to summarize snippet 3 times before giving up.
                        .no:int:3
                        while
                           mt:x:@.no
                              .:int:0
                           .lambda

                              // Making sure we catch exceptions.
                              try

                                 // Invoking OpenAI to summarize snippet.
                                 unwrap:x:+/**
                                 http.post:"https://api.openai.com/v1/chat/completions"
                                    headers
                                       Authorization:x:@.token
                                       Content-Type:application/json
                                    payload
                                       model:x:@.model
                                       max_tokens:x:@.max-size
                                       temperature:decimal:0.3
                                       messages
                                          .
                                             role:system
                                             content:Create a summary of the following information
                                          .
                                             role:user
                                             content:x:@.dp/#/*/completion
                                    convert:true

                                 // Checking that above invocation returned success.
                                 if
                                    eq:x:@http.post
                                       .:int:400
                                    .lambda

                                       // Probably too many tokens to summarize.
                                       sockets.signal:x:@.arguments/*/feedback-channel
                                          args
                                             message:Could not summarize snippet, check your log for details
                                             type:warning
                                       sleep:100
                                       lambda2hyper:x:@http.post
                                       log.error:Something went wrong while invoking OpenAI
                                          message:x:@http.post/*/content/*/error/*/message
                                          status:x:@http.post
                                          error:x:@lambda2hyper

                                       // Making sure we don't try again.
                                       set-value:x:@.no
                                          .:int:0

                                 else-if
                                    and
                                       mte:x:@http.post
                                          .:int:200
                                       lt:x:@http.post
                                          .:int:300
                                    .lambda

                                       // Success creating summary.
                                       sockets.signal:x:@.arguments/*/feedback-channel
                                          args
                                             message:Successfully created summary of snippet
                                             type:info
                                       sleep:100

                                       // Updating completion.
                                       set-value:x:@.dp/#/*/completion
                                          strings.trim:x:@http.post/*/content/*/choices/0/*/message/*/content
                                             .:"\r\n\t "

                                       // Updating prompt.
                                       set-value:x:@.dp/#/*/prompt
                                          strings.concat
                                             .:"Summary; "
                                             strings.substring:x:@.dp/#/*/prompt
                                                .:int:0
                                                .:int:150

                                       // Making sure we don't try again.
                                       set-value:x:@.no
                                          .:int:0

                                 else

                                    // Oops, could not summarize snippet.
                                    sockets.signal:x:@.arguments/*/feedback-channel
                                       args
                                          message:Could not summarize snippet, check your log for details. Trying again in 3 seconds.
                                          type:warning
                                    sleep:3000
                                    lambda2hyper:x:@http.post
                                    log.error:Something went wrong while invoking OpenAI
                                       message:x:@http.post/*/content/*/error/*/message
                                       status:x:@http.post
                                       error:x:@lambda2hyper

                                    // Decrementing [.no] such that we don't end up in an infinite loop.
                                    math.decrement:x:@.no

                              .catch

                                 // Decrementing [.no] such that we don't end up in an infinite loop.
                                 math.decrement:x:@.no

         // Number of snippets that are below threshold and hence won't be imported.
         .below-threshold:int:0

         // Total snippets found on page.
         .total-snippets
         set-value:x:@.total-snippets
            get-count:x:@.snippets/*

         // Snippets that already exists.
         .already-exists:int:0

         // Number of snippets that failed as we tried to summarize them.
         .failed:int:0

         /*
          * Creating training snippets from result of above invocation
          * but first we need to open database connection.
          */
         data.connect:[generic|magic]

            // Verifying that type exists.
            data.read
               table:ml_types
               columns
                  id
               where
                  and
                     type.eq:x:@.arguments/*/type
            if
               not-exists:x:@data.read/*
               .lambda

                  // Oops, type does not exist.
                  throw:Machine learning type does not exist.
                     type:x:@.arguments/*/type

            /*
             * Deleting all training snippets matching type, URL, and meta.
             *
             * Notice, we need to delete records from VSS table too to avoid "dangling references",
             * and we also count items we delete before we delete, to inform user of how many existing
             * snippets are to be "overwritten".
             */
            data.read
               table:ml_training_snippets
               columns
                  count(*)
                     as:count
               where
                  and
                     type.eq:x:@.arguments/*/type
                     uri.eq:x:@.arguments/*/url
                     meta.eq:AINIRO-Website-Crawler
            if
               neq
                  convert:x:@data.read/*/*/count
                     type:int
                  .:int:0
               .lambda

                  // We have old snippets with the same URL, informing user of how many snippets we're deleting.
                  strings.concat
                     .:"Deleting "
                     get-value:x:@data.read/*/*/count
                     .:" old training snippets with the same URL"
                  unwrap:x:+/**
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:x:@strings.concat
                        type:info
                  sleep:10

            // Deleting relevant records from VSS table and ml_training_snippets.
            data.execute:@"
   delete from vss_ml_training_snippets
      where rowid in (select id as rowid from ml_training_snippets where type = @type and uri = @url)"
               @type:x:@.arguments/*/type
               @url:x:@.arguments/*/url
            data.delete
               table:ml_training_snippets
               where
                  and
                     type.eq:x:@.arguments/*/type
                     uri.eq:x:@.arguments/*/url
                     meta.eq:AINIRO-Website-Crawler

            /*
             * Now looping through each snippet from above [.snippet] and inserting into database
             * as training snippets.
             */
            .similar:int:0
            for-each:x:@.snippets/*

               // Checking if completion exists and is not null for training snippet.
               if
                  and
                     exists:x:@.dp/#/*/completion
                     not-null:x:@.dp/#/*/completion
                  .lambda
                  
                     /*
                      * Verifying snippet is longer than minimum threshold required to import snippet.
                      *
                      * Notice, we skip this part of snippet is an image snippet, at which point we
                      * insert it anyway.
                      */
                     if
                        mt
                           strings.length:x:@.dp/#/*/completion
                           get-value:x:@.arguments/*/threshold
                        .lambda

                           /*
                            * Snippet is longer than minimum threshold for import, or snippet is
                            * an image, contains list elements, or hyperlinks.
                            *
                            * Verifying user can create more snippets.
                            *
                            * Notice, this is a slot that doesn't exist in Magic core, allowing
                            * us to create "plugin slots" that somehow validates whether or not the use
                            * can create additional training snippets or not.
                            *
                            * The idea is that the slot should throw an exception if user is not allowed
                            * to create additional training snippets.
                            */
                           add:x:+
                              get-nodes:x:@.arguments/*/type
                           try-signal:magic.ai.can-create-snippet

                           /*
                            * Before we insert snippet we make sure snippet doesn't
                            * already exist in database.
                            */
                           strings.concat
                              get-value:x:@.dp/#/*/completion
                              .:"\r\n"
                              .:"\r\n"
                              .:"This information was taken from [this URL]("
                              .:%
                           data.read
                              table:ml_training_snippets
                              columns
                                 id
                                 prompt
                                 completion
                                 uri
                              where
                                 and
                                    type.eq:x:@.arguments/*/type
                                    or
                                       completion.eq:x:@.dp/#/*/completion
                                       completion.like:x:@strings.concat
                           if
                              not-exists:x:@data.read/*
                              .lambda

                                 // Checking if we should insert source URL into completion.
                                 if:x:@.arguments/*/insert_url

                                    // Appending source URL as Markdown into completion.
                                    set-value:x:@.dp/#/*/completion
                                       strings.concat
                                          get-value:x:@.dp/#/*/completion
                                          .:"\r\n"
                                          .:"\r\n"
                                          .:"This information was taken from [this URL]("
                                          get-value:x:@.arguments/*/url
                                          .:)

                                 // Inserting training snippet into database.
                                 data.create
                                    table:ml_training_snippets
                                    values
                                       type:x:@.arguments/*/type
                                       uri:x:@.arguments/*/url
                                       prompt:x:@.dp/#/*/prompt
                                       completion:x:@.dp/#/*/completion
                                       meta:AINIRO-Website-Crawler

                           else-if
                              eq:x:@data.read/0/*/prompt
                                 .:"Common"
                              .lambda

                                 /*
                                  * Snippet already exists in database and has already been transformed,
                                  * implying prompt was updated to "Common" - Hence we do nothing.
                                  */
                                 math.increment:x:@.already-exists

                           else-if
                              not
                                 eq:x:@data.read/*/*/prompt
                                    get-value:x:@.dp/#/*/prompt
                              .lambda

                                 /*
                                  * Snippet already exists, but with different prompt.
                                  * Updating prompt to "Common".
                                  */
                                 math.increment:x:@.similar
                                 data.update
                                    table:ml_training_snippets
                                    values
                                       prompt:Common
                                    where
                                       and
                                          id.eq:x:@data.read/0/*/id

                     else

                        // Updating count of snippets that's below threshold.
                        math.increment:x:@.below-threshold

            // Checking if we've got snippets with similar completions existing, at which point we inform user.
            if
               neq:x:@.similar
                  .:int:0
               .lambda

                  // Informing user of how many snippets we already had in database that had their prompts changed.
                  strings.concat
                     get-value:x:@.similar
                     .:" snippets with similar completion exists, updating prompt to 'Common'"
                  unwrap:x:+/**
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:x:@strings.concat
                        type:info
                  sleep:10

         // Informing user that we're done creating training snippets from specified URL.
         .imported
         set-value:x:@.imported
            math.subtract:x:@.total-snippets
               math.add
                  get-value:x:@.below-threshold
                  get-value:x:@.already-exists

         // Checking how many snippets was below threshold, and informing user.
         if
            mt:x:@.below-threshold
               .:int:0
            .lambda

               // Informing user how many snippets was below threshold and hence was not imported.
               strings.concat
                  get-value:x:@.below-threshold
                  .:" snippets was below threshold and hence was not imported"
               unwrap:x:+/**
               sockets.signal:x:@.arguments/*/feedback-channel
                  args
                     message:x:@strings.concat
                     type:info
               sleep:100

         // Checking how many snippets that already existed and informing user.
         if
            mt:x:@.already-exists
               .:int:0
            .lambda

               // Informing user how many snippets was below threshold and hence was not imported.
               strings.concat
                  get-value:x:@.already-exists
                  .:" snippets already exists in database and hence was not imported"
               unwrap:x:+/**
               sockets.signal:x:@.arguments/*/feedback-channel
                  args
                     message:x:@strings.concat
                     type:info
               sleep:100

         // Checking how many snippets that failed during inserts.
         if
            mt:x:@.failed
               .:int:0
            .lambda

               // Informing user how many snippets was below threshold and hence was not imported.
               strings.concat
                  get-value:x:@.failed
                  .:" snippets failed during import, probably because of OpenAI not being able to summarize them"
               unwrap:x:+/**
               sockets.signal:x:@.arguments/*/feedback-channel
                  args
                     message:x:@strings.concat
                     type:warning
               sleep:100

         // Making sure we were able to actually import anything.
         if
            mt:x:@.imported
               .:int:0
            .lambda

               // Successfully imported at least one snippet.
               strings.concat
                  .:"Done importing or updating "
                  get-value:x:@.imported
                  .:" training snippets from page"
               unwrap:x:+/**
               sockets.signal:x:@.arguments/*/feedback-channel
                  args
                     message:x:@strings.concat
                     type:info
               sleep:100

         else

            // Could not import anything!
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:We were not able to successfully import any snippets from page!
                  type:warning
            sleep:100

      // Returning all URLs found during scraping to caller.
      return:x:@.urls/*

   .catch

      // We might end up here if URL doesn't return HTML for instance
      strings.concat
         .:"Something went wrong as we tried to scrape URL, error was: '"
         get-value:x:@.arguments/*/message
         .:"'"
      unwrap:x:+/**
      sockets.signal:x:@.arguments/@.arguments/*/feedback-channel
         roles:root
         args
            message:x:@strings.concat
            type:warning
      sleep:100
      
