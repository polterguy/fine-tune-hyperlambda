/*
 * This Hyperlambda snippet demonstrates the use of conditional branching with [if], [else-if], and [else] slots.
 * It evaluates a condition and executes code based on the result of that condition.
 *
 * 1. [set-value]
 *    * Sets the value of a specified node.
 *
 * 2. [if]
 *    * Checks if a condition is true. If it is, the code within its [.lambda] child node is executed.
 *
 * 3. [else-if]
 *    * Checks if a condition is true only if the previous [if] condition was false. If it is, the code within its [.lambda] child node is executed.
 *
 * 4. [else]
 *    * Executes the code within it if none of the previous conditions were true.
 *
 * 5. [get-value]
 *    * Retrieves the value of a specified node.
 *
 * 6. [eq]
 *    * Compares two values for equality.
 *
 * The code sets the value of the [.result] node based on the value of the [.input] node. If [.input] is 1, [.result] is set to "Matched 1".
 * If [.input] is 2, [.result] is set to "Matched 2". If [.input] is neither 1 nor 2, [.result] is set to "No match".
 */
.input:int:3
.result

if
   eq:x:@.input
      .:int:1
   .lambda
      set-value:x:@.result
         .:Matched 1

else-if
   eq:x:@.input
      .:int:2
   .lambda
      set-value:x:@.result
         .:Matched 2

else
   set-value:x:@.result
      .:No match
