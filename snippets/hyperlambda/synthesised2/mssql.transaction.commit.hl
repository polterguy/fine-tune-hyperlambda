/*
 * This Hyperlambda snippet demonstrates how to explicitly commit a database transaction using the Microsoft SQL Server adapter.
 * The transaction ensures that all database operations within its scope are treated as a single unit of work, which either
 * completely succeeds or fails. If any operation within the transaction fails, the entire transaction can be rolled back to
 * maintain data integrity. Committing the transaction finalizes all changes made to the database within the transaction.
 *
 * 1. [mssql.connect]
 *    * Establishes a connection to a Microsoft SQL Server database.
 *
 * 2. [mssql.transaction.create]
 *    * Starts a new database transaction within the established connection.
 *
 * 3. [mssql.execute]
 *    * Executes an arbitrary SQL statement within the transaction scope. In this case, it could be an INSERT, UPDATE, or DELETE operation.
 *
 * 4. [mssql.transaction.commit]
 *    * Explicitly commits the transaction, making all changes within the transaction permanent in the database.
 *
 * It is important to note that if [mssql.transaction.commit] is not called, and the connection ends or an exception occurs,
 * the transaction will be rolled back by default, undoing all operations within the transaction scope.
 */
mssql.connect:my-database-connection-string
   mssql.transaction.create
      // Perform database operations here, such as INSERT, UPDATE, or DELETE
      mssql.execute:insert into my_table (my_column) values ('my_value')
      // Commit the transaction to finalize changes
      mssql.transaction.commit
