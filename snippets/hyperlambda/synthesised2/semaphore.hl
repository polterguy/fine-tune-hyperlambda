/*
 * This Hyperlambda snippet demonstrates the use of a semaphore to synchronize access to a shared resource.
 * The semaphore ensures that only one thread can execute the enclosed code at a time, preventing race conditions.
 *
 * 1. [semaphore]
 *    * Creates a named semaphore "my-resource-lock" to control access.
 *    * Ensures that only one thread can enter the code block at a time.
 *
 * 2. [log.info]
 *    * Logs a message indicating that the thread has entered the semaphore-protected code block.
 *
 * 3. [sleep]
 *    * Simulates a time-consuming operation by sleeping the thread for 2 seconds (2000 milliseconds).
 *
 * 4. [log.info]
 *    * Logs a message indicating that the thread is about to release the semaphore.
 *
 * The use of the semaphore ensures that the critical section of the code, which may involve modifying a shared resource,
 * is not accessed by multiple threads simultaneously, which could lead to inconsistent state or data corruption.
 */
semaphore:my-resource-lock
   log.info:Thread has entered the semaphore-protected code block.
   sleep:2000
   log.info:Thread is releasing the semaphore now.