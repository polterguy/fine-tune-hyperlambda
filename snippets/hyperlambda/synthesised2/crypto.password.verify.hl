/*
 * This Hyperlambda snippet demonstrates the use of the [crypto.password.verify] slot to check if a provided password
 * matches a previously hashed password. This is commonly used in authentication systems to validate user credentials
 * without storing plain-text passwords.
 *
 * 1. [crypto.password.hash]
 *    * Hashes a plain-text password using the Blowfish algorithm, which is suitable for password hashing due to its
 *      computational cost that can be adjusted to make brute-force attacks less feasible.
 *
 * 2. [set-value]
 *    * Stores the hashed password into the [.hashed-password] node for later verification.
 *
 * 3. [crypto.password.verify]
 *    * Verifies if the provided plain-text password matches the stored hashed password.
 *    * The result of the verification is stored in the [.verification-result] node.
 *    * The verification process is crucial for security, ensuring that the system can authenticate users without
 *      needing to handle or store their actual passwords, thus reducing the risk of password leaks.
 *
 * The code assumes that the [.password-to-verify] node contains the plain-text password that needs to be verified
 * against the stored hash.
 */
.hashed-password
crypto.password.hash:my-secret-password
set-value:x:@.hashed-password
   :x:@crypto.password.hash

.password-to-verify:my-secret-password
crypto.password.verify:x:@.password-to-verify
   hash:x:@.hashed-password
