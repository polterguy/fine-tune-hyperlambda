/*
 * This Hyperlambda snippet demonstrates how to roll back an existing open database transaction using the Microsoft SQL Server adapter.
 * Rolling back a transaction undoes all the changes made to the database within the transaction scope.
 *
 * 1. [mssql.connect]
 *    * Establishes a connection to a Microsoft SQL Server database.
 *
 * 2. [mssql.transaction.create]
 *    * Creates a new database transaction.
 *
 * 3. [mssql.execute]
 *    * Executes an arbitrary SQL statement within the transaction scope.
 *    * In this example, it attempts to delete records from the "film_actor" table.
 *
 * 4. [mssql.transaction.rollback]
 *    * Rolls back the transaction, undoing the delete operation.
 *    * This ensures that the changes are not permanently applied to the database.
 *
 * 5. [mssql.scalar]
 *    * Executes a SQL statement to count the number of records in the "film_actor" table.
 *    * This is used to verify that the rollback was successful and the records remain unchanged.
 *
 * The result of the [mssql.scalar] invocation will indicate that the delete operation was not committed,
 * and therefore the count of records should match the initial state before the transaction started.
 */
mssql.connect:sakila
   mssql.transaction.create
      mssql.execute:delete from film_actor
      mssql.transaction.rollback
   mssql.scalar:select count(*) from film_actor
