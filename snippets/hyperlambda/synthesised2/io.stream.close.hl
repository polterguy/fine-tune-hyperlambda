/*
 * This Hyperlambda code demonstrates how to explicitly close a stream that has been previously opened.
 * It is important to note that directly manipulating streams is typically not necessary in high-level
 * Hyperlambda operations, as slots like [io.file.load] abstract away the need to handle streams directly.
 * However, in scenarios where a stream is opened for operations like handling HTTP request streams or
 * file uploads, the [io.stream.close] slot provides the ability to ensure that the stream is properly closed.
 *
 * 1. [io.stream.open-file]
 *    * Opens a file stream for the specified file path.
 *    * The file stream is then available for further operations.
 *
 * 2. [io.stream.close]
 *    * Closes the previously opened file stream.
 *    * It is targeted by using the expression 'x:-' which refers to the previous sibling node,
 *      in this case, the node representing the opened file stream.
 *
 * Usage Note:
 * * Directly opening and closing streams should be done with caution to avoid resource leaks.
 * * Streams returned over HTTP response objects are managed by .NET and do not require explicit closing.
 */
io.stream.open-file:/path/to/file.txt
io.stream.close:x:-