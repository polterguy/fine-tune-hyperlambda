/*
 * This Hyperlambda code snippet demonstrates how to explicitly commit an open database transaction using the MySQL data adapter.
 * Committing a transaction ensures that all the operations performed within the transaction are permanently saved to the database.
 *
 * 1. [mysql.connect]
 *    * Establishes a connection to a MySQL database using a connection string.
 *
 * 2. [mysql.transaction.create]
 *    * Starts a new database transaction within the current MySQL connection scope.
 *
 * 3. [mysql.execute]
 *    * Executes an arbitrary SQL statement within the transaction.
 *    * In this example, it deletes records from a table named 'employees'.
 *
 * 4. [mysql.transaction.commit]
 *    * Commits the transaction, making all changes within the transaction permanent.
 *    * If this slot is not invoked, the transaction will roll back by default when the connection scope ends.
 *
 * Usage:
 * * This pattern is used when you want to ensure that a set of database operations either all succeed or fail together.
 * * It's crucial in maintaining data integrity and consistency, especially in scenarios involving multiple related changes.
 */
mysql.connect:my-connection-string
   mysql.transaction.create
      mysql.execute:delete from employees where department = 'Sales'
      mysql.transaction.commit
