/*
 * This Hyperlambda snippet demonstrates how to cryptographically sign a message using an RSA private key.
 * The process involves generating an RSA key pair, signing a message with the private key, and then
 * verifying the signature using the corresponding public key.
 *
 * 1. [crypto.rsa.create-key]
 *    * Generates a new RSA key pair with a default strength of 2048 bits.
 *
 * 2. [crypto.rsa.sign]
 *    * Signs the provided message using the RSA private key generated in step 1.
 *    * The message to be signed is referenced by an expression pointing to the [.message] node.
 *    * The private key for signing is obtained by an expression pointing to the private key node
 *      within the result of the [crypto.rsa.create-key] invocation.
 *
 * 3. [crypto.rsa.verify]
 *    * Verifies the signature of the message using the RSA public key.
 *    * The message being verified is referenced by an expression pointing to the [.message] node.
 *    * The signature to be verified is obtained by an expression pointing to the result of the
 *      [crypto.rsa.sign] invocation.
 *    * The public key for verification is obtained by an expression pointing to the public key node
 *      within the result of the [crypto.rsa.create-key] invocation.
 *
 * The code ensures that the message has not been tampered with, by verifying the signature using the
 * public key. If the verification fails, an exception will be thrown, indicating that the message
 * integrity could not be confirmed.
 */
.message:Some message you wish to sign

crypto.rsa.create-key

// Signing the message using the private key
crypto.rsa.sign:x:@.message
   private-key:x:@crypto.rsa.create-key/*/private

// Verifying the signature using the public key
crypto.rsa.verify:x:@.message
   signature:x:@crypto.rsa.sign
   public-key:x:@crypto.rsa.create-key/*/public