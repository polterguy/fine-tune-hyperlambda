/*
 * This Hyperlambda snippet demonstrates the creation of a database transaction. A transaction ensures that a series of database operations either all succeed or all fail, maintaining data integrity.
 *
 * 1. [data.connect]
 *    * Opens a database connection using the specified connection string or database name.
 *
 * 2. [data.transaction.create]
 *    * Initiates a new database transaction within the established connection.
 *    * All subsequent database operations within this connection will be part of the transaction.
 *
 * 3. [data.execute]
 *    * Executes a non-query SQL command (like an INSERT, UPDATE, or DELETE) within the transaction.
 *    * In this example, it attempts to delete records from a table named 'example_table'.
 *
 * 4. [data.transaction.commit]
 *    * Commits the transaction, making all changes within the transaction permanent in the database.
 *    * This node is commented out to demonstrate that if not explicitly committed, the transaction will roll back.
 *
 * 5. [data.transaction.rollback]
 *    * Explicitly rolls back the transaction, undoing all changes made within the transaction.
 *    * This node is optional and shown here for illustrative purposes.
 *
 * Usage Note:
 * * Uncomment the [data.transaction.commit] node to persist changes made within the transaction.
 * * The [data.transaction.rollback] node can be used to revert changes when certain conditions are met.
 */
data.connect:my_database
   data.transaction.create
      // Perform database operations that should be part of the transaction
      data.execute:delete from example_table where condition = true

      // Commit the transaction to make changes permanent
      // data.transaction.commit

      // Explicitly roll back the transaction if needed
      // data.transaction.rollback
