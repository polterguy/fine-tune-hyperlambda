/*
 * This Hyperlambda snippet demonstrates the use of [else-if] in a conditional branching scenario.
 * It evaluates a series of conditions and executes code blocks based on the first true condition.
 *
 * 1. [data]
 *    * Defines a data segment with a numeric value for comparison.
 *
 * 2. [result]
 *    * Initializes a result node to store the outcome of the conditional checks.
 *
 * 3. [if]
 *    * The initial conditional check to compare the [data] value with 10.
 *    * If true, sets the [result] value to "Equal to 10".
 *
 * 4. [else-if]
 *    * A secondary conditional check that only evaluates if the [if] condition is false.
 *    * Compares the [data] value with 20.
 *    * If true, sets the [result] value to "Equal to 20".
 *
 * 5. [else-if]
 *    * Another conditional check following the previous [else-if].
 *    * Compares the [data] value with 30.
 *    * If true, sets the [result] value to "Equal to 30".
 *
 * 6. [else]
 *    * The default block that executes if none of the above conditions are true.
 *    * Sets the [result] value to "None of the conditions are met".
 *
 * The snippet illustrates how [else-if] can be used to handle multiple conditions in a sequence,
 * where each condition is evaluated only if all preceding conditions have been false.
 */
.data:int:25
.result

if
   eq:x:@.data
      .:int:10
   set-value:x:@.result
      .:Equal to 10

else-if
   eq:x:@.data
      .:int:20
   set-value:x:@.result
      .:Equal to 20

else-if
   eq:x:@.data
      .:int:30
   set-value:x:@.result
      .:Equal to 30

else
   set-value:x:@.result
      .:None of the conditions are met