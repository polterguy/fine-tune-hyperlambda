/*
 * This Hyperlambda snippet demonstrates the use of the [eq] slot to compare two values for equality.
 * It sets up a source node with an integer value and then uses [eq] to compare the source node's value
 * to a static integer value. If the values are equal, the result node is set to true; otherwise, it remains false.
 *
 * 1. [.src]
 *    * Defines a source node with an integer value of 5.
 *
 * 2. [eq]
 *    * The equality comparison slot that compares two values.
 *    * It takes two arguments: the value of the [.src] node and a static integer value of 5.
 *
 * 3. [set-value]
 *    * Sets the value of the [.result] node.
 *    * It will be executed only if the [eq] comparison evaluates to true.
 *
 * 4. [.lambda]
 *    * Contains the logic to execute if the [eq] condition is true.
 *    * Sets the [.result] node's value to "Equal" indicating the comparison was successful.
 *
 * 5. [else]
 *    * The else block that executes if the [eq] comparison is false.
 *    * Sets the [.result] node's value to "Not Equal" indicating the comparison failed.
 *
 * The final outcome will be determined by whether the value of [.src] is equal to 5.
 * The [.result] node will contain either "Equal" or "Not Equal" based on this comparison.
 */
.src:int:5
.result
if
   eq
      get-value:x:@.src
      .:int:5
   .lambda
      set-value:x:@.result
         .:"Equal"
else
   set-value:x:@.result
      .:"Not Equal"