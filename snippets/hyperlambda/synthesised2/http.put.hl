/*
 * This Hyperlambda snippet demonstrates the use of the [http.put] slot to send a PUT request to a specified URL with a JSON payload.
 * It also shows how to handle the response by converting it to a Hyperlambda node structure if the response is in JSON format.
 *
 * 1. [http.put]
 *    * Sends an HTTP PUT request to the specified URL.
 *    * Includes a JSON payload in the request body.
 *    * Optionally converts the JSON response to a Hyperlambda node structure.
 *
 * 2. [payload]
 *    * Contains the JSON payload to be sent with the PUT request.
 *
 * 3. [convert]
 *    * An optional argument that, when set to true, converts the JSON response into a Hyperlambda node structure.
 *
 * 4. [set-value]
 *    * Sets the value of the [.response-content] node to the converted response content.
 *
 * 5. [if]
 *    * Checks if the HTTP status code is 200 (OK).
 *    * Executes child nodes if the condition is true.
 *
 * 6. [else]
 *    * Executes child nodes if the condition in the [if] node is false.
 *
 * 7. [log.info]
 *    * Logs an informational message indicating success or failure of the PUT request.
 *
 * 8. [.response-content]
 *    * A node to hold the response content from the PUT request.
 *
 * The result of this operation will be logged, and the response content will be stored in the [.response-content] node.
 */
http.put:"https://api.example.com/update-item"
   payload:@"{""id"": 123, ""name"": ""Updated Item"", ""price"": 49.99}"
   convert:true
set-value:x:@.response-content
   get-nodes:x:/*/*/*[content]
if
   eq:x:@.response-content/*/status-code
      .:int:200
   log.info:Successfully updated the item.
else
   log.info:Failed to update the item.
.response-content
