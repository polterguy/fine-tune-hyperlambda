/*
 * This Hyperlambda snippet demonstrates how to set a cookie in the HTTP response.
 * The cookie is configured with various attributes that control its behavior and scope.
 *
 * 1. [response.cookies.set]
 *    * Sets a cookie to be included in the HTTP response.
 *    * Configures the cookie with a name, value, and various attributes.
 *
 * 2. [value]
 *    * Specifies the value of the cookie.
 *
 * 3. [expires]
 *    * Sets the expiration date of the cookie.
 *    * Uses a Hyperlambda date value to determine when the cookie should expire.
 *
 * 4. [http-only]
 *    * Indicates whether the cookie is accessible only through HTTP requests.
 *    * A boolean value that enhances security by preventing client-side script access.
 *
 * 5. [secure]
 *    * Specifies whether the cookie should only be sent over secure connections (HTTPS).
 *    * A boolean value that ensures the cookie is transmitted in a secure manner.
 *
 * 6. [domain]
 *    * Defines the domain scope of the cookie.
 *    * Restricts the cookie to the specified domain and its subdomains.
 *
 * 7. [path]
 *    * Sets the path scope of the cookie within the domain.
 *    * Limits the cookie to the specified path and its subdirectories.
 *
 * 8. [same-site]
 *    * Controls the cookie's behavior with cross-site requests.
 *    * Helps mitigate CSRF (Cross-Site Request Forgery) attacks.
 *
 * The example sets a cookie named "user-session" with the value "abc123" that expires in 7 days.
 * The cookie is configured to be HTTP-only, secure, and restricted to the "example.com" domain and "/app" path.
 * It also specifies "Strict" for the SameSite attribute to prevent the cookie from being sent in cross-site requests.
 */
response.cookies.set:user-session
   value:abc123
   expires:date:2023-05-01T00:00:00Z
   http-only:bool:true
   secure:bool:true
   domain:example.com
   path:/app
   same-site:Strict
