/*
 * This Hyperlambda snippet demonstrates the creation of a new database transaction using the MySQL adapter.
 * It is essential for ensuring that a series of database operations either all succeed or fail together,
 * maintaining the integrity of the database state.
 *
 * 1. [mysql.connect]
 *    * Establishes a connection to a MySQL database using the provided connection string or database name.
 *
 * 2. [mysql.transaction.create]
 *    * Initiates a new database transaction within the established connection context.
 *    * Any subsequent database operations performed will be part of this transaction.
 *
 * 3. [mysql.execute]
 *    * Executes an SQL statement within the transaction.
 *    * In this example, it's a placeholder for any SQL operation like insert, update, or delete.
 *
 * 4. [mysql.transaction.commit]
 *    * Commits the transaction, making all operations within the transaction permanent in the database.
 *    * If this node is not executed and the connection closes, the transaction will be rolled back.
 *
 * 5. [mysql.transaction.rollback]
 *    * Explicitly rolls back the transaction, undoing all operations within the transaction.
 *    * This node is commented out and serves as an example of how to roll back if needed.
 *
 * Usage:
 * * Uncomment the [mysql.transaction.commit] node to commit the transaction.
 * * Uncomment the [mysql.transaction.rollback] node to roll back the transaction instead.
 * * Replace the placeholder [mysql.execute] node with actual SQL operations that need to be transactional.
 */
mysql.connect:sakila
   mysql.transaction.create
      mysql.execute:SOME SQL HERE ...!!
      // Uncomment the line below to commit the transaction
      // mysql.transaction.commit
      // Uncomment the line below to roll back the transaction
      // mysql.transaction.rollback
