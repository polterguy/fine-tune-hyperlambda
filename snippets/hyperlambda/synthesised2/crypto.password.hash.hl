/*
 * This Hyperlambda snippet demonstrates the process of hashing a password using the Blowfish algorithm.
 * The hashed password can be stored securely in a database, preventing exposure of plain text passwords.
 *
 * 1. [crypto.password.hash]
 *    * Hashes the provided password using the Blowfish algorithm.
 *    * The password to be hashed is supplied as the value of the slot.
 *    * The result is a hashed password that can be stored securely.
 *
 * 2. [set-value]
 *    * Stores the resulting hashed password into a [.hashed-password] node for later use.
 *    * The value is retrieved from the previous [crypto.password.hash] invocation.
 *
 * 3. [get-value:x:@.hashed-password]
 *    * Retrieves the value of the hashed password for demonstration purposes.
 *    * This step is typically where you would use the hashed password, for example, to store it in a database.
 *
 * The flow of the snippet:
 * * The password "my-secure-password" is hashed using Blowfish.
 * * The hashed password is stored in the [.hashed-password] node.
 * * The hashed password is then retrieved and can be used for secure storage or comparison during user authentication.
 */
.hashed-password
crypto.password.hash:my-secure-password
set-value:x:@.hashed-password
   get-value:x:@crypto.password.hash
get-value:x:@.hashed-password
