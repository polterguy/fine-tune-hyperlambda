/*
 * This Hyperlambda snippet demonstrates how to create an error log entry with additional metadata.
 * The snippet includes an exception stack trace logging feature and a conditional check to determine
 * whether to log the error based on a specific condition.
 *
 * 1. [log.error]
 *    * Logs an error message with a specific type of log item.
 *    * The message is taken from the value of the [log.error] node.
 *
 * 2. [exception]
 *    * An argument node that specifies the exception stack trace to be logged.
 *    * It is not treated as meta information but is stored in the "exception" column in the log.
 *
 * 3. [if]
 *    * A conditional check to determine if the error should be logged.
 *    * Uses a comparison slot [gt] to compare a numeric value.
 *
 * 4. [gt]
 *    * A comparison slot that checks if one value is greater than another.
 *    * In this case, it checks if the error count is greater than a threshold.
 *
 * 5. [.threshold]
 *    * A data node that holds the threshold value for the error count.
 *
 * 6. [.error-count]
 *    * A data node that holds the current error count. Not shown in the code.
 *
 * 7. [.lambda]
 *    * A lambda node that contains the logic to execute if the condition is true.
 *    * In this case, it contains the [log.error] slot to log the error.
 *
 * The code checks if the current error count exceeds the threshold. If it does, an error log entry is created
 * with the specified message and exception stack trace. The error count and threshold are hypothetical and
 * would need to be set or calculated elsewhere in the actual application.
 */
if
   gt:x:@.error-count
      get-value:x:@.threshold
   .lambda
      log.error:An error occurred that exceeded the threshold
         exception:Stack trace or exception details here
      // Additional metadata can be added here if needed

// Data nodes for holding the threshold and error count values
.threshold:int:10
.error-count:int:15
