
/*
 * Generates a frontend for you.
 */
.description:Generates a frontend for you according to the given arguments
.arguments
   templateName:string
   apiUrl:string
   frontendUrl:string
   email:string
   name:string
   copyright:string
   endpoints:*
   args:*


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/email
validators.email:x:@.arguments/*/email
validators.mandatory:x:@.arguments/*/apiUrl
validators.url:x:@.arguments/*/apiUrl


/*
 * Figuring out which template/generator to use, and invoking it.
 */
strings.concat
   .:/misc/templates/
   .:x:@.arguments/*/templateName
   .:/generate.hl
add:x:+/+/+
   get-nodes:x:@.arguments/*/endpoints
add:x:+/+
   get-nodes:x:@.arguments/*/args
unwrap:x:+/*
io.file.execute:x:@strings.concat
   apiUrl:x:@.arguments/*/apiUrl
   frontendUrl:x:@.arguments/*/frontendUrl
   email:x:@.arguments/*/email
   name:x:@.arguments/*/name
   copyright:x:@.arguments/*/copyright


/*
 * Making sure we get the HTTP headers correctly applied before we return ZIP
 * file to caller.
 */
strings.concat
   .:"attachment; filename=\""
   get-value:x:@.arguments/*/name
   .:".zip\""
response.headers.add
   Content-Type:application/zip
   Content-Disposition:x:@strings.concat
   Access-Control-Expose-Headers:Content-Disposition


/*
 * Creating a log entry with LOC that was generated.
 */
.no:int:0
for-each:x:@io.file.execute/*
   strings.split:x:@.dp/#/*
      .:"\n"
   math.increment:x:@.no
      get-count:x:@strings.split/*
strings.concat
   .:"LOC generated '"
   get-value:x:@.no
   .:"' for type 'frontend'"
   .:" with name '"
   get-value:x:@.arguments/*/name
   .:"'"
log.info:x:@strings.concat


/*
 * Creating a ZIP stream from return value of above [io.file.execute]
 * and returning it to client.
 */
add:x:+
   get-nodes:x:@io.file.execute/*
io.content.zip-stream
return-value:x:-
