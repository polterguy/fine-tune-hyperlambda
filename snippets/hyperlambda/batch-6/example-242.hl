
/*
 * This Hyperlambda script generates training data by parsing files from the 
 * '/modules/fine-tune-hyperlambda/snippets/' folder and storing valid entries 
 * into the 'hyperlambda' table of the 'fine-tune' database.
 *
 * It handles both `.hl` (Hyperlambda) and `.md` (Markdown) files differently, applying 
 * validation and tagging logic, while preventing duplicate insertions.
 *
 * 1. [.arguments]
 *    - [randomize:int] defines whether validation data is randomized (1) or determined by path.
 *    - [delete_duplicates:bool] defines whether to delete files already inserted in the DB.
 *    - Defaults applied if not passed explicitly.
 *
 * 2. [data.execute]
 *    - Deletes all previous training records from the 'hyperlambda' table to ensure a fresh insert.
 *
 * 3. [execute:magic.io.file.load-recursively]
 *    - Loads all file paths from the training snippets directory.
 *
 * 4. [for-each]
 *    - Iterates through every file returned.
 *
 * 5. [try]
 *    - Processes each file in isolation with exception handling.
 *
 * 6. [if strings.ends-with .hl]
 *    - Processes Hyperlambda files:
 *      - Converts file to lambda using [hyper2lambda] with comments.
 *      - Strips [.description] metadata if present.
 *      - Extracts and removes the top comment to use as [prompt].
 *      - Converts the remaining lambda to Hyperlambda for the [code] value.
 *      - Applies validation tagging based on:
 *         a. [randomize] + modulus counter logic.
 *         b. File path containing '/validation/'.
 *      - Flags file as [synthesised] if path contains '/synthesised'.
 *      - Checks for duplicates before inserting; deletes file if flagged as duplicate and [delete_duplicates] is true.
 *
 * 7. [else-if strings.ends-with .md]
 *    - Processes Markdown-based static training snippets:
 *      - Splits on '---' into [prompt] and [completion].
 *      - Validates the completion as valid Hyperlambda using [hyper2lambda].
 *      - Applies the same validation tagging logic as above.
 *      - Inserts with [is_static:int:1] to denote Markdown origin.
 *
 * 8. [math.increment]
 *    - Increments a counter tracking the number of inserted snippets.
 *
 * 9. [.catch]
 *    - Throws filename on error to help trace failures during processing.
 *
 * 10. [remove-nodes]
 *     - Cleans memory by removing loaded file structure after processing.
 *
 * 11. [yield]
 *     - Returns the total count of inserted snippets to the caller.
 *
 * This script helps populate a fine-tuning dataset with structured, tagged, 
 * and validated training entries, ready for conversion to JSONL or direct OpenAI use.
 */
.arguments
   randomize:int
   delete_duplicates:bool

// Applying default value for [randomize].
validators.default:x:@.arguments
   randomize:int:0
   delete_duplicates:bool:false

// Deleting old records
data.connect:fine-tune
   data.execute:delete from hyperlambda

// Loading all files recursively
execute:magic.io.file.load-recursively
   .:/modules/fine-tune-hyperlambda/snippets/

// Counting training data
.no:int:0

// Looping through all files.
for-each:x:@execute/*

   // Making sure we catch exceptions such that we can see which file fails.
   try

      // Verifying we're dealing with a Hyperlambda file.
      if
         strings.ends-with:x:@.dp/#
            .:.hl
         .lambda

            // Transforming file to lambda object.
            hyper2lambda:x:@.dp/#/0
               comments:true
            remove-nodes:x:-/*/.description
            if
               eq
                  get-name:x:@hyper2lambda/0
                  .:..
               .lambda

                  .prompt
                  set-value:x:-
                     get-value:x:@hyper2lambda/0
                  remove-nodes:x:@hyper2lambda/0

                  // Creating our code segment
                  lambda2hyper:x:@hyper2lambda/*
                     comments:true

                  // Checking if the file should be deleted.
                  if
                     and
                        eq
                           get-name:x:@hyper2lambda/0
                           .:data.read
                        eq
                           get-count:x:@hyper2lambda/*
                           .:int:2
                        or
                           eq
                              get-name:x:@hyper2lambda/1
                              .:yield
                           eq
                              get-name:x:@hyper2lambda/1
                              .:return-nodes
                           eq
                              get-name:x:@hyper2lambda/1
                              .:return
                     .lambda
                     
                        io.file.delete:x:@.dp/#

                  else

                     // Checking if this is validation data.
                     .validation:int:0
                     if
                        and
                           eq:x:@.arguments/*/randomize
                              .:int:1
                           eq
                              math.modulo:x:@.no
                                 .:int:8
                              .:int:0
                        .lambda
                           set-value:x:@.validation
                              .:int:1
                     else-if
                        strings.contains:x:@.dp/#
                           .:/validation/
                        .lambda
                           set-value:x:@.validation
                              .:int:1

                     // Checking if this is validation data.
                     .synthesised:int:0
                     if
                        strings.contains:x:@.dp/#
                           .:/synthesised
                        .lambda
                           set-value:x:@.synthesised
                              .:int:1

                     // Saving above code snippet.
                     data.connect:fine-tune

                        // Verifying that code doesn't already exist in file.
                        .exists:bool:false
                        data.read
                           table:hyperlambda
                           where
                              and
                                 code.eq:x:@lambda2hyper
                           limit:1
                        if
                           not-exists:x:@data.read/*
                           .lambda

                              // Making sure we avoid double inserts.
                              data.create
                                 table:hyperlambda
                                 values
                                    prompt:x:@.prompt
                                    code:x:@lambda2hyper
                                    validation:x:@.validation
                                    synthesised:x:@.synthesised

                              // Counting how many training snippets we're inserting
                              math.increment:x:@.no

                        else-if:x:@.delete_duplicates

                           // Deleting file since it's a duplicate!
                           io.file.delete:x:@.dp/#

            else

               throw:x:@.dp/#

      else-if
         and
            strings.ends-with:x:@.dp/#
               .:.md
            strings.contains:x:@.dp/#
               .:/static-snippets/
         .lambda

            // Splitting prompt and completion into two different objects
            strings.split:x:@.dp/#/0
               .:---

            // Sanity checking snippet
            if
               not
                  eq
                     get-count:x:@strings.split/*
                     .:int:2
               .lambda
                  throw:x:@.dp/#

            // This will throw an exception if its hyperlambda parts contains errors.
            hyper2lambda:x:@strings.split/1

            // Checking if this is validation data.
            .validation:int:0
            if
               and
                  eq:x:@.arguments/*/randomize
                     .:bool:true
                  eq
                     math.modulo:x:@.no
                        .:int:8
                     .:int:0
               .lambda
                  set-value:x:@.validation
                     .:int:1
            else-if
               strings.contains:x:@.dp/#
                  .:/validation/
               .lambda
                  set-value:x:@.validation
                     .:int:1

            // Trimming prompt and completion
            .prompt
            set-value:x:@.prompt
               strings.trim:x:@strings.split/0
            .completion
            set-value:x:@.completion
               strings.trim:x:@strings.split/1

            // Saving above code snippet.
            data.connect:fine-tune

               // Making sure we avoid double inserts.
               data.create
                  table:hyperlambda
                  values
                     prompt:x:@.prompt
                     code:x:@.completion
                     is_static:int:1
                     validation:x:@.validation

               // Counting how many training snippets we're inserting
               math.increment:x:@.no

   .catch
   
      // This throws an exception being the name of the currently processed filename
      throw:x:@.dp/#

// House cleanups.
remove-nodes:x:@execute/*

yield
   count:x:@.no
