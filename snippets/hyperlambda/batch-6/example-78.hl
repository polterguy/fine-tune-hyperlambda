/*
 * This Hyperlambda file demonstrates how to submit a structured HTTP POST request to a public endpoint 
 * using the [http.post] slot, with a focus on sending a JSON payload that contains a list of complex objects.
 *
 * [http.post]
 * - Sends a POST request to https://httpbin.org/post, which is a public HTTP testing service that 
 *   echoes back the request for inspection.
 * - [convert:true] ensures that the JSON response is automatically converted into a lambda-compatible 
 *   node tree, making the response easier to manipulate.
 *
 * [query]
 * - Appends query parameters to the request URL.
 * - In this case, a single static parameter is defined:
 *   - [ticket]: Simulates an authentication or tracking token with the value "qwertyuiop123".
 *
 * [payload]
 * - Defines the body of the POST request.
 * - The [employees] node represents a list of employee records.
 *   - Each unnamed child node ([.]) inside [employees] is treated as an individual object in the array.
 *   - Each employee object contains:
 *     - [name]: The employee's name.
 *     - [title]: Their job title or role within the company.
 * - This structure is serialized into a JSON array of objects in the request body, allowing the receiving 
 *   API to interpret and process multiple employee entries as part of the same request.
 *
 * The response from httpbin.org will echo both the query parameters and the JSON payload, allowing 
 * you to verify that the list of employees is correctly formatted and transmitted as expected.
 *
 * This pattern is ideal for sending collections of structured data (such as user accounts, product items, 
 * or configuration blocks) to external APIs in bulk.
 */
http.post:"https://httpbin.org/post"
   convert:bool:true
   query
      ticket:qwertyuiop123
   payload
      employees
         .
            name:Thomas
            title:CEO
         .
            name:John
            title:CMO
         .
            name:Jane
            title:COO
