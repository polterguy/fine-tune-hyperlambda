
/*
 * This Hyperlambda snippet demonstrates how to dynamically select a deeply positioned sibling node 
 * using multiple `+` iterators, and how to add the result into a destination node.
 *
 * [.src]
 * - Contains a list of unnamed child nodes ([.]), each holding a string value.
 * - These values represent sequential items: "foo1", "foo2", "foo3", "foo4".
 * - The ordering of the nodes is crucial for understanding the relative navigation.
 *
 * [.dest]
 * - Acts as the destination node where the selected value will be added.
 *
 * [add]
 * - Adds the result of a dynamic node selection into [.dest].
 * - The selection is computed using [get-nodes].
 *
 * [get-nodes]
 * - Navigates from within [.src] to locate a specific sibling.
 * - The selector path is broken down as follows:
 *   - `@.src`: Selects the [.src] node
 *   - `*`: Selects all children under [.src].
 *   - `=foo1`: Filters the selection to the node whose value equals "foo1".
 *   - `+`: Selects the next sibling of that node (i.e., the node with value "foo2").
 *   - `+` (again): Selects the next sibling of that one â€” resulting in the node with value "foo3".
 *
 * In essence, the expression walks two steps forward from the node whose value is "foo1",
 * landing on the node with the value "foo3".
 *
 * The result is that "foo3" is added to [.dest], and can later be retrieved or manipulated further.
 *
 * This snippet serves as an illustration of:
 * - Navigating sibling relationships using the `+` iterator.
 * - Dynamic filtering based on node values.
 * - How relative paths and expressions work in deeply nested node trees.
 */
.src
   .:foo1
   .:foo2
   .:foo3
   .:foo4
.dest

/*
 * The crucial part here to document is the `+` iterators, and how they're using
 * TWICE to reach the node with a value of 'foo3'
 */
add:x:@.dest
   get-nodes:x:@.src/*/=foo1/+/+
