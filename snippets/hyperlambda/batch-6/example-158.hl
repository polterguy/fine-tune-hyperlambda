/*
 * This Hyperlambda file demonstrates how to enrich a deeply nested structure by injecting 
 * additional metadata into every [email] node found within a list of contact records.
 *
 * [.data]
 * - Defines a static list of unnamed child nodes ([.]), each representing a contact entry.
 * - Each contact node contains:
 *   - [name]: The person's name.
 *   - [email]: The person's email address.
 *
 * [add]
 * - Targets every [email] node under every contact using its expression.
 *   - `@.data`: Selects the root node [.data].
 *   - `*`: Iterates through each contact item in the list.
 *   - `*`: Navigates to all child fields of each contact (i.e., [name], [email]).
 *   - `email`: Filters only the [email] nodes.
 *
 * - Injects a new child node into each [email] field:
 *   - [corporate_email]: A boolean flag set to true, marking each email as work-related.
 *
 * ✨ Key Insight:
 * - This pattern allows you to decorate an existing structure with extra classification
 *   or tagging, without rewriting or copying the entire structure.
 * - The operation is vectorized and declarative — all matching nodes are modified in-place.
 *
 * Ideal for:
 * - Adding tags, annotations, or validation flags to datasets.
 * - Preparing data for serialization or validation.
 * - Enriching nested records with context-aware metadata.
 */
.data
   .
      name:Thomas
      email:thomas@ainiro.io
   .
      name:John
      email:john@ainiro.io
   .
      name:Peter
      email:peter@ainiro.io
   .
      name:Jane
      email:jane@ainiro.io
   .
      name:jenny
      email:jenny@ainiro.io
add:x:@.data/*/*/email
   .
      corporate_email:bool:true
