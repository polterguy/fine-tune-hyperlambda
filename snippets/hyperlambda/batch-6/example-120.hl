
/*
 * This Hyperlambda snippet demonstrates how to use the bracket slice notation `[x,y]` to extract 
 * a range of sibling nodes based on their positional indices.
 *
 * [.data]
 * - Contains a sequence of unnamed child nodes ([.]) with string values:
 *   - "alpha" (index 0)
 *   - "beta"  (index 1)
 *   - "gamma" (index 2)
 *   - "delta" (index 3)
 *   - "epsilon" (index 4)
 *
 * [.destination]
 * - Acts as the target container where the result of the node slice will be inserted.
 *
 * [add]
 * - Adds the result of the [get-nodes] operation to [.destination].
 *
 * [get-nodes]
 * - Uses bracket notation `[3,1]` to slice the children of [.data] as follows:
 *   - The first number `3` indicates the **start index** (zero-based), i.e., "delta".
 *   - The second number `1` indicates how many nodes to retrieve from the starting index.
 *   - So, it returns a list with only one node: "delta".
 *
 * The result of this operation is that "delta" is inserted into [.destination].
 *
 * This technique is especially useful when you want to extract a **range of items**
 * from a node list, similar to array slicing in other programming languages.
 */
.data
   .:alpha
   .:beta
   .:gamma
   .:delta
   .:epsilon
.destination

add:x:@.destination
   get-nodes:x:@.data/*/[3,1]
