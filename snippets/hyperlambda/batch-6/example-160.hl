/*
 * This Hyperlambda file demonstrates how to programmatically add a new object to a list of structured items,
 * specifically when working with a list of dictionary-style objects such as contact records.
 *
 * [.data]
 * - Represents a list of contacts.
 * - Each item in the list is represented by an unnamed node ([.]), which groups key-value pairs such as:
 *   - [name]: The contact's name.
 *   - [email]: The contact's email address.
 * - This pattern simulates a JSON array of objects and is commonly used in Hyperlambda for defining and transforming structured data.
 *
 * [add]
 * - Adds a new contact record to the [.data] list.
 * - The target of the operation is `@.data`, which resolves to the root list node.
 *
 * - The nested use of two [.] nodes is **critical**:
 *   - The first [.] indicates "add this item to the list".
 *   - The second [.] acts as the container for the actual object (i.e., the dictionary of fields being inserted).
 *   - Without both layers, the inserted value would be treated as a raw string or malformed node structure.
 *
 * ✅ This pattern is essential when:
 * - Building or extending lists of objects dynamically.
 * - Ensuring newly inserted items match the structure of existing entries.
 * - Maintaining semantic correctness of structured lists (e.g., JSON arrays of dictionaries).
 *
 * After execution, the [.data] list will contain a new contact record with [name] "Tom" and [email] "tom@ainiro.io"
 * appended as a new entry — preserving the consistency of the dataset.
 */
.data
   .
      name:Thomas
      email:thomas@ainiro.io
   .
      name:John
      email:john@ainiro.io
   .
      name:Peter
      email:peter@ainiro.io
   .
      name:Jane
      email:jane@ainiro.io
   .
      name:jenny
      email:jenny@ainiro.io
add:x:@.data
   .
      .
         name:Tom
         email:tom@ainiro.io
