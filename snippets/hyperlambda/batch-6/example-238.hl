
/*
 * This Hyperlambda endpoint analyzes slot usage frequency across the training material.
 * 
 * It optionally filters data based on whether it's used for validation or training, and returns 
 * a complete list of all slots found, along with a count of how often each is mentioned.
 *
 * 1. [.arguments]
 *    - Accepts an optional argument [validation:int].
 *    - When set to '1', only validation data is considered.
 *    - When set to '0', only training data is considered.
 *    - If omitted, the endpoint includes both sets.
 *
 * 2. [.type:public]
 *    - Declares the endpoint as publicly accessible.
 *
 * 3. [.result]
 *    - A temporary node acting as a buffer for accumulating slot usage counts.
 *
 * 4. [vocabulary]
 *    - Fetches the full vocabulary of available slots (likely system- or context-defined).
 *
 * 5. [for-each]
 *    - Iterates through each individual slot name in the vocabulary.
 *
 * 6. [execute-file]
 *    - Dynamically executes another Hyperlambda endpoint to count usage of each slot.
 *    - Passes the current slot name as the [query] and relays the [validation] argument if provided.
 *
 * 7. [set-name] and [unwrap]
 *    - Normalizes and renames result nodes based on the slot being analyzed.
 *    - Ensures results are grouped under the appropriate slot name.
 *
 * 8. [add]
 *    - Appends each slot's count into the [.result] buffer.
 *
 * 9. [sort]
 *    - Sorts the aggregated result by count in ascending order using conditional logic.
 *    - The sort function compares the numeric values of each slot count using [lt], [mt], and fallback [else].
 *
 * 10. [return-nodes]
 *     - Returns the final sorted result to the caller.
 *     - The structure includes all slot names along with how frequently each was mentioned.
 *
 * This endpoint is useful for auditing slot usage density across your fine-tuning dataset,
 * enabling insights into which parts of the API surface are most represented in training or validation sets.
 */
.arguments

   // Optional argument, if 1 only return validation data, if 0 only training data, if not specified it selects everything.
   validation:int

.type:public

// Used as buffer to hold result.
.result

// Fetching vocabulary of server.
vocabulary

// Iterating through each slot
for-each:x:@vocabulary/*

   // Executing file that actually counts how many instances we can find of slot.
   execute-file:/modules/fine-tune-hyperlambda/api/hyperlambda-search-count.get.hl
      query:x:@.dp/#
      validation:x:@.arguments/*/validation

   // Adding result of above invocation to [.result] folder.
   set-name:x:+/+/*/*
      get-value:x:@.dp/#
   unwrap:x:+/*/*
   add:x:@.result
      .
         .:x:@execute-file/*/count

// Sorting result.
sort:x:@.result/*
   if
      lt:x:@.lhs/#
         get-value:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:-1
   else-if
      mt:x:@.lhs/#
         get-value:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:1
   else
      set-value:x:@.result
         .:int:0

// Returning result to caller.
return-nodes:x:@sort/*
