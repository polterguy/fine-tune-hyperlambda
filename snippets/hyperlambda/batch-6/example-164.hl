/*
 * This Hyperlambda file processes a list of animal entries under the [.zoo] node,
 * ensuring that the [count] field for each animal is correctly typed as an integer.
 * 
 * [.zoo]
 * - Represents a static collection of animals, where each unnamed child node ([.]) is an object
 *   containing the fields:
 *   - [species]: The animal type.
 *   - [habitat]: The environment the animal lives in.
 *   - [count]: Initially a string representing how many of this species are in the zoo.
 *   - All [count] values start as **strings**, which is the default data type for Hyperlambda values.
 *
 * [for-each]
 * - Iterates through every individual animal node in the [.zoo] collection.
 * - On each iteration, [@.dp/#] refers to the current animal node being processed.
 *
 * [convert]
 * - Converts the value of [count] from its default string representation to an [int] (integer).
 * - The [type:int] node specifies the desired output type.
 * - This is critical for data normalization, especially when further calculations (e.g., math operations)
 *   are to be performed later in the pipeline.
 * - Without this conversion, arithmetic operations on [count] would result in errors or string concatenation behavior.
 *
 * [set-value]
 * - Replaces the original [count] string value with its new integer-typed version.
 * - Operates directly on the current animal node, ensuring that type correction is performed in-place.
 *
 * This pattern is especially useful for preparing datasets that originated as strings (e.g., from external APIs or file input)
 * and must be sanitized or retyped for further numerical processing or validation.
 */
.zoo
   .
      species:Lion
      habitat:Savannah
      count:4
   .
      species:Penguin
      habitat:Arctic
      count:15
for-each:x:@.zoo/*
   set-value:x:@.dp/#/*/count
      convert:x:@.dp/#/*/count
         type:int