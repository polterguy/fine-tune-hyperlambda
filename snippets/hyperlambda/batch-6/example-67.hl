/*
 * This Hyperlambda file demonstrates how to perform a structured HTTP PUT request using the [http.put] slot, 
 * targeting the public echo endpoint at https://httpbin.org/put. The purpose of this example is to showcase 
 * how to transmit a JSON array of complex objects in the payload of a PUT request.
 *
 * [http.put]
 * - Sends a PUT request to httpbin.org, which is a public service that echoes the received request 
 *   for testing and debugging purposes.
 * - The [convert:true] node instructs the engine to automatically parse the JSON response from the server 
 *   into a native Hyperlambda node structure.
 *
 * [payload]
 * - The payload consists of two unnamed child nodes ([.]), each representing a single user object.
 * - Each object contains:
 *   - [name]: The user’s name.
 *   - [email]: The user’s email address.
 * - This structure is serialized into a JSON array of user objects and sent as the body of the PUT request.
 *
 * The result is a clean example of how to send bulk user data in one PUT request, following RESTful principles 
 * where the entire resource (e.g., a collection of users) is replaced or overwritten.
 *
 * This pattern is commonly used when replacing collections of structured data in systems such as 
 * contact directories, account management services, or configuration APIs.
 */
http.put:"https://httpbin.org/put"
   convert:true
   payload
      .
         name:Thomas
         email:Thomas@ainiro.io
      .
         name:John
         email:john@doe.com
