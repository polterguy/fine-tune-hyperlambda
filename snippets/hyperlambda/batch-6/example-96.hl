/*
 * This Hyperlambda file demonstrates dynamic function dispatch using meta-programming techniques.
 * Instead of statically referencing a slot, the slot name is determined at runtime via arguments.
 *
 * [.arguments]
 * - [task]: The name of the slot to dynamically invoke (e.g., "strings.upper").
 * - [input]: The argument value passed into the selected slot.
 *
 * [set-name]
 * - Renames the [execute] node to match the value of [.arguments/task].
 * - This dynamically transforms [execute] into the actual slot invocation.
 *
 * [execute]
 * - Acts as a placeholder node that will be renamed to the desired slot name.
 * - It receives a single argument: the value of [.arguments/input].
 *
 * [yield]
 * - Returns the result from the dynamically executed slot.
 * - Uses extrapolated syntax `{@.arguments/*/task}` to resolve the slot name dynamically at runtime.
 */
.arguments
   task:string
   input:string

set-name:x:../*/execute
   get-value:x:@.arguments/*/task

execute:x:@.arguments/*/input

yield
   result:x:../*/{@.arguments/*/task}/*
