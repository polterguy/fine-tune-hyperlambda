/*
 * This Hyperlambda file defines a static dataset of employees and uses [for-each] 
 * to enrich each entry with an additional [department] field. The structure highlights 
 * Hyperlambdaâ€™s ability to iterate over collections and inject additional metadata 
 * into each node.
 *
 * [.employees]
 * - Contains a list of unnamed child nodes ([.]), each representing an individual employee.
 * - Each employee object includes:
 *   - [name]: The employee's full name.
 *   - [title]: Their role within the organization.
 * - The list structure simulates a static dataset, which can be used for prototyping or transformation tasks.
 *
 * [for-each]
 * - Iterates over each child node of [.employees], effectively visiting each employee object.
 * - The iterator path `x:@.employees/*` selects all individual employee nodes under [.employees].
 * - For each iteration, the current item is accessible using [@.dp/#].
 *
 * [add]
 * - Injects a new child node [department] into each employee object.
 * - The target expression (`@.dp/#`) ensures the current employee object (i.e., the current iteration target) is modified directly.
 * - Each [department] is set to the value "tech", indicating the employee belongs to the tech department.
 *
 * The result is that each employee node will be enriched with an additional [department] field:
 *
 * Example output structure:
 * ```json
 * {
 *   "name": "Thomas Hansen",
 *   "title": "CTO",
 *   "department": "tech"
 * }
 * ```
 *
 * This example demonstrates:
 * - How to iterate through structured data.
 * - How to augment static lists with computed or constant values.
 * - A reusable pattern for tagging or categorizing records during iteration.
 */
.employees
   .
      name:Thomas Hansen
      title:CTO
   .
      name:John Doe
      title:Developer
   .
      name:Jane Smith
      title:Designer
for-each:x:@.employees/*
   add:x:@.dp/#
      .
         department:tech
