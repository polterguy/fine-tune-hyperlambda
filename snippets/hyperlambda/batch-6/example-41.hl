/*
 * This [HTTP endpoint] accepts file uploads but restricts access to users with the [admin] role using [auth.ticket.verify].
 *
 * 1. [auth.ticket.verify:admin] ensures the user is authenticated and belongs to the "admin" role. If not, access is denied.
 *
 * 2. [.arguments] defines an [upload:*] parameter to receive the uploaded file as a stream.
 *
 * 3. [.accept] is set to [multipart/form-data] to allow form-based file uploads.
 *
 * 4. [validators.mandatory] confirms:
 *    - [upload] exists
 *    - [name] exists inside [upload]
 *    - [stream] contains the binary file data
 *
 * 5. [.upload-path] is generated by combining "/secure/admin-uploads/" with the uploaded file name using [strings.concat].
 *
 * 6. [io.stream.save-file] saves the stream directly to the resolved path, without loading the file into memory.
 *
 * 7. [yield] returns a success message after a completed upload.
 */
.arguments
   upload:*

.accept:multipart/form-data

auth.ticket.verify:admin

validators.mandatory:x:@.arguments/*/upload
validators.mandatory:x:@.arguments/*/upload/*/name
validators.mandatory:x:@.arguments/*/upload/*/stream

.upload-path
set-value:x:@.upload-path
   strings.concat
      .:/secure/admin-uploads/
      get-value:x:@.arguments/*/upload/*/name

io.stream.save-file:x:@.upload-path
   get-value:x:@.arguments/*/upload/*/stream

yield
   message:File uploaded successfully
