
/*
 * This Hyperlambda file defines an endpoint with no required input arguments via the [.arguments] node,
 * and performs a recursive validation and cleaning of fine-tuning training data snippets located under
 * the '/modules/fine-tune-hyperlambda/snippets/' directory.
 *
 * The endpoint performs the following operations:
 *
 * 1. [execute:magic.io.file.load-recursively]
 *    - Loads all files and folders recursively from the target directory.
 *    - The result is a node tree with all discovered files as child nodes under [execute].
 *
 * 2. [.no:int:0]
 *    - Initializes a counter for deleted training snippets that fail validation.
 *
 * 3. [for-each]
 *    - Iterates over each loaded file.
 *
 * 4. [try]
 *    - Wraps the validation and deletion logic in a try-catch block to catch errors per file.
 *
 * 5. [if] with [strings.ends-with]
 *    - Ensures the file has a '.hl' extension, implying a Hyperlambda source file.
 *
 * 6. [hyper2lambda]
 *    - Converts the file contents to a lambda object with comments included.
 *    - This allows further validation of the fileâ€™s structure and comments.
 *
 * 7. [if] nested with [or], [and], [eq], [neq], and [get-*]
 *    - Performs a strict set of syntactic and structural validations on the parsed lambda object.
 *    - Conditions detect issues such as invalid comments, broken top-level structures, or corrupted file formats.
 *
 * 8. [io.file.delete]
 *    - Deletes the file if it fails the validation logic.
 *
 * 9. [math.increment]
 *    - Increments the deletion counter [.no] for each invalid file removed.
 *
 * 10. [.catch]
 *     - Captures any exceptions during processing and throws the name of the failing file for visibility.
 *
 * 11. [yield]
 *     - Returns the final count of deleted training snippets under the [count] node.
 *
 * This routine helps ensure that all training snippets used for fine-tuning are syntactically valid and structurally consistent,
 * which is crucial for generating clean datasets for model optimization.
 */
.arguments

// Loading all files recursively
execute:magic.io.file.load-recursively
   .:/modules/fine-tune-hyperlambda/snippets/

// Counting training data
.no:int:0

// Looping through all files.
for-each:x:@execute/*

   // Making sure we catch exceptions such that we can see which file fails.
   try

      // Verifying we're dealing with a Hyperlambda file.
      if
         strings.ends-with:x:@.dp/#
            .:.hl
         .lambda

            // Transforming file to lambda object.
            hyper2lambda:x:@.dp/#/0
               comments:true
            if
               or
                  strings.contains:x:@.dp/#/0
                     .:" * /*"
                  strings.contains:x:@.dp/#/0
                     .:" * //"
                  and
                     eq
                        get-name:x:@hyper2lambda/0
                        .:..
                     eq
                        get-name:x:@hyper2lambda/1
                        .:sort
                     eq
                        get-value:x:@hyper2lambda/1
                        .:string
                     eq
                        get-count:x:@hyper2lambda/*
                        .:int:2
                  and
                     eq
                        get-name:x:@hyper2lambda/0
                        .:..
                     eq
                        get-name:x:@hyper2lambda/1
                        .:type
                     neq
                        type:x:@hyper2lambda/1
                        .:x
                     eq
                        get-count:x:@hyper2lambda/*
                        .:int:2
               .lambda

                  // Deleting file since it's syntactically wrong, or comment is bogus.
                  io.file.delete:x:@.dp/#

                  // Counting how many training snippets we're deleting
                  math.increment:x:@.no

   .catch

      // This throws an exception being the name of the currently processed filename
      throw:x:@.dp/#

yield
   count:x:@.no
