/*
 * This Hyperlambda script generates training data from files stored in the 
 * '/modules/fine-tune-hyperlambda/snippets/' directory.
 *
 * It supports both `.hl` Hyperlambda source files training snippets.
 * Each valid file is transformed into a [prompt] and [code] pair and inserted into the 
 * 'hyperlambda' table in the 'fine-tune' database â€” optionally marking entries as validation 
 * data based on their origin or random sampling.
 *
 * ðŸ”¹ Key Functionalities:
 *
 * 1. [.arguments]
 *    - Accepts [randomize:int], defaulting to '1'.
 *    - When randomize is enabled, every 8th file is flagged as validation data.
 *
 * 2. [data.execute]
 *    - Clears the existing records from the 'hyperlambda' table before importing new ones.
 *
 * 3. [execute:magic.io.file.load-recursively]
 *    - Recursively loads all files from the snippets directory for processing.
 *
 * 4. [.no] and [.deleted]
 *    - Counters for successfully inserted records and deleted duplicates.
 *
 * 5. [for-each]
 *    - Iterates over all discovered files and processes each inside a [try] block.
 *
 * ðŸ”¹ Processing `.hl` Hyperlambda Files:
 * 
 * - [hyper2lambda]
 *   - Parses file into structured lambda format with comments.
 * - The first node (assumed to be a file-level comment) is extracted as the [prompt].
 * - The remaining lambda content is converted back to Hyperlambda [code] via [lambda2hyper].
 *
 * ðŸ”¹ Validation Flagging:
 * 
 * - If [randomize=1], then every 8th entry is marked as validation data.
 * - Files under `/validation/` paths are also automatically flagged.
 * - Files under `/synthesised/` paths are marked with [synthesised:int:1].
 *
 * ðŸ”¹ Deduplication and Filtering:
 * 
 * - The script checks for existing prompt/code duplicates before inserting.
 * - If a duplicate is found, the file is deleted.
 * - If more than 12 entries already exist with the same [code], the new file is discarded.
 *
 * ðŸ”¹ Data Insertion:
 * 
 * - Unique records are inserted using [data.create].
 * - Prompt, code, validation, and synthesised flags are stored per entry.
 *
 * 6. [yield]
 *    - Returns both the number of inserted records ([count]) and the number of deleted duplicates ([deleted]).
 *
 * ðŸ”¸ Summary:
 * This script efficiently curates a high-quality training set by:
 * - Breaking files into prompts and completions.
 * - Avoiding duplicates.
 * - Separating training and validation samples.
 * - Respecting synthetic and static origins.
 * Ideal for bootstrapping fine-tuning datasets using curated or programmatically generated examples.
 */
.arguments
   randomize:int

// Applying default value for [randomize].
validators.default:x:@.arguments
   randomize:int:1

// Deleting old records
data.connect:fine-tune
   data.execute:delete from hyperlambda

// Loading all files recursively
execute:magic.io.file.load-recursively
   .:/modules/fine-tune-hyperlambda/snippets/

// Counting training data
.no:int:0
.deleted:int:0

// Looping through all files.
for-each:x:@execute/*

   // Making sure we catch exceptions such that we can see which file fails.
   try

      // Verifying we're dealing with a Hyperlambda file.
      if
         strings.ends-with:x:@.dp/#
            .:.hl
         .lambda

            // Transforming file to lambda object.
            hyper2lambda:x:@.dp/#/0
               comments:true

            .prompt
            set-value:x:-
               get-value:x:@hyper2lambda/0
            remove-nodes:x:@hyper2lambda/0

            // Creating our code segment
            lambda2hyper:x:@hyper2lambda/*
               comments:true

            // Checking if this is validation data.
            .validation:int:0
            if
               and
                  eq:x:@.arguments/*/randomize
                     .:int:1
                  eq
                     math.modulo:x:@.no
                        .:int:8
                     .:int:0
               .lambda
                  set-value:x:@.validation
                     .:int:1
            else-if
               strings.contains:x:@.dp/#
                  .:/validation/
               .lambda
                  set-value:x:@.validation
                     .:int:1

            // Checking if this is validation data.
            .synthesised:int:0
            if
               strings.contains:x:@.dp/#
                  .:/synthesised
               .lambda
                  set-value:x:@.synthesised
                     .:int:1

            // Saving above code snippet.
            data.connect:fine-tune

               // Verifying that code doesn't already exist in file.
               .exists:bool:false
               data.read
                  table:hyperlambda
                  where
                     and
                        prompt.eq:x:@.prompt
                        code.eq:x:@lambda2hyper
                  limit:1
               if
                  not-exists:x:@data.read/*
                  .lambda

                     // Making sure we've not go more than maximum 12 snippets with the same completion.
                     data.read
                        table:hyperlambda
                        where
                           and
                              code.eq:x:@lambda2hyper
                     if
                        mt
                           get-count:x:@data.read/*
                           .:int:12
                        .lambda

                           // Deleting file since we've got 12 similar completions!
                           io.file.delete:x:@.dp/#
                           math.increment:x:@.deleted

                     else

                        data.create
                           table:hyperlambda
                           values
                              prompt:x:@.prompt
                              code:x:@lambda2hyper
                              validation:x:@.validation
                              synthesised:x:@.synthesised

                        // Counting how many training snippets we're inserting
                        math.increment:x:@.no

               else

                  // Deleting file since it's a duplicate!
                  io.file.delete:x:@.dp/#
                  math.increment:x:@.deleted

   .catch
   
      // This throws an exception being the name of the currently processed filename
      throw:x:@.dp/#

yield
   count:x:@.no
   deleted:x:@.deleted
