/*
 * This snippet demonstrates how to merge two collections using the [add] slot and [get-nodes] to append all items from one list into another.
 *
 * 1. The [.tech-stack] node defines an initial list of programming languages as unnamed child nodes:
 *    - "Python"
 *    - "JavaScript"
 *    - "Go"
 *
 * 2. The [.additional-tech-stacks] node holds additional languages intended to be merged into the main stack:
 *    - "Rust"
 *    - "C#"
 *
 * 3. The [get-nodes:x:@.additional-tech-stacks/*] expression retrieves all unnamed child nodes under [.additional-tech-stacks].
 *    Each child is a discrete value node and part of a flat list structure.
 *
 * 4. The [add] slot uses [x:@.tech-stack] to target the original list, and inserts all nodes returned from [get-nodes].
 *    This merges the two lists into a single unified collection under [.tech-stack], preserving order and structure.
 *
 * This pattern is ideal for list merging, aggregating user preferences, composing dynamic arrays from multiple sources,
 * and performing runtime composition of data structures in APIs or config pipelines.
 */
.tech-stack
   .:Python
   .:JavaScript
   .:Go
.additional-tech-stacks
   .:Rust
   .:C#
add:x:@.tech-stack
   get-nodes:x:@.additional-tech-stacks/*