/*
 * This Hyperlambda file demonstrates how to use the [remove-nodes] slot to selectively delete a range of child nodes 
 * from a parent node based on their positional indices.
 *
 * [.data]
 * - Defines a static collection of named child nodes, each representing a key-value pair.
 * - In this example, the [.data] node includes five fields:
 *   - [foo1] through [foo5], each with a corresponding string value (e.g., "bar1", "bar2", etc.).
 *
 * [remove-nodes]
 * - Removes a **subset** of child nodes from the [.data] collection.
 * - The selector expression uses slice syntax: `[2,1]`, which means:
 *   - Start at index `2` (zero-based), which targets the third child node ‚Äî [foo3].
 *   - Remove `1` node starting from that position.
 * - This results in only the [foo3] node being deleted from [.data].
 *
 * üîç Key Insight:
 * - The slice syntax `[start,count]` allows removal of **multiple nodes at once**.
 * - You can easily change the second value (e.g., `[1,3]`) to delete a batch of nodes beginning from a certain index.
 * - This makes [remove-nodes] a powerful tool for structural pruning, cleanup, or dynamic transformation of large node trees.
 *
 * This technique is especially useful when:
 * - You want to trim dynamic lists by range.
 * - Remove specific indexed nodes from data pipelines.
 * - Perform bulk structural updates without verbose conditional logic.
 */
.data
   foo1:bar1
   foo2:bar2
   foo3:bar3
   foo4:bar4
   foo5:bar5
remove-nodes:x:@.data/*/[2,1]
