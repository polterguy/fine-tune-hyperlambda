
// Endpoint that counts unique and distinct items from your city table in your sakila database with filtering and caching
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string
   recaptcha:string

   // Filter conditions (optional)
   city.city_id.eq:long
   city.city.like:string
   city.city.eq:string
   city.country_id.eq:long
   city.last_update.eq:date

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:city.city_id
   .:city.city
   .:city.country_id
   .:city.last_update

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=500

// Opening up our database connection.
data.connect:[generic|sakila]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:city
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
