
/*
 * 1. The [signal] slot is used to invoke a dynamically created slot named [magic.ai.crawl-site]. This allows for the execution of custom logic associated with that slot.
 * 2. The [.onafter] node defines logic to be executed after the [magic.ai.crawl-site] signal completes. This is typically used for post-processing or notification.
 * 3. Inside [.onafter], the [.feedback-channel] node retrieves the value of the [feedback-channel] argument from [.arguments], storing it for later use.
 * 4. The [sockets.signal] slot is then invoked, targeting the feedback channel specified earlier. This sends a real-time notification to all subscribers of that channel.
 * 5. The [args] node under [sockets.signal] contains the payload for the notification, with a [message] of "Done!" and a [type] of "success".
 * 
 * Use cases:
 * - Notifying a user or group in real time when a long-running AI site crawl process is finished.
 * - Sending a completion status to a web client via SignalR or WebSocket after a background job completes.
 * - Providing asynchronous feedback to a UI component that is listening on a specific feedback channel for updates.
 */
signal:magic.ai.crawl-site
   .onafter
      .feedback-channel:x:@.arguments/*/feedback-channel
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:Done!
            type:success
