
/*
 * 1. The [data.read] slot initiates a database read operation.
 * 2. The [database-type] node specifies that the target database is SQLite.
 * 3. The [table] node defines "notes" as the primary table for the query.
 * 4. Under [table], a [join] is performed with the "clients" table, using a left join ([type:left]) and an ON clause that matches [notes.client_id] with [client_id.client_id]. The [as:client_id] node creates an alias for the joined table.
 * 5. The [columns] node specifies a single column using [aggregate_functor], and the result is aliased as [result].
 * 6. The [where] node contains an [and] node, which is currently empty and thus applies no additional filtering.
 * 7. The [group] node groups the results by [group_column].
 * 
 * Use cases:
 * - Retrieving aggregated statistics (such as counts or sums) on notes, grouped by a specific column, and including related client information even if some notes have no matching client.
 * - Generating summary reports that require grouping notes by a property and joining with client data.
 * - Performing analytics across note entries while ensuring all notes are included (even those without a matching client), thanks to the left join.
 * - Producing data for dashboards where aggregate values must be grouped and related to client metadata.
 */
data.read
   database-type:sqlite
   table:notes
      join:clients
         as:client_id
         type:left
         on
            and
               notes.client_id:client_id.client_id
   columns
      aggregate_functor
         as:result
   where
      and
   group
      group_column
