
/*
 * 1. [for-each]: Iterates over each child node of [.words], performing the subsequent logic for each word.
 * 2. [set-name]: Changes the names of all grandchild nodes under the next sibling's next sibling to a concatenated string combining the value of [.p] and the current [.no] value.
 * 3. [unwrap]: Evaluates the expressions of all grandchild nodes under the next sibling, executing any dynamic or expression nodes.
 * 4. [add]: Appends a new node containing a reference to the currently iterated word (via [.dp]) as a child of the [data.select] node under [data.connect].
 * 5. [if]/[else]: Conditionally appends to the SQL string in [.sql], building a SQL fragment that counts occurrences of the pattern @pX in the field. The first fragment uses a different syntax for the initial word, while subsequent words concatenate using a plus sign.
 * 6. [math.increment]: Increments the value of [.no], likely used as an index for the words being processed.
 * 
 * Use Cases:
 * - Dynamically constructing an SQL expression that counts occurrences of multiple search terms within a field, updating [.sql] as it loops through each term.
 * - Renaming nodes based on a unique combination of a pattern and index to distinguish between different search term fragments.
 * - Populating a query object by adding references to processed words into a data structure for later use.
 * - Implementing advanced text search or keyword ranking logic in SQL by iterating over user-provided keywords.
 * - Building up a parameterized SQL statement for full-text search, where each iteration adds logic for a different keyword.
 */
for-each:x:@.words/*
   set-name:x:+/+/*/*
      strings.concat
         .:@p
         get-value:x:@.no
   unwrap:x:+/*/*
   add:x:@data.connect/*/data.select
      .
         .:x:@.dp/#
   if
      eq:x:@.no
         .:int:0
      .lambda
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" (length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)
   else
      set-value:x:@.sql
         strings.concat:x:@.sql
            get-value:x:@.sql
            .:" + (length("
            get-value:x:@.fields
            .:) - length(replace(lower(
            get-value:x:@.fields
            .:), @p
            get-value:x:@.no
            .:", ''))) / length(@p"
            get-value:x:@.no
            .:)
   math.increment:x:@.no
