
/*
 * 1. The [.arguments] node declares that the workflow requires an [employee_id] integer to be passed as an argument, which will be used to identify the specific employee record to update.
 * 2. The [data.connect] slot establishes a connection to the "hr_db" database, specifying the use of a MySQL database driver through the [database-type] child node.
 * 3. The [data.update] slot is used to update records in the [employees] table, setting the [department] field to "Finance" and the [salary] field to 75000.00 (as a decimal), but only for the record where the [employee_id] matches the provided argument.
 * 4. The [where] node, using an [and] logical condition, constructs a filter ensuring that only the employee with the matching [employee_id] is updated.
 * 5. The [return] slot returns the result of the [data.update] operation, which may include the number of affected rows or a status message.
 * 
 * Use cases:
 * - Changing the department and salary of a specific employee in an HR application after a promotion.
 * - Automating payroll adjustments for employees who are transferred to the Finance department.
 * - Ensuring department and salary updates are only applied to the intended employee by using a secure, parameterized filter.
 * - Integrating this logic into an API endpoint for administrative HR functions.
 */
.arguments
   employee_id:int
data.connect:hr_db
   database-type:mysql
   data.update
      database-type:mysql
      table:employees
      values
         department:Finance
         salary:decimal:75000.00
      where
         and
            employee_id.eq:x:@.arguments/*/employee_id
   return:x:@data.update
