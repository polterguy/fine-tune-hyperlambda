
/*
 * 1. The [.arguments] node defines two expected inputs: [name] (of type string) and [age] (of type int), establishing the required parameters for the logic.
 * 2. The [validators.mandatory] slots ensure that both [.arguments]/*/name and [.arguments]/*/age must be supplied; otherwise, execution will halt with an error.
 * 3. The [if] block contains an [and] condition: it checks that [.arguments]/*/name is exactly "Thomas" and [.arguments]/*/age is exactly 50. Both must be true for the inner lambda to execute.
 * 4. If both conditions are met, [set-value] assigns boolean true to [../*/return/*/result]; otherwise (handled by [else]), it sets the same node to boolean false.
 * 5. The [return] node returns the [result] value to the caller, indicating the outcome of the logic.
 * 
 * Use cases:
 * - Validating user input and confirming if a specific person named Thomas, aged 50, has been provided in the request.
 * - Enforcing strict parameter checks before proceeding with sensitive logic (e.g., granting access or privileges).
 * - Using as part of an authentication or verification step for a workflow, where only a precise match on both name and age is accepted.
 * - Returning a simple true/false result to an API caller based on whether the input matches predetermined criteria.
 */
.arguments
   name:string
   age:int
validators.mandatory:x:@.arguments/*/name
validators.mandatory:x:@.arguments/*/age
if
   and
      eq:x:@.arguments/*/name
         .:Thomas
      eq:x:@.arguments/*/age
         .:int:50
   .lambda
      set-value:x:../*/return/*/result
         .:bool:true
else
   set-value:x:../*/return/*/result
      .:bool:false
return
   result
