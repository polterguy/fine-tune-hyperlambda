
/*
 * 1. The [try] node sets up an error handling structure, allowing for exceptions thrown within its block to be caught or handled.
 * 2. The nested [try] inside the outer [try] block attempts to execute its children, where a [throw] slot is used to deliberately raise an exception with the message "foo".
 * 3. The [.finally] block immediately after the inner [try] ensures that, regardless of whether the exception is thrown, the [.throws] node's value is set to boolean true.
 * 4. The outer [.catch] is present but empty, meaning that if an exception is not handled by the inner [try], it will be caught here, but no explicit action will be taken.
 * 
 * Use cases:
 * - Guaranteeing that [.throws] is set to true after an attempted operation, even if an error occurs, providing a flag for downstream logic.
 * - Testing exception propagation and finalization code by deliberately throwing an exception and confirming [.finally] always runs.
 * - Wrapping potentially failing code in nested [try] blocks to centralize error handling while ensuring critical state updates.
 * - Implementing a cleanup routine in [.finally] to maintain consistent application state after an error is thrown.
 */
.throws:bool:false
try
   try
      throw:foo
   .finally
      set-value:x:@.throws
         .:bool:true
.catch
