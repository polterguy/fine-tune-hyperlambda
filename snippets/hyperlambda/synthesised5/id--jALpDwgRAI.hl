
/*
 * 1. [slots.create] defines a new dynamic slot named [calculate_fibonacci_below_100]. This slot, when executed, will generate Fibonacci numbers less than 100.
 * 2. [.a] and [.b] are initialized to 0 and 1, representing the two starting numbers of the Fibonacci sequence.
 * 3. [while] is used to continue the loop as long as the value of [.b] is less than 100. This is checked using [lt] and [get-value].
 * 4. Inside the [while] loop:
 *    - [.next.int] is used as a temporary variable to hold the sum of [.a] and [.b].
 *    - [set-value] and [math.add] update [.next.int] to be the sum of the previous two Fibonacci numbers.
 *    - [if] checks if [.b] is still less than 100 before adding the next Fibonacci number to [.fibonacci_return]. This ensures only numbers below 100 are included.
 *    - [unwrap] and [add] are used to insert the newly calculated Fibonacci number into [.fibonacci_return].
 *    - [set-value] updates [.a] and [.b] for the next loop iteration: [.a] becomes the previous [.b], and [.b] becomes the new Fibonacci number.
 * 5. [yield] returns all nodes (Fibonacci numbers) added to [.fibonacci_return] as the output under the [numbers] node.
 * 
 * Use Cases:
 * - Generating a list of Fibonacci numbers less than 100 for mathematical or educational purposes.
 * - Providing a sample implementation of iterative calculations and sequence generation within a dynamic Hyperlambda slot.
 * - Demonstrating slot creation, looping, and conditional logic to teach how to develop custom reusable Hyperlambda functions.
 * - Supplying a sequence for use in further processing such as filtering, summing, or displaying in a UI.
 */
slots.create:calculate_fibonacci_below_100
   .fibonacci_return
   .a:int:0
   .b:int:1
   while
      lt
         get-value:x:@.b
         .:int:100
      .lambda
         .next.int
         set-value:x:@.next.int
            math.add
               get-value:x:@.a
               get-value:x:@.b
         if
            lt
               get-value:x:@.b
               .:int:100
            .lambda
               unwrap:x:+/*/*
               add:x:../*/.fibonacci_return
                  .
                     .:x:@.next.int
         set-value:x:@.a
            get-value:x:@.b
         set-value:x:@.b
            get-value:x:@.next.int
   yield
      numbers:x:@.fibonacci_return/*
