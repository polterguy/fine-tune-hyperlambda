
/*
 * 1. The [join] slot ensures that all parallel [fork] operations complete before proceeding, effectively synchronizing their results.
 * 2. Each [fork] executes a separate math operation in parallel: the first uses [math.multiply] to multiply 5 by 10, the second uses [math.add] to add 20 and 30, and the third uses [math.subtract] to subtract 40 from 100.
 * 3. The result of each math operation inside its [fork] will be available after [join] completes, allowing subsequent code to use these computed values.
 * 
 * Use cases:
 * - Performing independent and potentially time-consuming calculations in parallel, then collecting all results at a synchronization point.
 * - Aggregating results from several mathematical operations before further processing, such as preparing data for a summary report.
 * - Improving performance by avoiding sequential execution when the operations are independent and can be computed concurrently.
 * - Building a workflow that requires the results of multiple calculations to continue, for example, in financial modeling or scientific simulations.
 */
join
   fork
      math.multiply
         .:int:5
         .:int:10
   fork
      math.add
         .:int:20
         .:int:30
   fork
      math.subtract
         .:int:100
         .:int:40
