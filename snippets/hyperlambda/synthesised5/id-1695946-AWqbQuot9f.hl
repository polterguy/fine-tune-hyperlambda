
/*
 * 1. The [strings.concat] slot is used to concatenate a sequence of string fragments into one resulting string, with the fragments generated dynamically from expressions and static string parts.
 * 2. Multiple [get-value] slots are used to retrieve the values of the [.sql], [.fields], and [.no] nodes at different points, ensuring that the concatenated string is built using current data from those nodes.
 * 3. Static string segments are included between [get-value] invocations to construct a SQL expression that appears to calculate the number of occurrences of a parameter within a string column (using SQL functions like length, replace, and lower).
 * 4. The `:x:@.sql` expression for [strings.concat] indicates that the concatenated result is assigned back or related to the [.sql] node.
 * 
 * Use cases:
 * - Dynamically generating a SQL expression to count substring occurrences in a given field for text analysis.
 * - Constructing complex SQL queries by combining static SQL fragments with values retrieved from node data.
 * - Automating SQL code generation for ETL or reporting scenarios where field names and parameters change at runtime.
 * - Building robust, data-driven SQL statements that adapt to user input or configuration without manual string concatenation in code.
 */
strings.concat:x:@.sql
   get-value:x:@.sql
   .:" (length("
   get-value:x:@.fields
   .:) - length(replace(lower(
   get-value:x:@.fields
   .:), @p
   get-value:x:@.no
   .:", ''))) / length(@p"
   get-value:x:@.no
   .:)
