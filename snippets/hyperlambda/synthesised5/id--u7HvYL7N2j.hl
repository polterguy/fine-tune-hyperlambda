
/*
 * 1. The [.arguments] node declares that the endpoint expects a [file] argument of type string.
 * 2. [validators.mandatory] checks that [file] is provided in [.arguments]; if not, an error is thrown and execution stops.
 * 3. The first [strings.concat] constructs a file path by concatenating "/etc/system/openai/pdf/" with the value of [file] from the request arguments.
 * 4. The second [strings.concat] builds the value for the Content-Disposition response header, wrapping the [file] value in an "attachment; filename=" pattern for file downloads.
 * 5. [response.headers.set] sets HTTP response headers: Content-Type to "application/pdf," Content-Disposition to the constructed filename, and exposes Content-Disposition for CORS.
 * 6. [io.stream.open-file] opens a stream to the PDF file using the constructed path, preparing to return its contents as the HTTP response.
 * 7. [return:x:-] returns the result of the previous operation (the open file stream) to the client.
 * 
 * Use cases:
 * - Serving downloadable PDF files from a secured directory, ensuring only files explicitly requested by name are returned.
 * - Providing dynamic file download endpoints where clients specify the file they need, and the server returns the file directly as a stream.
 * - Ensuring only valid requests with a required [file] argument succeed, preventing incomplete or malformed requests from being processed.
 * - Setting appropriate HTTP headers to prompt browsers to download the file with the correct filename and MIME type.
 */
.arguments
   file:string
validators.mandatory:x:@.arguments/*/file
strings.concat
   .:/etc/system/openai/pdf/
   get-value:x:@.arguments/*/file
strings.concat
   .:"attachment; filename=\""
   get-value:x:@.arguments/*/file
   .:"\""
response.headers.set
   Content-Type:application/pdf
   Content-Disposition:x:@strings.concat
   Access-Control-Expose-Headers:Content-Disposition
io.stream.open-file:x:@strings.concat/@strings.concat
return:x:-
