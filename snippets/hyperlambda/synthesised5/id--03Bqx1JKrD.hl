
/*
 * 1. The [.arguments] node declares an [age] argument with an integer type, indicating that this argument is expected as input, likely for an API endpoint or a dynamic slot.
 * 2. The [validators.integer] slot validates the [age] argument using the expression `:x:@.arguments/*/age`, ensuring that its value is an integer and falls within the specified range.
 * 3. The [min] child node sets the lower bound for [age] to 18, while the [max] child node sets the upper bound to 130.
 * 4. If the [age] value provided is less than 18 or greater than 130, the [validators.integer] invocation will throw an exception, preventing further processing.
 * 
 * Use cases:
 * - Enforcing age restrictions for user registration, such as requiring users to be adults.
 * - Validating input data for applications dealing with demographic information to ensure logical age values.
 * - Restricting form submissions to users within a valid human age range, reducing data entry errors.
 * - Preventing accidental or malicious input of unrealistic age values in a healthcare or insurance system.
 */
.arguments
   age:int
validators.integer:x:@.arguments/*/age
   min:18
   max:130
