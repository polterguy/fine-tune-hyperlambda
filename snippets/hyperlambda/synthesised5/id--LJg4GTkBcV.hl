
/*
 * 1. The [.arguments] node marks the beginning of argument processing, which is required for HTTP endpoints in Hyperlambda.
 * 2. The [auth.ticket.verify] slot checks whether an enterprise authentication ticket is valid, ensuring only authorized users can proceed.
 * 3. The [data.connect] slot establishes a connection to the "chinook" database, specifically using the SQLite database adapter as set by the [database-type] child node.
 * 4. The [data.select] slot executes a raw SQL statement that performs an inner join between the [Album] and [Artist] tables, selecting artist names and corresponding album titles, ordering the results by artist name, and limiting the output to 50 records. The [database-type] child node again ensures SQLite syntax is used.
 * 5. The [return-nodes] slot returns the result set from [data.select], making the joined artist and album data available as the output of this endpoint.
 * 
 * Use Cases:
 * - Displaying a paginated list of artists and their albums from the Chinook database in a web application.
 * - Providing an endpoint for a reporting tool to fetch joined artist and album information for further data analysis.
 * - Restricting access to sensitive database information by requiring enterprise-level authentication before executing data queries.
 * - Integrating with a front-end UI component that lists the first 50 artists and their albums, sorted alphabetically.
 * - Enabling a data export feature that retrieves and returns a joined dataset from two related tables in SQLite.
 */
.arguments
auth.ticket.verify:enterprise
data.connect:chinook
   database-type:sqlite
   data.select:"\n/*\n * Script to join artists to albums in your Chinook database.\n * Make sure you select the chinook database before execxuting the script.\n */\nselect ar.Name, al.Title\n  from Album al\n    inner join Artist ar on al.ArtistId = ar.ArtistId\n  order by ar.Name\n  limit 50\n"
      database-type:sqlite
   return-nodes:x:@data.select/*
