
// Iterates through each child node of [.scan], and for each node whose [completion] value does not contain "{{", it concatenates its [prompt] and [completion] values into a temporary string [.tmp] with formatting. If the token count of [.tmp] is less than the specified [max_tokens], it updates [.context] with [.tmp], adds the node's [id] to [ids], and, if [uri] exists and is not already present in [result], adds a new entry to [result] with the node's [prompt], [uri], and [distance]. If the token count exceeds the limit, [.tmp] is reset to the last valid context.
for-each:x:@.scan/*
   if
      not
         strings.contains:x:@.dp/#/*/completion
            .:{{
      .lambda
         set-value:x:@.tmp
            strings.concat
               get-value:x:@.tmp
               .:@"
"
               get-value:x:@.dp/#/*/prompt
               .:@"
"
               .:@"
"
               get-value:x:@.dp/#/*/completion
               .:@"

---
"
         if
            lt
               openai.tokenize:x:@.tmp
               get-value:x:@.arguments/*/max_tokens
            .lambda
               set-value:x:@.context
                  get-value:x:@.tmp
               unwrap:x:+/*/*
               add:x:@.ids
                  .
                     .:x:@.dp/#/*/id
               if
                  and
                     not-null:x:@.dp/#/*/uri
                     not-exists:x:"@.result/*/*/uri/\"={@.dp/#/*/uri}\""
                  .lambda
                     unwrap:x:+/*/*/*
                     add:x:@.result
                        .
                           .
                              prompt:x:@.dp/#/*/prompt
                              uri:x:@.dp/#/*/uri
                              distance:x:@.dp/#/*/distance
         else
            set-value:x:@.tmp
               get-value:x:@.context
