
// Defines a dynamic slot "magic.ai.get-context" that retrieves relevant context snippets for a given prompt using vector similarity search. It validates required arguments, determines the correct embeddings model, generates an embedding for the prompt via OpenAI, and queries a database for similar training snippets below a distance threshold. It handles session-based caching to avoid returning duplicate IDs, formats and tokenizes results, and returns the context, related snippets, and database query time. If cached completions are found, it returns them directly; otherwise, it constructs the context from retrieved snippets and manages cache updates as needed.
slots.create:magic.ai.get-context
   validators.mandatory:x:@.arguments/*/type
   validators.mandatory:x:@.arguments/*/prompt
   validators.mandatory:x:@.arguments/*/threshold
   validators.mandatory:x:@.arguments/*/max_tokens
   validators.string:x:@.arguments/*/prompt
      min:1
   .embeddings-model
   data.connect:[generic|magic]
      data.scalar:select count(*) from ml_training_snippets where embedding is not null and type = @type
         @type:x:@.arguments/*/type
      if
         eq
            convert:x:@data.scalar
               type:int
            .:int:0
         .lambda
            return
               context
               snippets
      data.read
         table:ml_types
         columns
            vector_model
         where
            and
               type.eq:x:@.arguments/*/type
      set-value:x:@.embeddings-model
         get-value:x:@data.read/*/*/vector_model
   set-value:x:@.arguments/*/threshold
      convert:x:@.arguments/*/threshold
         type:double
   .token
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         config.get:"magic:openai:key"
   .prompt
   if
      and
         not-null:x:@.arguments/*/search_postfix
         neq:x:@.arguments/*/search_postfix
            .:
      .lambda
         set-value:x:@.prompt
            strings.concat
               get-value:x:@.arguments/*/prompt
               .:" "
               get-value:x:@.arguments/*/search_postfix
   else
      set-value:x:@.prompt
         get-value:x:@.arguments/*/prompt
   http.post:"https://api.openai.com/v1/embeddings"
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         input:x:@.prompt
         model:x:@.embeddings-model
      convert:true
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            message:x:@http.post/*/content/*/error/*/message
            error:x:@lambda2hyper
         throw:x:@http.post/*/content/*/error/*/message
            public:bool:true
            status:x:@http.post
   .tail:
   .next
   .cache-key
   if
      and
         exists:x:@.arguments/*/session
         not-null:x:@.arguments/*/session
      .lambda
         set-value:x:@.cache-key
            strings.concat
               get-value:x:@.arguments/*/session
               .:.IDs
         cache.get:x:@.cache-key
         if
            not-null:x:@cache.get
            .lambda
               set-value:x:@.tail
                  strings.concat
                     .:" and id not in("
                     get-value:x:@cache.get
                     .:)
               set-value:x:@.next
                  get-value:x:@cache.get
   .begin
   set-value:x:@.begin
      date.now
   .scan
   data.connect:[generic|magic]
      floatArray2bytes:x:@http.post/*/content/*/data/0/*/embedding/*
      math.subtract
         .:float:1
         get-value:x:@.arguments/*/threshold
      strings.concat
         .:"\nselect vss.distance, vss.rowid as id, ts.prompt, ts.completion, ts.uri, ts.cached\n\tfrom vss_ml_training_snippets as vss\n    \tinner join ml_training_snippets ts on ts.id = vss.rowid\n   where\n      ts.type = @type and\n      vss_search(vss.embedding_vss, @embedding) and\n      vss.distance < @threshold"
         get-value:x:@.tail
         .:" limit 20"
      data.select:x:@strings.concat
         embedding:x:@floatArray2bytes
         type:x:@.arguments/*/type
         threshold:x:@math.subtract
      add:x:@.scan
         get-nodes:x:@data.select/*
   .time
   set-value:x:@.time
      math.subtract
         date.now
         get-value:x:@.begin
   set-value:x:@.time
      time.format:x:@.time
         format:"ss\\.fff"
   if
      and
         exists:x:@.scan/0
         not-null:x:@.scan/0/*/cached
         mt
            convert:x:@.scan/0/*/cached
               type:int
            .:int:0
      .lambda
         unwrap:x:+/*/*
         set-value:x:@.scan/0/*/completion
            strings.mixin:x:@.scan/0/*/completion
               prompt:x:@.arguments/*/prompt
         unwrap:x:+/*
         return
            cached:x:@.scan/0/*/completion
            db_time:x:@.time
   if
      and
         exists:x:@.scan/0/*/completion
         not-null:x:@.scan/0/*/completion
         strings.contains:x:@.scan/0/*/completion
            .:{{
      .lambda
         unwrap:x:+/*/*
         set-value:x:@.scan/0/*/completion
            strings.mixin:x:@.scan/0/*/completion
               prompt:x:@.arguments/*/prompt
   .result
   .context:
   .tmp:
   .ids
   for-each:x:@.scan/*
      if
         not
            strings.contains:x:@.dp/#/*/completion
               .:{{
         .lambda
            set-value:x:@.tmp
               strings.concat
                  get-value:x:@.tmp
                  .:@"
"
                  get-value:x:@.dp/#/*/prompt
                  .:@"
"
                  .:@"
"
                  get-value:x:@.dp/#/*/completion
                  .:@"

---
"
            if
               lt
                  openai.tokenize:x:@.tmp
                  get-value:x:@.arguments/*/max_tokens
               .lambda
                  set-value:x:@.context
                     get-value:x:@.tmp
                  unwrap:x:+/*/*
                  add:x:@.ids
                     .
                        .:x:@.dp/#/*/id
                  if
                     and
                        not-null:x:@.dp/#/*/uri
                        not-exists:x:"@.result/*/*/uri/\"={@.dp/#/*/uri}\""
                     .lambda
                        unwrap:x:+/*/*/*
                        add:x:@.result
                           .
                              .
                                 prompt:x:@.dp/#/*/prompt
                                 uri:x:@.dp/#/*/uri
                                 distance:x:@.dp/#/*/distance
            else
               set-value:x:@.tmp
                  get-value:x:@.context
   set-value:x:@.context
      strings.trim:x:@.context
         .:@"
 	-"
   if
      and
         exists:x:@.arguments/*/session
         not-null:x:@.arguments/*/session
      .lambda
         .value
         set-value:x:@.value
            strings.join:x:@.ids/*
               .:,
         if
            not-null:x:@.tail/+
            .lambda
               set-value:x:@.value
                  strings.concat
                     get-value:x:@.value
                     .:,
                     get-value:x:@.tail/+
               set-value:x:@.value
                  strings.trim:x:@.value
                     .:,
               strings.split:x:@.value
                  .:,
               if
                  mte
                     get-count:x:@strings.split/*
                     .:int:20
                  .lambda
                     remove-nodes:x:@strings.split/*/[15,20]
                     set-value:x:@.value
                        strings.join:x:@strings.split/*
                           .:,
         cache.set:x:@.cache-key
            value:x:@.value
            expiration:x:@.arguments/*/session_timeout
   if
      neq:x:@.context
         .:
      .lambda
         add:x:+/+/*/*/snippets
            get-nodes:x:@.result/*
         unwrap:x:+/*/*/context
         add:x:../*/return
            .
               context:x:@.context
               snippets
   unwrap:x:+/*
   return
      db_time:x:@.time
