
/*
 * 1. [for-each]: Iterates through each child node of [stats] inside the [.input] node, passing each resource (such as [cpu], [ram], [disk]) as a reference into [.dp].
 * 2. [get-name]: Extracts the name of the currently iterated node (e.g., "cpu", "ram", "disk") from [.dp].
 * 3. [set-value]: Updates the corresponding child node of [.output] (e.g., [cpu], [ram], [disk]) using the value found in the matching [.input] node, dynamically matching by name.
 * 4. [get-value]: Retrieves the value of the current resource node being processed (e.g., the actual integer value for [cpu], [ram], or [disk]) from [.dp].
 * 
 * Use cases:
 * - Synchronizing or copying resource statistics (CPU, RAM, disk) from an input structure to an output structure based on matching names.
 * - Dynamically updating output values when the set of resources is not fixed, ensuring the output always reflects the latest input.
 * - Automating the mapping of system metrics or configuration parameters from one data structure to another by matching node names.
 * - Useful in scenarios where the input and output schemas are parallel and should always stay synchronized as resource types are added or removed.
 */
.input
   stats
      cpu:int:70
      ram:int:4096
      disk:int:512
.output
   cpu
   ram
   disk
for-each:x:@.input/*/stats/*
   get-name:x:@.dp/#
   set-value:x:@.output/*/{@get-name}
      get-value:x:@.dp/#
