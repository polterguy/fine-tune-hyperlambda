
/*
 * 1. The [data.connect] slot establishes a database connection using the given connection string, either [generic] or [magic].
 * 2. The [if] slot with the [and] logical operator checks if [.arguments] contains a valid [prefix-url] parameter, and if so, sets [.prefix-url] to a SQL "like" condition and appends it to the SQL query parameters.
 * 3. The [set-value] slot is used multiple times to store timestamps ([.begin] and [.end]) using [date.now] before and after the database query for measuring elapsed time.
 * 4. The [floatArray2bytes] slot converts an embedding array from the HTTP POST payload into a byte array for use in the SQL query.
 * 5. The [math.subtract] slot calculates a threshold value for filtering in the query by subtracting the provided threshold from 1.
 * 6. The [strings.concat] slot dynamically builds a SQL SELECT statement based on input parameters, including optional URL prefix and embedding-based filtering logic.
 * 7. The [data.select] slot executes the dynamically constructed SQL query, passing in values such as the embedding, type, threshold, and limit.
 * 8. The elapsed time for the query is calculated using [math.subtract] on the timestamps, then formatted as seconds and milliseconds using [time.format].
 * 9. A conditional [if]/[else] structure checks if any results were found; if not, it removes the [snippets] node, otherwise it adds the results to [snippets].
 * 10. The [unwrap] slot is used to evaluate and prepare the return nodes before returning the final result, which includes the database query time and the retrieved [snippets].
 * 
 * Use cases:
 * - Filtering and retrieving machine learning snippet records from a database based on an embedding vector and optional URL prefix.
 * - Measuring and reporting the execution time of a semantic search SQL query.
 * - Dynamically constructing and executing parameterized SQL to support advanced text or vector search in a training data context.
 * - Handling cases where no results are found by cleaning up the response structure before returning to the caller.
 */
data.connect:[generic|magic]
   .prefix-url:"ts.uri is not null and "
   if
      and
         exists:x:@.arguments/*/prefix-url
         not-null:x:@.arguments/*/prefix-url
         neq:x:@.arguments/*/prefix-url
            .:
      .lambda
         set-value:x:@.prefix-url
            .:"ts.uri like @prefix and "
         add:x:@data.connect/*/data.select
            .
               @prefix:x:@.arguments/*/prefix-url
   .begin
   set-value:x:@.begin
      date.now
   floatArray2bytes:x:@http.post/*/content/*/data/0/*/embedding/*
   math.subtract
      .:float:1
      get-value:x:@.arguments/*/threshold
   strings.concat
      .:"\nselect vss.distance, ts.prompt, ts.uri\n\tfrom vss_ml_training_snippets as vss\n    \tinner join ml_training_snippets ts on ts.id = vss.rowid\n   where\n      ts.type = @type and "
      get-value:x:@.prefix-url
      .:"vss_search(vss.embedding_vss, @embedding) and\n       vss.distance < @threshold\ngroup by ts.uri\norder by vss.distance\nlimit @limit"
   data.select:x:@strings.concat
      @embedding:x:@floatArray2bytes
      @type:x:@.arguments/*/type
      @threshold:x:@math.subtract
      @limit:x:@.arguments/*/max
   .end
   set-value:x:@.end
      date.now
   .time
   set-value:x:@.time
      math.subtract
         get-value:x:@.end
         get-value:x:@.begin
   set-value:x:@.time
      time.format:x:@.time
         format:"ss\\.fff"
   if
      not-exists:x:@data.select/*
      .lambda
         remove-nodes:x:../*/return/*/snippets
   else
      add:x:@data.connect/*/return/*/snippets
         get-nodes:x:@data.select/*
   unwrap:x:./*/return/*
   return
      db_time:x:@.time
      snippets
