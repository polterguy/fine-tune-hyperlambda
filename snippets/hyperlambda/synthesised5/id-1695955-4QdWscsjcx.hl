
/*
 * 1. The [set-value] slot updates the value of all nodes referenced by the `:x:@.sql` expression, setting them to a new value constructed from its only child slot.
 * 2. The [strings.concat] slot concatenates multiple string values together, forming a single string result that is the new value for the targeted [.sql] nodes.
 * 3. The [get-value] slot fetches the current value of the [.sql] node, and another [get-value] retrieves the value of [.fields], both of which are included in the concatenated result.
 * 4. Literal string nodes add SQL fragments such as `) * 1.0 / length(` and `) as keyword_density, (`, effectively constructing or modifying a SQL expression for keyword density calculation.
 * 
 * Use cases:
 * - Dynamically modify an existing SQL statement in [.sql] to include a computed column for keyword density.
 * - Programmatically assemble complex SQL fragments by merging field names and static string templates.
 * - Reuse the values of [.sql] and [.fields] nodes in building advanced SELECT queries for reporting or analytics.
 * - Update multiple [.sql] nodes at once in a batch process to ensure their values are consistently transformed.
 */
set-value:x:@.sql
   strings.concat:x:@.sql
      get-value:x:@.sql
      .:) * 1.0 / length(
      get-value:x:@.fields
      .:) as keyword_density, (
