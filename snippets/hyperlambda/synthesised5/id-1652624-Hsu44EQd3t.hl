
/*
 * 1. [for-each] iterates over each child node of [data.read], passing each node by reference as [.dp].
 * 2. [http.get] performs an HTTP GET request to "https://api.streamstats.com/plays" for each [.dp] node, adding a query parameter "id" whose value is taken from the [ArtistId] child node of the current [.dp]. The [convert] argument ensures the response is automatically converted to a Hyperlambda node structure.
 * 3. [add:x:+/*/*] adds all child nodes under the [content] node of the HTTP response as children to the next sibling node at the same level as the current node.
 * 4. [add:x:@.dp/#] adds a new [plays] node as a child to the currently iterated [.dp] node.
 * 
 * Use cases:
 * - Enriching a list of artist data nodes with the number of plays by fetching statistics from an external API for each artist.
 * - Synchronizing local artist data with up-to-date play counts from a remote service.
 * - Building a data pipeline that augments existing nodes with additional information retrieved via HTTP requests.
 */
for-each:x:@data.read/*
   http.get:"https://api.streamstats.com/plays"
      query
         id:x:@.dp/#/*/ArtistId
      convert:bool:true
   add:x:+/*/*
      get-nodes:x:@http.get/*/content/*
   add:x:@.dp/#
      .
         plays
