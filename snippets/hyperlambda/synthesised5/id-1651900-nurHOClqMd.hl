
/*
 * 1. The [switch] slot checks the value of [.arguments/*/databaseType] and executes different logic depending on whether the database type is "mysql", "pgsql", or "mssql".
 * 2. For each case, [set-value] assigns a value to [.master] (the system database to connect to for administrative operations) and constructs a database-specific SQL statement for dropping a database, storing it in [.sql]. The SQL is built using [strings.concat] and [get-value] to dynamically insert the database name.
 * 3. The [if] slot checks if [.arguments/*/generate] is true. If so, it returns the generated SQL statement from [.sql] without executing it.
 * 4. If not generating SQL, [strings.concat] builds a connection string using [.arguments/*/connectionString] and [.master], which is then used by [data.connect] to open a connection to the system database.
 * 5. Inside [data.connect], [data.execute] runs the SQL statement in [.sql] to drop the specified database, using the appropriate [database-type].
 * 
 * Use cases:
 * - Dynamically generate and/or execute a "drop database" SQL statement for MySQL, PostgreSQL, or SQL Server, based on input arguments.
 * - Return the generated SQL for preview or debugging when [.arguments/*/generate] is true, without executing it.
 * - Programmatically drop a database from an administrative context, ensuring the correct system database and SQL syntax are used for each supported database type.
 */
else
   .sql
   .master
   switch:x:@.arguments/*/databaseType
      case:mysql
         set-value:x:@.master
            .:information_schema
         set-value:x:@.sql
            strings.concat
               .:drop database `
               get-value:x:@.arguments/*/databaseName
               .:`;
      case:pgsql
         set-value:x:@.master
            .:template1
         set-value:x:@.sql
            strings.concat
               .:"revoke connect on database \""
               get-value:x:@.arguments/*/databaseName
               .:"\" from public; "
               .:"select pid, pg_terminate_backend(pid) from pg_stat_activity "
               .:"where datname = '"
               get-value:x:@.arguments/*/databaseName
               .:"'; "
               .:"drop database \""
               get-value:x:@.arguments/*/databaseName
               .:"\";"
      case:mssql
         set-value:x:@.master
            .:master
         set-value:x:@.sql
            strings.concat
               .:alter database [
               .:x:@.arguments/*/databaseName
               .:"] set single_user with rollback immediate; "
               .:drop database [
               get-value:x:@.arguments/*/databaseName
               .:];
   if:x:@.arguments/*/generate
      unwrap:x:+/*
      return
         sql:x:@.sql
   strings.concat
      .:[
      get-value:x:@.arguments/*/connectionString
      .:|
      get-value:x:@.master
      .:]
   data.connect:x:@strings.concat
      database-type:x:@.arguments/*/databaseType
      data.execute:x:@.sql
         database-type:x:@.arguments/*/databaseType
