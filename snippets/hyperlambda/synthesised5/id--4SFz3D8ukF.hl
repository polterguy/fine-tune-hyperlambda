
/*
 * 1. The [try] slot begins a protected block where exceptions can be raised and caught.
 * 2. Inside [try], the [throw] slot deliberately raises an exception with the message "Error occurred".
 * 3. If an exception is thrown inside [try], execution immediately jumps to the [.catch] node, where [log.info] is used to log "Caught the error".
 * 4. The [.finally] node contains another [log.info] slot, ensuring "Cleanup done" is always logged whether or not an exception was thrown, providing guaranteed cleanup code execution.
 * 
 * Use cases:
 * - Implement error handling for risky operations, logging custom messages when issues occur.
 * - Clean up resources (e.g., closing files or connections) reliably after an operation, regardless of success or failure.
 * - Provide user feedback about both errors and successful cleanup in a workflow that may fail.
 */
try
   throw:Error occurred
.catch
   log.info:Caught the error
.finally
   log.info:Cleanup done
