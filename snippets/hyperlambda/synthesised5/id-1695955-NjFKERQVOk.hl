
/*
 * 1. The [else] slot ensures that the contained logic only executes if previous conditional branches (such as [if] or [else-if] siblings) have not been satisfied.
 * 2. [set-value:x:@.sql] updates the value of the [.sql] node, replacing its current contents with a new value.
 * 3. [strings.concat:x:@.sql] concatenates a sequence of string fragments and expressions into a single SQL string expression, dynamically building a segment of SQL code.
 * 4. [get-value:x:@.sql], [get-value:x:@.fields], and [get-value:x:@.no] fetch the current values of the corresponding nodes, which are then incorporated into the final SQL string.
 * 5. The constructed string is a SQL expression that calculates the count of a substring (represented by [.no]) within a given field (represented by [.fields]). This is achieved by using SQL length and replace functions to determine how many times a substring occurs.
 * 
 * Use cases:
 * - Generating a SQL query that counts the occurrences of a specific substring within a text column for advanced search or analytics.
 * - Dynamically updating a SQL query string based on conditional logic, such as when the substring count calculation is only necessary if other conditions are not met.
 * - Constructing complex SQL expressions on-the-fly within a larger workflow that manipulates SQL queries for reporting, auditing, or data analysis purposes.
 * - Adapting SQL string generation based on user inputs, such as field names or substrings, within a low-code automation or data transformation scenario.
 */
else
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" + (length("
         get-value:x:@.fields
         .:) - length(replace(lower(
         get-value:x:@.fields
         .:), @p
         get-value:x:@.no
         .:", ''))) / length(@p"
         get-value:x:@.no
         .:)
