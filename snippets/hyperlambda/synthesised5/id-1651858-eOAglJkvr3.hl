
// Checks if the "massagePrompt" argument is provided and not empty, then sets up the OpenAI API authorization token and iterates through each temporary snippet. For each snippet, it sends a POST request to the OpenAI chat completions endpoint with the specified model and prompt. If the response status is not between 200 and 299, it logs an error with details; otherwise, it updates the snippet's "prompt" value with the generated content from the OpenAI response.
if
   and
      not-null:x:@.arguments/*/massagePrompt
      neq:x:@.arguments/*/massagePrompt
         .:
   .lambda
      .token
      set-value:x:@.token
         strings.concat
            .:"Bearer "
            config.get:"magic:openai:key"
      for-each:x:@.tmp-snippets/*
         http.post:"https://api.openai.com/v1/chat/completions"
            convert:bool:true
            headers
               Authorization:x:@.token
               Content-Type:application/json
               Accept:text/event-stream
            payload
               model:gpt-3.5-turbo
               max_tokens:int:1000
               temperature:decimal:0.3
               messages
                  .
                     role:system
                     content:x:@.arguments/*/massagePrompt
                  .
                     role:user
                     content:x:@.dp/#/*/completion
         if
            not
               and
                  mte:x:@http.post
                     .:int:200
                  lt:x:@http.post
                     .:int:300
            .lambda
               lambda2hyper:x:@http.post
               log.error:Something went wrong while invoking OpenAI
                  message:x:@http.post/*/content/*/error/*/message
                  status:x:@http.post
                  error:x:@lambda2hyper
         else
            set-value:x:@.dp/#/*/prompt
               get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
