
/*
 * 1. The [include] slot iterates over each child node of [data.read] (using the expression `:x:@data.read/*`), and for each such node, it executes the provided lambda object with a [.dp] node referencing the current item.
 * 2. [strings.concat] constructs a file path by concatenating the static string "/metadata/artists/", the value of the [ArtistId] node found under the current [.dp] node, and the static string ".json".
 * 3. [io.file.load] loads the file at the path generated by [strings.concat].
 * 4. [json2lambda] parses the loaded JSON file into a lambda object.
 * 5. [yield] returns the children of the [json2lambda] node as [metadata] nodes for each iteration, effectively aggregating metadata from multiple artist JSON files into the result.
 * 
 * Use cases:
 * - Dynamically load and aggregate metadata for a list of artists, where each artist's metadata is stored in a separate JSON file named after their [ArtistId].
 * - Merge multiple external JSON data sources into a single lambda object for further processing or response.
 * - Batch process and transform a collection of files based on dynamic input data, such as importing artist profiles into an application.
 */
include:x:@data.read/*
   strings.concat
      .:/metadata/artists/
      get-value:x:@.dp/#/*/ArtistId
      .:.json
   io.file.load:x:-
   json2lambda:x:-
   yield
      metadata:x:@json2lambda/*
