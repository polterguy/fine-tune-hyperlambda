
/*
 * 1. The [while] slot repeatedly executes its lambda block as long as the condition, checked by [lt], remains true.
 * 2. The [lt] slot compares the value of [.i] against 3, returning true if [.i] is less than 3.
 * 3. Inside the loop, [math.increment] increases the value of [.i] by 1 with each iteration.
 * 4. The [add] slot appends a new node with the name [item] as a child of [.list] during each iteration.
 * 
 * Use cases:
 * - Building a list with a fixed number of items, such as creating placeholders or initializing a collection.
 * - Generating nodes dynamically based on a counter, useful for repeatable structures in data generation.
 * - Demonstrating loop and counter logic in Hyperlambda using [while] and [math.increment].
 * - Automating repetitive tasks, like populating a node tree with a certain number of children.
 */
.list
.i:int:0
while
   lt
      get-value:x:@.i
      .:int:3
   .lambda
      math.increment:x:@.i
      add:x:@.list
         .
            item
