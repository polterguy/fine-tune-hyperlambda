
/*
 * 1. The [io.file.list-recursively] slot recursively retrieves all files within the specified [.folder], gathering a complete list of file paths.
 * 2. The [for-each] slot iterates through every file path returned, assigning each file path by reference to the [.dp] node during each iteration.
 * 3. The [if] slot checks whether the current file name ends with ".hl" using [strings.ends-with], ensuring only Hyperlambda files are processed.
 * 4. [io.file.load] loads the content of each matching ".hl" file.
 * 5. [hyper2lambda] parses the loaded Hyperlambda text into its internal lambda structure, preserving comments if present.
 * 6. [lambda2hyper] converts the parsed lambda structure back into Hyperlambda text, again preserving comments.
 * 7. [io.file.save] writes the re-serialized Hyperlambda text back to the original file path.
 * 
 * Possible use cases:
 * - Reformatting and normalizing the syntax and indentation of all Hyperlambda files in a module folder.
 * - Ensuring that comments within Hyperlambda files are preserved and standardized as semantic nodes.
 * - Preparing Hyperlambda files for version control by enforcing consistent formatting and structure.
 * - Migrating or upgrading Hyperlambda files after changes to comment or serialization conventions.
 */
.folder:/modules/YOUR-MODULE-FOLDER-HERE/
io.file.list-recursively:x:-
for-each:x:-/*
   if
      strings.ends-with:x:@.dp/#
         .:.hl
      .lambda
         io.file.load:x:@.dp/#
         hyper2lambda:x:@io.file.load
            comments:true
         lambda2hyper:x:@hyper2lambda/*
            comments:true
         io.file.save:x:@.dp/#
            get-value:x:@lambda2hyper
