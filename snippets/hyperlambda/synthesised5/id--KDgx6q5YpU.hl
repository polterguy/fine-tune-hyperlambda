
/*
 * 1. The [join] slot synchronizes the concurrent execution of its child [fork] nodes, ensuring that all parallel tasks complete before execution proceeds.
 * 2. Each [fork] creates a new thread to execute its child nodes independently, enabling parallel processing.
 * 3. Within each [fork], a [semaphore] node named [shared-resource] is used to limit access to a critical section, allowing only one thread at a time to execute the child nodes of the semaphore, ensuring mutual exclusion.
 * 4. Inside the [semaphore], [log.info] nodes log which fork is currently entering the protected section, demonstrating controlled, exclusive access.
 * 
 * Use Cases:
 * - Safely logging or modifying a shared file or data structure from parallel tasks without data corruption.
 * - Performing concurrent HTTP requests or computations, then synchronizing at a join point.
 * - Managing access to a hardware resource (like a printer) to prevent simultaneous conflicting operations.
 * - Implementing thread-safe counters or transaction handling where only one operation can proceed at a time.
 */
join
   fork
      semaphore:shared-resource
         log.info:Fork 1 entering critical section
   fork
      semaphore:shared-resource
         log.info:Fork 2 entering critical section
