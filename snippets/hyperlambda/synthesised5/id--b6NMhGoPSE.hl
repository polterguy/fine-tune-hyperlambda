
/*
 * 1. [slots.create:foo1] and [slots.create:foo2] dynamically create two slots named [foo1] and [foo2], each returning a static valueâ€”[foo1] returns "Safe" and [foo2] returns "Unsafe".
 * 2. [whitelist] restricts the available slots within its scope to only those listed in its [vocabulary] child, specifically allowing [signal] and [signal:foo1].
 * 3. Inside [.lambda], [signal:foo1] is called, which works because [signal:foo1] is explicitly whitelisted, but the subsequent [signal:foo2] call will throw an exception because [signal:foo2] is not included in the whitelist.
 * 
 * Use cases:
 * - Isolating execution to only approved dynamic slots for running untrusted user code safely.
 * - Preventing access to potentially unsafe or sensitive slots by explicitly defining a list of permitted slot invocations.
 * - Creating a sandbox environment for plugins or scripts where only certain pre-defined operations are allowed.
 * - Ensuring that even if a user attempts to invoke a non-whitelisted slot, the system will block the execution and maintain security.
 */
slots.create:foo1
   return-value:Safe
slots.create:foo2
   return-value:Unsafe
whitelist
   vocabulary
      signal
      signal:foo1
   .lambda
      signal:foo1
      signal:foo2
