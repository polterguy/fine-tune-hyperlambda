
/*
 * 1. [set-value] assigns a new value to the node referenced by the expression `@.sql`. The value is built by evaluating its child node.
 * 2. [strings.concat] constructs a string by concatenating a sequence of values, including the current value of [.sql] and several string fragments.
 * 3. [get-value] is repeatedly used to retrieve the values from the [.sql], [.fields], and [.no] nodes, which are then inserted into the concatenated string at specific positions.
 * 
 * Use Cases:
 * - Dynamically builds a complex SQL fragment that computes the number of occurrences of a substring (parameterized by [.no]) within the contents of a database field (referenced by [.fields]).
 * - Useful for generating custom SQL statements in reporting, analytics, or search features that require counting substring matches case-insensitively.
 * - Can be adapted to construct and assign similar SQL expressions to multiple nodes if iterated over different target columns or search patterns.
 */
set-value:x:@.sql
   strings.concat:x:@.sql
      get-value:x:@.sql
      .:" (length("
      get-value:x:@.fields
      .:) - length(replace(lower(
      get-value:x:@.fields
      .:), @p
      get-value:x:@.no
      .:", ''))) / length(@p"
      get-value:x:@.no
      .:)
