
/*
 * 1. The [slots.create] slot defines a new dynamic slot named [magic.db.sqlite.indexes], which is used to retrieve index information for a specific table in a SQLite database.
 * 2. The [validators.mandatory] slots ensure that both the [database] and [table] arguments are provided by the caller, enforcing required input validation.
 * 3. The [.connection] node is used to construct the connection string based on the presence or absence of the [connection-string] argument. If [connection-string] is provided and not empty, it concatenates it with the [database] argument; otherwise, it defaults to "[generic|database]".
 * 4. The [sqlite.connect] slot establishes a connection to the SQLite database using the constructed connection string in [.connection].
 * 5. A SQL query is dynamically constructed to select all index definitions from the [sqlite_master] table for the specified table, and this query is executed using [sqlite.select].
 * 6. The [for-each] loop iterates over each index found, extracting the index name and preparing a result node with [name] and an empty [columns] node.
 * 7. For each index, a "pragma index_info" query is constructed and executed to retrieve the column details for the index.
 * 8. Another [for-each] loop iterates over the columns of each index, adding the column names to the [columns] node of the corresponding index result.
 * 9. The [return-nodes] slot returns the collected index information, including index names and their associated columns, as the result of the slot.
 * 
 * Use cases:
 * - Retrieve all indexes and their columns for a given table in a SQLite database, useful for database schema introspection or migration tools.
 * - Integrate into an admin dashboard to display index information for database optimization and troubleshooting.
 * - Automate documentation or auditing processes by extracting and reporting index structures for compliance or review.
 */
slots.create:magic.db.sqlite.indexes
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table
   .connection:
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   sqlite.connect:x:@.connection
      strings.concat
         .:"select * from sqlite_master where type = 'index' and tbl_name='"
         get-value:x:@.arguments/*/table
         .:"'"
      sqlite.select:x:@strings.concat
      for-each:x:@sqlite.select/*
         unwrap:x:+/*/*/*
         add:x:../*/return-nodes
            .
               .
                  name:x:@.dp/#/*/name
                  columns
         strings.concat
            .:"pragma index_info('"
            get-value:x:@.dp/#/*/name
            .:"')"
         sqlite.select:x:@strings.concat
         for-each:x:@sqlite.select/*
            unwrap:x:+/*/*
            add:x:../*/return-nodes/0/-/*/columns
               .
                  .:x:@.dp/#/*/name
   return-nodes
