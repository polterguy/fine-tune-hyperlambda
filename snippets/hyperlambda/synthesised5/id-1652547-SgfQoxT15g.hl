
/*
 * 1. [data.connect] establishes a database connection to the "ecommerce" database.
 * 2. [data.read] selects up to 50 records from the [Customer] table, retrieving only the [CustomerId] and [Email] columns.
 * 3. The first [include] iterates over each customer record and performs an [http.get] request to "https://api.example.com/orders", passing the current [CustomerId] as a query parameter. The response is converted to a lambda object, and the customer's orders are yielded as an [orders] node for each customer.
 * 4. The second [include] also iterates over each customer record, concatenates a file path using the [CustomerId], loads the corresponding JSON file, converts it to a lambda structure, and yields the result as a [preferences] node for each customer.
 * 
 * Use cases:
 * - Enriching customer records with their latest orders from an external API for reporting or dashboard purposes.
 * - Loading and attaching customer-specific preferences stored as JSON files to each customer record for personalized experiences.
 * - Building a unified customer profile by combining database, external API, and file-based data sources for downstream processing or analytics.
 */
data.connect:ecommerce
   data.read
      table:Customer
      limit:50
      columns
         CustomerId
         Email
   include:x:@data.read/*
      http.get:"https://api.example.com/orders"
         query
            customerId:x:@.dp/#/*/CustomerId
         convert:bool:true
      yield
         orders:x:@http.get/*/content/*
   include:x:@data.read/*
      strings.concat
         .:/data/preferences/
         get-value:x:@.dp/#/*/CustomerId
         .:.json
      io.file.load:x:-
      json2lambda:x:-
      yield
         preferences:x:@json2lambda/*
