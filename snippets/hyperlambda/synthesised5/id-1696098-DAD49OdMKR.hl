
/*
 * 1. The [set-value] slot updates the value of the [.sql] node using the result of the [strings.concat] slot.
 * 2. The [strings.concat] slot dynamically constructs a SQL fragment by joining together its child nodes, which include both static strings and values retrieved from [.sql], [.fields], and [.no] using [get-value].
 * 3. The SQL fragment created is a conditional CASE WHEN expression that counts the number of times a parameter value (@p[.no]) appears in the lowercased value of [.fields], and returns 1 if it appears at least once, otherwise 0.
 * 4. The use of [get-value:x:@.fields] and [get-value:x:@.no] allows the CASE WHEN expression to adapt to different fields and parameters dynamically.
 * 
 * Use cases:
 * - Dynamically augment a SQL query to include a computed column indicating if a search term exists in a text field.
 * - Implement advanced search or filtering in reports where you need to indicate presence/absence of a string within a column.
 * - Generate custom SQL CASE expressions for database queries based on user-defined fields and parameters.
 * - Conditionally flag rows in the query result depending on the frequency of a substring in a given column.
 */
set-value:x:@.sql
   strings.concat:x:@.sql
      get-value:x:@.sql
      .:" + CASE WHEN ((length("
      get-value:x:@.fields
      .:) - length(replace(lower(
      get-value:x:@.fields
      .:), @p
      get-value:x:@.no
      .:", ''))) / length(@p"
      get-value:x:@.no
      .:)) > 0 THEN 1 ELSE 0 END
