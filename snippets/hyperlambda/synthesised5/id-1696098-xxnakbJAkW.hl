
/*
 * 1. [set-value] assigns a new value to the [.sql] node, using the result of [strings.concat].
 * 2. [strings.concat] builds a complex string by concatenating the current value of [.sql] and several fragments, some of which include dynamic values from [.fields] and [.no].
 * 3. [get-value] retrieves the values of [.sql], [.fields], and [.no] at various points to inject their current values into the resulting string.
 * 
 * Use cases:
 * - Dynamically constructing a SQL expression or query string that counts or analyzes occurrences of a substring in a field.
 * - Building a query for analytics purposes, such as counting the frequency of a value in a column.
 * - Creating a complex log or debug string where nested values from different nodes are required in a specific format.
 * - Generating a calculated field or derived value in a data processing pipeline based on other node values.
 */
set-value:x:@.sql
   strings.concat:x:@.sql
      get-value:x:@.sql
      .:" + (length("
      get-value:x:@.fields
      .:) - length(replace(lower(
      get-value:x:@.fields
      .:), @p
      get-value:x:@.no
      .:", ''))) / length(@p"
      get-value:x:@.no
      .:)
