
/*
 * 1. The [switch] slot evaluates the value of the [.val] node and compares it to the values of each [case] child node.
 * 2. Each [case] node checks if its value matches the evaluated value from [switch]; if a match is found, its child instructions are executed.
 * 3. The [default] node provides a fallback block that executes if none of the [case] nodes match the evaluated value.
 * 4. The [set-value] slot sets the value of the [.result] node according to which [case] or [default] block is executed.
 * 
 * Use cases:
 * - Routing logic based on user input, where different actions are triggered depending on a provided value.
 * - Handling system status codes or response types, with specific operations for each scenario and a default for unknown types.
 * - Simplifying branching conditions in workflows, replacing multiple [if]/[else-if]/[else] blocks with a more readable structure.
 * - Assigning result values based on a configuration or dynamic selection, ensuring a fallback value is always set.
 */
.val:baz
.result
switch:x:@.val
   case:foo
      set-value:x:@.result
         .:First
   case:bar
      set-value:x:@.result
         .:Second
   default
      set-value:x:@.result
         .:None
