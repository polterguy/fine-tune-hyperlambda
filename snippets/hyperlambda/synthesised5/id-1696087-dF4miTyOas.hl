
/*
 * 1. The [data.read] slot initiates a database read operation, with the [database-type] set to "sqlite", indicating the database engine to use for the query.
 * 2. The [table] node specifies "leads" as the main table to read from, and contains a [join] node to include data from the "clients" table, using a left join as defined by the [type:left] child.
 * 3. The [join] uses [as:client_id] to create an alias for the joined "clients" table and provides an [on] clause that matches "leads.client_id" with "client_id.client_id", establishing the join condition.
 * 4. The [columns] node lists "aggregate_functor" as a column to be selected, and assigns it the alias "result" using [as:result]. This is typically used for aggregate SQL functions like COUNT, SUM, etc.
 * 5. The [where] node is present with an [and] child, acting as a placeholder for additional filtering conditions to be added if needed.
 * 6. The [group] node indicates that the query should group results by "group_column", enabling SQL GROUP BY functionality on the specified column.
 * 
 * Use cases:
 * - Generating a report of aggregated lead data grouped by a specific attribute (e.g., status or region), joined with client information.
 * - Producing summary statistics of leads per client, such as the number of leads each client has, even if some clients have no leads (due to the left join).
 * - Analyzing patterns within leads by grouping and aggregating on custom columns, while still accessing related client data.
 * - Creating dashboards that display metrics like totals or averages for leads, broken down by a grouping column and supplemented with client details.
 */
data.read
   database-type:sqlite
   table:leads
      join:clients
         as:client_id
         type:left
         on
            and
               leads.client_id:client_id.client_id
   columns
      aggregate_functor
         as:result
   where
      and
   group
      group_column
