
/*
 * 1. The [for-each] slot iterates over each child node of all nodes under [signal], passing each node by reference as [.dp].
 * 2. Within the loop, [set-name] renames the currently iterated node (referenced by [.dp]) to "database".
 * 3. [unwrap] evaluates all nodes that are three levels deeper than the next sibling of the current node, allowing for dynamic evaluation of complex or nested structures.
 * 4. [add] inserts a new node under [.result], with a nested structure that includes a [name] node (whose value is taken from the renamed node) and an empty [tables] node.
 * 
 * Use cases:
 * - Transform a set of database definitions under [signal] by standardizing their node name to "database" and collecting them under a result tree.
 * - Dynamically process and restructure nested configuration data, flattening and renaming nodes while building a summary output.
 * - Aggregate and reformat incoming signal data for further processing or export, such as preparing a list of database schemas with associated metadata.
 * - Normalize varying input node structures to a common format for downstream automation or reporting.
 */
for-each:x:@signal/*/*
   set-name:x:@.dp/#
      .:database
   unwrap:x:+/*/*/*
   add:x:@.result
      .
         .
            name:x:@.dp/#
            tables
