
/*
 * 1. The [.i] node is initialized to 0 and will serve as a loop counter.
 * 2. The [.list] node is prepared to collect new items during each loop iteration.
 * 3. The [while] slot repeatedly executes its lambda body as long as the value of [.i] is less than 3, using the [lt] and [get-value] slots to check this condition.
 * 4. Inside the [while] loop, [add:x:@.list] appends a new anonymous node containing [item] to [.list] on every iteration.
 * 5. [math.increment:x:@.i] increases the value of [.i] by 1 after each loop iteration, ensuring the condition will eventually be false and prevent an infinite loop.
 * 6. [eval:x:@.process] executes the entire [.process] node, causing the above sequence to run.
 * 
 * Use cases:
 * - Automatically generate a fixed number of similar list items, such as initializing three placeholder elements in [.list].
 * - Demonstrate basic loop constructs and counter management in Hyperlambda for educational purposes.
 * - Prepare a collection of nodes dynamically during workflow initialization or batch processing tasks.
 * - Build up a data structure step-by-step using iterative logic within a single execution context.
 */
.process
   .i:int:0
   .list
   while
      lt
         get-value:x:@.i
         .:int:3
      .lambda
         add:x:@.list
            .
               item
         math.increment:x:@.i
eval:x:@.process
