
/*
 * 1. The [.arguments] node defines the expected input, which is a [path] argument of type string.
 * 2. [validators.mandatory] checks that the [path] argument is provided, throwing an exception if it is missing.
 * 3. [auth.ticket.verify] ensures that only users with the "user" or "admin" roles can proceed, enforcing authorization.
 * 4. [io.folder.list-recursively] lists all files and folders recursively starting from the directory specified by the [path] argument.
 * 5. [yield] returns the recursive folder structure, exposing it under the [structure] node for the consumer.
 * 
 * Use cases:
 * - Retrieve a complete directory and file tree for a given path for display in a file manager UI.
 * - Enforce that only authorized users can access directory listings for sensitive areas.
 * - Validate that an API call for directory structure always includes the required [path] parameter, improving API reliability.
 * - Present a nested folder structure for backup or synchronization operations.
 */
.arguments
   path:string
validators.mandatory:x:@.arguments/*/path
auth.ticket.verify:user,admin
io.folder.list-recursively:x:@.arguments/*/path
yield
   structure:x:@io.folder.list-recursively/*
