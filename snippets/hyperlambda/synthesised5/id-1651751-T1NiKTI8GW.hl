
/*
 * 1. [slots.create] defines a new dynamic slot named [transformers.hash-password], which can be executed later to perform password hashing.
 * 2. [get-value] retrieves the value of the first argument passed to the slot (from [arguments/0/#]), which is expected to be the password to hash.
 * 3. [crypto.password.hash] hashes the password value retrieved in the previous step using the Blowfish algorithm.
 * 4. [if] checks a condition: it uses [not] and [eq] to compare the result of [crypto.password.hash] to an empty value ([.]). This effectively checks if the hash result is not empty.
 * 5. If the hash result is not empty, [.lambda] executes its body: [set-value] updates the original argument ([arguments/0/#]) with the hashed password value.
 * 
 * Use cases:
 * - Hashing a plain text password before storing it in a database to improve security.
 * - Automatically transforming user input passwords into hashed values within a data processing pipeline.
 * - Enforcing password hashing in custom user registration or authentication workflows by integrating this slot.
 */
slots.create:transformers.hash-password
   get-value:x:@.arguments/0/#
   crypto.password.hash:x:-
   if
      not
         eq
            get-value:x:@crypto.password.hash
            .
      .lambda
         set-value:x:@.arguments/0/#
            get-value:x:@crypto.password.hash
