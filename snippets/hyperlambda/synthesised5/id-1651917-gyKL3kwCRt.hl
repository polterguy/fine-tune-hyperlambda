
/*
 * 1. The [slots.create] slot defines a new dynamic slot named [magic.db.mysql.foreign_keys] that retrieves foreign key information for a specific table in a MySQL database.
 * 2. [validators.mandatory] ensures that both [.arguments/*/database] and [.arguments/*/table] are provided as required arguments when the slot is executed.
 * 3. The [.connection] node is initialized with a default value of [information_schema], which is the MySQL system database containing metadata.
 * 4. The [if] block checks if a [connection-string] argument is provided and is not empty or null. If so, it constructs a connection string by concatenating the [connection-string] and [database] values, assigning the result to [.connection].
 * 5. The [else] block handles the case where no [connection-string] is provided, setting [.connection] to a generic connection string using only the [database] value.
 * 6. [mysql.connect] establishes a connection to the database using the value in [.connection].
 * 7. [mysql.select] executes a SQL query against the [information_schema.key_column_usage] table to retrieve columns, referenced tables, referenced columns, and constraint names for all foreign key relationships in the specified table and database. The query uses the provided [@table] and [@database] arguments.
 * 8. [return-nodes] returns all result nodes from the [mysql.select] operation.
 * 
 * Use cases:
 * - Retrieve all foreign key relationships for a given table in a MySQL database for documentation or migration purposes.
 * - Dynamically inspect database schema to generate entity relationship diagrams or enforce referential integrity checks in an application.
 * - Integrate into admin tools or APIs that need to display or process foreign key metadata for user-selected tables.
 */
slots.create:magic.db.mysql.foreign_keys
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table
   .connection:[information_schema]
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   mysql.connect:x:@.connection
      mysql.select:"select\n   `column_name` as `column`, `referenced_table_name` as foreign_table, `referenced_column_name` as foreign_column, `constraint_name` as name\n   from `information_schema`.`key_column_usage`\n   where `constraint_schema` = schema() and\n      `table_name` = @table and\n      `referenced_column_name` is not null and\n      `constraint_schema` = @database\n   order by `column_name`"
         @table:x:@.arguments/*/table
         @database:x:@.arguments/*/database
      return-nodes:x:@mysql.select/*
