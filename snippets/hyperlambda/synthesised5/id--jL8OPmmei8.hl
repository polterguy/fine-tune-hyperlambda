
/*
 * 1. The [add] slot is used at the outermost scope to add a new child node to the current context, where its child is a [whitelist] invocation.
 * 2. The [whitelist] slot restricts which slots can be used within its [.lambda] child, only allowing the [return] and [vocabulary] slots as specified under [vocabulary].
 * 3. Inside the [.lambda] node of the [whitelist], a [.foo] node is created, and the [set-value] slot is used to set its value to "foo". The [vocabulary] slot is called but does nothing as it's not an executable slot in this context.
 * 4. The [return] slot is used at the end to return all child nodes within the current [.lambda] context (in this case, everything created under the whitelist).
 * 
 * Use cases:
 * - Safely executing partially trusted Hyperlambda code by only allowing specific slots ([return] and [vocabulary]) to be used.
 * - Creating a sandboxed environment where nodes such as [.foo] can be manipulated only with approved operations.
 * - Returning the result of a controlled Hyperlambda execution to the caller, ensuring code isolation and limiting the available vocabulary for security reasons.
 * - Demonstrating how to nest slot restrictions and return results from within a whitelisted, sandboxed lambda context.
 */
.result
add:x:-
   whitelist
      vocabulary
         return
         vocabulary
      .lambda
         .foo
         set-value:x:@.foo
            .:foo
         vocabulary
         return:x:-/*
