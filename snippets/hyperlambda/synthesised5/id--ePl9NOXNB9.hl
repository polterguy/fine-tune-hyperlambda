
/*
 * 1. [crypto.password.hash] takes the value of the password ("MySecret123" in this case) and generates a secure Blowfish-based hash. This hash incorporates a unique salt for each password, making it resistant to rainbow table and dictionary attacks.
 * 2. [crypto.password.verify] receives the original password ("MySecret123") and, through its [hash] argument, also receives the previously generated hash from [crypto.password.hash]. It checks if the password, when hashed with the same salt, matches the stored hash, returning true if the verification succeeds and false otherwise.
 * 
 * Use cases:
 * - Storing user passwords securely in a database by hashing them with [crypto.password.hash] rather than saving plain text.
 * - Authenticating users during login by verifying the entered password with [crypto.password.verify] against the stored hash.
 * - Preventing security breaches from exposing actual user passwords, as the stored hashes cannot be reversed to reveal the original password.
 * - Supporting password policies that require per-user salts to avoid identical hashes for users with the same password.
 */
crypto.password.hash:MySecret123
crypto.password.verify:MySecret123
   hash:x:@crypto.password.hash
