
/*
 * 1. The [.arguments] node defines the expected input parameters, namely [CustomerTypeID] and [CustomerDesc], both as strings.
 * 2. [validators.mandatory] enforces that [CustomerTypeID] must be provided in the input, ensuring this field is not omitted.
 * 3. [data.connect] establishes a connection to the "northwind" SQLite database, preparing the context for data operations.
 * 4. The first [add] operation populates the [values] node of [data.update] with argument nodes from [CustomerDesc] onward, effectively setting which fields will be updated.
 * 5. The second [add] operation populates the [and] node inside [where] of [data.update] with the [CustomerTypeID] argument, building the WHERE clause for the update.
 * 6. [data.update] performs the update operation on the [CustomerDemographics] table using the prepared [values] and [where] nodes.
 * 7. The [if] condition checks if the update affected zero records (i.e., no matching record was found), and if so, sets the HTTP response status to 404 and returns a "Record not found" message.
 * 8. If at least one record was updated, the HTTP response status is set to 202 (Accepted), and the number of affected rows is returned via [yield].
 * 
 * Use cases:
 * - Updating a customer demographic description for a specific [CustomerTypeID] in the Northwind database.
 * - Handling API requests that update records and respond appropriately if the target does not exist.
 * - Ensuring required arguments are provided before performing a database operation.
 * - Returning meaningful HTTP statuses for both successful and unsuccessful update attempts.
 */
.arguments
   CustomerTypeID:string
   CustomerDesc:string
validators.mandatory:x:@.arguments/*/CustomerTypeID
data.connect:[generic|northwind]
   database-type:sqlite
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]
   data.update
      database-type:sqlite
      table:CustomerDemographics
      values
      where
         and
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found
   response.status.set:202
   yield
      affected:x:@data.update
