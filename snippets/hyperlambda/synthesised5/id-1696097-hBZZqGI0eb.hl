
/*
 * 1. The [join] node specifies a join operation to the [clients] table, instructing the query to include related data from this table.
 * 2. The [as] node provides an alias ([client_id]) for the [clients] table, so subsequent references to this table can use the alias instead of the original name.
 * 3. The [type] node sets the join type to "left", which means all records from the left table (e.g., [notes]) will be included, along with matching records from the [clients] table (or nulls if no match exists).
 * 4. The [on] node defines the join condition, and its [and] child allows for multiple join predicates. Here, it matches [notes.client_id] to [client_id.client_id], joining rows where these values are equal.
 * 
 * Use cases:
 * - Retrieve all notes, including those without a corresponding client, and optionally display client information when present.
 * - Generate reports showing all activity records, whether or not a related client exists in the system.
 * - Support data exports where every note is listed alongside its client details when available, but still include notes even if client data is missing.
 * - Implement user interfaces that show orphaned records (e.g., notes without clients) by leveraging left joins.
 */
join:clients
   as:client_id
   type:left
   on
      and
         notes.client_id:client_id.client_id
