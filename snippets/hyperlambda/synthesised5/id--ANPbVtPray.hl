
/*
 * 1. The [while] slot continuously evaluates its lambda object as long as the condition remains true. In this example, the condition is that the value of [.i] is less than 3.
 * 2. The [lt] slot checks if the value of [.i] (retrieved with [get-value]) is less than 3, serving as the loop's exit condition.
 * 3. Inside the loop, [math.increment] increases the value of [.i] by 1 on each iteration.
 * 4. The [add] slot appends a new node to [.list] during every loop iteration. The newly added node is an unnamed node with a child node [item].
 * 
 * Use cases:
 * - Building a list of repeated items, such as generating a fixed number of rows or data entries.
 * - Iterating a set number of times to perform an action, like populating sample data structures.
 * - Demonstrating how to control loop execution and perform side effects (such as appending nodes) in Hyperlambda.
 * - Incrementing a counter variable while constructing a collection for further processing.
 */
.i:int:0
.list
while
   lt
      get-value:x:@.i
      .:int:3
   .lambda
      math.increment:x:@.i
      add:x:@.list
         .
            item
