
/*
 * 1. [if] checks a condition and, if true, executes its associated lambda object.
 * 2. [eq] compares two values for equality; here, it checks if the result of [math.modulo] is equal to 0.
 * 3. [math.modulo] calculates the remainder when the value of [.dp/#] is divided by 2, effectively checking if the number is even.
 * 4. [unwrap] evaluates all expressions found in the children of the next sibling node's children, ensuring any deferred expressions are executed.
 * 5. [add] appends a new node to [even_numbers], with its value set to the current [.dp/#] node, which represents the even number found.
 * 
 * Use cases:
 * - Filtering a list of numbers to collect only the even numbers into [even_numbers].
 * - Processing a sequence where only even values should trigger additional logic or storage.
 * - Building a collection of even items from a data set during iteration.
 */
if
   eq:x:@.dp/#
      math.modulo
         get-value:x:@.dp/#
         .:int:2
      .:int:0
   .lambda
      unwrap:x:+/*/*
      add:x:@.even_numbers
         .
            .:x:@.dp/#
