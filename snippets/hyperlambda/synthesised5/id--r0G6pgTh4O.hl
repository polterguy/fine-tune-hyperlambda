
/*
 * 1. The [.file-content] node is used to store the content of the file that will be loaded.
 * 2. The [try] slot is used to implement error handling for the file loading process.
 * 3. Inside the inner [try], [io.file.load] attempts to load a file from the path specified by the value of [.file-path].
 * 4. [set-value] assigns the result of [io.file.load] to the [.file-content] node.
 * 5. If the inner try fails (e.g., file does not exist), the inner [.catch] logs a "File not found" error.
 * 6. If any other unexpected error occurs during the process, the outer [.catch] logs a general error message about file processing.
 * 
 * Use cases:
 * - Safely reading the contents of a file while handling the possibility that the file may not exist.
 * - Logging specific error messages for missing files and generic error messages for other exceptions.
 * - Populating a node with file content for further processing, transformation, or return in an HTTP endpoint.
 * - Wrapping file operations in robust error handling to improve reliability and traceability in file-based workflows.
 */
.file-content
try
   try
      io.file.load:x:@.file-path
      set-value:x:@.file-content
         .:x:@io.file.load
   .catch
      log.error:File not found
.catch
   log.error:An unexpected error occurred during file processing.
