
/*
 * 1. [data.connect] establishes a connection to the [shopDB] database, making it possible to execute database operations within this context.
 * 2. [data.transaction.create] initiates a new database transaction, ensuring that subsequent operations are performed atomically and can be either committed or rolled back as a single unit.
 * 3. [data.delete] attempts to remove records from the [temp_data] table that satisfy the condition specified in its [where] clause.
 * 4. [where] with [and] and [created_at.lt] filters for records where the [created_at] field is less than the date "2020-01-01T00:00:00.000", ensuring only old records are targeted for deletion.
 * 5. [data.transaction.rollback] explicitly rolls back the transaction, meaning any deletions attempted in this transaction are discarded and the database remains unchanged.
 * 
 * Use cases:
 * - Testing deletion logic on a production-like database without risking actual data loss.
 * - Demonstrating safe transaction handling by ensuring no permanent changes are made when experimenting with destructive queries.
 * - Cleaning up test or temporary data while giving a final opportunity to review actions before making them permanent.
 * - Validating the effect of a [where] clause in a delete operation and confirming its correctness before committing the transaction.
 */
data.connect:shopDB
   data.transaction.create
      data.delete
         table:temp_data
         where
            and
               created_at.lt:date:"2020-01-01T00:00:00.000"
      data.transaction.rollback
