
/*
 * 1. The [crypto.password.hash] slot is used to hash the password "CorrectPassword!", producing a secure, salted hash that can be stored instead of the plain password.
 * 2. The [crypto.password.verify] slot is used to check if the password "WrongPassword!" matches the hash generated by [crypto.password.hash]. The [hash] argument receives the value of the previously generated hash via the `:x:@crypto.password.hash` expression.
 * 3. The verification will fail because "WrongPassword!" does not match the original password used to create the hash, demonstrating that the verification process correctly distinguishes between valid and invalid passwords.
 * 
 * Use cases:
 * - Preventing unauthorized access by ensuring users cannot log in with incorrect passwords.
 * - Demonstrating secure password storage and validation in authentication workflows.
 * - Illustrating the separation between password hashing and verification for secure credential handling.
 * - Providing a template for integrating password security in custom user management systems.
 */
crypto.password.hash:CorrectPassword!
crypto.password.verify:WrongPassword!
   hash:x:@crypto.password.hash
