
/*
 * 1. [for-each] iterates through each child node of [.arguments], passing each node by reference into [.dp].
 * 2. [if] checks a condition for each node: it uses [eq] to compare the result of [math.modulo] (the value of the current [.dp] node modulo 2) to 0, effectively checking if the current value is even.
 * 3. If the value is even, the [.lambda] block is executed, which first uses [unwrap] to evaluate all grandchildren nodes of the next sibling of the current node (though the effect depends on the surrounding structure), and then [add] appends the value of the current [.dp] node to [.even_numbers].
 * 
 * Use cases:
 * - Filtering a list of numbers to collect only even numbers into [.even_numbers].
 * - Processing input arguments to separate even values for further computation.
 * - Dynamically building a collection of even values from a set of nodes for reporting or aggregation.
 */
for-each:x:@.arguments/*
   if
      eq:x:@.dp/#
         math.modulo
            get-value:x:@.dp/#
            .:int:2
         .:int:0
      .lambda
         unwrap:x:+/*/*
         add:x:@.even_numbers
            .
               .:x:@.dp/#
