
/*
 * 1. The [strings.concat] slot is used to concatenate a series of strings and node values into a single string. Here, it's given an expression `:x:@.sql` as its value, which means it will also set or update the value of the [.sql] node.
 * 2. [get-value] is repeatedly used to fetch the current values of [.sql], [.fields], and [.no] nodes, and these values are inserted at different points in the concatenated string.
 * 3. Static string fragments such as `" + (length("`, `:) - length(replace(lower(`, `:), @p`, `:", ''))) / length(@p"`, and `:)` are interleaved with dynamic node values to construct a potentially complex SQL or formulaic expression.
 * 
 * Use cases:
 * - Dynamically assembling a SQL query or computed field clause that involves string length calculations and replacements for database operations.
 * - Creating an expression for counting occurrences of a substring (represented by [.no]) within another string (represented by [.fields]) as part of query building or data analysis.
 * - Automatically generating a computed expression in a data pipeline or ETL process, where the involved field names and parameters are determined at runtime.
 * - Building a formula for use in a report or export, where the formula needs to adapt to varying input nodes and values.
 */
strings.concat:x:@.sql
   get-value:x:@.sql
   .:" + (length("
   get-value:x:@.fields
   .:) - length(replace(lower(
   get-value:x:@.fields
   .:), @p
   get-value:x:@.no
   .:", ''))) / length(@p"
   get-value:x:@.no
   .:)
