
/*
 * 1. The [validators.mandatory] slot is used twice to ensure that both the [name] and [age] nodes inside [.arguments] are present; if either is missing, an exception is thrown.
 * 2. The [set-value] slot assigns the result of a string concatenation to the [.message] node, combining a greeting with the user's name and age.
 * 3. The [strings.concat] slot merges static and dynamic values into a single formatted message.
 * 4. The [yield] slot returns a node named [greeting] containing the value generated in [.message].
 * 
 * Use cases:
 * - Building an API endpoint that greets a user by name and age, enforcing that both are supplied.
 * - Validating that required form fields (name and age) are present before processing logic.
 * - Generating personalized messages based on user input, while ensuring data completeness.
 * - Returning a single, friendly response node containing the constructed greeting.
 */
.arguments
   name:string
   age:int
validators.mandatory:x:@.arguments/*/name
validators.mandatory:x:@.arguments/*/age
.message
set-value:x:@.message
   strings.concat
      .:"Hello, "
      get-value:x:@.arguments/*/name
      .:"! You are "
      get-value:x:@.arguments/*/age
      .:" years old!"
yield
   greeting:x:@.message
