
/*
 * 1. The [join:clients] node is joining the [clients] table to the current table context using a LEFT JOIN.
 * 2. The [as:client_id] node assigns an alias "client_id" to the [clients] table, allowing you to reference it as [client_id] in subsequent expressions or join conditions.
 * 3. The [type:left] node specifies that the join will be a LEFT JOIN, which means all rows from the left (main) table will be returned, and matching rows from [clients] will be included if available.
 * 4. The [on] node defines the join condition, and the [and] node inside it allows for multiple conditions (currently only one is provided).
 * 5. The [leads.client_id:client_id.client_id] node establishes the relationship between the [leads] table and the [clients] table (aliased as [client_id]), joining where their [client_id] columns match.
 * 
 * Use cases:
 * - Retrieving all leads along with their client information, even if some leads do not have an associated client.
 * - Generating reports that require a full list of leads with optional client details from the [clients] table.
 * - Performing analytics where you need to preserve all records from the primary (leads) table, regardless of whether a join exists in [clients].
 * - Building a view that displays lead data and, when available, corresponding client attributes through the alias [client_id].
 * - Implementing business logic where a missing client association should not filter out leads from the result set.
 */
join:clients
   as:client_id
   type:left
   on
      and
         leads.client_id:client_id.client_id
