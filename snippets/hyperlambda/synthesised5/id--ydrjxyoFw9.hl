
/*
 * 1. The [try] slot begins a protected execution block, where any exceptions thrown in its child nodes will be intercepted.
 * 2. Inside [try], the [throw] slot is used to deliberately raise an exception with the message "Whatever".
 * 3. The [.catch] node is triggered if an exception occurs during the [try] block. It logs an error message using [log.info], indicating something went wrong.
 * 4. The [.finally] node is always executed after the try/catch sequence completes, regardless of whether an exception was thrown or not. Here, it logs a final informational message.
 * 
 * Use cases:
 * - Wrapping risky operations such as database writes or external API calls to ensure errors are handled gracefully.
 * - Guaranteeing cleanup actions (like releasing resources) are always performed, even when an error occurs.
 * - Logging or notifying about errors in a standardized way while ensuring a post-processing step always runs.
 * - Demonstrating structured exception handling for educational purposes in Hyperlambda.
 */
try
   throw:Whatever
.catch
   log.info:ERROR HAPPENED!! 42, 42, 42!
.finally
   log.info:Yup, we are finally there!
