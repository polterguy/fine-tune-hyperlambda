
/*
 * 1. The [fork] slot is used three times to start three separate concurrent threads of execution, each running independently from the main execution path.
 * 2. Inside each [fork], the [sleep] slot pauses the respective thread for a specific duration (700ms, 1500ms, and 300ms), after which a [log.info] message is logged to indicate completion of that thread's delay.
 * 3. After all [fork] nodes are initiated, a [log.info] slot is called in the main thread to log that the main execution continues, without waiting for the forked threads to finish.
 * 
 * Use cases:
 * - Running multiple time-consuming tasks in parallel, such as sending emails, processing files, or making API calls, without blocking the main workflow.
 * - Implementing "fire and forget" background jobs where post-processing tasks can proceed independently from the user's main request.
 * - Demonstrating non-blocking asynchronous operations, where the main logic is unaffected by the status or completion of background tasks.
 * - Improving application responsiveness by offloading long-running operations to background threads.
 */
fork
   sleep:700
   log.info:Executed after 700ms
fork
   sleep:1500
   log.info:Executed after 1500ms
fork
   sleep:300
   log.info:Executed after 300ms
log.info:Main execution continues...
