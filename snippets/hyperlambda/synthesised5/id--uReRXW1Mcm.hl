
/*
 * 1. [io.file.load] reads the content of the file specified by the [file-path] argument and loads it as a string for further processing.
 * 2. [strings.split] splits the loaded file content into individual words using a space as the delimiter, resulting in a list of word nodes.
 * 3. [for-each] iterates through each word node produced by the split operation.
 * 4. [if] checks if the current word does NOT match the [word] argument, and if so, increments [.counter] by 1 using [math.increment].
 * 5. [yield] returns the final value of [.counter] as [word-count], representing the total number of words in the file that are different from the specified word.
 * 
 * Use cases:
 * - Counting the number of times a particular word does NOT appear in a given file.
 * - Filtering out a keyword and determining how many other words are present in a text document.
 * - Analyzing document content to exclude a specific term and obtain the remaining word count.
 * - Useful for text analysis, file parsing, or as a helper in search/filter features.
 */
.arguments
   file-path:string
   word:string
io.file.load:x:@.arguments/*/file-path
strings.split:x:@io.file.load
   .:" "
.counter:int:0
for-each:x:@strings.split/*
   if
      not
         eq:x:@.dp/#
            .:x:@.arguments/*/word
      .lambda
         math.increment:x:@.counter
yield
   word-count:x:@.counter
