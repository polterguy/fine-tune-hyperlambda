
/*
 * 1. The [switch] slot is used to evaluate the value of the [level] child node within the [.log] node and execute the corresponding logging action based on its value.
 * 2. Each [case] slot corresponds to a different log level ("info", "fatal", "error", "debug"), and triggers the associated logging slot ([log.info], [log.fatal], [log.error], [log.debug]) using the [message] and [timestamp] from [.log] as parameters.
 * 3. The logging slots not only log the [message] but also associate the [timestamp] as meta information, enriching the log entry.
 * 
 * Use cases:
 * - Normalizing log creation for different severity levels based on dynamic input, such as when processing task results or monitoring events.
 * - Consistently logging messages from various sources with proper severity handling, ensuring uniform log structure with metadata like timestamps.
 * - Implementing audit trails where log entries' level and meta information are determined at runtime, such as in scheduled tasks or automated workflows.
 * - Reducing code duplication by centralizing the logic for choosing the appropriate logging action, making maintenance and updates easier.
 */
.log
   timestamp:date:"2025-03-22T10:30:00.000Z"
   level:info
   message:Task executed successfully
switch:x:@.log/*/level
   case:info
      log.info:x:@.log/*/message
         timestamp:x:@.log/*/timestamp
   case:fatal
      log.fatal:x:@.log/*/message
         timestamp:x:@.log/*/timestamp
   case:error
      log.error:x:@.log/*/message
         timestamp:x:@.log/*/timestamp
   case:debug
      log.debug:x:@.log/*/message
         timestamp:x:@.log/*/timestamp
