
/*
 * 1. The [if] slot checks if a node named [type] exists as a child of [.arguments] using the [exists] slot with the expression `:x:@.arguments/*/type`. If such a node exists, the code inside the [.lambda] block is executed.
 * 2. Inside the [.lambda] block, the [unwrap] slot is used with the expression `:x:+/*/*`, which evaluates all expressions found in the next sibling node's children and their children, effectively resolving any dynamic expressions in that subtree.
 * 3. The [add] slot appends a new node to the [and] node found under [where], which is itself under [data.read], which is under [data.connect]. The new node added is a [type.eq] node that compares the value of [type] from [.arguments] to something else (likely used as a filter condition).
 * 
 * Use cases:
 * - Dynamically add a filter condition to a data query only if a [type] argument is provided by the user.
 * - Build complex query conditions in a modular way, where additional filters are conditionally included based on input arguments.
 * - Ensure that only relevant query parameters are included in a database or API request, improving flexibility and reducing unnecessary conditions.
 */
if
   exists:x:@.arguments/*/type
   .lambda
      unwrap:x:+/*/*
      add:x:@data.connect/*/data.read/*/where/*/and
         .
            type.eq:x:@.arguments/*/type
