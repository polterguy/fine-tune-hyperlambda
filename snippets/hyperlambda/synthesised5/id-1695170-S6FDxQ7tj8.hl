
/*
 * 1. The [data.select] slot executes a raw SQL query, allowing for custom selection and filtering from the "hyperlambda" table.
 * 2. The parameters [@limit] and [@offset] are dynamically provided using lambda expressions pointing to [.arguments] node children, supporting flexible pagination.
 * 3. The SQL query retrieves all records where "is_static" and "synthesised" are both 0, orders results by the combined length of the "code" and "prompt" fields in descending order, and applies user-defined limit and offset for paging.
 * 
 * Example use cases:
 * - Listing non-static, non-synthesised Hyperlambda records in a paginated admin UI, showing longest code/prompt pairs first.
 * - Exporting specific segments of the Hyperlambda dataset for review or analytics, with adjustable result window.
 * - Supporting API endpoints that return a sorted, filtered, and paged collection of Hyperlambda scripts for further processing or display.
 * - Enabling users to scroll through large sets of Hyperlambda data efficiently, only loading a portion of the records at a time.
 */
data.select:select * from hyperlambda where is_static = 0 and synthesised = 0 order by length(code) + length(prompt) desc limit @limit offset @offset
   @limit:x:@.arguments/*/limit
   @offset:x:@.arguments/*/offset
