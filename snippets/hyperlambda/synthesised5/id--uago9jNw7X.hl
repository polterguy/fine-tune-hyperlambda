
/*
 * 1. The [auth.ticket.create] slot is invoked to generate a new JWT token.
 * 2. The [username] child node specifies the username ("foo") that the token will represent.
 * 3. The [roles] node provides an array of roles (["howdy", "world"]) that will be embedded in the token's claims.
 * 4. The [claims] node adds custom claims to the token, including an [id] with value "578" and an [ssid] with value "xyzqwerty67".
 * 5. The resulting JWT token will contain the username, the specified roles, and the additional custom claims, and can be returned to the client for use in authentication and authorization scenarios.
 * 
 * Use cases:
 * - Issue a JWT token to a user after successful login, including both their roles and custom metadata.
 * - Generate a token for service-to-service authentication with specific claims required for downstream systems.
 * - Create temporary access tokens for users with custom identifiers (such as [ssid]) for tracking or session purposes.
 * - Provide tokens that encode extra information for use in client or API authorization logic.
 */
auth.ticket.create
   username:foo
   roles
      .:howdy
      .:world
   claims
      id:578
      ssid:xyzqwerty67
