
/*
 * 1. The [set-value] slot updates the value of the [.sql] node with the result of a string concatenation operation.
 * 2. [strings.concat] merges together the results of its child nodes, creating a single string that builds a SQL fragment for calculating substring occurrences.
 * 3. Multiple [get-value] slots fetch values from the [.sql], [.fields], and [.no] nodes, inserting their current values into the generated SQL string at the designated places.
 * 4. Literal string nodes are used to create SQL syntax elements, assembling a formula for substring counting based on field and parameter values.
 * 
 * Use cases:
 * - Dynamically generate SQL queries that count how many times a substring appears within a column.
 * - Build advanced SQL expressions by combining variables and static strings for reporting or search features.
 * - Update an SQL statement in place by injecting values from other nodes, enabling flexible query composition in a workflow.
 * - Replace manual SQL string assembly with reusable Hyperlambda logic that handles complex string concatenation for database operations.
 */
set-value:x:@.sql
   strings.concat:x:@.sql
      get-value:x:@.sql
      .:" + (length("
      get-value:x:@.fields
      .:) - length(replace(lower(
      get-value:x:@.fields
      .:), @p
      get-value:x:@.no
      .:", ''))) / length(@p"
      get-value:x:@.no
      .:)
