
/*
 * 1. The [.mixin] node contains a string with embedded Hyperlambda code wrapped inside double curly braces. When executed, this inline Hyperlambda will be evaluated, and its result will be inserted into the string.
 * 2. The [strings.mixin] slot takes the value of [.mixin], processes any inline Hyperlambda expressions found within the curly braces, and outputs a new string with these expressions replaced by their evaluated results.
 * 3. Child nodes [arg1] and [arg2] are passed as arguments to [strings.mixin], making them available inside the inline Hyperlambda code using `@.arguments/*/arg1` and `@.arguments/*/arg2`.
 * 4. Inside the inline Hyperlambda, the [math.add] slot adds the values of [arg1] and [arg2], and the [return] slot ensures the result is returned and substituted into the placeholder in the string.
 * 
 * Example use cases:
 * - Dynamically generate strings with embedded calculations, such as showing totals in a message.
 * - Create templated responses where parts of the message are computed at runtime based on provided arguments.
 * - Use in endpoints or functions that need to generate custom output based on user input.
 * - Construct log messages or user interface text that includes evaluated expressions inline for clarity or feedback.
 */
.mixin:"The sum of your arguments is {{\nmath.add\n   get-value:x:@.arguments/*/arg1\n   get-value:x:@.arguments/*/arg2\n// Whatever we return here substitutes the mixin in the result\nreturn:x:-}}"
strings.mixin:x:-
   arg1:int:2
   arg2:int:3
