
/*
 * 1. The [for-each] slot iterates over each child node of the [vars] node inside [.env], processing each environment variable.
 * 2. [get-name] retrieves the name of the currently iterated node (such as "port", "debug", or "region") via the [.dp] reference.
 * 3. [set-value] updates the child node of [.system] that matches the name of the current environment variable, assigning it the value from the corresponding [.env] variable.
 * 4. The use of the `{@get-name}` extrapolated expression dynamically selects the correct [.system] child node by name for assignment.
 * 5. [get-value] extracts the value from the current [.env] variable node to be set in the [.system] configuration.
 * 
 * Use cases:
 * - Synchronizing environment variables from [.env] into a system configuration node for runtime application use.
 * - Propagating updated environment settings to a [.system] node before starting or restarting services.
 * - Mapping a set of configuration parameters into another data structure for further processing or validation.
 * - Dynamically copying multiple settings without explicitly coding each property, improving maintainability.
 */
.env
   vars
      port:int:8080
      debug:bool:true
      region:eu-west
.system
   port
   debug
   region
for-each:x:@.env/*/vars/*
   get-name:x:@.dp/#
   set-value:x:@.system/*/{@get-name}
      get-value:x:@.dp/#
