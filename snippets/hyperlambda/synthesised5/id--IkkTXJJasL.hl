
/*
 * 1. [pgsql.connect] establishes a connection to a PostgreSQL database, in this case connecting to the [inventory] database.
 * 2. [pgsql.create] constructs and executes an INSERT SQL statement targeting the [products] table, using the child [values] node to specify the new record's fields: [name], [price], and [in_stock] with their respective values and types.
 * 3. [yield] returns a node named [new-product-id], whose value is dynamically obtained from the result of [pgsql.create], i.e., the identifier (primary key) of the inserted product record.
 * 
 * Use cases:
 * - Automatically adding new inventory items into a product catalog and immediately obtaining their database-generated IDs for further processing.
 * - Implementing an endpoint for an admin interface to allow staff to register new products and confirm their successful creation.
 * - Populating a database with test data for integration testing and capturing the inserted record IDs for subsequent test steps.
 * - Creating a simple API for third-party systems to add new products and receive the unique product identifier in the response.
 */
pgsql.connect:inventory
   pgsql.create
      table:products
      values
         name:Desk Chair
         price:decimal:149.99
         in_stock:int:50
   yield
      new-product-id:x:@pgsql.create
