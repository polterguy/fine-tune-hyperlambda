
/*
 * 1. The [else] slot executes its child nodes if none of the preceding conditional sibling slots ([if], [else-if]) evaluated to true.
 * 2. [set-value:x:@.sql] updates the value of the [.sql] node with the result of the following expression.
 * 3. [strings.concat:x:@.sql] concatenates several values to build a complex string, which is assigned to [.sql].
 * 4. [get-value:x:@.sql], [get-value:x:@.fields], and [get-value:x:@.no] are used multiple times to retrieve the current values from the respective nodes, contributing dynamic values to the concatenated string.
 * 
 * Use cases:
 * - Dynamically constructs a SQL segment for calculating the number of occurrences of a substring within a field, using string length differences.
 * - Useful in reporting or analytics scenarios where substring frequency in a database field is needed.
 * - Can be applied in a loop or conditional structure to extend or modify the SQL being generated depending on context.
 * - Supports flexible SQL building by incorporating values from multiple nodes, allowing for highly customizable queries.
 */
else
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" + (length("
         get-value:x:@.fields
         .:) - length(replace(lower(
         get-value:x:@.fields
         .:), @p
         get-value:x:@.no
         .:", ''))) / length(@p"
         get-value:x:@.no
         .:)
