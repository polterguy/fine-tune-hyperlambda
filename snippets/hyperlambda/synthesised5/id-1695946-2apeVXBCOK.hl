
/*
 * 1. [strings.concat] concatenates a sequence of string fragments to build a SQL CASE WHEN clause.  
 * 2. [get-value:x:@.sql] repeatedly inserts the current value of [.sql] at multiple points, integrating it into the growing SQL string.  
 * 3. [get-value:x:@.fields] injects the value of [.fields] at several positions, customizing the SQL generation to reference a specific field.  
 * 4. [get-value:x:@.no] and [get-value:x:@.no] are used to insert a parameter value (likely a search term or substring) multiple times within the query construction.  
 * 5. The string fragments together create a SQL expression that counts the occurrences of a substring (represented by [.no]) in a column (represented by [.fields]), returning 1 if found, otherwise 0.
 * 
 * Use cases:
 * - Dynamically building a SQL CASE WHEN expression to detect if a substring exists within a database field.
 * - Creating a reusable Hyperlambda snippet to integrate substring existence checks in SQL queries for search or filtering purposes.
 * - Generating complex SQL conditions programmatically, adapting to different fields and parameter inputs at runtime.
 */
strings.concat:x:@.sql
   get-value:x:@.sql
   .:" CASE WHEN ((length("
   get-value:x:@.fields
   .:) - length(replace(lower(
   get-value:x:@.fields
   .:), @p
   get-value:x:@.no
   .:", ''))) / length(@p"
   get-value:x:@.no
   .:)) > 0 THEN 1 ELSE 0 END
