
/*
 * 1. The [include] slot iterates over each child node of [.data], and for each one, executes its child lambda using the iterated node as [.dp] by reference.  
 * 2. [strings.concat] within the lambda combines the current [.dp] node's value, the string " howdy ", and the value from [.static], producing a new concatenated string for each [.data] child.  
 * 3. [get-value] fetches values from the reference node [.dp] and the static node [.static] to be used in the concatenation.  
 * 4. [yield] outputs a new node named [howdy] with the concatenated string as its value for each iteration.
 * 
 * Use cases:
 * - Dynamically augmenting a set of data nodes with new nodes containing formatted strings based on existing data and static values.
 * - Building personalized greetings or status messages for each item in a collection.
 * - Merging static and dynamic content in a batch processing scenario for templating or reporting.
 * - Creating composite values for each entry in a list, useful for display or export.
 */
.static:JO
.data
   foo1:bar1
   foo2:bar2
   foo3:bar3
include:x:@.data/*
   strings.concat
      get-value:x:@.dp/#
      .:" howdy "
      get-value:x:@.static
   yield
      howdy:x:@strings.concat
