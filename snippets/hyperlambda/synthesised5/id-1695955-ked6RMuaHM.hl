
/*
 * 1. The [strings.concat] slot is used to concatenate multiple string fragments and values into a single string node. The target is specified by the expression `:x:@.sql`.
 * 2. [get-value] is used multiple times to fetch the value of the [.sql], [.fields], and [.no] nodes, inserting their current values at specific positions in the concatenated string.
 * 3. Literal string fragments are added between the dynamic values, forming a composite string that appears to build a SQL expression for calculating the number of occurrences of a particular substring (represented by [.no]) within a field or string (represented by [.fields]).
 * 4. The final output is a string resembling a SQL expression that performs text analysis using length and replace functions, all of which is assigned back to the [.sql] node.
 * 
 * Use cases:
 * - Building a dynamic SQL fragment to count substring occurrences in a field for a reporting or analytics query.
 * - Generating part of a query for text pattern matching or frequency statistics in a database.
 * - Assembling complex SQL expressions by combining static fragments with dynamic node values for custom processing.
 * - Constructing reusable SQL logic in automation scripts where the field and substring values can vary per execution.
 * - Automating the generation of SQL code for search or filtering operations based on user input.
 */
strings.concat:x:@.sql
   get-value:x:@.sql
   .:" + (length("
   get-value:x:@.fields
   .:) - length(replace(lower(
   get-value:x:@.fields
   .:), @p
   get-value:x:@.no
   .:", ''))) / length(@p"
   get-value:x:@.no
   .:)
