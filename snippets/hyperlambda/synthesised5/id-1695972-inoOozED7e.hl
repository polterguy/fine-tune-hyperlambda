
/*
 * 1. The [data.read] slot initiates a database read operation, specifying [database-type] as "sqlite" to target a SQLite database.
 * 2. The [table] node sets "Employees" as the main table, with a nested [join] to "Employees" itself (a self-join) aliased as [ReportsTo]. The [type] is set to "left", creating a left join. The [on] clause matches [Employees.ReportsTo] to [ReportsTo.EmployeeID], linking employees to their managers.
 * 3. The [columns] node requests a single aggregate column: count(*), aliased as [count], which returns the number of rows matching the query.
 * 4. The [where] node contains an [and] slot, which allows for additional filter conditions (currently empty, so no filtering is applied).
 * 5. The [limit] is set to 1 (type long), meaning only one result row will be returned.
 * 
 * Use cases:
 * - Find the total number of employees, including those without a manager, in an organization chart stored in an "Employees" table.
 * - Generate a summary count of all employee records for reporting or dashboard purposes.
 * - Validate database connectivity and join logic by retrieving a single aggregate result from a test or development SQLite database.
 * - Use as a base query to extend with filtering logic by populating the [where] node for more specific reporting needs.
 */
data.read
   database-type:sqlite
   table:Employees
      join:Employees
         as:ReportsTo
         type:left
         on
            and
               Employees.ReportsTo:ReportsTo.EmployeeID
   columns
      count(*)
         as:count
   where
      and
   limit:long:1
