
/*
 * 1. The [set-value] slot is used within each [.lambda] node to update the value of [.res] to either "First" or "Second".
 * 2. Multiple [.lambda] nodes are present, each defining a different value assignment for [.res].
 * 3. The [eval] slot with the expression `:x:../*/.lambda` finds all sibling nodes named [.lambda] and executes them in sequence.
 * 4. After [eval] is executed, the value of [.res] becomes "Second" because the second [.lambda] node overwrites the value set by the first.
 * 5. The process is repeated: the sequence of nodes is duplicated, so the same logic applies again in the second group.
 * 
 * Use Cases:
 * - Executing a series of lambda nodes to perform multiple operations in order, where later operations may override earlier results.
 * - Processing multiple initialization steps, where only the last step's result is needed or relevant.
 * - Batch-updating the state of a node ([.res]) through a controlled sequence of lambda expressions.
 * - Demonstrating how [eval] executes all matching nodes, allowing for modular, reusable code segments.
 */
.res:
.lambda
   set-value:x:@.res
      .:First
.lambda
   set-value:x:@.res
      .:Second
eval:x:../*/.lambda
.res:Second
.lambda
   set-value:x:@.res
      .:First
.lambda
   set-value:x:@.res
      .:Second
eval:x:../*/.lambda
