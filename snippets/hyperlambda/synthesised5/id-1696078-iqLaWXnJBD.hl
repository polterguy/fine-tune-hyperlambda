
/*
 * 1. [strings.concat] is used to concatenate a series of string fragments and dynamic values into a single SQL expression string.  
 * 2. [get-value] retrieves the value from various nodes such as [.sql], [.fields], and [.no] to be inserted at specific positions within the concatenated output.  
 * 3. The resulting string constructs a SQL expression that calculates the number of occurrences of a substring (parameterized as @p) within a given field by comparing string lengths before and after a replacement operation.  
 * 
 * Use cases:  
 * - Dynamically generate a SQL snippet for counting substring occurrences in a column, for example to count word or character frequency in database fields.  
 * - Build complex SQL expressions on the fly by piecing together static and dynamic values supplied at runtime.  
 * - Prepare advanced aggregation or analytical queries where portions of the SQL need to be constructed programmatically based on input parameters or context.  
 * - Reuse logic for different fields and search terms by referencing [.fields] and [.no] nodes, making the expression adaptable for various reporting scenarios.
 */
strings.concat:x:@.sql
   get-value:x:@.sql
   .:" (length("
   get-value:x:@.fields
   .:) - length(replace(lower(
   get-value:x:@.fields
   .:), @p
   get-value:x:@.no
   .:", ''))) / length(@p"
   get-value:x:@.no
   .:)
