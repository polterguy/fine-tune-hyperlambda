
/*
 * 1. The [unwrap] slot is used with the expression `:x:+/*/*/*` to evaluate an expression that navigates to specific nodes. Here, it finds all [email] nodes nested as grandchildren of the next sibling node, effectively targeting all email addresses within the next sibling's descendant structure.
 * 2. The [add] slot with `:x:@.contacts` as its expression appends a new child node to the [.contacts] node. The new child node is an anonymous node containing another anonymous node, which itself has a single [email] child node.
 * 3. The innermost [email] node uses the expression `:x:@.email` to set its value to the value of the [.email] node at the current level, effectively copying that email address into the new structure under [.contacts].
 * 
 * Use cases:
 * - Aggregating a standalone email address into an existing contact list by programmatically constructing the same nested structure as existing entries.
 * - Merging a single email into a collection of contacts while preserving the data hierarchy, useful for consistent data processing.
 * - Dynamically extending a contact list by referencing sibling nodes and copying their values into a new contact entry.
 * - Preparing or normalizing hierarchical data for further processing, such as exporting or sending emails to all addresses under [.contacts].
 */
.contacts
   .
      email:john@example.com
   .
      email:jane@example.com
.email:bob@example.com
unwrap:x:+/*/*/*
add:x:@.contacts
   .
      .
         email:x:@.email
