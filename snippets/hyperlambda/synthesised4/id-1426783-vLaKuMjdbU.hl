
/*
 * This Hyperlambda code executes a function using the [execute] slot and processes the result. It converts the result to JSON, checks if the result size exceeds a specified token limit using [openai.tokenize], and throws an error if it does. It retrieves a success message from the configuration and sends a signal with the result. If the function execution returns a result, it updates the prompt with the response details; otherwise, it updates the prompt with a success message.
 * 
 * 1. [execute] - Invokes a function with specified arguments.
 * 2. [lambda2json] - Converts the execution result to JSON format.
 * 3. [if] - Checks if the token count of the JSON result exceeds the maximum allowed.
 * 4. [mt] - Compares the token count with the maximum context tokens.
 * 5. [throw] - Throws an error if the result is too large.
 * 6. [config.get] - Retrieves a success message from the configuration.
 * 7. [unwrap] - Unwraps the success message.
 * 8. [sockets.signal] - Sends a signal with the function result and workflow.
 * 9. [if] - Checks if the execution returned a result.
 * 10. [set-value] - Updates the prompt with the response details.
 * 11. [strings.concat] - Concatenates strings to form the new prompt.
 * 12. [else] - Updates the prompt with a success message if no result is returned.
 */
else
   execute:magic.ai.functions.invoke
      type:x:@.type
      session:x:@.session
      user-id:x:@.user-id
      invocation:x:@.dp/#
   lambda2json:x:@execute/*/result/*
      format:true
   if
      mt
         openai.tokenize:x:@lambda2json
         get-value:x:@.arguments/@.arguments/*/max_context_tokens
      .lambda
         throw:Result too large, try to limit your result
            status:int:400
            public:bool:true
   config.get:"magic:chat:functions:success-message"
      .:Success!
   unwrap:x:+/*/*
   sockets.signal:x:@.session
      args
         function_result:x:@config.get
         invocation:x:@execute/*/json
         file:x:@execute/*/workflow
   if
      exists:x:@execute/*/result/*
      .lambda
         set-value:x:@.new-prompt
            strings.concat
               get-value:x:@.new-prompt
               .:"Response from '"
               get-value:x:@execute/*/workflow
               .:@"' was:
```json
"
               get-value:x:@lambda2json
               .:@"
"
               .:```
               .:@"
"
               .:@"
"
         set-value:x:@.function-result
            get-value:x:@lambda2json
   else
      set-value:x:@.new-prompt
         strings.concat
            get-value:x:@.new-prompt
            .:"Invocation of '"
            get-value:x:@execute/*/workflow
            .:"' was a success."
            .:@"
"
            .:@"
"
