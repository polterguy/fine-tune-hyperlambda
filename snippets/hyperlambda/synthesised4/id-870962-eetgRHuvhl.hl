
// This Hyperlambda code connects to a database to read and verify reCAPTCHA settings for a specific type, and conditionally validates a reCAPTCHA response. It deletes existing records in the "ml_requests" table matching certain criteria, and then creates a new record with provided arguments. Key slots include [data.connect] for database connection, [data.read] for retrieving reCAPTCHA settings, [validators.recaptcha] for validating the reCAPTCHA response, [data.delete] for removing existing records, and [data.create] for inserting a new record.
data.connect:[generic|magic]
   data.read
      table:ml_types
      columns
         recaptcha
      where
         and
            type.eq:x:@.arguments/*/type
   if
      and
         not-null:x:@data.read/*/*/recaptcha
         neq:x:@data.read/*/*/recaptcha
            .:
      .lambda
         convert:x:@data.read/*/*/recaptcha
            type:decimal
         if
            mt:x:@convert
               .:decimal:0
            .lambda
               .key
               set-value:x:@.key
                  config.get:"magic:auth:recaptcha:key"
               .secret
               set-value:x:@.secret
                  config.get:"magic:auth:recaptcha:secret"
               if
                  and
                     not-null:x:@.key
                     neq:x:@.key
                        .:
                     not-null:x:@.secret
                     neq:x:@.secret
                        .:
                  .lambda
                     validators.mandatory:x:@.arguments/*/recaptcha_response
                     validators.recaptcha:x:@.arguments/*/recaptcha_response
                        min:x:@convert
                        site-key:x:@.key
                        secret:x:@.secret
         else
            execute:magic.auth.captcha-verify
               token:x:@.arguments/*/recaptcha_response
   data.delete
      table:ml_requests
      where
         and
            type.eq:x:@.arguments/*/type
            user_id.eq:x:@.arguments/*/user_id
            prompt.eq:x:@.arguments/*/question
            questionnaire.eq:int:1
            finish_reason.eq:questionnaire
   data.create
      table:ml_requests
      values
         type:x:@.arguments/*/type
         prompt:x:@.arguments/*/question
         completion:x:@.arguments/*/answer
         finish_reason:questionnaire
         questionnaire:int:1
         user_id:x:@.arguments/*/user_id
         session:x:@.arguments/*/session
         context:x:@.arguments/*/context
