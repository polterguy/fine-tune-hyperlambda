
// This Hyperlambda code connects to a SQLite database and performs a distinct selection on a specified column from the "Employees" table, joining it with itself on the "ReportsTo" relationship. It dynamically constructs the SQL query by manipulating nodes related to distinct columns, limits, offsets, and ordering, and then executes the query to return the results. Key slots include [data.connect] for database connection, [strings.concat] for constructing the distinct function, and [data.read] for executing the SQL query.
data.connect:[generic|northwind]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Employees
         join:Employees
            as:ReportsTo
            type:left
            on
               and
                  Employees.ReportsTo:ReportsTo.EmployeeID
      columns
         distinct_functor
            as:.
      where
         and
   return-nodes:x:@data.read/*/*
