
// This Hyperlambda code snippet demonstrates how to perform a SQL query using a left join operation on two tables, "documents" and "clients", within a SQLite database. The [data.read] slot initiates the SQL read operation, specifying the database type as SQLite. The [table] slot identifies "documents" as the primary table for the query. A [join] operation is performed with the "clients" table, using a left join type, which includes all records from the "documents" table and the matched records from the "clients" table. The join condition is specified under the [on] slot, where the "client_id" from the "documents" table is matched with the "client_id" from the "clients" table. The [columns] slot specifies that an aggregate function, represented by [aggregate_functor], is to be applied, and its result is aliased as "result". The [where] slot is included but does not specify any conditions, indicating a placeholder for potential filtering logic. The [group] slot groups the results by "group_column". Finally, the [return-nodes] slot retrieves and returns all nodes under the [data.read] node, effectively returning the results of the SQL query. This structure allows for complex SQL query construction with joins, grouping, and aggregation in a Hyperlambda environment.
data.read
   database-type:sqlite
   table:documents
      join:clients
         as:client_id
         type:left
         on
            and
               documents.client_id:client_id.client_id
   columns
      aggregate_functor
         as:result
   where
      and
   group
      group_column
return-nodes:x:@data.read/*
