
// This Hyperlambda code handles the installation of plugins, distinguishing between "module" and "frontend" types. For "module" type, it checks for an uninstall script, executes it if present, downloads the module, unzips it, and installs it using [magic.modules.install-module]. For "frontend" type, it downloads and unzips the frontend files to a specific directory. Both cases send success messages via [sockets.signal]. Errors during the process are logged and an error message is sent using [sockets.signal]. Key slots include [try], [switch], [http.get], [io.file.save.binary], [io.file.unzip], and [sockets.signal].
fork
   try
      switch:x:@.arguments/*/type
         case:module
            strings.concat
               .:/modules/
               get-value:x:@.arguments/*/name
               .:/uninstall.hl
            if
               io.file.exists:x:@strings.concat
               .lambda
                  log.info:Uninstalling module
                     module:x:@strings.concat
                  io.file.execute:x:@strings.concat
            http.get:x:@.arguments/*/url
            strings.split:x:@http.get/*/headers/*/Content-Disposition
               .:=
            strings.trim:x:@strings.split/1
               .:"\""
            strings.concat
               .:/modules/
               get-value:x:@strings.trim
            io.file.save.binary:x:@strings.concat
               get-value:x:@http.get/*/content
            .folder
            set-value:x:@.folder
               strings.concat
                  .:/modules/
                  get-value:x:@.arguments/*/name
                  .:/
            if
               io.folder.exists:x:@.folder
               .lambda
                  io.folder.delete:x:@.folder
            io.folder.create:x:@.folder
            io.file.unzip:x:@strings.concat
               folder:x:@.folder
            io.file.delete:x:@strings.concat
            .module-folder
            set-value:x:@.module-folder
               strings.concat
                  .:/modules/
                  get-value:x:@.arguments/*/name
                  .:/
            if
               not
                  io.folder.exists:x:@.module-folder
               .lambda
                  strings.split:x:@strings.concat
                     .:.zip
                  io.folder.move:x:@strings.split/0
                     get-value:x:@.module-folder
            strings.split:x:@.module-folder
               .:/
            execute:magic.modules.install-module
               module:x:@strings.split/0/-
            sockets.signal:magic.backend.message
               roles:root
               args
                  message:Plugin was successfully installed
                  type:success
         case:frontend
            strings.concat
               get-value:x:@.arguments/*/url
               .:&type=frontend
            http.get:x:@strings.concat
            strings.split:x:@http.get/*/headers/*/Content-Disposition
               .:=
            strings.trim:x:@strings.split/1
               .:"\""
            strings.concat
               .:/modules/
               get-value:x:@strings.trim
            io.file.save.binary:x:@strings.concat
               get-value:x:@http.get/*/content
            io.file.unzip:x:@strings.concat
               folder:/etc/www/
               overwrite:true
            io.file.delete:x:@strings.concat
            sockets.signal:magic.backend.message
               roles:root
               args
                  message:Frontend was successfully installed
                  type:success
   .catch
      log.error:Could not install plugin
         message:x:@.arguments/*/message
      sockets.signal:magic.backend.message
         roles:root
         args
            message:Plugin could not be installed, check your log for details
            type:error
