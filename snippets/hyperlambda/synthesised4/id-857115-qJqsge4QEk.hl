
// This Hyperlambda code defines a dynamic SQL query generator for the Northwind database, focusing on the EmployeeTerritories table. It validates mandatory arguments and their values, dynamically constructs SQL queries with group by, aggregate functions, and optional filtering, ordering, and pagination. The code uses slots like [validators.mandatory], [validators.enum], [data.connect], [set-name], [add], and [remove-nodes] to manipulate the query structure and ensure correct input. The final SQL query is executed with [data.read], and the results are returned.
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      EmployeeTerritories.EmployeeID.mt:long
      EmployeeTerritories.EmployeeID.lt:long
      EmployeeTerritories.EmployeeID.mteq:long
      EmployeeTerritories.EmployeeID.lteq:long
      EmployeeTerritories.EmployeeID.neq:long
      EmployeeTerritories.EmployeeID.eq:long
      EmployeeTerritories.TerritoryID.like:string
      EmployeeTerritories.TerritoryID.mt:string
      EmployeeTerritories.TerritoryID.lt:string
      EmployeeTerritories.TerritoryID.mteq:string
      EmployeeTerritories.TerritoryID.lteq:string
      EmployeeTerritories.TerritoryID.neq:string
      EmployeeTerritories.TerritoryID.eq:string
      EmployeeID.LastName.eq:string
      EmployeeID.LastName.like:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:EmployeeTerritories.EmployeeID
      .:EmployeeTerritories.TerritoryID
      .:EmployeeID.LastName
   validators.enum:x:@.arguments/*/aggregate_column
      .:EmployeeTerritories.EmployeeID
      .:EmployeeTerritories.TerritoryID
      .:EmployeeID.LastName
   data.connect:[generic|northwind]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:EmployeeTerritories
            join:Employees
               as:EmployeeID
               type:left
               on
                  and
                     EmployeeTerritories.EmployeeID:EmployeeID.EmployeeID
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
