
// This Hyperlambda code defines a dynamic slot [magic.http.scrape-url] that scrapes a given URL for HTML content, extracts and processes various elements such as headers, images, and links, and returns structured data. It validates the URL, performs an HTTP GET request, checks for valid HTML content, and processes the HTML to extract snippets, page headers, and URLs. The code handles different HTML elements, concatenates text, and formats it, ensuring that the scraped data is clean and structured for further use.
hyper2lambda
   slots.create:magic.http.scrape-url
      validators.mandatory:x:@.arguments/*/url
      validators.url:x:@.arguments/*/url
      .base
      strings.split:x:@.arguments/*/url
         .:"://"
      strings.split:x:@strings.split/1
         .:/
      set-value:x:@.base
         strings.concat
            get-value:x:@strings.split/@strings.split/0
            .:"://"
            get-value:x:@strings.split/0
      http.get:x:@.arguments/*/url
         timeout:int:10
         headers
            User-Agent:AINIRO-Crawler 2.0
            Accept:text/html
            Accept-Encoding:identity
      if
         not
            and
               mte:x:@http.get
                  .:int:200
               lt:x:@http.get
                  .:int:300
         .lambda
            lambda2hyper:x:@http.get
            log.error:Something went wrong while trying to crawl URL for Machine Learning data
               url:x:@.arguments/*/url
               error:x:@lambda2hyper
            return:x:@http.get
      if
         or
            not-exists:x:@http.get/*/content
            null:x:@http.get/*/content
            eq:x:@http.get/*/content
               .:
            not-exists:x:@http.get/*/headers/*/Content-Type
            not
               strings.starts-with:x:@http.get/*/headers/*/Content-Type
                  .:text/html
         .lambda
            lambda2hyper:x:@http.get
            log.error:URL did not return HTML content when crawling for Machine Learning snippets
               content:x:@lambda2hyper
               url:x:@.arguments/*/url
            return:int:415
      html2lambda:x:@http.get/*/content
      .snippets
      .page-header
         h1
         h2
         h3
         h4
         h5
         h6
      .urls
      .tmp-completion:
      if
         exists:x:@html2lambda/*/head/*/base
         .lambda
            set-value:x:@.base
               strings.trim-end:x:"@html2lambda/*/head/*/base/*/\\@href/[0,1]"
                  .:/
      .content
      if
         and
            or
               not
                  exists:x:@.arguments/*/semantics
               get-value:x:@.arguments/*/semantics
            exists:x:@html2lambda/*/html/*/body/**/article
         .lambda
            add:x:@.content
               get-nodes:x:@html2lambda/*/html/*/body/**/article/*
      else-if
         and
            or
               not
                  exists:x:@.arguments/*/semantics
               get-value:x:@.arguments/*/semantics
            exists:x:@html2lambda/*/html/*/body/**/main
         .lambda
            add:x:@.content
               get-nodes:x:@html2lambda/*/html/*/body/**/main/*
      else
         add:x:@.content
            get-nodes:x:@html2lambda/*/html/*/body/*
      for-each:x:@.content/**
         get-name:x:@.dp/#
         switch:x:@get-name
            case:pre
               if
                  exists:x:"@.dp/#/**/\\#text"
                  .lambda
                     if
                        exists:x:@.snippets/0/-/*/completion
                        .lambda
                           set-value:x:@.snippets/0/-/*/completion
                              strings.concat
                                 get-value:x:@.snippets/0/-/*/completion
                                 .:@"

```
"
                                 strings.trim:x:"@.dp/#/**/\\#text/[0,1]"
                                    .:@"  
	"
                                 .:@"
```"
                     else
                        strings.concat
                           .:@"```
"
                           strings.trim:x:"@.dp/#/**/\\#text/[0,1]"
                              .:@"  
	"
                           .:@"
```"
                        unwrap:x:+/*/*
                        add:x:@.snippets/0/-
                           .
                              completion:x:@strings.concat
            case:img
               if
                  and
                     exists:x:"@.dp/#/*/\\@src/[0,1]"
                     not-null:x:"@.dp/#/*/\\@src/[0,1]"
                     neq:x:"@.dp/#/*/\\@src/[0,1]"
                        .:
                  .lambda
                     .url
                     if
                        and
                           not
                              strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
                                 .:"http://"
                           not
                              strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
                                 .:"https://"
                        .lambda
                           if
                              strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
                                 .://
                              .lambda
                                 strings.split:x:@.base
                                    .:"://"
                                 set-value:x:@.url
                                    strings.concat
                                       get-value:x:@strings.split/0
                                       .:":"
                                       get-value:x:"@.dp/#/*/\\@src/[0,1]"
                           else-if
                              strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
                                 .:/
                              .lambda
                                 set-value:x:@.url
                                    strings.concat
                                       get-value:x:@.base
                                       get-value:x:"@.dp/#/*/\\@src/[0,1]"
                           else
                              set-value:x:@.url
                                 strings.concat
                                    get-value:x:@.base
                                    .:/
                                    get-value:x:"@.dp/#/*/\\@src/[0,1]"
                     else
                        set-value:x:@.url
                           get-value:x:"@.dp/#/*/\\@src/[0,1]"
                     if
                        exists:x:@.snippets/0/-/*/completion
                        .lambda
                           set-value:x:@.snippets/0/-/*/completion
                              strings.concat
                                 get-value:x:@.snippets/0/-/*/completion
                                 .:@"

!["
                                 get-first-value
                                    get-value:x:"@.dp/#/*/\\@alt/[0,1]"
                                    .:"Image "
                                 .:](
                                 get-value:x:@.url
                                 .:)
                     else
                        strings.concat
                           .:![
                           get-first-value
                              get-value:x:"@.dp/#/*/\\@alt/[0,1]"
                              .:"Image "
                           .:](
                           get-value:x:@.url
                           .:)
                        unwrap:x:+/*/*
                        add:x:@.snippets/0/-
                           .
                              completion:x:@strings.concat
            case:a
               if
                  and
                     exists:x:"@.dp/#/*/\\@href/[0,1]"
                     not-null:x:"@.dp/#/*/\\@href/[0,1]"
                     neq:x:"@.dp/#/*/\\@href/[0,1]"
                        .:#
                     neq:x:"@.dp/#/*/\\@href/[0,1]"
                        .:
                     not
                        strings.starts-with:x:"@.dp/#/*/\\@href/[0,1]"
                           .:"http://"
                     not
                        strings.starts-with:x:"@.dp/#/*/\\@href/[0,1]"
                           .:"https://"
                  .lambda
                     strings.split:x:"@.dp/#/*/\\@href/[0,1]"
                        .:#
                     strings.trim-end:x:@strings.split/0
                        .:/
                     .tmp
                     if
                        strings.starts-with:x:@strings.trim-end
                           .:/
                        .lambda
                           set-value:x:@.tmp
                              strings.concat
                                 get-value:x:@.base
                                 get-value:x:@strings.trim-end
                     else
                        set-value:x:@.tmp
                           strings.concat
                              get-value:x:@.base
                              .:/
                              get-value:x:@strings.trim-end
                     if
                        not-exists:x:@.url/*/{@strings.concat}
                        .lambda
                           unwrap:x:+/*/*
                           add:x:@.urls
                              .
                                 .:x:@.tmp
               else-if
                  and
                     exists:x:"@.dp/#/*/\\@href/[0,1]"
                     not-null:x:"@.dp/#/*/\\@href/[0,1]"
                     neq:x:"@.dp/#/*/\\@href/[0,1]"
                        .:#
                     neq:x:"@.dp/#/*/\\@href/[0,1]"
                        .:
                  .lambda
                     strings.split:x:"@.dp/#/*/\\@href/[0,1]"
                        .:#
                     strings.trim-end:x:@strings.split/0
                        .:/
                     if
                        not-exists:x:"@.urls/*/\"{@strings.split/0}\""
                        .lambda
                           unwrap:x:+/*/*
                           add:x:@.urls
                              .
                                 .:x:@strings.trim-end
            case:h1
            case:h2
            case:h3
            case:h4
            case:h5
            case:h6
               .prompt:
               for-each:x:"@.dp/#/**/\\#text"
                  set-value:x:@.prompt
                     strings.concat
                        get-value:x:@.prompt
                        strings.trim:x:@.dp/#
                           .:@"  
	"
                        .:" "
               set-value:x:@.prompt
                  strings.trim:x:@.prompt
                     .:" "
               switch:x:@get-name
                  case:h1
                     set-value:x:@.page-header/*/h1
                        get-value:x:@.prompt
                     set-value:x:@.page-header/*/h2
                     set-value:x:@.page-header/*/h3
                     set-value:x:@.page-header/*/h4
                     set-value:x:@.page-header/*/h5
                     set-value:x:@.page-header/*/h6
                  case:h2
                     set-value:x:@.page-header/*/h2
                        get-value:x:@.prompt
                     set-value:x:@.page-header/*/h3
                     set-value:x:@.page-header/*/h4
                     set-value:x:@.page-header/*/h5
                     set-value:x:@.page-header/*/h6
                  case:h3
                     set-value:x:@.page-header/*/h3
                        get-value:x:@.prompt
                     set-value:x:@.page-header/*/h4
                     set-value:x:@.page-header/*/h5
                     set-value:x:@.page-header/*/h6
                  case:h4
                     set-value:x:@.page-header/*/h4
                        get-value:x:@.prompt
                     set-value:x:@.page-header/*/h5
                     set-value:x:@.page-header/*/h6
                  case:h5
                     set-value:x:@.page-header/*/h5
                        get-value:x:@.prompt
                     set-value:x:@.page-header/*/h6
                  case:h6
                     set-value:x:@.page-header/*/h6
                        get-value:x:@.prompt
               set-value:x:@.prompt
                  .:
               for-each:x:@.page-header/*
                  if
                     and
                        not-null:x:@.dp/#
                        neq:x:@.dp/#
                           .:
                     .lambda
                        set-value:x:@.prompt
                           strings.concat
                              get-value:x:@.dp/#
                              .:" - "
                              get-value:x:@.prompt
               set-value:x:@.prompt
                  strings.replace:x:@.prompt
                     .:"  "
                     .:" "
               set-value:x:@.prompt
                  strings.trim-end:x:@.prompt
                     .:" -"
               unwrap:x:+/*/*/*
               add:x:@.snippets
                  .
                     .
                        prompt:x:@.prompt
            case:ul
            case:ol
               if
                  neq:x:@.completion
                     .:
                  .lambda
                     if
                        exists:x:@.snippets/0/-/*/completion
                        .lambda
                           set-value:x:@.snippets/0/-/*/completion
                              strings.concat
                                 get-value:x:@.snippets/0/-/*/completion
                                 .:@"
"
                     else
                        unwrap:x:+/*/*
                        add:x:@.snippets/0/-
                           .
                              completion:@"
"
            case:p
            case:li
               if
                  exists:x:@.snippets/*
                  .lambda
                     .completion:
                     for-each:x:"@.dp/#/**/\\#text"
                        if
                           and
                              not-null:x:@.dp/#
                              neq:x:@.dp/#
                                 .:
                           .lambda
                              strings.replace:x:@.dp/#
                                 .:"\r"
                                 .:" "
                              strings.replace:x:@strings.replace
                                 .:"\n"
                                 .:" "
                              strings.replace:x:@strings.replace
                                 .:"\t"
                                 .:" "
                              strings.replace:x:@strings.replace
                                 .:"  "
                                 .:" "
                              if
                                 and
                                    eq
                                       get-name:x:@.dp/#/.
                                       .:a
                                    exists:x:"@.dp/#/./*/\\@href/[0,1]"
                                    not-null:x:"@.dp/#/./*/\\@href/[0,1]"
                                 .lambda
                                    .url
                                    if
                                       strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                                          .:/
                                       .lambda
                                          set-value:x:@.url
                                             strings.concat
                                                get-value:x:@.base
                                                get-value:x:"@.dp/#/./*/\\@href/[0,1]"
                                    else-if
                                       and
                                          not
                                             strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                                                .:"http://"
                                          not
                                             strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                                                .:"https://"
                                       .lambda
                                          set-value:x:@.url
                                             strings.concat
                                                get-value:x:@.base
                                                .:/
                                                get-value:x:"@.dp/#/./*/\\@href/[0,1]"
                                    else
                                       set-value:x:@.url
                                          get-value:x:"@.dp/#/./*/\\@href/[0,1]"
                                    set-value:x:@.completion
                                       strings.concat
                                          get-value:x:@.completion
                                          .:" "
                                          .:[
                                          strings.trim:x:@strings.replace
                                             .:@"  
	"
                                          .:](
                                          get-value:x:@.url
                                          .:)
                                          .:" "
                              else
                                 set-value:x:@.completion
                                    strings.concat
                                       get-value:x:@.completion
                                       strings.trim:x:@strings.replace
                                          .:@"  
	"
                                       .:" "
                     set-value:x:@.completion
                        strings.trim:x:@.completion
                           .:@"  
	"
                     .has-double-space:bool:true
                     while:x:@.has-double-space
                        if
                           strings.contains:x:@.completion
                              .:"  "
                           .lambda
                              set-value:x:@.completion
                                 strings.replace:x:@.completion
                                    .:"  "
                                    .:" "
                        else
                           set-value:x:@.has-double-space
                              .:bool:false
                     set-value:x:@.completion
                        strings.replace:x:@.completion
                           .:" ."
                           .:.
                     set-value:x:@.completion
                        strings.replace:x:@.completion
                           .:" ,"
                           .:,
                     switch:x:@get-name
                        case:li
                           if
                              neq:x:@.completion
                                 .:
                              .lambda
                                 set-value:x:@.completion
                                    strings.concat
                                       .:@"
"
                                       .:"- "
                                       get-value:x:@.completion
                        case:p
                           set-value:x:@.completion
                              strings.concat
                                 .:@"

"
                                 get-value:x:@.completion
                     if
                        neq:x:@.completion
                           .:
                        .lambda
                           if
                              exists:x:@.snippets/0/-/*/completion
                              .lambda
                                 set-value:x:@.snippets/0/-/*/completion
                                    strings.concat
                                       get-first-value
                                          get-value:x:@.snippets/0/-/*/completion
                                          .:
                                       get-value:x:@.completion
                           else
                              unwrap:x:+/*/*
                              add:x:@.snippets/0/-
                                 .
                                    completion:x:@.completion
      for-each:x:@.snippets/*
         if
            and
               exists:x:@.dp/#/*/prompt
               not-null:x:@.dp/#/*/prompt
               mt
                  strings.length:x:@.dp/#/*/prompt
                  .:int:0
               exists:x:@.dp/#/*/completion
               not-null:x:@.dp/#/*/completion
            .lambda
               set-value:x:@.dp/#/*/prompt
                  strings.trim:x:@.dp/#/*/prompt
               set-value:x:@.dp/#/*/completion
                  strings.trim:x:@.dp/#/*/completion
               add:x:../*/return
                  get-nodes:x:@.dp/#
      return
