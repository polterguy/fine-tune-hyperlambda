
// This Hyperlambda code connects to a SQLite database and performs a read operation on the "tasks" table, joining it with the "users" table using a left join. It dynamically adds and removes nodes related to ordering, limiting, and offsetting records, and retrieves specified columns from the joined tables. The code concludes by returning the results of the data read operation.
data.connect:[generic|crm]
   database-type:sqlite
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:tasks
         join:users
            as:user_id
            type:left
            on
               and
                  tasks.user_id:user_id.user_id
      columns
         tasks.task_id
         tasks.user_id
         tasks.description
         tasks.due_date
         tasks.status
         user_id.username
            as:user_id.username
      where
         and
   return-nodes:x:@data.read/*
