
// This Hyperlambda code demonstrates the use of [fork] to execute a task in a separate thread, while [semaphore] ensures that only one thread at a time can access the critical section, logging an entry when a thread enters this section. [fork] initiates the concurrent execution, and [semaphore] manages synchronized access to shared resources.
fork
   semaphore:shared-resource
      log.info:Fork 1 entering critical section
