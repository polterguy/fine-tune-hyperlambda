
// Attempts to execute a function invocation if the number of iterations is greater than one; otherwise, logs an error and sends multiple error signals to the client session. If the function executes, it serializes the result to JSON, checks if the result exceeds the allowed token limit (throwing an error if so), retrieves a success message, and signals the result to the client. It then updates the prompt and result nodes with the function output if present, or with a generic success message if not.
try
   if
      lte:x:@.iterations
         .:int:1
      .lambda
         log.error:Too many function invocations
         sockets.signal:x:@.session
            args
               function_error:Too many function invocations
         sockets.signal:x:@.session
            args
               function_waiting:bool:false
         sockets.signal:x:@.session
            args
               error:bool:true
               status:int:500
               message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
         sockets.signal:x:@.session
            args
               finished:bool:true
   else
      execute:magic.ai.functions.invoke
         type:x:@.type
         session:x:@.session
         user-id:x:@.user-id
         invocation:x:@.dp/#
         extra:x:@.extra
      lambda2json:x:@execute/*/result/*
         format:true
      if
         mt
            openai.tokenize:x:@lambda2json
            get-value:x:@.arguments/@.arguments/*/max_context_tokens
         .lambda
            throw:Result too large, try to limit your result
               status:int:400
               public:bool:true
      config.get:"magic:chat:functions:success-message"
         .:Success!
      unwrap:x:+/*/*
      sockets.signal:x:@.session
         args
            function_result:x:@config.get
            invocation:x:@execute/*/json
            file:x:@execute/*/workflow
      if
         exists:x:@execute/*/result/*
         .lambda
            set-value:x:@.new-prompt
               strings.concat
                  get-value:x:@.new-prompt
                  .:"Response from '"
                  get-value:x:@execute/*/workflow
                  .:@"' was:
```json
"
                  get-value:x:@lambda2json
                  .:@"
"
                  .:```
                  .:@"
"
                  .:@"
"
            set-value:x:@.function-result
               strings.concat
                  get-value:x:@.function-result
                  get-value:x:@lambda2json
                  .:"\n"
      else
         set-value:x:@.new-prompt
            strings.concat
               get-value:x:@.new-prompt
               .:"Invocation of '"
               get-value:x:@execute/*/workflow
               .:"' was a success."
               .:@"
"
               .:@"
"
