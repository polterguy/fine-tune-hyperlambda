
/*
 * This Hyperlambda code checks if a session argument exists and is not null or empty. If the session is valid, it retrieves cached data associated with the session. If the cache is not null, it converts a max_session_items argument to an integer and transforms the cached data into a Hyperlambda string. It then removes nodes from the Hyperlambda string until the count of nodes is less than or equal to max_session_items, and finally adds the remaining nodes to a session node.
 * 
 * 1. [if] - Checks if the session argument exists, is not null, and is not empty.
 * 2. [cache.get] - Retrieves cached data using the session argument as the key.
 * 3. [if] - Checks if the retrieved cache is not null.
 * 4. [convert] - Converts the max_session_items argument to an integer.
 * 5. [hyper2lambda] - Converts the cached data to a Hyperlambda string.
 * 6. [while] - Loops while the count of nodes in the Hyperlambda string is greater than max_session_items.
 * 7. [remove-nodes] - Removes the first node from the Hyperlambda string in each iteration.
 * 8. [add] - Adds the remaining nodes from the Hyperlambda string to the session node.
 */
if
   and
      exists:x:@.arguments/*/session
      not-null:x:@.arguments/*/session
      neq:x:@.arguments/*/session
         .:
   .lambda
      cache.get:x:@.arguments/*/session
      if
         not-null:x:@cache.get
         .lambda
            convert:x:@.arguments/*/max_session_items
               type:int
            hyper2lambda:x:@cache.get
            while
               mt
                  get-count:x:@hyper2lambda/*
                  get-value:x:@convert
               .lambda
                  remove-nodes:x:@hyper2lambda/0
            add:x:@.session
               get-nodes:x:@hyper2lambda/*
