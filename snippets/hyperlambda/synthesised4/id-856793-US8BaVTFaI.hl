
// This Hyperlambda code defines a process for importing a CSV file into a database, creating a table based on the CSV structure, and logging the process. It validates necessary arguments, reads the CSV content, sanitizes column names, creates a table and columns, and inserts data into the database. The code handles errors by logging and signaling messages, and returns a success result if the process completes without issues. Key slots include [validators.mandatory] for argument validation, [csv2lambda] for CSV conversion, and [execute-file] for executing SQL operations.
hyper2lambda
   .arguments
      databaseType:string
      connectionString:string
      databaseName:string
      file:*
   validators.mandatory:x:@.arguments/*/databaseType
   validators.mandatory:x:@.arguments/*/connectionString
   validators.mandatory:x:@.arguments/*/databaseName
   validators.mandatory:x:@.arguments/*/file
   validators.mandatory:x:@.arguments/*/file/*/name
   validators.mandatory:x:@.arguments/*/file/*/stream
   log.info:Getting ready to import CSV file and create table based upon its structure
      databaseType:x:@.arguments/*/databaseType
      connectionString:x:@.arguments/*/connectionString
      databaseName:x:@.arguments/*/databaseName
   .content
   set-value:x:@.content
      io.stream.read:x:@.arguments/*/file/*/stream
   log.info:Done reading CSV file
      databaseType:x:@.arguments/*/databaseType
      connectionString:x:@.arguments/*/connectionString
      databaseName:x:@.arguments/*/databaseName
   set-value:x:@.arguments/*/file/*/stream
   insert-before:x:./*/fork/0
      get-nodes:x:@.arguments
      get-nodes:x:@.content
   fork
      log.info:Successfully started a thread to import CSV file
         databaseType:x:@.arguments/*/databaseType
         connectionString:x:@.arguments/*/connectionString
         databaseName:x:@.arguments/*/databaseName
      .table
      strings.split:x:@.arguments/*/file/*/name
         .:.
      remove-nodes:x:-/0/-
      strings.join:x:@strings.split/*
         .:_
      strings.to-lower:x:-
      set-value:x:@.table
         strings.replace-not-of:x:@strings.to-lower
            .:abcdefghijklmnopqrstuvwxyz0123456789_
            .:_
      csv2lambda:x:@.content
      remove-nodes:x:@csv2lambda/*/*/
      log.info:Done removing empty columns
         databaseType:x:@.arguments/*/databaseType
         connectionString:x:@.arguments/*/connectionString
         databaseName:x:@.arguments/*/databaseName
         tableName:x:@.table
      for-each:x:@csv2lambda/*/*
         get-name:x:@.dp/#
         set-name:x:@.dp/#
            strings.to-lower:x:@get-name
         get-name:x:@.dp/#
         set-name:x:@.dp/#
            strings.replace-not-of:x:@get-name
               .:abcdefghijklmnopqrstuvwxyz0123456789_
               .:_
      log.info:Done sanitizing column names
         databaseType:x:@.arguments/*/databaseType
         connectionString:x:@.arguments/*/connectionString
         databaseName:x:@.arguments/*/databaseName
         tableName:x:@.table
      .changes:bool:false
      try
         .pk
         set-value:x:@.pk
            strings.concat
               get-value:x:@.table
               .:_id
         execute-file:/system/sql/ddl/table.post.hl
            databaseType:x:@.arguments/*/databaseType
            connectionString:x:@.arguments/*/connectionString
            databaseName:x:@.arguments/*/databaseName
            tableName:x:@.table
            pkName:x:@.pk
            pkType:auto_increment
            pkLength:int:10
            pkDefault:
         set-value:x:@.changes
            .:bool:true
         log.info:Table created
            databaseType:x:@.arguments/*/databaseType
            connectionString:x:@.arguments/*/connectionString
            databaseName:x:@.arguments/*/databaseName
            tableName:x:@.table
         for-each:x:@csv2lambda/0/*
            .type:text
            get-name:x:@.dp/#
            .found:bool:false
            for-each:x:@csv2lambda/*/*/{@get-name}
               if
                  not
                     eq
                        strings.replace-not-of:x:@.dp/#
                           .:0123456789.
                           .:
                        get-value:x:@.dp/#
                  .lambda
                     set-value:x:@.found
                        .:bool:true
            if
               eq:x:@.found
                  .:bool:false
               .lambda
                  set-value:x:@.type
                     .:numeric
            execute-file:/system/sql/ddl/column.post.hl
               databaseType:x:@.arguments/*/databaseType
               connectionString:x:@.arguments/*/connectionString
               databaseName:x:@.arguments/*/databaseName
               tableName:x:@.table
               columnName:x:@get-name
               columnType:x:@.type
         get-count:x:@csv2lambda/0/*
         log.info:Columns created
            column_count:x:@get-count
            databaseType:x:@.arguments/*/databaseType
            connectionString:x:@.arguments/*/connectionString
            databaseName:x:@.arguments/*/databaseName
            tableName:x:@.table
      .catch
         log.error:x:@.arguments/*/message
      strings.concat
         .:[
         get-value:x:@.arguments/*/connectionString
         .:|
         get-value:x:@.arguments/*/databaseName
         .:]
      data.connect:x:@strings.concat
         type:x:@.arguments/*/databaseType
         for-each:x:@csv2lambda/*
            remove-nodes:x:@.dp/#/*/=
            add:x:./*/data.create/*/values
               get-nodes:x:@.dp/#/*
            data.create
               type:x:@.arguments/*/databaseType
               table:x:@.table
               values
      log.info:Done importing CSV file
         databaseType:x:@.arguments/*/databaseType
         connectionString:x:@.arguments/*/connectionString
         databaseName:x:@.arguments/*/databaseName
         tableName:x:@.table
      strings.concat
         .:magic.sql.databases.
         get-value:x:@.arguments/*/databaseType
         :.
         get-value:x:@.arguments/*/connectionString
      cache.set:x:-
      sockets.signal:magic.backend.message
         roles:root
         args
            message:CSV file was successfully imported. Reload the page to see the changes.
            type:success
   .catch
      log.error:x:@.arguments/*/message
      sockets.signal:magic.backend.message
         roles:root
         args
            message:Something went wrong during import of CSV file. Check your log for details.
            type:error
   return
      result:success
