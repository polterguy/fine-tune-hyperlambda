
// Iterates over each split string, checks if it contains a function invocation, and if so, either logs an error and signals the client if invocation limits are exceeded, or executes an AI function. It serializes the result, checks for token limits, sends appropriate signals and messages to the client, and appends formatted results or error messages to the prompt. Any exceptions are logged, signaled to the client, and appended as failure messages to the prompt.
for-each:x:@strings.split/*
   if
      strings.contains:x:@.dp/#
         .:FUNCTION_INVOCATION[/
      .lambda
         try
            if
               lte:x:@.iterations
                  .:int:1
               .lambda
                  log.error:Too many function invocations
                  sockets.signal:x:@.session
                     args
                        function_error:Too many function invocations
                  sockets.signal:x:@.session
                     args
                        function_waiting:bool:false
                  sockets.signal:x:@.session
                     args
                        error:bool:true
                        status:int:500
                        message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                  sockets.signal:x:@.session
                     args
                        finished:bool:true
            else
               execute:magic.ai.functions.invoke
                  type:x:@.type
                  session:x:@.session
                  user-id:x:@.user-id
                  invocation:x:@.dp/#
                  extra:x:@.extra
               lambda2json:x:@execute/*/result/*
                  format:true
               if
                  mt
                     openai.tokenize:x:@lambda2json
                     get-value:x:@.arguments/@.arguments/*/max_context_tokens
                  .lambda
                     throw:Result too large, try to limit your result
                        status:int:400
                        public:bool:true
               config.get:"magic:chat:functions:success-message"
                  .:Success!
               unwrap:x:+/*/*
               sockets.signal:x:@.session
                  args
                     function_result:x:@config.get
                     invocation:x:@execute/*/json
                     file:x:@execute/*/workflow
               if
                  exists:x:@execute/*/result/*
                  .lambda
                     set-value:x:@.new-prompt
                        strings.concat
                           get-value:x:@.new-prompt
                           .:"Response from '"
                           get-value:x:@execute/*/workflow
                           .:@"' was:
```json
"
                           get-value:x:@lambda2json
                           .:@"
"
                           .:```
                           .:@"
"
                           .:@"
"
                     set-value:x:@.function-result
                        strings.concat
                           get-value:x:@.function-result
                           get-value:x:@lambda2json
                           .:"\n"
               else
                  set-value:x:@.new-prompt
                     strings.concat
                        get-value:x:@.new-prompt
                        .:"Invocation of '"
                        get-value:x:@execute/*/workflow
                        .:"' was a success."
                        .:@"
"
                        .:@"
"
         .catch
            log.error:Could not execute AI function
               message:x:@.arguments/*/message
            unwrap:x:+/*/*
            sockets.signal:x:@.session
               args
                  function_error:x:@.arguments/*/message
            set-value:x:@.new-prompt
               strings.concat
                  get-value:x:@.new-prompt
                  .:"Invocation failed, exception message was: '"
                  get-value:x:@.arguments/*/message
                  .:"'"
                  .:@"
"
                  .:@"
"
