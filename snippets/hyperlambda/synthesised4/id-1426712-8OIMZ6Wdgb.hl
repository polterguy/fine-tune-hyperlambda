
// This Hyperlambda code is designed to handle function invocations within a session, ensuring that the number of invocations does not exceed a specified limit. It processes a result string, checking for specific markers to determine if a function invocation is present. If found, it executes the function and handles the result, sending appropriate signals based on success or failure. It also manages session states and logs errors if the invocation fails. The code is structured to handle multiple iterations and ensures that the result size does not exceed a specified token limit.
if
   neq:x:@strings.trim
      .:
   .lambda
      if
         eq:x:@strings.trim
            .:[DONE]
         .lambda
            if
               neq:x:@.no-invocation
                  .:int:0
               .lambda
                  math.increment:x:@.no-invocation
            if
               and
                  strings.contains:x:@.result
                     .:___
                  strings.contains:x:@.result
                     .:FUNCTION_INVOCATION[
               .lambda
                  if
                     eq:x:@.no-invocation
                        .:int:0
                     .lambda
                        math.increment:x:@.no-invocation
                  strings.split:x:@.result
                     .:___
                  for-each:x:@strings.split/*
                     if
                        strings.contains:x:@.dp/#
                           .:FUNCTION_INVOCATION[/
                        .lambda
                           try
                              if
                                 lte:x:@.iterations
                                    .:int:1
                                 .lambda
                                    log.error:Too many function invocations
                                    sockets.signal:x:@.session
                                       args
                                          function_error:Too many function invocations
                                    sockets.signal:x:@.session
                                       args
                                          function_waiting:bool:false
                                    sockets.signal:x:@.session
                                       args
                                          error:bool:true
                                          status:int:500
                                          message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                                    sockets.signal:x:@.session
                                       args
                                          finished:bool:true
                              else
                                 execute:magic.ai.functions.invoke
                                    type:x:@.type
                                    session:x:@.session
                                    user-id:x:@.user-id
                                    invocation:x:@.dp/#
                                    extra:x:@.extra
                                 lambda2json:x:@execute/*/result/*
                                    format:true
                                 if
                                    mt
                                       openai.tokenize:x:@lambda2json
                                       get-value:x:@.arguments/@.arguments/*/max_context_tokens
                                    .lambda
                                       throw:Result too large, try to limit your result
                                          status:int:400
                                          public:bool:true
                                 config.get:"magic:chat:functions:success-message"
                                    .:Success!
                                 unwrap:x:+/*/*
                                 sockets.signal:x:@.session
                                    args
                                       function_result:x:@config.get
                                       invocation:x:@execute/*/json
                                       file:x:@execute/*/workflow
                                 if
                                    exists:x:@execute/*/result/*
                                    .lambda
                                       set-value:x:@.new-prompt
                                          strings.concat
                                             get-value:x:@.new-prompt
                                             .:"Response from '"
                                             get-value:x:@execute/*/workflow
                                             .:@"' was:
```json
"
                                             get-value:x:@lambda2json
                                             .:@"
"
                                             .:```
                                             .:@"
"
                                             .:@"
"
                                       set-value:x:@.function-result
                                          strings.concat
                                             get-value:x:@.function-result
                                             get-value:x:@lambda2json
                                             .:"\n"
                                 else
                                    set-value:x:@.new-prompt
                                       strings.concat
                                          get-value:x:@.new-prompt
                                          .:"Invocation of '"
                                          get-value:x:@execute/*/workflow
                                          .:"' was a success."
                                          .:@"
"
                                          .:@"
"
                           .catch
                              log.error:Could not execute AI function
                                 message:x:@.arguments/*/message
                              unwrap:x:+/*/*
                              sockets.signal:x:@.session
                                 args
                                    function_error:x:@.arguments/*/message
                              set-value:x:@.new-prompt
                                 strings.concat
                                    get-value:x:@.new-prompt
                                    .:"Invocation failed, exception message was: '"
                                    get-value:x:@.arguments/*/message
                                    .:"'"
                                    .:@"
"
                                    .:@"
"
                  set-value:x:@.new-prompt
                     strings.trim:x:@.new-prompt
            else
               sockets.signal:x:@.session
                  args
                     finished:bool:true
               set-value:x:@.iterations
                  .:int:0
      else
         json2lambda:x:@strings.trim
         if
            and
               exists:x:@json2lambda/*/choices/0/*/finish_reason
               not-null:x:@json2lambda/*/choices/0/*/finish_reason
            .lambda
               set-value:x:@.finish_reason
                  get-value:x:@json2lambda/*/choices/0/*/finish_reason
               unwrap:x:+/*/*
               sockets.signal:x:@.session
                  args
                     finish_reason:x:@.finish_reason
         if
            and
               not-null:x:@json2lambda/*/choices/0/*/delta/*/content
               neq:x:@json2lambda/*/choices/0/*/delta/*/content
                  .:
            .lambda
               set-value:x:@.result
                  strings.concat
                     get-value:x:@.result
                     get-value:x:@json2lambda/*/choices/0/*/delta/*/content
               if
                  not
                     strings.contains:x:@.result
                        .:___
                  .lambda
                     unwrap:x:+/*/*
                     sockets.signal:x:@.session
                        args
                           message:x:@json2lambda/*/choices/0/*/delta/*/content
               else-if
                  and
                     strings.contains:x:@.result
                        .:FUNCTION_INVOCATION[
                     neq:x:@.has-sent-waiting
                        .:bool:true
                  .lambda
                     sockets.signal:x:@.session
                        args
                           function_waiting:bool:true
                     set-value:x:@.has-sent-waiting
                        .:bool:true
