
/*
 * This Hyperlambda code defines a data retrieval operation with dynamic SQL generation based on input arguments. It validates mandatory and enumerated arguments, sets HTTP response headers, verifies authentication, and connects to a SQLite database. The code constructs a SQL query with grouping, aggregation, and optional filtering, ordering, and pagination, then executes the query and returns the results.
 * 
 * 1. [.arguments] - Declares the expected arguments for the operation, specifying types and constraints.
 * 2. [validators.mandatory] - Ensures required arguments are provided.
 * 3. [validators.enum] - Validates that certain arguments have values within a specified set.
 * 4. [response.headers.set] - Configures HTTP response headers for caching.
 * 5. [auth.ticket.verify] - Verifies user authentication status.
 * 6. [data.connect] - Establishes a connection to a specified database.
 * 7. [set-name] - Dynamically sets node names based on argument values.
 * 8. [insert-before] - Modifies the node structure by inserting nodes at specific positions.
 * 9. [set-value] - Assigns values to nodes based on argument values.
 * 10. [remove-nodes] - Removes specified nodes from the structure.
 * 11. [add] - Adds nodes to the structure based on argument values.
 * 12. [strings.concat] - Concatenates strings to form SQL expressions.
 * 13. [data.read] - Executes the constructed SQL query and retrieves data from the database.
 * 14. [return-nodes] - Returns the result nodes from the data read operation.
 */
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      documents.document_id.mt:long
      documents.document_id.lt:long
      documents.document_id.mteq:long
      documents.document_id.lteq:long
      documents.document_id.neq:long
      documents.document_id.eq:long
      documents.client_id.mt:long
      documents.client_id.lt:long
      documents.client_id.mteq:long
      documents.client_id.lteq:long
      documents.client_id.neq:long
      documents.client_id.eq:long
      documents.title.like:string
      documents.title.mt:string
      documents.title.lt:string
      documents.title.mteq:string
      documents.title.lteq:string
      documents.title.neq:string
      documents.title.eq:string
      documents.file_path.like:string
      documents.file_path.mt:string
      documents.file_path.lt:string
      documents.file_path.mteq:string
      documents.file_path.lteq:string
      documents.file_path.neq:string
      documents.file_path.eq:string
      documents.uploaded_date.mt:date
      documents.uploaded_date.lt:date
      documents.uploaded_date.mteq:date
      documents.uploaded_date.lteq:date
      documents.uploaded_date.neq:date
      documents.uploaded_date.eq:date
      client_id.name.eq:string
      client_id.name.like:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:documents.document_id
      .:documents.client_id
      .:documents.title
      .:documents.file_path
      .:documents.uploaded_date
      .:client_id.name
   validators.enum:x:@.arguments/*/aggregate_column
      .:documents.document_id
      .:documents.client_id
      .:documents.title
      .:documents.file_path
      .:documents.uploaded_date
      .:client_id.name
   response.headers.set
      Cache-Control:public, max-age=300
   auth.ticket.verify:guest
   data.connect:[generic|crm]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:documents
            join:clients
               as:client_id
               type:left
               on
                  and
                     documents.client_id:client_id.client_id
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
