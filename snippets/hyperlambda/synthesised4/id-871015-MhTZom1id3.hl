
/*
 * This Hyperlambda code checks for potential abuse by evaluating request headers and user activity. It first verifies if the request headers are not null and not empty, then checks if the IP address is in a blocked list. If found, it logs the headers and throws an exception to block the user. It also checks if the user's daily request count exceeds a configured limit, and if so, adds the IP to the blocked list and throws an exception. The code ensures that abusive users are blocked from accessing the AI chatbot.
 * 
 * 1. [if] - Checks if the request headers are not null and not empty.
 * 2. [data.connect] - Connects to the database to read blocked IPs.
 * 3. [data.read] - Reads from the "ml_blocked_ips" table to find matching IP addresses.
 * 4. [if] - Checks if the IP address exists in the blocked list.
 * 5. [request.headers.list] - Lists all request headers.
 * 6. [add] - Adds headers to the log.
 * 7. [log.info] - Logs a message about potential abuse.
 * 8. [throw] - Throws an exception to block the user.
 * 9. [config.get] - Retrieves the maximum daily request limit.
 * 10. [if] - Checks if the daily request limit is set and not empty.
 * 11. [set-value] - Sets the number of allowed requests.
 * 12. [data.scalar] - Queries the number of requests made by the user in the last day.
 * 13. [if] - Checks if the request count exceeds the limit.
 * 14. [set-value] - Sets the block flag to true.
 * 15. [if] - Checks if the block flag is true.
 * 16. [data.create] - Adds the IP to the blocked list.
 * 17. [add] - Adds headers to the log.
 * 18. [log.info] - Logs a message about blocking the IP.
 * 19. [throw] - Throws an exception to block the user.
 */
if
   and
      not-null:x:@request.headers.get
      neq:x:@request.headers.get
         .:
   .lambda
      data.connect:magic
         data.read
            table:ml_blocked_ips
            where
               and
                  ip_address.eq:x:@request.headers.get
         if
            exists:x:@data.read/*
            .lambda
               request.headers.list
               add:x:./*/log.info
                  get-nodes:x:@request.headers.list/*
               log.info:Potential abuse, user has been permanently blocked
               throw:Sorry, you have been permanently blocked from accessing this AI chatbot because of abuse. Send an email to team@ainiro.io if you think this is not correct.
                  public:bool:true
                  status:int:401
         .block:bool:false
         config.get:"magic:openai:max-daily-requests"
         if
            and
               not-null:x:@config.get
               neq:x:@config.get
                  .:
            .lambda
               .no
               set-value:x:@.no
                  convert:x:@config.get
                     type:int
               data.scalar:"select count(*) from ml_requests where user_id = @user and created >= date('now', '-1 day')"
                  @user:x:@.arguments/*/user_id
               if
                  mt
                     convert:x:@data.scalar
                        type:int
                     get-value:x:@.no
                  .lambda
                     set-value:x:@.block
                        .:bool:true
         if:x:@.block
            data.create
               table:ml_blocked_ips
               values
                  ip_address:x:@request.headers.get
                  user_id:x:@.arguments/*/user_id
            add:x:./*/log.info
               request.headers.list
            log.info:IP address was permanently blocked
            throw:Sorry, you have been permanently blocked from accessing this AI chatbot because of abuse. Send an email to team@ainiro.io if you think this is not correct.
               public:bool:true
               status:int:401
