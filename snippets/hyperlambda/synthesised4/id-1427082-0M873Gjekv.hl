
/*
 * // This Hyperlambda code demonstrates how to perform a SQL read operation with joins using the [data.read] slot. It specifies a SQLite database type and performs left joins on the "Orders" table with the "Employees" and "Shippers" tables. The joins are based on matching EmployeeID and ShipperID fields. The code also includes a column selection with an alias, a placeholder for a WHERE clause, and a GROUP BY clause. The purpose is to construct a SQL query that aggregates data from multiple related tables.
 * // 1. [database-type] - Specifies the type of database being used, in this case, SQLite.
 * // 2. [table] - Defines the main table for the SQL read operation, which is "Orders".
 * // 3. [join] - Indicates a join operation with another table, "Employees" and "Shippers" in this case.
 * // 4. [as] - Provides an alias for the joined table, used for referencing in the query.
 * // 5. [type] - Specifies the type of join, which is a left join in this example.
 * // 6. [on] - Defines the condition for the join, matching fields between tables.
 * // 7. [columns] - Lists the columns to be selected in the query, with an alias for the result.
 * // 8. [where] - Placeholder for the WHERE clause to filter query results.
 * // 9. [group] - Specifies the GROUP BY clause to group query results by a specified column.
 */
data.read
   database-type:sqlite
   table:Orders
      join:Employees
         as:EmployeeID
         type:left
         on
            and
               Orders.EmployeeID:EmployeeID.EmployeeID
      join:Shippers
         as:ShipVia
         type:left
         on
            and
               Orders.ShipVia:ShipVia.ShipperID
   columns
      aggregate_functor
         as:result
   where
      and
   group
      group_column
