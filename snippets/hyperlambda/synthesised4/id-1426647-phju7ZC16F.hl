
/*
 * /*
 *  * This Hyperlambda code iterates through nodes that are the result of a specific expression and performs operations based on certain conditions. 
 *  * It checks if a node has children and sets a warning message if it does, indicating that complex objects are returned which require manual editing for expression referencing.
 *  * It constructs a string expression using node names and values and checks if this expression already exists in a list of candidates.
 *  * If the expression does not exist, it adds a new candidate with the constructed expression and marks it as complete.
 *  * 
 *  * 1. [for-each] - Iterates through nodes resulting from the expression.
 *  * 2. [if] - Checks if the current node has children.
 *  * 3. [exists] - Determines if the current node has children.
 *  * 4. [set-value] - Sets a warning message if the condition is met.
 *  * 5. [strings.concat] - Constructs a string expression using node names and values.
 *  * 6. [get-value] - Retrieves the value of a node.
 *  * 7. [get-name] - Retrieves the name of a node.
 *  * 8. [not-exists] - Checks if the constructed expression does not already exist in the candidates list.
 *  * 9. [unwrap] - Evaluates expressions pointed to by the expression.
 *  * 10. [add] - Adds a new candidate with the constructed expression if it does not exist.
 *  */
 */
for-each:x:@hyper2lambda/**/[yield|return|return-nodes]/*
   if
      exists:x:@.dp/#/*
      .lambda
         set-value:x:@.warning
            .:Warning, some of your actions, and/or arguments, are returning complex objects, and we cannot automatically create candidate expressions for these. You will have to manually edit some of your expressions if you want to reference these nodes in your actions.
   .x
   set-value:x:@.x
      strings.concat
         .:--/execute/=
         get-value:x:@.dp/@.dp/#/*/name
         .:/*/
         get-name:x:@.dp/#
   if
      not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
      .lambda
         unwrap:x:+/*/*/*
         add:x:../*/return/*/candidates
            .
               .
                  name:x:@.x
                  expression:x:@.x
                  complete:bool:true
