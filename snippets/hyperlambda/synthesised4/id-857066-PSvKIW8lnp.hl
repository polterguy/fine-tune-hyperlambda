
/*
 * This Hyperlambda code defines a dynamic slot that constructs and executes a SQL query with aggregation and grouping based on input arguments. It validates mandatory arguments and ensures they are within accepted values. The code connects to a SQLite database, dynamically constructs the SQL query by setting column names and aggregation functions, and removes processed arguments. It then executes the query on the "Categories" table, applying conditions, grouping, and ordering as specified, and finally returns the query result.
 * 
 * 1. [.arguments] - Declares the input arguments for the slot, including various filters and SQL parameters.
 * 2. [validators.mandatory] - Ensures required arguments are provided.
 * 3. [validators.enum] - Validates that certain arguments are within a predefined set of values.
 * 4. [data.connect] - Connects to a SQLite database and sets up the SQL query structure.
 * 5. [set-name] - Dynamically sets the name of nodes in the query structure.
 * 6. [insert-before] - Inserts a node before a specified position in the query structure.
 * 7. [set-value] - Sets the value of a node in the query structure.
 * 8. [remove-nodes] - Removes nodes from the arguments after processing.
 * 9. [add] - Adds nodes to the query structure from the arguments.
 * 10. [strings.concat] - Concatenates strings to form the aggregate function expression.
 * 11. [data.read] - Executes the constructed SQL query on the "Categories" table.
 * 12. [return-nodes] - Returns the result of the executed query.
 */
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      Categories.CategoryID.mt:long
      Categories.CategoryID.lt:long
      Categories.CategoryID.mteq:long
      Categories.CategoryID.lteq:long
      Categories.CategoryID.neq:long
      Categories.CategoryID.eq:long
      Categories.CategoryName.like:string
      Categories.CategoryName.mt:string
      Categories.CategoryName.lt:string
      Categories.CategoryName.mteq:string
      Categories.CategoryName.lteq:string
      Categories.CategoryName.neq:string
      Categories.CategoryName.eq:string
      Categories.Description.like:string
      Categories.Description.mt:string
      Categories.Description.lt:string
      Categories.Description.mteq:string
      Categories.Description.lteq:string
      Categories.Description.neq:string
      Categories.Description.eq:string
      Categories.Picture.like:string
      Categories.Picture.mt:string
      Categories.Picture.lt:string
      Categories.Picture.mteq:string
      Categories.Picture.lteq:string
      Categories.Picture.neq:string
      Categories.Picture.eq:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:Categories.CategoryID
      .:Categories.CategoryName
      .:Categories.Description
      .:Categories.Picture
   validators.enum:x:@.arguments/*/aggregate_column
      .:Categories.CategoryID
      .:Categories.CategoryName
      .:Categories.Description
      .:Categories.Picture
   data.connect:[generic|northwind]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:Categories
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
