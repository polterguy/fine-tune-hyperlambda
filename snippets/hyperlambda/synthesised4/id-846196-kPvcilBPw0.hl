
// This Hyperlambda code creates a dynamic slot named [magic.ai.chat.ollama] that processes AI chat requests. It validates input arguments, manages session data, and interacts with a database to log requests and responses. The slot uses [unwrap] and [add] to manipulate session content, [while] loops to manage iterations, and [http.post] to communicate with external services. It also handles streaming responses and error logging, ensuring data consistency and efficient processing of AI interactions. Key slots include [slots.create], [signal], [if], [while], and [http.post].
hyper2lambda
   slots.create:magic.ai.chat.ollama
      validators.default:x:@.arguments
         stream:bool:false
      unwrap:x:+/*
      signal:magic.ai.get-context
         type:x:@.arguments/*/type
         prompt:x:@.arguments/*/prompt
         threshold:x:@.arguments/*/threshold
         max_tokens:x:@.arguments/*/max_context_tokens
         api_key:x:@.arguments/*/api_key
         search_postfix:x:@.arguments/*/search_postfix
         session:x:@.arguments/*/session
         session_timeout:x:@.arguments/*/session_timeout
      if
         exists:x:@signal/*/cached
         .lambda
            if
               and
                  exists:x:@.arguments/*/supervised
                  not-null:x:@.arguments/*/supervised
                  eq
                     convert:x:@.arguments/*/supervised
                        type:int
                     .:int:1
               .lambda
                  data.connect:[generic|magic]
                     data.create
                        table:ml_requests
                        values
                           type:x:@.arguments/*/type
                           prompt:x:@.arguments/*/prompt
                           completion:x:@signal/*/cached
                           finish_reason:cached
                           session:x:@.arguments/*/session
                           user_id:x:@.arguments/*/user_id
                           referrer:x:@.arguments/*/referrer
            unwrap:x:+/*
            return
               result:x:@signal/*/cached
               finish_reason:cached
               stream:bool:false
      .session
      if
         and
            not-null:x:@.arguments/*/system_message
            neq:x:@.arguments/*/system_message
               .:
         .lambda
            unwrap:x:+/*/*/*/content
            add:x:@.session
               .
                  .
                     role:system
                     content:x:@.arguments/*/system_message
      data.connect:[generic|magic]
         data.select:"\nselect prompt, max(completion) as completion\n   from ml_requests\n   where user_id = @user_id and questionnaire = 1 and context = 1\n   group by prompt"
            user_id:x:@.arguments/*/user_id
         for-each:x:@data.select/*
            unwrap:x:+/*/*/*/content
            add:x:@.session
               .
                  .
                     role:assistant
                     content:x:@.dp/#/*/prompt
            unwrap:x:+/*/*/*/content
            add:x:@.session
               .
                  .
                     role:user
                     content:x:@.dp/#/*/completion
      .fixed
      set-value:x:@.fixed
         get-count:x:@.session/*
      if
         and
            exists:x:@.arguments/*/session
            not-null:x:@.arguments/*/session
            neq:x:@.arguments/*/session
               .:
         .lambda
            cache.get:x:@.arguments/*/session
            if
               not-null:x:@cache.get
               .lambda
                  convert:x:@.arguments/*/max_session_items
                     type:int
                  hyper2lambda:x:@cache.get
                  while
                     mt
                        get-count:x:@hyper2lambda/*
                        get-value:x:@convert
                     .lambda
                        remove-nodes:x:@hyper2lambda/0
                  add:x:@.session
                     get-nodes:x:@hyper2lambda/*
      if
         not-null:x:@signal/*/context
         .lambda
            unwrap:x:+/*/*/*/content
            add:x:@.session
               .
                  .
                     role:system
                     content:x:@signal/*/context
      .extra-tokens:int:0
      if
         and
            exists:x:@.arguments/*/data
            not-null:x:@.arguments/*/data
            neq:x:@.arguments/*/data
               .:
         .lambda
            set-value:x:@.extra-tokens
               openai.tokenize:x:@.arguments/*/data
      .only-prompt
      set-value:x:@.only-prompt
         get-value:x:@.arguments/*/prompt
      if
         and
            exists:x:@.arguments/*/prefix
            not-null:x:@.arguments/*/prefix
            neq:x:@.arguments/*/prefix
               .:
         .lambda
            set-value:x:@.arguments/*/prompt
               strings.concat
                  get-value:x:@.arguments/*/prefix
                  get-value:x:@.arguments/*/prompt
      if
         and
            exists:x:@.arguments/*/data
            not-null:x:@.arguments/*/data
            neq:x:@.arguments/*/data
               .:
         .lambda
            unwrap:x:+/*/*/*/content
            add:x:@.session
               .
                  .
                     role:user
                     content:x:@.arguments/*/data
      unwrap:x:+/*/*/*/content
      add:x:@.session
         .
            .
               role:user
               content:x:@.arguments/*/prompt
      .cont:bool:true
      while:x:@.cont
         lambda2hyper:x:@.session/*
         if
            lt
               math.add
                  get-value:x:@.arguments/*/max_tokens
                  openai.tokenize:x:@lambda2hyper
                  get-value:x:@.extra-tokens
               get-value:x:@.arguments/*/model_size
            .lambda
               set-value:x:@.cont
                  .:bool:false
         else
            strings.concat
               .:@.session/
               get-value:x:@.fixed
            set-x:x:./*/remove-nodes
               convert:x:@strings.concat
                  type:x
            remove-nodes
      if
         eq:x:@.arguments/*/stream
            .:bool:true
         .lambda
            unwrap:x:+/+/+/*/*/.sse/*/.user-id
            unwrap:x:+/+/*/*/.sse/*/.type
            unwrap:x:+/*/*/.sse/*/.session
            add:x:../*/.invoke/*/while/*/.lambda/*/http.post
               .
                  .sse
                     .session:x:@.arguments/*/session
                     .type:x:@.arguments/*/type
                     .user-id:x:@.arguments/*/user_id
                     if
                        exists:x:@.arguments/*/message
                        .lambda
                           json2lambda:x:@.arguments/*/message
                           if
                              eq:x:@json2lambda/*/done
                                 .:bool:true
                              .lambda
                                 if
                                    neq:x:@.no-invocation
                                       .:int:0
                                    .lambda
                                       math.increment:x:@.no-invocation
                                 if
                                    and
                                       strings.contains:x:@.result
                                          .:___
                                       strings.contains:x:@.result
                                          .:FUNCTION_INVOCATION[
                                    .lambda
                                       if
                                          eq:x:@.no-invocation
                                             .:int:0
                                          .lambda
                                             math.increment:x:@.no-invocation
                                       strings.split:x:@.result
                                          .:___
                                       for-each:x:@strings.split/*
                                          if
                                             strings.contains:x:@.dp/#
                                                .:FUNCTION_INVOCATION[/
                                             .lambda
                                                try
                                                   if
                                                      lte:x:@.iterations
                                                         .:int:1
                                                      .lambda
                                                         log.error:Too many function invocations
                                                         sockets.signal:x:@.session
                                                            args
                                                               function_error:Too many function invocations
                                                         sockets.signal:x:@.session
                                                            args
                                                               function_waiting:bool:false
                                                         sockets.signal:x:@.session
                                                            args
                                                               error:bool:true
                                                               status:int:500
                                                               message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                                                         sockets.signal:x:@.session
                                                            args
                                                               finished:bool:true
                                                   else
                                                      execute:magic.ai.functions.invoke
                                                         type:x:@.type
                                                         session:x:@.session
                                                         user-id:x:@.user-id
                                                         invocation:x:@.dp/#
                                                      lambda2json:x:@execute/*/result/*
                                                         format:true
                                                      if
                                                         mt
                                                            openai.tokenize:x:@lambda2json
                                                            get-value:x:@.arguments/@.arguments/*/max_context_tokens
                                                         .lambda
                                                            throw:Result too large, try to limit your result
                                                               status:int:400
                                                               public:bool:true
                                                      config.get:"magic:chat:functions:success-message"
                                                         .:Success!
                                                      unwrap:x:+/*/*
                                                      sockets.signal:x:@.session
                                                         args
                                                            function_result:x:@config.get
                                                            invocation:x:@execute/*/json
                                                            file:x:@execute/*/workflow
                                                      if
                                                         exists:x:@execute/*/result/*
                                                         .lambda
                                                            set-value:x:@.new-prompt
                                                               strings.concat
                                                                  get-value:x:@.new-prompt
                                                                  .:"Response from '"
                                                                  get-value:x:@execute/*/workflow
                                                                  .:@"' was:
```json
"
                                                                  get-value:x:@lambda2json
                                                                  .:@"
"
                                                                  .:```
                                                                  .:@"
"
                                                                  .:@"
"
                                                            set-value:x:@.function-result
                                                               get-value:x:@lambda2json
                                                      else
                                                         set-value:x:@.new-prompt
                                                            strings.concat
                                                               get-value:x:@.new-prompt
                                                               .:"Invocation of '"
                                                               get-value:x:@execute/*/workflow
                                                               .:"' was a success."
                                                               .:@"
"
                                                               .:@"
"
                                                .catch
                                                   log.error:Could not execute AI function
                                                      message:x:@.arguments/*/message
                                                   unwrap:x:+/*/*
                                                   sockets.signal:x:@.session
                                                      args
                                                         function_error:x:@.arguments/*/message
                                                   set-value:x:@.new-prompt
                                                      strings.concat
                                                         get-value:x:@.new-prompt
                                                         .:"Invocation failed, exception message was: '"
                                                         get-value:x:@.arguments/*/message
                                                         .:"'"
                                                         .:@"
"
                                                         .:@"
"
                                       set-value:x:@.new-prompt
                                          strings.trim:x:@.new-prompt
                                 else
                                    sockets.signal:x:@.session
                                       args
                                          finished:bool:true
                                    set-value:x:@.iterations
                                       .:int:0
                           else
                              if
                                 and
                                    exists:x:@json2lambda/*/done_reason
                                    not-null:x:@json2lambda/*/done_reason
                                 .lambda
                                    set-value:x:@.finish_reason
                                       get-value:x:@json2lambda/*/done_reason
                                    unwrap:x:+/*/*
                                    sockets.signal:x:@.session
                                       args
                                          finish_reason:x:@.finish_reason
                              if
                                 and
                                    not-null:x:@json2lambda/*/message/*/content
                                    neq:x:@json2lambda/*/message/*/content
                                       .:
                                 .lambda
                                    set-value:x:@.result
                                       strings.concat
                                          get-value:x:@.result
                                          get-value:x:@json2lambda/*/message/*/content
                                    if
                                       not
                                          strings.contains:x:@.result
                                             .:___
                                       .lambda
                                          unwrap:x:+/*/*
                                          sockets.signal:x:@.session
                                             args
                                                message:x:@json2lambda/*/message/*/content
                                    else-if
                                       and
                                          strings.contains:x:@.result
                                             .:FUNCTION_INVOCATION[
                                          neq:x:@.has-sent-waiting
                                             .:bool:true
                                       .lambda
                                          sockets.signal:x:@.session
                                             args
                                                function_waiting:bool:true
                                          set-value:x:@.has-sent-waiting
                                             .:bool:true
      insert-before:x:./*/.invoke/0
         get-nodes:x:@.arguments
         get-nodes:x:@.session
         get-nodes:x:@.fixed
         get-nodes:x:@.only-prompt
      .invoke
         .iterations
         set-value:x:@.iterations
            convert:x:@.arguments/*/max_function_invocations
               type:int
         .no-invocation:int:0
         .new-prompt
         .result:
         .finish_reason
         .function-result
         while
            mt:x:@.iterations
               .:int:0
            .lambda
               set-value:x:@.new-prompt
                  .:
               set-value:x:@.result
                  .:
               set-value:x:@.finish_reason
                  .:
               .has-sent-waiting:bool:false
               add:x:./*/http.post/*/payload/*/messages
                  get-nodes:x:@.session/*
               .url
               .model
               set-value:x:@.url
                  config.get:"magic:ollama:url"
               set-value:x:@.model
                  config.get:"magic:ollama:model"
               http.post:x:@.url
                  convert:bool:true
                  headers
                     Content-Type:application/json
                  payload
                     stream:x:@.arguments/*/stream
                     model:x:@.model
                     messages
               if
                  not
                     and
                        mte:x:@http.post
                           .:int:200
                        lt:x:@http.post
                           .:int:300
                  .lambda
                     lambda2hyper:x:@http.post
                     log.error:Something went wrong while invoking Ollama
                        message:x:@http.post/*/content/*/error/*/message
                        status:x:@http.post
                        error:x:@lambda2hyper
                     if
                        or
                           not-exists:x:@.arguments/*/stream
                           eq:x:@.arguments/*/stream
                              .:bool:false
                        .lambda
                           throw:x:@http.post/*/content/*/error/*/message
                              public:bool:true
                              status:x:@http.post
                     else
                        unwrap:x:+/*/*
                        sockets.signal:x:@.arguments/*/session
                           args
                              error:bool:true
                              status:x:@http.post
                              message:x:@http.post/*/content/*/error/*/message
                        set-value:x:@.iterations
                           .:int:0
               else
                  log.info:Invoking Ollama was a success
                  math.decrement:x:@.iterations
               if
                  or
                     not-exists:x:@.arguments/*/stream
                     eq:x:@.arguments/*/stream
                        .:bool:false
                  .lambda
                     set-value:x:@.result
                        get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
                     set-value:x:@.finish_reason
                        get-first-value
                           get-value:x:@http.post/*/content/*/choices/0/*/finish_reason
                           .:unknown
                     set-value:x:@.iterations
                        .:int:0
               set-value:x:@.result
                  strings.trim:x:@.result
               if
                  and
                     exists:x:@.arguments/*/session
                     not-null:x:@.arguments/*/session
                  .lambda
                     if
                        and
                           not-null:x:@.result
                           neq:x:@.result
                              .:
                        .lambda
                           unwrap:x:+/*/*/*/content
                           add:x:@.session
                              .
                                 .
                                    role:assistant
                                    content:x:@.result
                     if
                        and
                           not-null:x:@.new-prompt
                           neq:x:@.new-prompt
                              .:
                        .lambda
                           unwrap:x:+/*/*/*/content
                           add:x:@.session
                              .
                                 .
                                    role:system
                                    content:x:@.new-prompt
                     .cache-session
                     add:x:@.cache-session
                        get-nodes:x:@.session/*
                     .tmp
                     set-value:x:@.tmp
                        get-value:x:@.fixed
                     while
                        mt:x:@.tmp
                           .:int:0
                        .lambda
                           remove-nodes:x:@.cache-session/0
                           math.decrement:x:@.tmp
                     lambda2hyper:x:@.cache-session/*
                     cache.set:x:@.arguments/*/session
                        expiration:x:@.arguments/*/session_timeout
                        value:x:@lambda2hyper
               if
                  and
                     exists:x:@.arguments/*/supervised
                     not-null:x:@.arguments/*/supervised
                     eq
                        convert:x:@.arguments/*/supervised
                           type:int
                        .:int:1
                  .lambda
                     data.connect:[generic|magic]
                        .prompt
                        if
                           mt:x:@.no-invocation
                              .:int:0
                           .lambda
                              set-value:x:@.prompt
                                 strings.concat
                                    .:[
                                    get-value:x:@.no-invocation
                                    .:"] - "
                                    get-value:x:@.only-prompt
                        else
                           set-value:x:@.prompt
                              get-value:x:@.only-prompt
                        .tmp-completion
                        if
                           not-null:x:@.function-result
                           .lambda
                              set-value:x:@.tmp-completion
                                 strings.concat
                                    get-value:x:@.result
                                    .:@"
"
                                    .:@"
"
                                    .:@"Result of function invocation:
"
                                    .:@"
"
                                    .:```json
                                    .:@"
"
                                    get-value:x:@.function-result
                                    .:@"
"
                                    .:```
                              set-value:x:@.function-result
                        else
                           set-value:x:@.tmp-completion
                              get-value:x:@.result
                        data.create
                           table:ml_requests
                           values
                              type:x:@.arguments/*/type
                              prompt:x:@.prompt
                              completion:x:@.tmp-completion
                              finish_reason:x:@.finish_reason
                              session:x:@.arguments/*/session
                              user_id:x:@.arguments/*/user_id
                              referrer:x:@.arguments/*/referrer
               .outgoing
               set-value:x:@.outgoing
                  get-first-value
                     get-value:x:@.arguments/*/webhook_outgoing
                     config.get:"magic:openai:integrations:outgoing:slot"
               if
                  and
                     not-null:x:@.outgoing
                     neq:x:@.outgoing
                        .:
                  .lambda
                     .exe
                        .hook-url
                        set-value:x:@.hook-url
                           get-first-value
                              get-value:x:@.arguments/*/webhook_outgoing_url
                              config.get:"magic:openai:integrations:outgoing:url"
                        unwrap:x:./*/signal/*/url
                        signal:x:@.outgoing
                           url:x:@.hook-url
                     unwrap:x:+/*/*
                     add:x:@.exe/*/signal
                        .
                           result:x:@.result
                           session:x:@.arguments/*/session
                     if
                        and
                           exists:x:@.arguments/*/to
                           exists:x:@.arguments/*/from
                           not-null:x:@.arguments/*/to
                           not-null:x:@.arguments/*/from
                           strings.contains:x:@.arguments/*/to
                              .:":"
                           strings.contains:x:@.arguments/*/from
                              .:":"
                        .lambda
                           .channel
                           .to
                           .from
                           strings.split:x:@.arguments/*/to
                              .:":"
                           set-value:x:@.channel
                              get-value:x:@strings.split/0
                           set-value:x:@.to
                              get-value:x:@strings.split/1
                           strings.split:x:@.arguments/*/from
                              .:":"
                           set-value:x:@.from
                              get-value:x:@strings.split/1
                           unwrap:x:+/*/*
                           add:x:@.exe/*/signal
                              .
                                 to:x:@.from
                                 from:x:@.to
                                 channel:x:@.channel
                     else
                        add:x:@.exe/*/signal
                           get-nodes:x:@.arguments/*/to
                           get-nodes:x:@.arguments/*/from
                     eval:x:@.exe
      if
         get-value:x:@.arguments/*/stream
         .lambda
            insert-before:x:./*/fork/0
               get-nodes:x:@.invoke
            fork
               eval:x:@.invoke
      else
         eval:x:@.invoke
      if
         and
            exists:x:@.arguments/*/references
            not-null:x:@.arguments/*/references
            get-value:x:@.arguments/*/references
            exists:x:@signal/*/snippets
         .lambda
            add:x:../*/return
               .
                  references
            add:x:../*/return/*/references
               get-nodes:x:@signal/*/snippets/*
      if
         or
            eq:x:@.arguments/*/stream
               .:bool:false
            not-exists:x:@.arguments/*/stream
         .lambda
            unwrap:x:+/*/*
            add:x:../*/return
               .
                  result:x:@.invoke/*/.result
                  finish_reason:x:@.invoke/*/.finish_reason
      unwrap:x:./*/return/**
      return
         db_time:x:@signal/*/db_time
         stream:x:@.arguments/*/stream
