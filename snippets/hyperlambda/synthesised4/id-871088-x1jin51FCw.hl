
// This Hyperlambda code checks if the [_type] argument exists and is not null, then retrieves the maximum context tokens for the specified type from a SQLite database. It converts the lambda execution result to JSON and iteratively removes URLs from the execution node if the token count exceeds the maximum allowed. If no URLs remain, it removes the URLs node. It further trims the result string to reduce token count until it fits within the maximum tokens allowed.
if
   and
      exists:x:@.arguments/*/_type
      not-null:x:@.arguments/*/_type
   .lambda
      data.connect:[generic|magic]
         database-type:sqlite
         data.scalar:select max_context_tokens from ml_types where type = @type
            database-type:sqlite
            @type:x:@.arguments/*/_type
         set-value:x:@.max-tokens
            convert:x:@data.scalar
               type:int
      .json
      set-value:x:@.json
         lambda2json:x:@execute/*
      while
         and
            exists:x:@execute/*/urls/0
            mt
               openai.tokenize:x:@.json
               get-value:x:@.max-tokens
         .lambda
            remove-nodes:x:@execute/*/urls/0/-
            set-value:x:@.json
               lambda2json:x:@execute/*
      if
         not
            exists:x:@execute/*/urls/0
         .lambda
            remove-nodes:x:@execute/*/urls
      while
         mt
            openai.tokenize:x:@.json
            get-value:x:@.max-tokens
         .lambda
            math.multiply
               strings.length:x:@execute/*/result
               .:decimal:0.9
            set-value:x:@execute/*/result
               strings.substring:x:@execute/*/result
                  .:int:0
                  convert:x:@math.multiply
                     type:int
            set-value:x:@.json
               lambda2json:x:@execute/*
