
/*
 * // This Hyperlambda script evaluates a series of conditions to determine how to process an outgoing webhook signal. 
 * // It first checks if the [outgoing] node is not null and not empty. If true, it constructs a webhook URL and sends a signal with additional parameters. 
 * // The script then checks if both [to] and [from] arguments exist and are not null, and if they contain a colon. 
 * // If these conditions are met, it splits the values and sets up a channel, reversing the [to] and [from] values in the signal. 
 * // If the conditions are not met, it adds the original [to] and [from] nodes to the signal. 
 * // Finally, it evaluates the constructed execution node.
 * // 1. [if] - Checks if the outgoing signal is not null and not empty.
 * // 2. [.lambda] - Contains the logic to execute if the condition is true.
 * // 3. [.exe] - Constructs the execution node for the webhook signal.
 * // 4. [.hook-url] - Sets the webhook URL.
 * // 5. [unwrap] - Unwraps the URL from the signal node.
 * // 6. [signal] - Sends the signal with the constructed URL.
 * // 7. [add] - Adds result and session information to the signal.
 * // 8. [if] - Checks additional conditions on the [to] and [from] arguments.
 * // 9. [.lambda] - Contains logic to execute if the second condition is true.
 * // 10. [.channel], [.to], [.from] - Nodes for channel, to, and from information.
 * // 11. [strings.split] - Splits the [to] and [from] arguments by colon.
 * // 12. [set-value] - Sets the channel, to, and from values.
 * // 13. [unwrap] - Unwraps additional nodes.
 * // 14. [add] - Adds reversed to and from values to the signal.
 * // 15. [else] - Executes if the second condition is false.
 * // 16. [add] - Adds original to and from nodes to the signal.
 * // 17. [eval] - Evaluates the constructed execution node.
 */
if
   and
      not-null:x:@.outgoing
      neq:x:@.outgoing
         .:
   .lambda
      .exe
         .hook-url
         set-value:x:@.hook-url
            get-first-value
               get-value:x:@.arguments/*/webhook_outgoing_url
               config.get:"magic:openai:integrations:outgoing:url"
         unwrap:x:./*/signal/*/url
         signal:x:@.outgoing
            url:x:@.hook-url
      unwrap:x:+/*/*
      add:x:@.exe/*/signal
         .
            result:x:@.result
            session:x:@.arguments/*/session
      if
         and
            exists:x:@.arguments/*/to
            exists:x:@.arguments/*/from
            not-null:x:@.arguments/*/to
            not-null:x:@.arguments/*/from
            strings.contains:x:@.arguments/*/to
               .:":"
            strings.contains:x:@.arguments/*/from
               .:":"
         .lambda
            .channel
            .to
            .from
            strings.split:x:@.arguments/*/to
               .:":"
            set-value:x:@.channel
               get-value:x:@strings.split/0
            set-value:x:@.to
               get-value:x:@strings.split/1
            strings.split:x:@.arguments/*/from
               .:":"
            set-value:x:@.from
               get-value:x:@strings.split/1
            unwrap:x:+/*/*
            add:x:@.exe/*/signal
               .
                  to:x:@.from
                  from:x:@.to
                  channel:x:@.channel
      else
         add:x:@.exe/*/signal
            get-nodes:x:@.arguments/*/to
            get-nodes:x:@.arguments/*/from
      eval:x:@.exe
