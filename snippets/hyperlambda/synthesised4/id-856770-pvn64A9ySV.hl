
// This Hyperlambda code defines a slot [magic.ai.vectorise] that vectorizes training snippets for a specified type using OpenAI's embedding API. It retrieves the OpenAI API key and model from a database, iterates over training snippets, and sends them to OpenAI for vectorization. The embeddings are then stored back in the database. The code handles errors, logs progress, and sends feedback through a specified channel. It also supports post-processing through an optional [.onafter] argument. Key slots include [slots.create], [validators.mandatory], [data.connect], [http.post], and [sockets.signal].
slots.create:magic.ai.vectorise
   validators.mandatory:x:@.arguments/*/type
   try
      .token
      set-value:x:@.token
         config.get:"magic:openai:key"
      .vector-model
      data.connect:[generic|magic]
         data.read
            table:ml_types
            columns
               vector_model
               api_key
            where
               and
                  type.eq:x:@.arguments/*/type
         set-value:x:@.vector-model
            get-value:x:@data.read/*/*/vector_model
         if
            and
               not-null:x:@data.read/*/*/api_key
               neq:x:@data.read/*/*/api_key
                  .:
            .lambda
               set-value:x:@.token
                  get-value:x:@data.read/*/*/api_key
      set-value:x:@.token
         strings.concat
            .:"Bearer "
            get-value:x:@.token
      .continue:bool:true
      .failed:int:0
      .success:int:0
      .id:long:0
      while:x:@.continue
         .data
         data.connect:[generic|magic]
            add:x:@.data
               data.select:"\nselect id, prompt, completion\n   from ml_training_snippets\n   where type = @type and id > @id and embedding is null order by id limit 20"
                  type:x:@.arguments/*/type
                  id:x:@.id
         set-value:x:@.id
            get-value:x:@.data/0/-/*/id
         for-each:x:@.data/*
            if:x:@.continue
               .embedding
               set-value:x:@.embedding
                  strings.concat
                     get-value:x:@.dp/#/*/prompt
                     .:@"
"
                     .:@"
"
                     get-value:x:@.dp/#/*/completion
               if
                  lt
                     openai.tokenize:x:@.embedding
                     .:int:8191
                  .lambda
                     strings.concat
                        .:"Vectorizing: \""
                        get-value:x:@.dp/#/*/prompt
                        .:"\""
                     unwrap:x:+/*/args/*/message
                     sockets.signal:x:@.arguments/*/feedback-channel
                        args
                           message:x:@strings.concat
                           type:info
                     http.post:"https://api.openai.com/v1/embeddings"
                        headers
                           Authorization:x:@.token
                           Content-Type:application/json
                        payload
                           model:x:@.vector-model
                           input:x:@.embedding
                        convert:true
                     if
                        not
                           and
                              mte:x:@http.post
                                 .:int:200
                              lt:x:@http.post
                                 .:int:300
                        .lambda
                           math.increment:x:@.failed
                           lambda2hyper:x:@http.post
                           log.error:Something went wrong while invoking OpenAI
                              message:x:@http.post/*/content/*/error/*/message
                              error:x:@lambda2hyper
                           strings.concat
                              .:"OpenAI failed, could not create vectors for '"
                              get-value:x:@.dp/#/*/prompt
                              .:"'"
                           unwrap:x:+/*/args/*/message
                           sockets.signal:x:@.arguments/*/feedback-channel
                              args
                                 message:x:@strings.concat
                                 type:warning
                           if
                              or
                                 eq:x:@http.post
                                    .:int:429
                                 eq:x:@http.post
                                    .:int:500
                              .lambda
                                 sockets.signal:x:@.arguments/*/feedback-channel
                                    args
                                       message:Continuing in 5 seconds with the next snippet to let OpenAI cool down first
                                       type:info
                                 sleep:5000
                           else
                              sockets.signal:magic.backend.message
                                 roles:root
                                 args
                                    message:Could not vectorize snippet and it was a non-transitional error, aborting vectorization for type
                                    type:error
                              set-value:x:@.continue
                                 .:bool:false
                     else
                        .embedding
                        set-value:x:@.embedding
                           strings.concat
                              .:[
                              strings.join:x:@http.post/*/content/*/data/0/*/embedding/*
                                 .:,
                              .:]
                        data.connect:[generic|magic]
                           data.update
                              table:ml_training_snippets
                              values
                                 embedding:x:@.embedding
                              where
                                 and
                                    id.eq:x:@.dp/#/*/id
                        math.increment:x:@.success
               else
                  log.info:Cannot vectorize snippet, too long
                     id:x:@.dp/#/*/id
                  math.increment:x:@.failed
         get-count:x:@.data/*
         if
            lt:x:@get-count
               .:int:20
            .lambda
               set-value:x:@.continue
                  .:bool:false
      sockets.signal:magic.backend.message
         roles:root
         args
            message:Done creating embeddings for your model
            type:success
      strings.concat
         .:"Done vectorising model '"
         get-value:x:@.arguments/*/type
         .:"'. We succeeded vectorizing "
         get-value:x:@.success
         .:" training snippets and failed with "
         get-value:x:@.failed
         .:" snippets"
      unwrap:x:+/*/args/*/message
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:x:@strings.concat
            type:info
      log.info:Done with creating vectors for model
         type:x:@.arguments/*/type
         success:x:@.success
         failed:x:@.failed
      if
         mt:x:@.failed
            .:int:0
         .lambda
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:One or more training snippets failed to vectorize. You might want to try vectorizing again
                  type:warning
      else
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:All training snippets was successfully vectorized
               type:info
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:Indexing embeddings
            type:info
      .more:bool:true
      while:x:@.more
         .sql:"\ninsert into vss_ml_training_snippets (rowid, embedding_vss)\n   select id as rowid, embedding as embedding_vss\n      from ml_training_snippets ts\n      where ts.embedding is not null and\n         type = @type and\n         not exists (select rowid from vss_ml_training_snippets as vss where ts.id = vss.rowid) limit 500"
         data.connect:[generic|magic]
            data.execute:x:@.sql
               type:x:@.arguments/*/type
            if
               lt:x:@data.execute
                  .:int:500
               .lambda
                  set-value:x:@.more
                     .:bool:false
      if
         exists:x:@.arguments/*/.onafter
         .lambda
            eval:x:@.arguments/*/.onafter
   .catch
      log.error:x:@.arguments/*/message
         type:x:@.arguments/*/type
