
/*
 * This Hyperlambda code is designed to prevent abuse by checking if a user's IP address is blocked or if they have exceeded their daily request limit. It retrieves the IP address from request headers and checks against a database of blocked IPs. If the IP is blocked or the user exceeds the request limit, it logs the event and throws an error, blocking further access. The code ensures that only authorized users can access the AI chatbot by enforcing these checks.
 * 
 * 1. [if] - Checks if the request headers are not null and not empty.
 * 2. [data.connect] - Connects to the "magic" database.
 * 3. [data.read] - Reads from the "ml_blocked_ips" table to check if the IP is blocked.
 * 4. [if] - Checks if the IP exists in the blocked list.
 * 5. [request.headers.list] - Lists request headers for logging.
 * 6. [add] - Adds log information.
 * 7. [log.info] - Logs a message about potential abuse.
 * 8. [throw] - Throws an error if the IP is blocked.
 * 9. [config.get] - Retrieves the maximum daily requests allowed.
 * 10. [if] - Checks if the max daily requests config is not null or empty.
 * 11. [set-value] - Sets a value for the number of allowed requests.
 * 12. [data.scalar] - Counts the number of requests made by the user in the last day.
 * 13. [if] - Checks if the request count exceeds the allowed number.
 * 14. [set-value] - Sets a block flag if the user exceeds the request limit.
 * 15. [if] - Checks if the block flag is true.
 * 16. [data.create] - Adds the IP to the blocked list.
 * 17. [add] - Adds log information.
 * 18. [log.info] - Logs a message about the IP being blocked.
 * 19. [throw] - Throws an error if the IP is blocked due to exceeding request limits.
 */
if
   and
      not-null:x:@request.headers.get
      neq:x:@request.headers.get
         .:
   .lambda
      data.connect:magic
         data.read
            table:ml_blocked_ips
            where
               and
                  ip_address.eq:x:@request.headers.get
         if
            exists:x:@data.read/*
            .lambda
               request.headers.list
               add:x:./*/log.info
                  get-nodes:x:@request.headers.list/*
               log.info:Potential abuse, user has been permanently blocked
               throw:Sorry, you have been permanently blocked from accessing this AI chatbot because of abuse. Send an email to team@ainiro.io if you think this is not correct.
                  public:bool:true
                  status:int:401
         .block:bool:false
         config.get:"magic:openai:max-daily-requests"
         if
            and
               not-null:x:@config.get
               neq:x:@config.get
                  .:
            .lambda
               .no
               set-value:x:@.no
                  convert:x:@config.get
                     type:int
               data.scalar:"select count(*) from ml_requests where user_id = @user and created >= date('now', '-1 day')"
                  @user:x:@.arguments/*/user_id
               if
                  mt
                     convert:x:@data.scalar
                        type:int
                     get-value:x:@.no
                  .lambda
                     set-value:x:@.block
                        .:bool:true
         if:x:@.block
            data.create
               table:ml_blocked_ips
               values
                  ip_address:x:@request.headers.get
                  user_id:x:@.arguments/*/user_id
            add:x:./*/log.info
               request.headers.list
            log.info:IP address was permanently blocked
            throw:Sorry, you have been permanently blocked from accessing this AI chatbot because of abuse. Send an email to team@ainiro.io if you think this is not correct.
               public:bool:true
               status:int:401
