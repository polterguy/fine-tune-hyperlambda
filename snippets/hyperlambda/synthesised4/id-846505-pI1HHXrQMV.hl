
// The provided Hyperlambda code defines a lambda function named [hyper2lambda] that performs SQL operations on a SQLite database. It validates mandatory arguments such as [group_column], [aggregate_function], and [aggregate_column], ensuring they belong to a predefined set of values. The function constructs a SQL query with grouping, ordering, and aggregation based on the provided arguments. It connects to a database, constructs the SQL query dynamically, and returns the results of the query execution. Key slots include [validators.mandatory], [validators.enum], [data.connect], and [data.read] for validation, database connection, and query execution, respectively.
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      Products.ProductID.mt:long
      Products.ProductID.lt:long
      Products.ProductID.mteq:long
      Products.ProductID.lteq:long
      Products.ProductID.neq:long
      Products.ProductID.eq:long
      Products.ProductName.like:string
      Products.ProductName.mt:string
      Products.ProductName.lt:string
      Products.ProductName.mteq:string
      Products.ProductName.lteq:string
      Products.ProductName.neq:string
      Products.ProductName.eq:string
      Products.SupplierID.mt:long
      Products.SupplierID.lt:long
      Products.SupplierID.mteq:long
      Products.SupplierID.lteq:long
      Products.SupplierID.neq:long
      Products.SupplierID.eq:long
      Products.CategoryID.mt:long
      Products.CategoryID.lt:long
      Products.CategoryID.mteq:long
      Products.CategoryID.lteq:long
      Products.CategoryID.neq:long
      Products.CategoryID.eq:long
      Products.QuantityPerUnit.like:string
      Products.QuantityPerUnit.mt:string
      Products.QuantityPerUnit.lt:string
      Products.QuantityPerUnit.mteq:string
      Products.QuantityPerUnit.lteq:string
      Products.QuantityPerUnit.neq:string
      Products.QuantityPerUnit.eq:string
      Products.UnitPrice.mt:decimal
      Products.UnitPrice.lt:decimal
      Products.UnitPrice.mteq:decimal
      Products.UnitPrice.lteq:decimal
      Products.UnitPrice.neq:decimal
      Products.UnitPrice.eq:decimal
      Products.UnitsInStock.mt:long
      Products.UnitsInStock.lt:long
      Products.UnitsInStock.mteq:long
      Products.UnitsInStock.lteq:long
      Products.UnitsInStock.neq:long
      Products.UnitsInStock.eq:long
      Products.UnitsOnOrder.mt:long
      Products.UnitsOnOrder.lt:long
      Products.UnitsOnOrder.mteq:long
      Products.UnitsOnOrder.lteq:long
      Products.UnitsOnOrder.neq:long
      Products.UnitsOnOrder.eq:long
      Products.ReorderLevel.mt:long
      Products.ReorderLevel.lt:long
      Products.ReorderLevel.mteq:long
      Products.ReorderLevel.lteq:long
      Products.ReorderLevel.neq:long
      Products.ReorderLevel.eq:long
      Products.Discontinued.like:string
      Products.Discontinued.mt:string
      Products.Discontinued.lt:string
      Products.Discontinued.mteq:string
      Products.Discontinued.lteq:string
      Products.Discontinued.neq:string
      Products.Discontinued.eq:string
      ProductID.CategoryName.eq:string
      ProductID.CategoryName.like:string
      SupplierID.CompanyName.eq:string
      SupplierID.CompanyName.like:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:Products.ProductID
      .:Products.ProductName
      .:Products.SupplierID
      .:Products.CategoryID
      .:Products.QuantityPerUnit
      .:Products.UnitPrice
      .:Products.UnitsInStock
      .:Products.UnitsOnOrder
      .:Products.ReorderLevel
      .:Products.Discontinued
      .:ProductID.CategoryName
      .:SupplierID.CompanyName
   validators.enum:x:@.arguments/*/aggregate_column
      .:Products.ProductID
      .:Products.ProductName
      .:Products.SupplierID
      .:Products.CategoryID
      .:Products.QuantityPerUnit
      .:Products.UnitPrice
      .:Products.UnitsInStock
      .:Products.UnitsOnOrder
      .:Products.ReorderLevel
      .:Products.Discontinued
      .:ProductID.CategoryName
      .:SupplierID.CompanyName
   data.connect:[generic|northwind]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:Products
            join:Categories
               as:ProductID
               type:left
               on
                  and
                     Products.ProductID:ProductID.CategoryID
            join:Suppliers
               as:SupplierID
               type:left
               on
                  and
                     Products.SupplierID:SupplierID.SupplierID
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
