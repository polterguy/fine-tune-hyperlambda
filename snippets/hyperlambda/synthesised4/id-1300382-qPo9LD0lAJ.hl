
/*
 * This Hyperlambda code snippet is designed to perform a SQL query on a SQLite database, specifically targeting the "Employees" table. The query involves a left join operation where the "Employees" table is joined with itself, using the "ReportsTo" alias to create a hierarchical relationship based on the "ReportsTo.EmployeeID" field. The query aims to retrieve distinct records, counting them using a distinct function, and the result is aliased as "count". The [where] clause is present but doesn't specify any conditions, indicating that all records matching the join criteria will be considered. Finally, the [return-nodes] slot is used to return the results of the query execution, accessing all nodes under [data.read]. This setup is useful for generating reports or insights on employee hierarchies and reporting structures within an organization. 
 * 
 * 1. [data.read] - Initiates a read operation from the database.
 * 2. [database-type] - Specifies the type of database being used, which is SQLite in this case.
 * 3. [table] - Specifies the primary table for the query, which is "Employees".
 * 4. [join] - Performs a left join on the "Employees" table with itself, using the alias "ReportsTo".
 * 5. [as] - Sets an alias for the joined table, "ReportsTo".
 * 6. [type] - Specifies the type of join, which is a left join.
 * 7. [on] - Defines the condition for the join, matching "Employees.ReportsTo" with "ReportsTo.EmployeeID".
 * 8. [columns] - Specifies the columns to be retrieved, using a distinct function to count unique records.
 * 9. [distinct_functor] - Represents a function to count distinct records.
 * 10. [as] - Aliases the result of the distinct function as "count".
 * 11. [where] - Placeholder for conditions to filter the results, currently empty.
 * 12. [return-nodes] - Returns the nodes resulting from the [data.read] operation.
 */
data.read
   database-type:sqlite
   table:Employees
      join:Employees
         as:ReportsTo
         type:left
         on
            and
               Employees.ReportsTo:ReportsTo.EmployeeID
   columns
      distinct_functor
         as:count
   where
      and
return-nodes:x:@data.read/*/*
