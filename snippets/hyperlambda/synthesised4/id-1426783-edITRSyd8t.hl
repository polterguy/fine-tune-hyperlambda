
/*
 * // This Hyperlambda code snippet demonstrates the use of a [while] loop to repeatedly remove nodes from a collection. 
 * // The loop continues as long as the number of nodes in the [hyper2lambda] node set is greater than the value obtained from [convert]. 
 * // Within the loop, the [remove-nodes] slot is used to delete the first node in the [hyper2lambda] node set.
 * // 1. [while] - Initiates a loop that continues as long as the specified condition is true.
 * // 2. [mt] - Checks if the number of nodes in [hyper2lambda] is greater than the value from [convert].
 * // 3. [get-count:x:@hyper2lambda/*] - Retrieves the count of child nodes under [hyper2lambda].
 * // 4. [get-value:x:@convert] - Retrieves the value of the [convert] node.
 * // 5. [.lambda] - Contains the operations to be executed within the loop.
 * // 6. [remove-nodes:x:@hyper2lambda/0] - Removes the first node in the [hyper2lambda] node set.
 */
while
   mt
      get-count:x:@hyper2lambda/*
      get-value:x:@convert
   .lambda
      remove-nodes:x:@hyper2lambda/0
