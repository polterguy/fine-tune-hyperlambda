
/*
 * This Hyperlambda code creates a dynamic SQL query to retrieve distinct customer records from a SQLite database, based on various optional filtering criteria. It validates the mandatory [distinct_column] argument and ensures it is one of the specified customer fields. The code constructs a SQL query with optional [limit], [offset], [order], and [direction] parameters, and applies any provided filtering conditions on customer fields using comparison operators. The result is a distinct selection of customer data, returned as nodes. 
 * 
 * 1. [distinct_column] - Specifies the column for distinct selection.
 * 2. [limit] - Limits the number of records returned.
 * 3. [offset] - Specifies the starting point for record retrieval.
 * 4. [order] - Determines the column for ordering results.
 * 5. [direction] - Specifies the order direction (ascending/descending).
 * 6. [Customers.*] - Various fields for filtering customer records using comparison operators.
 * 7. [validators.mandatory] - Ensures [distinct_column] is provided.
 * 8. [validators.enum] - Validates [distinct_column] against allowed customer fields.
 * 9. [data.connect] - Connects to the SQLite database.
 * 10. [strings.concat] - Constructs the distinct SQL function.
 * 11. [remove-nodes] - Cleans up arguments after processing.
 * 12. [add] - Adds processed arguments to the query.
 * 13. [data.read] - Executes the SQL query to retrieve customer data.
 * 14. [return-nodes] - Returns the query results.
 */
hyper2lambda
   .arguments
      distinct_column:string
      limit:long
      offset:long
      order:string
      direction:string
      Customers.CustomerID.like:string
      Customers.CustomerID.mt:string
      Customers.CustomerID.lt:string
      Customers.CustomerID.mteq:string
      Customers.CustomerID.lteq:string
      Customers.CustomerID.neq:string
      Customers.CustomerID.eq:string
      Customers.CompanyName.like:string
      Customers.CompanyName.mt:string
      Customers.CompanyName.lt:string
      Customers.CompanyName.mteq:string
      Customers.CompanyName.lteq:string
      Customers.CompanyName.neq:string
      Customers.CompanyName.eq:string
      Customers.ContactName.like:string
      Customers.ContactName.mt:string
      Customers.ContactName.lt:string
      Customers.ContactName.mteq:string
      Customers.ContactName.lteq:string
      Customers.ContactName.neq:string
      Customers.ContactName.eq:string
      Customers.ContactTitle.like:string
      Customers.ContactTitle.mt:string
      Customers.ContactTitle.lt:string
      Customers.ContactTitle.mteq:string
      Customers.ContactTitle.lteq:string
      Customers.ContactTitle.neq:string
      Customers.ContactTitle.eq:string
      Customers.Address.like:string
      Customers.Address.mt:string
      Customers.Address.lt:string
      Customers.Address.mteq:string
      Customers.Address.lteq:string
      Customers.Address.neq:string
      Customers.Address.eq:string
      Customers.City.like:string
      Customers.City.mt:string
      Customers.City.lt:string
      Customers.City.mteq:string
      Customers.City.lteq:string
      Customers.City.neq:string
      Customers.City.eq:string
      Customers.Region.like:string
      Customers.Region.mt:string
      Customers.Region.lt:string
      Customers.Region.mteq:string
      Customers.Region.lteq:string
      Customers.Region.neq:string
      Customers.Region.eq:string
      Customers.PostalCode.like:string
      Customers.PostalCode.mt:string
      Customers.PostalCode.lt:string
      Customers.PostalCode.mteq:string
      Customers.PostalCode.lteq:string
      Customers.PostalCode.neq:string
      Customers.PostalCode.eq:string
      Customers.Country.like:string
      Customers.Country.mt:string
      Customers.Country.lt:string
      Customers.Country.mteq:string
      Customers.Country.lteq:string
      Customers.Country.neq:string
      Customers.Country.eq:string
      Customers.Phone.like:string
      Customers.Phone.mt:string
      Customers.Phone.lt:string
      Customers.Phone.mteq:string
      Customers.Phone.lteq:string
      Customers.Phone.neq:string
      Customers.Phone.eq:string
      Customers.Fax.like:string
      Customers.Fax.mt:string
      Customers.Fax.lt:string
      Customers.Fax.mteq:string
      Customers.Fax.lteq:string
      Customers.Fax.neq:string
      Customers.Fax.eq:string
   validators.mandatory:x:@.arguments/*/distinct_column
   validators.enum:x:@.arguments/*/distinct_column
      .:Customers.CustomerID
      .:Customers.CompanyName
      .:Customers.ContactName
      .:Customers.ContactTitle
      .:Customers.Address
      .:Customers.City
      .:Customers.Region
      .:Customers.PostalCode
      .:Customers.Country
      .:Customers.Phone
      .:Customers.Fax
   data.connect:[generic|northwind]
      database-type:sqlite
      set-name:x:./*/data.read/*/columns/*/distinct_functor
         strings.concat
            .:distinct(
            get-value:x:@.arguments/*/distinct_column
            .:)
      remove-nodes:x:@.arguments/*/distinct_column
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:Customers
         columns
            distinct_functor
               as:.
         where
            and
      return-nodes:x:@data.read/*/*
