
/*
 * This code uses a [switch] statement to determine the type of a value by comparing it against various [case] nodes. Each [case] corresponds to a potential type, and if a match is found, the [set-value] slot assigns a specific type to the [.type] node. If no [case] matches, the [default] case sets the [.type] node to "string". 
 * 
 * 1. [switch] - Evaluates the expression and matches it against the [case] nodes.
 * 2. [case] - Defines possible values to match against the evaluated expression.
 * 3. [set-value] - Assigns a type to the [.type] node based on the matched [case].
 * 4. [default] - Provides a fallback type assignment if no [case] matches.
 */
switch:x:@strings.to-lower
   case:int
   case:integer
   case:tinyint
   case:smallint
   case:mediumint
   case:bigint
   case:big int
   case:int 2
   case:int 8
      set-value:x:@.type
         .:long
   case:timestamp
   case:date
   case:datetime
      set-value:x:@.type
         .:date
   case:numeric
   case:decimal
      set-value:x:@.type
         .:decimal
   case:real
   case:double
   case:float
   case:double precision
      set-value:x:@.type
         .:double
   case:character
   case:varchar
   case:varying character
   case:nchar
   case:native character
   case:nvarchar
   case:text
   case:clob
   case:char
   case:blob sub_type text
      set-value:x:@.type
         .:string
   case:boolean
      set-value:x:@.type
         .:bool
   default
      set-value:x:@.type
         .:string
