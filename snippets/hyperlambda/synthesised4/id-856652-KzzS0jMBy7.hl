
// This Hyperlambda code generates an OpenAPI specification for HTTP endpoints, dynamically constructing the API documentation based on existing endpoints. It determines the scheme (HTTP or HTTPS) based on the request host and builds the base URL. The code iterates over the endpoints, filtering them based on type and path, and constructs the OpenAPI paths and operations, including parameters and request bodies. It handles both query parameters for GET and DELETE requests and JSON request bodies for other HTTP verbs, ensuring the OpenAPI document reflects the endpoints' capabilities and constraints.
hyper2lambda
   .arguments
      system:bool
      filter:string
   validators.default:x:@.arguments
      system:bool:false
   version
   .scheme
   request.host
   if
      strings.starts-with:x:@request.host
         .:"localhost:5000"
      .lambda
         set-value:x:@.scheme
            .:http
   else
      set-value:x:@.scheme
         .:https
   .base-url
   set-value:x:@.base-url
      strings.concat
         get-value:x:@.scheme
         .:"://"
         request.host
   unwrap:x:./*/.result/**
   .result
      openapi:3.1.0
      info
         title:AINIRO.IO Magic Cloud Cloudlet
         description:Interact with your cloudlet
         version:x:@version
      servers
         .
            url:x:@.base-url
      paths
   endpoints.list
   for-each:x:@endpoints.list/*
      if
         and
            neq:x:@.dp/#/*/type
               .:internal
            or
               eq:x:@.arguments/*/system
                  .:bool:true
               strings.starts-with:x:@.dp/#/*/path
                  .:magic/modules/
            or
               not-exists:x:@.arguments/*/filter
               null:x:@.arguments/*/filter
               strings.contains:x:@.dp/#/*/path
                  get-value:x:@.arguments/*/filter
         .lambda
            .exists:bool:false
            for-each:x:@.result/*/paths/*
               if
                  eq
                     get-name:x:@.dp/#
                     strings.concat
                        .:/
                        get-value:x:@for-each/@.dp/#/*/path
                  .lambda
                     set-value:x:@.exists
                        .:bool:true
            .buffer
               url
                  verb
                     operationId
                     description
            if
               and
                  exists:x:@.dp/#/*/description
                  mt
                     strings.length:x:@.dp/#/*/description
                     .:int:300
               .lambda
                  set-value:x:@.dp/#/*/description
                     strings.substring:x:@.dp/#/*/description
                        .:int:0
                        .:int:300
            set-value:x:@.buffer/*/url/*/verb/*/description
               get-value:x:@.dp/#/*/description
            set-name:x:@.buffer/*/url/*/verb
               get-value:x:@.dp/#/*/verb
            switch:x:@.dp/#/*/verb
               case:post
               case:put
               case:patch
                  unwrap:x:+/*/*/*
                  insert-after:x:@.buffer/*/*/*/operationId
                     .
                        consumes
                           .:x:@.dp/#/*/consumes
                        produces
                           .:application/json
            set-name:x:@.buffer/*/url
               strings.concat
                  .:/
                  get-value:x:@.dp/#/*/path
            strings.split:x:@.dp/#/*/path
               .:/
            set-value:x:@.buffer/*/*/*/operationId
               strings.concat
                  get-value:x:@.dp/#/*/verb
                  .:_
                  get-value:x:@strings.split/0/-/-
                  .:_
                  get-value:x:@strings.split/0/-
            if
               or
                  eq:x:@.dp/#/*/verb
                     .:get
                  eq:x:@.dp/#/*/verb
                     .:delete
               .lambda
                  add:x:@.buffer/*/*
                     .
                        parameters
                  for-each:x:@.dp/#/*/input/*
                     if
                        neq:x:@.dp/#/*/type
                           .:*
                        .lambda
                           .arg
                              name
                              in:query
                              schema
                                 type
                           set-value:x:@.arg/*/name
                              get-value:x:@.dp/#/*/name
                           switch:x:@.dp/#/*/type
                              case:short
                              case:ushort
                              case:int
                              case:uint
                              case:long
                              case:ulong
                                 set-value:x:@.arg/*/schema/*/type
                                    .:integer
                              case:float
                              case:double
                              case:decimal
                                 set-value:x:@.arg/*/schema/*/type
                                    .:number
                              case:bool
                                 set-value:x:@.arg/*/schema/*/type
                                    .:boolean
                              default
                                 set-value:x:@.arg/*/schema/*/type
                                    .:string
                           if
                              exists:x:@.dp/#/*/description
                              .lambda
                                 unwrap:x:+/*/*
                                 insert-after:x:@.arg/*/name
                                    .
                                       description:x:@.dp/#/*/description
                           add:x:+/*/*
                              get-nodes:x:@.arg/*
                           add:x:@.buffer/*/*/*/parameters
                              .
                                 .
            else
               .body
                  requestBody
                     content
                        application/json
                           schema
                              type:object
                              properties
               for-each:x:@.dp/#/*/input/*
                  if
                     not-exists:x:"@.body/*/requestBody/*/content/*/*/schema/*/properties/*/\"{@.dp/#/*/name}\""
                     .lambda
                        .prop
                           name
                              type
                        set-value:x:@.prop/*/*/type
                           get-value:x:@.dp/#/*/type
                        set-name:x:@.prop/*
                           get-value:x:@.dp/#/*/name
                        if
                           exists:x:@.dp/#/*/description
                           .lambda
                              unwrap:x:+/*/*
                              add:x:@.prop/*
                                 .
                                    description:x:@.dp/#/*/description
                        add:x:@.body/*/requestBody/*/content/*/*/schema/*/properties
                           get-nodes:x:@.prop/*
               if
                  exists:x:@.body/*/requestBody/*/content/*/*/schema/*/properties
                  .lambda
                     add:x:+/*
                        get-nodes:x:@.body/*
                     add:x:@.buffer/*/*
                        .
            if
               not-exists:x:@.buffer/*/*/*/parameters/*
               .lambda
                  remove-nodes:x:@.buffer/*/*/*/parameters
            if:x:@.exists
               strings.concat
                  .:/
                  get-value:x:@.dp/#/*/path
               add:x:@.result/*/paths/*/{@strings.concat}
                  get-nodes:x:@.buffer/*/*
            else
               add:x:+/*
                  get-nodes:x:@.buffer/*
               add:x:@.result/*/paths
                  .
   if
      not-exists:x:@.result/*/paths/*
      .lambda
         remove-nodes:x:@.result/*/paths
   return-nodes:x:@.result/*
