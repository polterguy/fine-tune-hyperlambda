
/*
 * // This Hyperlambda code connects to a SQLite database and dynamically constructs a SQL query based on provided arguments. It modifies the structure of the query by setting and removing nodes, inserting columns, and adding conditions. The code handles grouping, ordering, and aggregation functions to tailor the SQL query for specific data retrieval needs. It then executes a data read operation on the "Customers" table and returns the results.
 * // 1. [data.connect] - Connects to the specified SQLite database.
 * // 2. [database-type] - Specifies the type of database being used.
 * // 3. [set-name] - Sets the name of a node to the value of a specified argument.
 * // 4. [insert-before] - Inserts a node before a specified position in the node structure.
 * // 5. [set-value] - Sets the value of a node to the value of a specified argument.
 * // 6. [remove-nodes] - Removes nodes specified by an expression.
 * // 7. [add] - Adds nodes to a specified location in the node structure.
 * // 8. [strings.concat] - Concatenates strings to form a new value for a node.
 * // 9. [data.read] - Executes a data read operation on the specified table with the constructed query.
 * // 10. [return-nodes] - Returns the nodes resulting from the data read operation.
 */
data.connect:[generic|northwind]
   database-type:sqlite
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function
   remove-nodes:x:@.arguments/*/group_column
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Customers
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column
   return-nodes:x:@data.read/*
