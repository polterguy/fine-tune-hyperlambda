
/*
 * The provided Hyperlambda code processes an XML sitemap, extracting URLs and handling them based on specific conditions. It first trims the HTTP content, converts it to a lambda structure, and iterates over URL nodes. For each URL, it checks if the count of URLs is less than 10,000, then processes the URL by ensuring it has a proper HTTP/HTTPS prefix, and adds it to a list if it doesn't already exist. It also processes CDATA sections and handles sitemap indexes, invoking a signal to load additional sitemaps if necessary. The code ensures that the [has-sitemap] flag is set based on the presence of URLs. 
 * 
 * 1. [else] - Executes the block if previous conditions are false.
 * 2. [set-value] - Sets the value of [has-sitemap] to true.
 * 3. [strings.trim] - Trims whitespace from HTTP content.
 * 4. [xml2lambda] - Converts XML content to a lambda structure.
 * 5. [for-each] - Iterates over URL nodes in the lambda structure.
 * 6. [if] - Checks if the URL count is less than 10,000.
 * 7. [.url] - Declares a node for URL processing.
 * 8. [set-value] - Sets the URL value.
 * 9. [strings.starts-with] - Checks URL prefix.
 * 10. [strings.concat] - Concatenates domain and URL.
 * 11. [not-exists] - Checks if URL is not already in the list.
 * 12. [unwrap] - Evaluates expressions.
 * 13. [add] - Adds the URL to the list.
 * 14. [signal] - Invokes a signal to load additional sitemaps.
 * 15. [get-nodes] - Retrieves nodes from the signal.
 * 16. [eq] - Checks equality of conditions.
 * 17. [lt] - Checks if URL count is less than a threshold.
 */
else
   set-value:x:@.has-sitemap
      .:bool:true
   strings.trim:x:@http.get/*/content
   xml2lambda:x:@strings.trim
   for-each:x:"@xml2lambda/*/urlset/*/url/*/loc/*/\\#text"
      if
         lt
            get-count:x:@.urls/*
            .:int:10000
         .lambda
            .url
            set-value:x:@.url
               get-value:x:@.dp/#
            if
               and
                  not
                     strings.starts-with:x:@.dp/#
                        .:"http://"
                  not
                     strings.starts-with:x:@.dp/#
                        .:"https://"
               .lambda
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.domain
                        get-value:x:@.dp/#
            if
               not-exists:x:@.urls/*/={@.url}
               .lambda
                  unwrap:x:+/*/*
                  add:x:@.urls
                     .
                        .:x:@.url
   for-each:x:"@xml2lambda/*/urlset/*/url/*/loc/*/\\#cdata-section"
      if
         lt
            get-count:x:@.urls/*
            .:int:10000
         .lambda
            .url
            set-value:x:@.url
               get-value:x:@.dp/#
            if
               and
                  not
                     strings.starts-with:x:@.dp/#
                        .:"http://"
                  not
                     strings.starts-with:x:@.dp/#
                        .:"https://"
               .lambda
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.domain
                        get-value:x:@.dp/#
            if
               not-exists:x:@.urls/*/={@.url}
               .lambda
                  unwrap:x:+/*/*
                  add:x:@.urls
                     .
                        .:x:@.url
   for-each:x:"@xml2lambda/*/sitemapindex/*/sitemap/*/[0,25]/loc/*/\\#cdata-section"
      if
         lt
            get-count:x:@.urls/*
            .:int:10000
         .lambda
            add:x:./*/signal
               get-nodes:x:@.arguments/*/headers
            unwrap:x:+/**
            signal:magic.ai.load-sitemap
               max:int:10000
               feedback-channel:x:@.arguments/*/feedback-channel
               filter-on-url:x:@.arguments/*/filter-on-url
               sitemap
                  .:x:@.dp/#
            add:x:@.urls
               get-nodes:x:@signal/*/urls/*
            if
               and
                  eq:x:@signal/*/has-sitemap
                     .:bool:false
                  eq
                     get-count:x:@.urls/*
                     .:int:0
               .lambda
                  set-value:x:@.has-sitemap
                     .:bool:false
   for-each:x:"@xml2lambda/*/sitemapindex/*/sitemap/*/[0,25]/loc/*/\\#text"
      if
         lt
            get-count:x:@.urls/*
            .:int:10000
         .lambda
            unwrap:x:+/**
            signal:magic.ai.load-sitemap
               max:int:10000
               feedback-channel:x:@.arguments/*/feedback-channel
               filter-on-url:x:@.arguments/*/filter-on-url
               sitemap
                  .:x:@.dp/#
            add:x:@.urls
               get-nodes:x:@signal/*/urls/*
            if
               and
                  eq:x:@signal/*/has-sitemap
                     .:bool:false
                  eq
                     get-count:x:@.urls/*
                     .:int:0
               .lambda
                  set-value:x:@.has-sitemap
                     .:bool:false
