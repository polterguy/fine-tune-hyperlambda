
/*
 * This Hyperlambda code defines a dynamic slot [magic.modules.ensure-database] that ensures the existence of a specified database for a module. It first validates the presence of mandatory arguments [module] and [database], then determines the database type, defaulting to a configured value if not provided. The code constructs paths for the database creation script and migration scripts, and checks if the database exists. If not, it executes the creation script based on the database type, logging success or errors. If migration scripts exist, it executes them, logging the outcome, and returns a boolean indicating success or failure. 
 * 
 * 1. [slots.create] - Creates a new dynamic slot named "magic.modules.ensure-database".
 * 2. [validators.mandatory] - Ensures that the specified arguments are provided.
 * 3. [.result] - Initializes a boolean result node to true.
 * 4. [cache.clear] - Clears the cache.
 * 5. [.database-type] - Determines the database type.
 * 6. [unwrap] - Evaluates the previous node.
 * 7. [if] - Checks if the database type is null and sets a default if necessary.
 * 8. [.create-database-script] - Constructs the path for the database creation script.
 * 9. [.migration-script-folder] - Constructs the path for the migration script folder.
 * 10. [strings.concat] - Concatenates strings to form paths and signals.
 * 11. [signal] - Sends a signal to check if the database exists.
 * 12. [set-x] - Sets a node to indicate database existence.
 * 13. [try] - Attempts to load and execute the database creation script.
 * 14. [switch] - Executes the script based on the database type.
 * 15. [log.info] - Logs successful database creation.
 * 16. [.catch] - Catches errors during database creation and logs them.
 * 17. [return] - Returns true if no migration scripts exist.
 * 18. [io.file.list] - Lists files in the migration script folder.
 * 19. [for-each] - Iterates over each migration script.
 * 20. [strings.ends-with] - Checks if a file ends with ".sql".
 * 21. [data.connect] - Connects to the database to execute migration scripts.
 * 22. [log.error] - Logs errors during migration script execution.
 * 23. [set-value] - Updates the result node to false on error.
 * 24. [return] - Returns the final result.
 */
slots.create:magic.modules.ensure-database
   validators.mandatory:x:@.arguments/*/module
   validators.mandatory:x:@.arguments/*/database
   .result:bool:true
   cache.clear
   .database-type:x:@.arguments/*/database-type
   unwrap:x:-
   if
      null:x:@.database-type
      .lambda
         set-value:x:@.database-type
            config.get:"magic:databases:default"
   .create-database-script
   .migration-script-folder
   set-value:x:@.create-database-script
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/magic.startup/
         get-value:x:@.arguments/*/module
         .:.
         get-value:x:@.database-type
         .:.sql
   set-value:x:@.migration-script-folder
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/magic.startup/db-migrations/
         get-value:x:@.database-type
         .:/
   strings.concat
      .:magic.db.
      get-value:x:@.database-type
      .:.databases
   signal:x:-
   strings.concat
      .:@signal/*/*/db/=
      get-value:x:@.arguments/*/database
   set-x:x:+/*/*/exists
      convert:x:@strings.concat
         type:x
   if
      not
         exists
      .lambda
         try
            io.file.load:x:@.create-database-script
            switch:x:@.database-type
               case:mysql
                  mysql.connect:sys
                     mysql.execute:x:@io.file.load
               case:pgsql
                  pgsql.connect:postgres
                     strings.concat
                        .:"create database "
                        get-value:x:@.arguments/*/database
                     pgsql.execute:x:-
                        database:x:@.arguments/*/database
                  pgsql.connect:x:@.arguments/*/database
                     pgsql.execute:x:@io.file.load
               case:mssql
                  mssql.connect:master
                     mssql.execute-batch:x:@io.file.load
               case:sqlite
                  strings.concat
                     .:/data/
                     get-value:x:@.arguments/*/database
                     .:.db
                  io.file.save:x:-
                     .:
                  sqlite.connect:x:@.arguments/*/database
                     sqlite.execute:x:@io.file.load
            log.info:Successfully created database
               database_name:x:@.arguments/*/database
         .catch
            log.error:Something went wrong when creating database
               database:x:@.arguments/@.arguments/*/database
               script:x:@.create-database-script
               error:x:@.arguments/*/message
   if
      not
         io.folder.exists:x:@.migration-script-folder
      .lambda
         return:bool:true
   io.file.list:x:@.migration-script-folder
   for-each:x:@io.file.list/*
      if
         strings.ends-with:x:@.dp/#
            .:.sql
         .lambda
            io.file.load:x:@.dp/#
            try
               data.connect:x:@.arguments/*/database
                  if
                     eq
                        get-value:x:@.database-type
                        .:mssql
                     .lambda
                        set-name:x:@data.connect/*/data.execute
                           .:mssql.execute-batch
                  data.execute:x:@io.file.load
                  log.info:Database migration script successfully executed
                     script:x:@.dp/#
            .catch
               log.error:Something went wrong as we tried to execute plugin database migration script
                  script:x:@.dp/#
                  error:x:@.arguments/*/message
               set-value:x:@.result
                  .:bool:false
   return
