
// This Hyperlambda code snippet demonstrates how to perform a complex SQL query using the [data.read] slot, specifically targeting a SQLite database. The code is structured to read data from the "Appointments" table and includes left joins with the "Patients" and "Doctors" tables. The joins are specified using the [join] slot, where each join includes a [type] of "left" and an [on] condition that matches the "PatientID" and "DoctorID" fields across the tables. The [columns] slot specifies the selection of columns, including an aggregate function labeled as "aggregate_functor" with an alias "result". The [where] clause is present but currently empty, suggesting a placeholder for future conditions. The [group] slot is used to group the results by a specified "group_column". Finally, the [return-nodes] slot is used to return all nodes from the [data.read] operation, effectively retrieving the results of the SQL query. This setup is useful for generating complex SQL queries with joins and aggregations in a Hyperlambda environment.
data.read
   database-type:sqlite
   table:Appointments
      join:Patients
         as:PatientID
         type:left
         on
            and
               Appointments.PatientID:PatientID.PatientID
      join:Doctors
         as:DoctorID
         type:left
         on
            and
               Appointments.DoctorID:DoctorID.DoctorID
   columns
      aggregate_functor
         as:result
   where
      and
   group
      group_column
return-nodes:x:@data.read/*
