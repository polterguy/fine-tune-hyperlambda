
// This Hyperlambda code connects to a SQLite database and performs a data read operation on the "Treatments" table, joining it with the "Patients" table using a left join. It dynamically constructs a distinct SQL function based on a provided column, and appends additional query parameters like limit, offset, order, and direction from arguments. The code then removes these parameters from the arguments and adds them to the query, ensuring the final read operation is executed with the specified conditions. The result of the read operation is returned.
data.connect:[generic|hospital]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Treatments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Treatments.PatientID:PatientID.PatientID
      columns
         distinct_functor
            as:.
      where
         and
   return-nodes:x:@data.read/*/*
