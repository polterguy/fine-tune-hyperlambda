
/*
 * This Hyperlambda code connects to a SQLite database, dynamically adds conditions to a delete operation on the "Artist" table, and returns the number of affected rows. The [data.connect] slot establishes the database connection, [add] dynamically appends conditions to the [data.delete] operation, and [unwrap] evaluates the expressions. Finally, [return] provides the number of rows affected by the delete operation.
 * 
 * 1. [data.connect] - Connects to a SQLite database.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [add] - Dynamically adds nodes to the delete operation's where clause.
 * 4. [get-nodes] - Retrieves nodes from the arguments to be added.
 * 5. [data.delete] - Deletes records from the "Artist" table.
 * 6. [table] - Specifies the table name as "Artist".
 * 7. [where] - Initializes the where clause for the delete operation.
 * 8. [and] - Logical AND for combining conditions.
 * 9. [unwrap] - Evaluates the expressions in the delete operation.
 * 10. [return] - Returns the number of affected rows from the delete operation.
 * 11. [affected] - Retrieves the number of affected rows from the delete operation.
 */
data.connect:[generic|chinook]
   database-type:sqlite
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*
   data.delete
      database-type:sqlite
      table:Artist
      where
         and
   unwrap:x:+/*
   return
      affected:x:@data.delete
