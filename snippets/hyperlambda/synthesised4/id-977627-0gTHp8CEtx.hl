
/*
 * This Hyperlambda code initiates a database transaction to ensure atomicity in operations. It first inserts a new record into the "orders" table with specified values, then updates the "products" table to modify the stock of a specific product. Finally, it commits the transaction to save these changes permanently. The transaction ensures that both operations are completed successfully or rolled back if any issue arises. 
 * 
 * 1. [data.transaction.create] - Begins a new database transaction.
 * 2. [data.create] - Inserts a new record into the "orders" table.
 * 3. [table] - Specifies the "orders" table for the insert operation.
 * 4. [values] - Contains the data to be inserted into the "orders" table.
 * 5. [customer_id] - Sets the customer ID for the new order.
 * 6. [total] - Sets the total amount for the new order.
 * 7. [data.update] - Updates a record in the "products" table.
 * 8. [table] - Specifies the "products" table for the update operation.
 * 9. [values] - Contains the data to be updated in the "products" table.
 * 10. [stock] - Updates the stock quantity for a product.
 * 11. [where] - Specifies the condition for the update operation.
 * 12. [and] - Combines conditions for the update operation.
 * 13. [product_id] - Specifies the product to update.
 * 14. [data.transaction.commit] - Commits the transaction, saving all changes.
 */
data.transaction.create
   data.create
      table:orders
      values
         customer_id:42
         total:100.00
   data.update
      table:products
      values
         stock:long:50
      where
         and
            product_id:123
   data.transaction.commit
