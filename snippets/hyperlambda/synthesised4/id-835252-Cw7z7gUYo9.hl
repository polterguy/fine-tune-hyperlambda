
/*
 * This Hyperlambda code connects to a database and performs a SQL query with dynamic conditions and parameters. It calculates the time taken for the query execution and formats it. The code uses [data.connect] to establish a connection, [data.select] to execute a SQL query, and [math.subtract] to calculate thresholds. It conditionally modifies the query based on input arguments and formats the execution time using [time.format]. The results are returned with execution time and snippets.
 * 
 * 1. [data.connect] - Establishes a connection to the database.
 * 2. [if] - Checks conditions to modify the SQL query prefix.
 * 3. [set-value] - Sets values for nodes, including timestamps and formatted time.
 * 4. [math.subtract] - Calculates threshold and time differences.
 * 5. [strings.concat] - Constructs the SQL query string.
 * 6. [data.select] - Executes the SQL query.
 * 7. [unwrap] - Evaluates and returns nodes.
 * 8. [return] - Returns the execution time and query results.
 */
data.connect:[generic|magic]
   .prefix-url:"ts.uri is not null and "
   if
      and
         exists:x:@.arguments/*/prefix-url
         not-null:x:@.arguments/*/prefix-url
         neq:x:@.arguments/*/prefix-url
            .:
      .lambda
         set-value:x:@.prefix-url
            .:"ts.uri like @prefix and "
         add:x:@data.connect/*/data.select
            .
               @prefix:x:@.arguments/*/prefix-url
   .begin
   set-value:x:@.begin
      date.now
   floatArray2bytes:x:@http.post/*/content/*/data/0/*/embedding/*
   math.subtract
      .:float:1
      get-value:x:@.arguments/*/threshold
   strings.concat
      .:"\nselect vss.distance, ts.prompt, ts.uri\n\tfrom vss_ml_training_snippets as vss\n    \tinner join ml_training_snippets ts on ts.id = vss.rowid\n   where\n      ts.type = @type and "
      get-value:x:@.prefix-url
      .:"vss_search(vss.embedding_vss, @embedding) and\n       vss.distance < @threshold\ngroup by ts.uri\norder by vss.distance\nlimit @limit"
   data.select:x:@strings.concat
      @embedding:x:@floatArray2bytes
      @type:x:@.arguments/*/type
      @threshold:x:@math.subtract
      @limit:x:@.arguments/*/max
   .end
   set-value:x:@.end
      date.now
   .time
   set-value:x:@.time
      math.subtract
         get-value:x:@.end
         get-value:x:@.begin
   set-value:x:@.time
      time.format:x:@.time
         format:"ss\\.fff"
   if
      not-exists:x:@data.select/*
      .lambda
         remove-nodes:x:../*/return/*/snippets
   else
      add:x:@data.connect/*/return/*/snippets
         get-nodes:x:@data.select/*
   unwrap:x:./*/return/*
   return
      db_time:x:@.time
      snippets
