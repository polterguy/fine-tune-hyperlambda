
// This Hyperlambda code connects to a SQLite database and performs a read operation on the "opportunities" table, joining it with the "clients" table using a left join. It constructs a distinct count SQL function for a specified column and removes the original distinct column argument. The code also appends additional conditions from arguments to the where clause and returns the results of the data read operation. The slots used are: [data.connect], [database-type], [set-name], [strings.concat], [remove-nodes], [add], [data.read], [join], [as], [type], [on], [columns], [distinct_functor], [as], [where], [and], [return-nodes].
data.connect:[generic|crm]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:opportunities
         join:clients
            as:client_id
            type:left
            on
               and
                  opportunities.client_id:client_id.client_id
      columns
         distinct_functor
            as:count
      where
         and
   return-nodes:x:@data.read/*/*
