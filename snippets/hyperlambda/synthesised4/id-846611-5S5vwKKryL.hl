
// This Hyperlambda code defines an endpoint that processes SQL queries to retrieve aggregated data from a "Doctors" table. It validates mandatory arguments, including group and aggregate columns, and ensures correct values using enumerations. The code sets HTTP response headers, verifies user authentication, and establishes a database connection. It constructs a SQL query with dynamic grouping, ordering, and aggregation based on input parameters, and returns the query results. Key slots include [validators.mandatory], [validators.enum], [auth.ticket.verify], [data.connect], and [data.read].
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      Doctors.DoctorID.eq:long
      Doctors.FirstName.like:string
      Doctors.FirstName.eq:string
      Doctors.LastName.like:string
      Doctors.LastName.eq:string
      Doctors.Specialty.like:string
      Doctors.Specialty.eq:string
      Doctors.PhoneNumber.like:string
      Doctors.PhoneNumber.eq:string
      Doctors.Email.like:string
      Doctors.Email.eq:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:Doctors.DoctorID
      .:Doctors.FirstName
      .:Doctors.LastName
      .:Doctors.Specialty
      .:Doctors.PhoneNumber
      .:Doctors.Email
   validators.enum:x:@.arguments/*/aggregate_column
      .:Doctors.DoctorID
      .:Doctors.FirstName
      .:Doctors.LastName
      .:Doctors.Specialty
      .:Doctors.PhoneNumber
      .:Doctors.Email
   response.headers.set
      Cache-Control:public, max-age=300
   auth.ticket.verify:admin,guest,root
   data.connect:[generic|hospital]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:Doctors
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
