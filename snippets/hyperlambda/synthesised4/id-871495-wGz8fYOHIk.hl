
/*
 * Connects to a SQLite database named "hospital" and performs a SQL read operation on the "Medications" table, joining it with the "Patients" table using a left join on "PatientID". It constructs a "count(distinct ...)" SQL function dynamically based on an input column, removes the original distinct column argument, and appends additional conditions from the input arguments to the "where" clause. Finally, it returns the result of the read operation. 
 * 
 * 1. [data.connect] - Connects to the SQLite database.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [set-name] - Constructs a "count(distinct ...)" SQL function dynamically.
 * 4. [remove-nodes] - Removes the original distinct column argument.
 * 5. [add] - Appends additional conditions to the "where" clause.
 * 6. [data.read] - Performs a SQL read operation.
 * 7. [table] - Specifies the table "Medications" and joins with "Patients".
 * 8. [join] - Performs a left join on "PatientID".
 * 9. [columns] - Specifies the columns to select, including the distinct function.
 * 10. [where] - Specifies the "where" clause conditions.
 * 11. [return-nodes] - Returns the result of the read operation.
 */
data.connect:[generic|hospital]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Medications
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Medications.PatientID:PatientID.PatientID
      columns
         distinct_functor
            as:count
      where
         and
   return-nodes:x:@data.read/*/*
