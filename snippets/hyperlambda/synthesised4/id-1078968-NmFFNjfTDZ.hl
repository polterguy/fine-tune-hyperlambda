
/*
 * 1. `.`: This iterator retrieves the parent node of the current node. It is used to move one level up in the hierarchy from the current node position.
 * 
 * 2. `*`: This iterator retrieves all children nodes of its previous result set. After moving up to the parent node, it will select all of its children nodes.
 * 
 * 3. `signal`: This iterator filters the previous result set to include only nodes with the name "signal". It narrows down the selection to nodes specifically named "signal" among the children of the parent node.
 * 
 * 4. `*`: Again, this iterator retrieves all children nodes of the nodes selected by the previous "signal" iterator. It moves one level down to include all children of the "signal" nodes.
 * 
 * 5. `type`: This iterator filters the previous result set to include only nodes with the name "type". It selects nodes specifically named "type" among the children of the "signal" nodes.
 * 
 * Use Cases:
 * - This expression can be used to extract the "type" information from all "signal" nodes that are children of the parent node of the current context. It is useful in scenarios where you need to process or analyze the "type" attributes of signal-related data structures within a hierarchical node setup.
 */

.:x:./*/signal/*/type