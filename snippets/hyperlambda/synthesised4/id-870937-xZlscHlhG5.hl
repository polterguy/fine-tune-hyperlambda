
// The code iterates over nodes within a specified range and performs conditional checks to manipulate node names and values. It uses [for-each] to loop through nodes, applying conditions with [if] and [neq] to determine actions. The code modifies node names and types using [set-value] and [set-name], and appends nodes to a collection with [add]. It also uses [unwrap] to evaluate expressions, ensuring the correct node structure is maintained.
for-each:x:@hyper2lambda/*/.arguments/*/[0,100]
   if
      neq
         get-name:x:@.dp/#
         .:..
      .lambda
         if
            exists:x:@.arguments/*/path
            .lambda
               set-value:x:+/+/*/*/*/name
                  get-name:x:@.dp/#
               set-value:x:+/*/*/*/type
                  get-value:x:@.dp/#
               add:x:../*/return-nodes/*/args
                  .
                     .
                        name
                        type
               if
                  eq
                     get-name:x:@.dp/#/-
                     .:..
                  .lambda
                     unwrap:x:+/*/*
                     add:x:../*/return-nodes/*/args/0/-
                        .
                           description:x:@.dp/#/-
         else
            set-name:x:+/+/*/*
               get-name:x:@.dp/#
            unwrap:x:+/*/*
            add:x:../*/return-nodes/*/args
               .
                  name:x:@.dp/#
