
/*
 * This Hyperlambda code connects to a SQLite database and performs a data read operation on the "activities" table, joining it with the "clients" table using a left join. It dynamically constructs a distinct column function using a specified column, modifies the query by adding or removing nodes related to limit, offset, order, and direction, and finally returns the results of the read operation. The code is structured to handle arguments for distinct column selection and query customization. 
 * 
 * 1. [data.connect] - Opens a connection to a SQLite database.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [set-name] - Constructs a distinct function for a specified column.
 * 4. [remove-nodes] - Removes nodes related to distinct column, order, direction, limit, and offset from arguments.
 * 5. [add] - Adds limit, offset, order, and direction nodes to the data read operation.
 * 6. [data.read] - Reads data from the "activities" table with a left join on "clients".
 * 7. [columns] - Specifies the columns to select, using the constructed distinct function.
 * 8. [where] - Specifies conditions for filtering the data.
 * 9. [return-nodes] - Returns the results of the data read operation.
 */
data.connect:[generic|crm]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:activities
         join:clients
            as:client_id
            type:left
            on
               and
                  activities.client_id:client_id.client_id
      columns
         distinct_functor
            as:.
      where
         and
   return-nodes:x:@data.read/*/*
