
/*
 * This Hyperlambda code processes a result string to identify and handle function invocations, incrementing a counter for each invocation. It splits the result string and iterates through each part, checking for specific function invocation patterns. If a function invocation is detected, it attempts to execute the function, handling errors and signaling results through a session. It also checks for excessive function invocations and large results, logging errors and signaling appropriate responses. The code constructs a new prompt based on the execution results or errors encountered.
 * 
 * 1. [if] - Checks if the result contains specific markers indicating function invocations.
 * 2. [and] - Combines multiple conditions to check for specific substrings in the result.
 * 3. [strings.contains] - Checks if the result contains a specific substring.
 * 4. [.lambda] - Executes if the conditions are true.
 * 5. [if] - Checks if the invocation counter is zero.
 * 6. [math.increment] - Increments the invocation counter.
 * 7. [strings.split] - Splits the result string by a specific delimiter.
 * 8. [for-each] - Iterates through each split part of the result.
 * 9. [if] - Checks if a part contains a function invocation pattern.
 * 10. [.lambda] - Executes if a function invocation is detected.
 * 11. [try] - Attempts to execute the function invocation.
 * 12. [if] - Checks if the number of iterations is less than or equal to one.
 * 13. [log.error] - Logs an error message for too many function invocations.
 * 14. [sockets.signal] - Sends a signal with error details through a session.
 * 15. [else] - Executes if the iteration count is acceptable.
 * 16. [execute] - Invokes a function using specified parameters.
 * 17. [lambda2json] - Converts the function result to JSON format.
 * 18. [if] - Checks if the JSON result exceeds the maximum token limit.
 * 19. [throw] - Throws an error if the result is too large.
 * 20. [config.get] - Retrieves a success message from the configuration.
 * 21. [unwrap] - Evaluates and processes the configuration result.
 * 22. [sockets.signal] - Sends a signal with the function result through a session.
 * 23. [if] - Checks if the function execution returned a result.
 * 24. [set-value] - Updates the new prompt with the function response.
 * 25. [strings.concat] - Concatenates strings to form the new prompt.
 * 26. [else] - Executes if no result was returned from the function.
 * 27. [set-value] - Updates the new prompt with a success message.
 * 28. [.catch] - Handles exceptions during function execution.
 * 29. [log.error] - Logs an error message for function execution failure.
 * 30. [unwrap] - Processes the exception message.
 * 31. [sockets.signal] - Sends a signal with the error message through a session.
 * 32. [set-value] - Updates the new prompt with the exception message.
 * 33. [strings.trim] - Trims whitespace from the new prompt.
 */
if
   and
      strings.contains:x:@.result
         .:___
      strings.contains:x:@.result
         .:FUNCTION_INVOCATION[
   .lambda
      if
         eq:x:@.no-invocation
            .:int:0
         .lambda
            math.increment:x:@.no-invocation
      strings.split:x:@.result
         .:___
      for-each:x:@strings.split/*
         if
            strings.contains:x:@.dp/#
               .:FUNCTION_INVOCATION[/
            .lambda
               try
                  if
                     lte:x:@.iterations
                        .:int:1
                     .lambda
                        log.error:Too many function invocations
                        sockets.signal:x:@.session
                           args
                              function_error:Too many function invocations
                        sockets.signal:x:@.session
                           args
                              function_waiting:bool:false
                        sockets.signal:x:@.session
                           args
                              error:bool:true
                              status:int:500
                              message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                        sockets.signal:x:@.session
                           args
                              finished:bool:true
                  else
                     execute:magic.ai.functions.invoke
                        type:x:@.type
                        session:x:@.session
                        user-id:x:@.user-id
                        invocation:x:@.dp/#
                     lambda2json:x:@execute/*/result/*
                        format:true
                     if
                        mt
                           openai.tokenize:x:@lambda2json
                           get-value:x:@.arguments/@.arguments/*/max_context_tokens
                        .lambda
                           throw:Result too large, try to limit your result
                              status:int:400
                              public:bool:true
                     config.get:"magic:chat:functions:success-message"
                        .:Success!
                     unwrap:x:+/*/*
                     sockets.signal:x:@.session
                        args
                           function_result:x:@config.get
                           invocation:x:@execute/*/json
                           file:x:@execute/*/workflow
                     if
                        exists:x:@execute/*/result/*
                        .lambda
                           set-value:x:@.new-prompt
                              strings.concat
                                 get-value:x:@.new-prompt
                                 .:"Response from '"
                                 get-value:x:@execute/*/workflow
                                 .:@"' was:
```json
"
                                 get-value:x:@lambda2json
                                 .:@"
"
                                 .:```
                                 .:@"
"
                                 .:@"
"
                           set-value:x:@.function-result
                              get-value:x:@lambda2json
                     else
                        set-value:x:@.new-prompt
                           strings.concat
                              get-value:x:@.new-prompt
                              .:"Invocation of '"
                              get-value:x:@execute/*/workflow
                              .:"' was a success."
                              .:@"
"
                              .:@"
"
               .catch
                  log.error:Could not execute AI function
                     message:x:@.arguments/*/message
                  unwrap:x:+/*/*
                  sockets.signal:x:@.session
                     args
                        function_error:x:@.arguments/*/message
                  set-value:x:@.new-prompt
                     strings.concat
                        get-value:x:@.new-prompt
                        .:"Invocation failed, exception message was: '"
                        get-value:x:@.arguments/*/message
                        .:"'"
                        .:@"
"
                        .:@"
"
      set-value:x:@.new-prompt
         strings.trim:x:@.new-prompt
