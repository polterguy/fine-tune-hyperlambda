
/*
 * This Hyperlambda code defines a dynamic slot named "magic.ai.url.scrape" that scrapes a specified URL for training snippets, processes them, and stores them in a database. The process involves validating input arguments, sending HTTP requests to retrieve and extract HTML content, and optionally summarizing large snippets using OpenAI's API. It also handles feedback through a specified feedback channel and manages database operations for storing or updating snippets. Error handling is included to manage failures during the scraping or summarization process.
 * 
 * 1. [slots.create] - Creates a dynamic slot named "magic.ai.url.scrape".
 * 2. [validators.mandatory] - Ensures that the "url" and "type" arguments are provided.
 * 3. [validators.url] - Validates that the "url" argument is a valid URL.
 * 4. [validators.default] - Sets default values for optional arguments like "summarize", "images", "lists", and "code".
 * 5. [.msg] - Initializes a message node for feedback.
 * 6. [set-value] - Sets the value of the message node to indicate the start of scraping.
 * 7. [unwrap] - Evaluates expressions to prepare for the next steps.
 * 8. [sockets.signal] - Sends a signal through the feedback channel with the current status.
 * 9. [sleep] - Pauses execution for a specified time.
 * 10. [try] - Begins a try block for error handling.
 * 11. [.html] - Initializes a node for storing HTML content.
 * 12. [add] - Adds nodes for headers and feedback channel to the HTML node.
 * 13. [unwrap] - Evaluates expressions for the HTML node.
 * 14. [signal] - Sends a signal to retrieve the URL content.
 * 15. [set-value] - Stores the retrieved HTML content.
 * 16. [unwrap] - Evaluates expressions for the HTML content.
 * 17. [signal] - Sends a signal to extract data from the HTML content.
 * 18. [.urls] - Initializes a node for storing URLs.
 * 19. [add] - Adds extracted URLs to the URLs node.
 * 20. [if] - Checks if any snippets were found.
 * 21. [mt] - Checks if the count of snippets is greater than zero.
 * 22. [.lambda] - Executes a lambda block if snippets are found.
 * 23. [get-count] - Retrieves the count of snippets.
 * 24. [strings.concat] - Concatenates strings for feedback messages.
 * 25. [unwrap] - Evaluates expressions for feedback messages.
 * 26. [sockets.signal] - Sends a signal with the feedback message.
 * 27. [sleep] - Pauses execution for a specified time.
 * 28. [.snippets] - Initializes a node for storing snippets.
 * 29. [add] - Adds extracted snippets to the snippets node.
 * 30. [if] - Checks if no snippets were found.
 * 31. [eq] - Checks if the count of snippets is zero.
 * 32. [.lambda] - Executes a lambda block if no snippets are found.
 * 33. [sockets.signal] - Sends a warning signal through the feedback channel.
 * 34. [sleep] - Pauses execution for a specified time.
 * 35. [else] - Executes if snippets are found.
 * 36. [if] - Checks if summarization is required.
 * 37. [and] - Combines multiple conditions.
 * 38. [exists] - Checks if the "summarize" argument exists.
 * 39. [eq] - Checks if the "summarize" argument is true.
 * 40. [.lambda] - Executes a lambda block for summarization.
 * 41. [.max-size] - Initializes a node for storing max size.
 * 42. [.api-key] - Initializes a node for storing API key.
 * 43. [.model] - Initializes a node for storing model information.
 * 44. [data.connect] - Connects to a database.
 * 45. [data.read] - Reads data from the database.
 * 46. [table] - Specifies the table to read from.
 * 47. [columns] - Specifies the columns to read.
 * 48. [where] - Specifies the conditions for reading data.
 * 49. [and] - Combines multiple conditions.
 * 50. [type.eq] - Checks if the type matches the argument.
 * 51. [set-value] - Sets the value of max size.
 * 52. [math.multiply] - Multiplies values to calculate max size.
 * 53. [convert] - Converts data types.
 * 54. [set-value] - Sets the value of API key.
 * 55. [get-value] - Retrieves values from nodes.
 * 56. [set-value] - Sets the value of the model.
 * 57. [for-each] - Iterates over snippets.
 * 58. [.tmp] - Initializes a temporary node.
 * 59. [set-value] - Sets the value of the temporary node.
 * 60. [strings.concat] - Concatenates strings for temporary storage.
 * 61. [get-value] - Retrieves values for concatenation.
 * 62. [if] - Checks if the snippet size exceeds max size.
 * 63. [mt] - Checks if the token count is greater than max size.
 * 64. [openai.tokenize] - Calculates token count for a snippet.
 * 65. [.lambda] - Executes a lambda block for summarization.
 * 66. [sockets.signal] - Sends a signal with a summarization message.
 * 67. [sleep] - Pauses execution for a specified time.
 * 68. [.token] - Initializes a node for storing token.
 * 69. [set-value] - Sets the value of the token.
 * 70. [strings.concat] - Concatenates strings for token creation.
 * 71. [get-first-value] - Retrieves the first value from nodes.
 * 72. [.no] - Initializes a node for retry count.
 * 73. [while] - Loops while a condition is true.
 * 74. [mt] - Checks if retry count is greater than zero.
 * 75. [.lambda] - Executes a lambda block for retries.
 * 76. [try] - Begins a try block for error handling.
 * 77. [unwrap] - Evaluates expressions for retries.
 * 78. [http.post] - Sends a POST request to OpenAI API.
 * 79. [headers] - Specifies headers for the request.
 * 80. [Authorization] - Sets the authorization header.
 * 81. [Content-Type] - Sets the content type header.
 * 82. [payload] - Specifies the payload for the request.
 * 83. [model] - Specifies the model for the request.
 * 84. [max_tokens] - Specifies the max tokens for the request.
 * 85. [temperature] - Specifies the temperature for the request.
 * 86. [messages] - Specifies the messages for the request.
 * 87. [convert] - Converts the response to a specific format.
 * 88. [if] - Checks the response status code.
 * 89. [eq] - Checks if the status code is 400.
 * 90. [.lambda] - Executes a lambda block for error handling.
 * 91. [sockets.signal] - Sends a warning signal for errors.
 * 92. [sleep] - Pauses execution for a specified time.
 * 93. [lambda2hyper] - Converts lambda to Hyperlambda.
 * 94. [log.error] - Logs an error message.
 * 95. [set-value] - Sets the retry count to zero.
 * 96. [else-if] - Checks if the status code is between 200 and 300.
 * 
 */
slots.create:magic.ai.url.scrape
   validators.mandatory:x:@.arguments/*/url
   validators.mandatory:x:@.arguments/*/type
   validators.url:x:@.arguments/*/url
   validators.default:x:@.arguments
      summarize:bool:true
      images:bool:true
      lists:bool:true
      code:bool:true
   .msg
   set-value:x:@.msg
      strings.concat
         .:"Scraping "
         get-value:x:@.arguments/*/url
   unwrap:x:+/**
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:x:@.msg
         type:info
   sleep:100
   try
      .html
      add:x:+/+
         get-nodes:x:@.arguments/*/headers
         get-nodes:x:@.arguments/*/feedback-channel
      unwrap:x:+/*
      signal:magic.ai.url.get
         url:x:@.arguments/*/url
      set-value:x:@.html
         get-value:x:@signal
      unwrap:x:+/*
      signal:magic.ai.html.extract
         html:x:@.html
         url:x:@.arguments/*/url
         feedback-channel:x:@.arguments/*/feedback-channel
         images:x:@.arguments/*/images
         lists:x:@.arguments/*/lists
         code:x:@.arguments/*/code
      .urls
      add:x:@.urls
         get-nodes:x:@signal/*/urls/*
      if
         mt
            get-count:x:@signal/*/snippets/*
            .:int:0
         .lambda
            get-count:x:@signal/*/snippets/*
            strings.concat
               .:"Found "
               get-count:x:@signal/*/snippets/*
               .:" training snippets on page"
            unwrap:x:+/**
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:x:@strings.concat
                  type:info
            sleep:100
      .snippets
      add:x:@.snippets
         get-nodes:x:@signal/*/snippets/*
      if
         eq
            get-count:x:@.snippets/*
            .:int:0
         .lambda
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:WARNING! We could not find any training snippets at the specified URL!
                  type:warning
            sleep:100
      else
         if
            and
               exists:x:@.arguments/*/summarize
               eq:x:@.arguments/*/summarize
                  .:bool:true
            .lambda
               .max-size
               .api-key
               .model
               data.connect:[generic|magic]
                  data.read
                     table:ml_types
                     columns
                        max_context_tokens
                        api_key
                        model
                     where
                        and
                           type.eq:x:@.arguments/*/type
                  set-value:x:@.max-size
                     math.multiply
                        convert:x:@data.read/*/*/max_context_tokens
                           type:decimal
                        .:decimal:0.8
                  set-value:x:@.max-size
                     convert:x:@.max-size
                        type:int
                  set-value:x:@.api-key
                     get-value:x:@data.read/*/*/api_key
                  set-value:x:@.model
                     get-value:x:@data.read/*/*/model
               for-each:x:@.snippets/*
                  .tmp
                  set-value:x:@.tmp
                     strings.concat
                        get-value:x:@.dp/#/*/prompt
                        .:@"
"
                        .:@"
"
                        get-value:x:@.dp/#/*/completion
                  if
                     mt
                        openai.tokenize:x:@.tmp
                        get-value:x:@.max-size
                     .lambda
                        sockets.signal:x:@.arguments/*/feedback-channel
                           args
                              message:Summarizing snippet since it is larger than 80% of maximum context size for type
                              type:info
                        sleep:100
                        .token
                        set-value:x:@.token
                           strings.concat
                              .:"Bearer "
                              get-first-value
                                 get-value:x:@.api-key
                                 config.get:"magic:openai:key"
                        .no:int:3
                        while
                           mt:x:@.no
                              .:int:0
                           .lambda
                              try
                                 unwrap:x:+/**
                                 http.post:"https://api.openai.com/v1/chat/completions"
                                    headers
                                       Authorization:x:@.token
                                       Content-Type:application/json
                                    payload
                                       model:x:@.model
                                       max_tokens:x:@.max-size
                                       temperature:decimal:0.3
                                       messages
                                          .
                                             role:system
                                             content:Create a summary of the following information
                                          .
                                             role:user
                                             content:x:@.dp/#/*/completion
                                    convert:true
                                 if
                                    eq:x:@http.post
                                       .:int:400
                                    .lambda
                                       sockets.signal:x:@.arguments/*/feedback-channel
                                          args
                                             message:Could not summarize snippet, check your log for details
                                             type:warning
                                       sleep:100
                                       lambda2hyper:x:@http.post
                                       log.error:Something went wrong while invoking OpenAI
                                          message:x:@http.post/*/content/*/error/*/message
                                          status:x:@http.post
                                          error:x:@lambda2hyper
                                       set-value:x:@.no
                                          .:int:0
                                 else-if
                                    and
                                       mte:x:@http.post
                                          .:int:200
                                       lt:x:@http.post
                                          .:int:300
                                    .lambda
                                       sockets.signal:x:@.arguments/*/feedback-channel
                                          args
                                             message:Successfully created summary of snippet
                                             type:info
                                       sleep:100
                                       set-value:x:@.dp/#/*/completion
                                          strings.trim:x:@http.post/*/content/*/choices/0/*/message/*/content
                                             .:@"
	 "
                                       set-value:x:@.dp/#/*/prompt
                                          strings.concat
                                             .:"Summary; "
                                             strings.substring:x:@.dp/#/*/prompt
                                                .:int:0
                                                .:int:150
                                       set-value:x:@.no
                                          .:int:0
                                 else
                                    sockets.signal:x:@.arguments/*/feedback-channel
                                       args
                                          message:Could not summarize snippet, check your log for details. Trying again in 3 seconds.
                                          type:warning
                                    sleep:3000
                                    lambda2hyper:x:@http.post
                                    log.error:Something went wrong while invoking OpenAI
                                       message:x:@http.post/*/content/*/error/*/message
                                       status:x:@http.post
                                       error:x:@lambda2hyper
                                    math.decrement:x:@.no
                              .catch
                                 math.decrement:x:@.no
         .below-threshold:int:0
         .total-snippets
         set-value:x:@.total-snippets
            get-count:x:@.snippets/*
         .already-exists:int:0
         .failed:int:0
         data.connect:[generic|magic]
            data.read
               table:ml_types
               columns
                  id
               where
                  and
                     type.eq:x:@.arguments/*/type
            if
               not-exists:x:@data.read/*
               .lambda
                  throw:Machine learning type does not exist.
                     type:x:@.arguments/*/type
            data.read
               table:ml_training_snippets
               columns
                  count(*)
                     as:count
               where
                  and
                     type.eq:x:@.arguments/*/type
                     uri.eq:x:@.arguments/*/url
                     meta.eq:AINIRO-Website-Crawler
            if
               neq
                  convert:x:@data.read/*/*/count
                     type:int
                  .:int:0
               .lambda
                  strings.concat
                     .:"Deleting "
                     get-value:x:@data.read/*/*/count
                     .:" old training snippets with the same URL"
                  unwrap:x:+/**
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:x:@strings.concat
                        type:info
                  sleep:10
            data.execute:@"
   delete from vss_ml_training_snippets
      where rowid in (select id as rowid from ml_training_snippets where type = @type and uri = @url)"
               @type:x:@.arguments/*/type
               @url:x:@.arguments/*/url
            data.delete
               table:ml_training_snippets
               where
                  and
                     type.eq:x:@.arguments/*/type
                     uri.eq:x:@.arguments/*/url
                     meta.eq:AINIRO-Website-Crawler
            .similar:int:0
            for-each:x:@.snippets/*
               if
                  and
                     exists:x:@.dp/#/*/completion
                     not-null:x:@.dp/#/*/completion
                  .lambda
                     if
                        mt
                           strings.length:x:@.dp/#/*/completion
                           get-value:x:@.arguments/*/threshold
                        .lambda
                           add:x:+
                              get-nodes:x:@.arguments/*/type
                           try-signal:magic.ai.can-create-snippet
                           strings.concat
                              get-value:x:@.dp/#/*/completion
                              .:@"
"
                              .:@"
"
                              .:This information was taken from [this URL](
                              .:%
                           data.read
                              table:ml_training_snippets
                              columns
                                 id
                                 prompt
                                 completion
                                 uri
                              where
                                 and
                                    type.eq:x:@.arguments/*/type
                                    or
                                       completion.eq:x:@.dp/#/*/completion
                                       completion.like:x:@strings.concat
                           if
                              not-exists:x:@data.read/*
                              .lambda
                                 if:x:@.arguments/*/insert_url
                                    set-value:x:@.dp/#/*/completion
                                       strings.concat
                                          get-value:x:@.dp/#/*/completion
                                          .:@"
"
                                          .:@"
"
                                          .:This information was taken from [this URL](
                                          get-value:x:@.arguments/*/url
                                          .:)
                                 data.create
                                    table:ml_training_snippets
                                    values
                                       type:x:@.arguments/*/type
                                       uri:x:@.arguments/*/url
                                       prompt:x:@.dp/#/*/prompt
                                       completion:x:@.dp/#/*/completion
                                       meta:AINIRO-Website-Crawler
                           else-if
                              eq:x:@data.read/0/*/prompt
                                 .:Common
                              .lambda
                                 math.increment:x:@.already-exists
                           else-if
                              not
                                 eq:x:@data.read/*/*/prompt
                                    get-value:x:@.dp/#/*/prompt
                              .lambda
                                 math.increment:x:@.similar
                                 data.update
                                    table:ml_training_snippets
                                    values
                                       prompt:Common
                                    where
                                       and
                                          id.eq:x:@data.read/0/*/id
                     else
                        math.increment:x:@.below-threshold
            if
               neq:x:@.similar
                  .:int:0
               .lambda
                  strings.concat
                     get-value:x:@.similar
                     .:" snippets with similar completion exists, updating prompt to 'Common'"
                  unwrap:x:+/**
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:x:@strings.concat
                        type:info
                  sleep:10
         .imported
         set-value:x:@.imported
            math.subtract:x:@.total-snippets
               math.add
                  get-value:x:@.below-threshold
                  get-value:x:@.already-exists
         if
            mt:x:@.below-threshold
               .:int:0
            .lambda
               strings.concat
                  get-value:x:@.below-threshold
                  .:" snippets was below threshold and hence was not imported"
               unwrap:x:+/**
               sockets.signal:x:@.arguments/*/feedback-channel
                  args
                     message:x:@strings.concat
                     type:info
               sleep:100
         if
            mt:x:@.already-exists
               .:int:0
            .lambda
               strings.concat
                  get-value:x:@.already-exists
                  .:" snippets already exists in database and hence was not imported"
               unwrap:x:+/**
               sockets.signal:x:@.arguments/*/feedback-channel
                  args
                     message:x:@strings.concat
                     type:info
               sleep:100
         if
            mt:x:@.failed
               .:int:0
            .lambda
               strings.concat
                  get-value:x:@.failed
                  .:" snippets failed during import, probably because of OpenAI not being able to summarize them"
               unwrap:x:+/**
               sockets.signal:x:@.arguments/*/feedback-channel
                  args
                     message:x:@strings.concat
                     type:warning
               sleep:100
         if
            mt:x:@.imported
               .:int:0
            .lambda
               strings.concat
                  .:"Done importing or updating "
                  get-value:x:@.imported
                  .:" training snippets from page"
               unwrap:x:+/**
               sockets.signal:x:@.arguments/*/feedback-channel
                  args
                     message:x:@strings.concat
                     type:info
               sleep:100
         else
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:We were not able to successfully import any snippets from page!
                  type:warning
            sleep:100
      return:x:@.urls/*
   .catch
      strings.concat
         .:"Something went wrong as we tried to scrape URL, error was: '"
         get-value:x:@.arguments/*/message
         .:"'"
      unwrap:x:+/**
      sockets.signal:x:@.arguments/@.arguments/*/feedback-channel
         roles:root
         args
            message:x:@strings.concat
            type:warning
      sleep:100
