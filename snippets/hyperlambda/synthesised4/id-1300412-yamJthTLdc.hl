
/*
 * This Hyperlambda code snippet demonstrates how to perform a SQL query using the [data.read] slot, specifically targeting a SQLite database. The query involves joining multiple tables and performing aggregation. The [database-type] slot specifies the type of database being used, which in this case is SQLite. The [table] slot indicates the primary table for the query, which is "Orders". Two [join] slots are used to join the "Employees" and "Shippers" tables with the "Orders" table. The [as] slot is used to alias the joined tables, and the [type] slot specifies the type of join, which is "left" in both cases. The [on] slot contains the conditions for the joins, using the [and] slot to combine multiple conditions.
 * 
 * The [columns] slot specifies the columns to be retrieved, including an aggregation operation indicated by [aggregate_functor], which is aliased as "result" using the [as] slot. The [where] slot is included to filter the results, although no specific conditions are provided in this snippet. The [group] slot is used to specify the column(s) by which the results should be grouped, indicated by [group_column]. Finally, the [return-nodes] slot is used to return the results of the query, with the expression [x:@data.read/*] indicating that all nodes resulting from the [data.read] operation should be returned. This setup is useful for constructing complex queries involving multiple table joins, aggregations, and grouping in a SQLite database.
 */
data.read
   database-type:sqlite
   table:Orders
      join:Employees
         as:EmployeeID
         type:left
         on
            and
               Orders.EmployeeID:EmployeeID.EmployeeID
      join:Shippers
         as:ShipVia
         type:left
         on
            and
               Orders.ShipVia:ShipVia.ShipperID
   columns
      aggregate_functor
         as:result
   where
      and
   group
      group_column
return-nodes:x:@data.read/*
