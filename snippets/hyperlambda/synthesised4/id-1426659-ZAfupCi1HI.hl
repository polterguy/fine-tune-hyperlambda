
/*
 * The provided Hyperlambda code checks if the [completion] node is not empty. If it is not empty, it further checks if a [completion] node exists within a specific path in the [snippets] node. If such a node exists, it appends a newline character to its value. If the [completion] node does not exist, it unwraps the next sibling node and adds a new [completion] node with a newline character as its value to a specific path in the [snippets] node.
 * 
 * 1. [if] - Checks if the [completion] node is not empty.
 * 2. [neq] - Compares the value of the [completion] node to an empty string.
 * 3. [.lambda] - Executes the following code block if the [neq] condition is true.
 * 4. [if] - Checks if a specific [completion] node exists within the [snippets] node.
 * 5. [exists] - Checks for the existence of a [completion] node in a specific path.
 * 6. [.lambda] - Executes the following code block if the [exists] condition is true.
 * 7. [set-value] - Sets the value of the existing [completion] node.
 * 8. [strings.concat] - Concatenates the current value of the [completion] node with a newline character.
 * 9. [else] - Executes the following code block if the [exists] condition is false.
 * 10. [unwrap] - Unwraps the next sibling node.
 * 11. [add] - Adds a new [completion] node with a newline character to a specific path in the [snippets] node.
 */
if
   neq:x:@.completion
      .:
   .lambda
      if
         exists:x:@.snippets/0/-/*/completion
         .lambda
            set-value:x:@.snippets/0/-/*/completion
               strings.concat
                  get-value:x:@.snippets/0/-/*/completion
                  .:@"
"
      else
         unwrap:x:+/*/*
         add:x:@.snippets/0/-
            .
               completion:@"
"
