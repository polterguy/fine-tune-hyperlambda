
/*
 * This Hyperlambda code defines a dynamic slot [magic.ai.load-robots] that retrieves and processes a website's robots.txt file. It validates the URL and headers, constructs the domain and robots.txt URL, and attempts to fetch the file using [http.get]. It processes the file content to extract directives like Crawl-Delay, User-Agent, Sitemap, Disallow, and Allow, storing them in respective nodes. The slot handles HTTP response validation, error handling, and signals feedback through a specified channel. It returns the parsed robots.txt data, including sitemap URLs and crawl delay, or indicates failure if the file is not found.
 * 
 * 1. [slots.create] - Creates a new dynamic slot named "magic.ai.load-robots".
 * 2. [validators.mandatory] - Ensures the "url" argument is provided.
 * 3. [validators.url] - Validates the "url" argument format.
 * 4. [if] - Checks if "headers" argument is missing and initializes it if necessary.
 * 5. [validators.default] - Sets default HTTP headers for the request.
 * 6. [strings.split] - Splits the URL to extract the domain.
 * 7. [set-value] - Constructs the domain and robots.txt URL.
 * 8. [add] - Adds HTTP headers to the request.
 * 9. [strings.concat] - Concatenates strings for logging and feedback.
 * 10. [sockets.signal] - Sends feedback messages through a specified channel.
 * 11. [try] - Attempts to retrieve and process the robots.txt file.
 * 12. [http.get] - Performs the HTTP GET request for robots.txt.
 * 13. [if] - Validates the HTTP response status and content type.
 * 14. [for-each] - Iterates over lines in the robots.txt content.
 * 15. [switch] - Processes directives like Crawl-Delay, User-Agent, Sitemap, Disallow, and Allow.
 * 16. [add] - Adds extracted directives to respective nodes.
 * 17. [return] - Returns the parsed robots.txt data or indicates failure.
 */
hyper2lambda
   slots.create:magic.ai.load-robots
      validators.mandatory:x:@.arguments/*/url
      validators.url:x:@.arguments/*/url
      if
         not-exists:x:@.arguments/*/headers
         .lambda
            add:x:@.arguments
               .
                  headers
      validators.default:x:@.arguments/*/headers
         User-Agent:AINIRO-Crawler 2.0
         Accept-Encoding:identity
         Accept:text/plain
      .domain
      strings.split:x:@.arguments/*/url
         .:/
      set-value:x:@.domain
         strings.concat
            get-value:x:@strings.split/0
            .://
            get-value:x:@strings.split/1
      .sitemap
      .robots
      set-value:x:@.robots
         strings.concat
            get-value:x:@.domain
            .:/robots.txt
      add:x:./*/http.get
         get-nodes:x:@.arguments/*/headers
      strings.concat
         .:"Trying to retrieve robots.txt file from "
         get-value:x:@.robots
      unwrap:x:+/**
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:x:@strings.concat
            type:info
      try
         http.get:x:@.robots
            timeout:60
         .disallow
         .allow
         .crawl-delay
         .has-robots:bool:false
         if
            and
               mte:x:@http.get
                  .:int:200
               lt:x:@http.get
                  .:int:300
            .lambda
               if
                  or
                     strings.starts-with:x:@http.get/*/headers/*/Content-Type
                        .:text/plain
                     strings.starts-with:x:@http.get/*/headers/*/content-type
                        .:text/plain
                  .lambda
                     set-value:x:@.has-robots
                        .:bool:true
                     strings.split:x:@http.get/*/content
                        .:"\n"
                     .relevant:bool:false
                     .has-seen-ainiro:bool:false
                     for-each:x:@strings.split/*
                        strings.trim:x:@.dp/#
                           .:@"
	 "
                        if
                           not
                              strings.starts-with:x:@strings.trim
                                 .:#
                           .lambda
                              strings.split:x:@strings.trim
                                 .:":"
                              if
                                 mte
                                    get-count:x:@strings.split/*
                                    .:int:2
                                 .lambda
                                    .value
                                    set-value:x:@.value
                                       strings.join:x:@strings.split/*/[1,100]
                                          .:":"
                                    set-value:x:@strings.split/0
                                       strings.trim:x:@strings.split/0
                                          .:@"
	 "
                                    set-value:x:@.value
                                       strings.trim:x:@.value
                                          .:@"
	 "
                                    switch:x:@strings.split/0
                                       case:Crawl-Delay
                                       case:Crawl-delay
                                       case:crawl-delay
                                          set-value:x:@.value
                                             strings.replace-not-of:x:@.value
                                                .:0123456789
                                                .:
                                          if
                                             and
                                                eq:x:@.relevant
                                                   .:bool:true
                                                neq:x:@.value
                                                   .:
                                             .lambda
                                                try
                                                   set-value:x:@.crawl-delay
                                                      math.multiply
                                                         .:int:1000
                                                         convert:x:@.value
                                                            type:int
                                                   if
                                                      mt:x:@.crawl-delay
                                                         .:int:60000
                                                      .lambda
                                                         sockets.signal:x:@.arguments/*/feedback-channel
                                                            args
                                                               message:Crawl-Delay was more than 60 seconds, using 60 seconds as our value
                                                               type:warning
                                                         set-value:x:@.crawl-delay
                                                            .:int:60000
                                                .catch
                                                   sockets.signal:x:@.arguments/*/feedback-channel
                                                      args
                                                         message:Crawl-Delay was not a valid integer value, using 10 seconds as our value
                                                         type:warning
                                                   set-value:x:@.crawl-delay
                                                      .:int:10000
                                       case:User-Agent
                                       case:User-agent
                                       case:user-agent
                                          switch:x:@.value
                                             case:*
                                             case:AINIRO
                                             case:GPTBot
                                                if
                                                   eq:x:@.value
                                                      .:AINIRO
                                                   .lambda
                                                      remove-nodes:x:@.allow/*
                                                      remove-nodes:x:@.disallow/*
                                                      set-value:x:@.has-seen-ainiro
                                                         .:bool:true
                                                      set-value:x:@.relevant
                                                         .:bool:true
                                                else
                                                   if
                                                      eq:x:@.has-seen-ainiro
                                                         .:bool:false
                                                      .lambda
                                                         set-value:x:@.relevant
                                                            .:bool:true
                                                   else
                                                      set-value:x:@.relevant
                                                         .:bool:false
                                             default
                                                set-value:x:@.relevant
                                                   .:bool:false
                                       case:Sitemap
                                       case:sitemap
                                          if
                                             or
                                                strings.starts-with:x:@.value
                                                   .:"http://"
                                                strings.starts-with:x:@.value
                                                   .:"https://"
                                             .lambda
                                                unwrap:x:+/*/*
                                                add:x:@.sitemap
                                                   .
                                                      .:x:@.value
                                          else
                                             strings.concat
                                                get-value:x:@.domain
                                                .:/
                                                get-value:x:@.value
                                             strings.replace:x:@strings.concat
                                                .://
                                                .:/
                                             unwrap:x:+/*/*
                                             add:x:@.sitemap
                                                .
                                                   .:x:@strings.replace
                                       case:Disallow
                                       case:disallow
                                          if
                                             eq:x:@.relevant
                                                .:bool:true
                                             .lambda
                                                if
                                                   or
                                                      strings.starts-with:x:@.value
                                                         .:"http://"
                                                      strings.starts-with:x:@.value
                                                         .:"https://"
                                                   .lambda
                                                      unwrap:x:+/*/*
                                                      add:x:@.disallow
                                                         .
                                                            .:x:@.value
                                                else
                                                   strings.concat
                                                      get-value:x:@.domain
                                                      get-value:x:@.value
                                                   unwrap:x:+/*/*
                                                   add:x:@.disallow
                                                      .
                                                         .:x:@strings.concat
                                       case:Allow
                                       case:allow
                                          if
                                             eq:x:@.relevant
                                                .:bool:true
                                             .lambda
                                                if
                                                   or
                                                      strings.starts-with:x:@.value
                                                         .:"http://"
                                                      strings.starts-with:x:@.value
                                                         .:"https://"
                                                   .lambda
                                                      unwrap:x:+/*/*
                                                      add:x:@.allow
                                                         .
                                                            .:x:@.value
                                                else
                                                   strings.concat
                                                      get-value:x:@.domain
                                                      get-value:x:@.value
                                                   unwrap:x:+/*/*
                                                   add:x:@.allow
                                                      .
                                                         .:x:@strings.concat
         if
            exists:x:@.disallow/*
            .lambda
               add:x:+/*/*
                  get-nodes:x:@.disallow/*
               add:x:@try/*/return
                  .
                     disallow
         if
            exists:x:@.allow/*
            .lambda
               add:x:+/*/*
                  get-nodes:x:@.allow/*
               add:x:@try/*/return
                  .
                     allow
         if
            exists:x:@.sitemap/*
            .lambda
               sort:x:@.sitemap/*
                  if
                     lt
                        strings.length:x:@.lhs/#
                        strings.length:x:@.rhs/#
                     .lambda
                        set-value:x:@.result
                           .:int:-1
                  else-if
                     mt
                        strings.length:x:@.lhs/#
                        strings.length:x:@.rhs/#
                     .lambda
                        set-value:x:@.result
                           .:int:1
                  else
                     set-value:x:@.result
                        .:int:0
               add:x:+/*/*
                  get-nodes:x:@sort/*
               add:x:@try/*/return
                  .
                     sitemap
         else
            strings.concat
               get-value:x:@.domain
               .:/sitemap.xml
            unwrap:x:+/*/*/*
            add:x:@try/*/return
               .
                  sitemap
                     .:x:@strings.concat
         if
            not-null:x:@.crawl-delay
            .lambda
               unwrap:x:+/*/*
               add:x:@try/*/return
                  .
                     crawl-delay:x:@.crawl-delay
         unwrap:x:+/*
         return
            found:x:@.has-robots
      .catch
         strings.concat
            .:"Error while trying to retrieve robots.txt, message was; '"
            get-value:x:@.arguments/*/message
            .:"'"
         unwrap:x:+/**
         sockets.signal:x:@.arguments/@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:warning
         strings.concat
            get-value:x:@.domain
            .:/sitemap.xml
         unwrap:x:+/*/*
         return
            found:bool:false
            sitemap
               .:x:@strings.concat
