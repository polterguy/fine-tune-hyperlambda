
/*
 * This code defines a Hyperlambda slot for ingesting products from WooCommerce into a machine learning training database. It validates mandatory arguments, logs the process, and deletes existing product data before importing new data via the WooCommerce API. The code handles pagination, processes product details, and stores them in the database. If vectorization is enabled, it triggers a model vectorization process after import. Error handling is included to log issues during the import process.
 * 
 * 1. [slots.create] - Creates a new slot for WooCommerce product ingestion.
 * 2. [validators.mandatory] - Ensures required arguments are provided.
 * 3. [validators.default] - Sets default values for optional arguments.
 * 4. [log.info] - Logs information messages during the process.
 * 5. [set-value] - Modifies node values, such as trimming URLs.
 * 6. [try] - Attempts to execute database operations and API requests.
 * 7. [data.connect] - Connects to a database for executing SQL operations.
 * 8. [data.execute] and [data.delete] - Executes SQL commands to manage product data.
 * 9. [.products] and [.auth] - Prepares for API authentication and data storage.
 * 10. [strings.concat] and [convert] - Concatenates strings and converts data types.
 * 11. [while] - Loops to handle pagination in API requests.
 * 12. [http.get] - Sends HTTP GET requests to the WooCommerce API.
 * 13. [add] - Adds nodes to a collection.
 * 14. [if] - Conditional logic for processing API responses.
 * 15. [math.increment] - Increments a page counter for pagination.
 * 16. [for-each] - Iterates over product data for processing.
 * 17. [data.create] - Inserts processed data into the database.
 * 18. [signal] - Triggers vectorization if enabled.
 * 19. [.catch] - Handles errors and logs them.
 */
hyper2lambda
   slots.create:woocommerce.products.ingest
      validators.mandatory:x:@.arguments/*/type
      validators.mandatory:x:@.arguments/*/base-url
      validators.mandatory:x:@.arguments/*/username
      validators.mandatory:x:@.arguments/*/secret
      validators.default:x:@.arguments
         quantity:bool:true
         vectorize:bool:true
         max_tokens:int:1000
      log.info:Deleting products to prepare for import using WooCommerce API
         type:x:@.arguments/*/type
         shop:x:@.arguments/*/base-url
      set-value:x:@.arguments/*/base-url
         strings.trim-end:x:@.arguments/*/base-url
            .:/
      try
         data.connect:[generic|magic]
            data.execute:"delete from vss_ml_training_snippets where rowid in (select id as rowid from ml_training_snippets where type = @type and meta = 'woocommerce-import')"
               @type:x:@.arguments/*/type
            data.delete
               table:ml_training_snippets
               where
                  and
                     type.eq:x:@.arguments/*/type
                     meta.eq:woocommerce-import
         log.info:Importing products using WooCommerce API
            type:x:@.arguments/*/type
            shop:x:@.arguments/*/base-url
         .products
         .auth
         set-value:x:@.auth
            strings.concat
               get-value:x:@.arguments/*/username
               .:":"
               get-value:x:@.arguments/*/secret
         set-value:x:@.auth
            convert:x:@.auth
               type:bytes
         set-value:x:@.auth
            strings.concat
               .:"Basic "
               convert:x:@.auth
                  type:base64
         .page:int:0
         .continue:bool:true
         while:x:@.continue
            .base-url:"https://project.mis.temple.edu/foodkiosk/wp-json/wc/v3/products?per_page=10"
            if
               mt:x:@.page
                  .:int:0
               .lambda
                  set-value:x:@.base-url
                     strings.concat
                        .:"https://project.mis.temple.edu/foodkiosk/wp-json/wc/v3/products?per_page=10&page="
                        get-value:x:@.page
            http.get:x:@.base-url
               headers
                  Authorization:x:@.auth
               convert:bool:true
            add:x:@.products
               get-nodes:x:@http.get/*/content/*
            if
               lt
                  get-count:x:@http.get/*/content/*
                  .:int:10
               .lambda
                  set-value:x:@.continue
                     .:bool:false
            math.increment:x:@.page
               .:int:10
            data.connect:[generic|magic]
               for-each:x:@http.get/*/content/*
                  if
                     and
                        eq:x:@.dp/#/*/stock_status
                           .:instock
                        not-null:x:@.dp/#/*/description
                        neq:x:@.dp/#/*/description
                           .:
                     .lambda
                        .prompt
                        .completion
                        set-value:x:@.prompt
                           strings.concat
                              html2markdown:x:@.dp/#/*/description
                        set-value:x:@.completion
                           strings.concat
                              .:"Price: "
                              get-value:x:@.dp/#/*/price
                              .:@"

"
                              .:"URL: "
                              get-value:x:@.dp/#/*/permalink
                        if
                           and
                              not-null:x:@.dp/#/*/short_description
                              neq:x:@.dp/#/*/short_description
                                 .:
                           .lambda
                              set-value:x:@.completion
                                 strings.concat
                                    get-value:x:@.completion
                                    .:@"

"
                                    .:"Short description: "
                                    html2markdown:x:@.dp/#/*/short_description
                        if
                           exists:x:@.dp/#/*/images/*
                           .lambda
                              set-value:x:@.completion
                                 strings.concat
                                    get-value:x:@.completion
                                    .:@"

Images of product:"
                              for-each:x:@.dp/#/*/images/*
                                 set-value:x:@.completion
                                    strings.concat
                                       get-value:x:@.completion
                                       .:@"

"
                                       .:![
                                       get-value:x:@.dp/#/*/name
                                       .:](
                                       get-value:x:@.dp/#/*/src
                                       .:)
                        data.create
                           table:ml_training_snippets
                           values
                              type:x:@.arguments/*/type
                              prompt:x:@.prompt
                              completion:x:@.completion
                              uri:x:@.uri
                              meta:woocommerce-import
         if:x:@.arguments/*/vectorize
            log.info:Started vectorizing model after WooCommerce import
               type:x:@.arguments/*/type
               shop:x:@.arguments/*/base-url
            unwrap:x:+/*
            signal:magic.ai.vectorise
               feedback-channel:non-existing
               type:x:@.arguments/*/type
            log.info:Done vectorizing model after WooCommerce import
               type:x:@.arguments/*/type
               shop:x:@.arguments/*/base-url
         log.info:Done with WooCommerce import
            type:x:@.arguments/*/type
            shop:x:@.arguments/*/base-url
      .catch
         log.error:Something went wrong as we tried to import products from WooCommerce
            error:x:@.arguments/*/message
            type:x:@.arguments/*/type
            shop:x:@.arguments/*/base-url
