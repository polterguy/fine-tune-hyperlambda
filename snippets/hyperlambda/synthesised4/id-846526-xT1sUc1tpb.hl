
// This Hyperlambda code iterates over each node in the [.words] collection, modifying and appending data to a SQL string. It uses [for-each] to loop through nodes, [set-name] and [strings.concat] to construct new names, and [add] to append data. The [if] and [else] slots conditionally modify the SQL string based on the value of [.no], using [set-value] and [strings.concat] to build the SQL query, and [math.increment] to increment [.no].
for-each:x:@.words/*
   set-name:x:+/+/*/*
      strings.concat
         .:@p
         get-value:x:@.no
   unwrap:x:+/*/*
   add:x:@data.connect/*/data.select
      .
         .:x:@.dp/#
   if
      eq:x:@.no
         .:int:0
      .lambda
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" (length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)
   else
      set-value:x:@.sql
         strings.concat:x:@.sql
            get-value:x:@.sql
            .:" + (length("
            get-value:x:@.fields
            .:) - length(replace(lower(
            get-value:x:@.fields
            .:), @p
            get-value:x:@.no
            .:", ''))) / length(@p"
            get-value:x:@.no
            .:)
   math.increment:x:@.no
