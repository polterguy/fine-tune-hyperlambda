
/*
 * // This Hyperlambda code connects to a database, checks for the existence of a machine learning type, and processes training snippets accordingly. It deletes old snippets with the same URL if they exist and inserts or updates new snippets based on certain conditions. Feedback is sent through a socket signal if there are updates or deletions.
 * // 1. [data.connect] - Connects to a specified database.
 * // 2. [data.read] - Reads from the "ml_types" table to check if a machine learning type exists.
 * // 3. [if] - Checks if the type does not exist and throws an error if true.
 * // 4. [data.read] - Reads the count of existing training snippets with the same type and URL.
 * // 5. [if] - Checks if the count is not zero and sends a feedback signal if true.
 * // 6. [data.execute] - Executes a SQL command to delete specific rows from a table.
 * // 7. [data.delete] - Deletes rows from the "ml_training_snippets" table based on conditions.
 * // 8. [.similar] - Initializes a counter for similar snippets.
 * // 9. [for-each] - Iterates over snippets and processes them based on conditions.
 * // 10. [if] - Checks if a snippet's completion exists and is not null.
 * // 11. [if] - Checks if the length of the completion is greater than a threshold.
 * // 12. [add] - Adds the type to a list.
 * // 13. [try-signal] - Sends a signal if a snippet can be created.
 * // 14. [strings.concat] - Concatenates strings to form a completion URL.
 * // 15. [data.read] - Reads from the "ml_training_snippets" table to check for existing completions.
 * // 16. [if] - Checks if no existing completion matches and inserts a new snippet if true.
 * // 17. [data.create] - Creates a new entry in the "ml_training_snippets" table.
 * // 18. [else-if] - Checks if the prompt is "Common" and increments a counter if true.
 * // 19. [else-if] - Checks if the prompt does not match and updates the prompt to "Common" if true.
 * // 20. [math.increment] - Increments a counter for similar snippets.
 * // 21. [if] - Checks if there are similar snippets and sends a feedback signal if true.
 */
data.connect:[generic|magic]
   data.read
      table:ml_types
      columns
         id
      where
         and
            type.eq:x:@.arguments/*/type
   if
      not-exists:x:@data.read/*
      .lambda
         throw:Machine learning type does not exist.
            type:x:@.arguments/*/type
   data.read
      table:ml_training_snippets
      columns
         count(*)
            as:count
      where
         and
            type.eq:x:@.arguments/*/type
            uri.eq:x:@.arguments/*/url
            meta.eq:AINIRO-Website-Crawler
   if
      neq
         convert:x:@data.read/*/*/count
            type:int
         .:int:0
      .lambda
         strings.concat
            .:"Deleting "
            get-value:x:@data.read/*/*/count
            .:" old training snippets with the same URL"
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:info
         sleep:10
   data.execute:@"
   delete from vss_ml_training_snippets
      where rowid in (select id as rowid from ml_training_snippets where type = @type and uri = @url)"
      @type:x:@.arguments/*/type
      @url:x:@.arguments/*/url
   data.delete
      table:ml_training_snippets
      where
         and
            type.eq:x:@.arguments/*/type
            uri.eq:x:@.arguments/*/url
            meta.eq:AINIRO-Website-Crawler
   .similar:int:0
   for-each:x:@.snippets/*
      if
         and
            exists:x:@.dp/#/*/completion
            not-null:x:@.dp/#/*/completion
         .lambda
            if
               mt
                  strings.length:x:@.dp/#/*/completion
                  get-value:x:@.arguments/*/threshold
               .lambda
                  add:x:+
                     get-nodes:x:@.arguments/*/type
                  try-signal:magic.ai.can-create-snippet
                  strings.concat
                     get-value:x:@.dp/#/*/completion
                     .:@"
"
                     .:@"
"
                     .:This information was taken from [this URL](
                     .:%
                  data.read
                     table:ml_training_snippets
                     columns
                        id
                        prompt
                        completion
                        uri
                     where
                        and
                           type.eq:x:@.arguments/*/type
                           or
                              completion.eq:x:@.dp/#/*/completion
                              completion.like:x:@strings.concat
                  if
                     not-exists:x:@data.read/*
                     .lambda
                        if:x:@.arguments/*/insert_url
                           set-value:x:@.dp/#/*/completion
                              strings.concat
                                 get-value:x:@.dp/#/*/completion
                                 .:@"
"
                                 .:@"
"
                                 .:This information was taken from [this URL](
                                 get-value:x:@.arguments/*/url
                                 .:)
                        data.create
                           table:ml_training_snippets
                           values
                              type:x:@.arguments/*/type
                              uri:x:@.arguments/*/url
                              prompt:x:@.dp/#/*/prompt
                              completion:x:@.dp/#/*/completion
                              meta:AINIRO-Website-Crawler
                  else-if
                     eq:x:@data.read/0/*/prompt
                        .:Common
                     .lambda
                        math.increment:x:@.already-exists
                  else-if
                     not
                        eq:x:@data.read/*/*/prompt
                           get-value:x:@.dp/#/*/prompt
                     .lambda
                        math.increment:x:@.similar
                        data.update
                           table:ml_training_snippets
                           values
                              prompt:Common
                           where
                              and
                                 id.eq:x:@data.read/0/*/id
            else
               math.increment:x:@.below-threshold
   if
      neq:x:@.similar
         .:int:0
      .lambda
         strings.concat
            get-value:x:@.similar
            .:" snippets with similar completion exists, updating prompt to 'Common'"
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:info
         sleep:10
