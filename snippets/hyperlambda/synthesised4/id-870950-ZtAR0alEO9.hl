
// This Hyperlambda code checks if a database exists and creates it if it doesn't. It uses a [try] block to attempt loading a database creation script with [io.file.load], and then executes the script based on the [switch] statement for different database types like MySQL, PostgreSQL, MSSQL, and SQLite. If successful, it logs the creation with [log.info]; otherwise, it catches errors and logs them with [log.error]. The [not] and [exists] slots are used to conditionally execute the database creation logic.
if
   not
      exists
   .lambda
      try
         io.file.load:x:@.create-database-script
         switch:x:@.database-type
            case:mysql
               mysql.connect:sys
                  mysql.execute:x:@io.file.load
            case:pgsql
               pgsql.connect:postgres
                  strings.concat
                     .:"create database "
                     get-value:x:@.arguments/*/database
                  pgsql.execute:x:-
                     database:x:@.arguments/*/database
               pgsql.connect:x:@.arguments/*/database
                  pgsql.execute:x:@io.file.load
            case:mssql
               mssql.connect:master
                  mssql.execute-batch:x:@io.file.load
            case:sqlite
               strings.concat
                  .:/data/
                  get-value:x:@.arguments/*/database
                  .:.db
               io.file.save:x:-
                  .:
               sqlite.connect:x:@.arguments/*/database
                  sqlite.execute:x:@io.file.load
         log.info:Successfully created database
            database_name:x:@.arguments/*/database
      .catch
         log.error:Something went wrong when creating database
            database:x:@.arguments/@.arguments/*/database
            script:x:@.create-database-script
            error:x:@.arguments/*/message
