
/*
 * The provided Hyperlambda code is a switch-case structure that maps various SQL data types to corresponding Hyperlambda data types. It uses the [switch] slot to evaluate the value of [strings.replace] and assigns a Hyperlambda type to [.type] based on the SQL type. If no case matches, it defaults to checking if the type starts with "enum" and assigns "string" to [.type], otherwise, it defaults to "string". 
 * 
 * 1. [switch] - Evaluates the value of [strings.replace] to determine which case to execute.
 * 2. [case] - Contains multiple cases for different SQL data types, mapping them to Hyperlambda types.
 * 3. [set-value] - Sets the [.type] node to a specific Hyperlambda type based on the matched case.
 * 4. [default] - Executes if no case matches, further checking if the value starts with "enum".
 * 5. [if] - Checks if the value of [strings.replace] starts with "enum".
 * 6. [strings.starts-with] - Evaluates if the string starts with "enum".
 * 7. [else] - Executes if the [if] condition is false, setting [.type] to "string".
 */
switch:x:@strings.replace
   case:date
   case:datetime
   case:timestamp
      set-value:x:@.type
         .:date
   case:float
   case:double
   case:double precision
   case:decimal
   case:dec
      set-value:x:@.type
         .:decimal
   case:bit
   case:tinyint
   case:bool
   case:boolean
   case:smallint
   case:mediumint
   case:integer
   case:bigint
   case:int
   case:int unsigned
      set-value:x:@.type
         .:long
   case:char
   case:varchar
   case:binary
   case:varbinary
   case:tinyblob
   case:tinytext
   case:text
   case:blob
   case:mediumtext
   case:mediumblob
   case:longtext
   case:longblob
   case:enum
   case:set
      set-value:x:@.type
         .:string
   case:tinyint
      set-value:x:@.type
         .:bool
   default
      if
         strings.starts-with:x:@strings.replace
            .:enum
         .lambda
            set-value:x:@.type
               .:string
      else
         set-value:x:@.type
            .:string
