
/*
 * This Hyperlambda code snippet demonstrates how to perform SQL joins using the [data.read] slot, specifically targeting an SQLite database. The code begins by specifying the database type as SQLite and then defines the primary table, [Orders], to be used in the query. It performs two left joins: one with the [Employees] table, using an alias [EmployeeID], and another with the [Shippers] table, using an alias [ShipVia]. The join conditions are specified using the [on] slot, where the [Orders.EmployeeID] is matched with [EmployeeID.EmployeeID] for the first join, and [Orders.ShipVia] is matched with [ShipVia.ShipperID] for the second join.
 * 
 * The [columns] slot is used to specify the columns to be retrieved, with a placeholder [distinct_functor] indicating a potential function or operation to be applied to the columns, though it is not explicitly defined in this snippet. The [where] slot is present but does not contain any conditions, suggesting that all records meeting the join criteria will be returned. Finally, the [return-nodes] slot is used to return the result set of the query, specifically targeting the nodes within the [data.read] execution. This setup allows for a flexible and dynamic way to construct and execute SQL queries with joins in Hyperlambda.
 */
data.read
   database-type:sqlite
   table:Orders
      join:Employees
         as:EmployeeID
         type:left
         on
            and
               Orders.EmployeeID:EmployeeID.EmployeeID
      join:Shippers
         as:ShipVia
         type:left
         on
            and
               Orders.ShipVia:ShipVia.ShipperID
   columns
      distinct_functor
         as:.
   where
      and
return-nodes:x:@data.read/*/*
