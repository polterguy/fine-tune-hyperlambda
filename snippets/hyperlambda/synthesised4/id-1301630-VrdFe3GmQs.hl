
/*
 * This Hyperlambda code snippet is designed to query a database table named "StormReports" and return a set of records based on specific conditions and sorting preferences. The [data.read] slot is used to perform the database read operation. It specifies the table name [table:StormReports] and lists the columns to be retrieved, including [ReportId], [StormName], [Analyst], [WindSpeed], [Verified], and [ReportedDate]. The [where] clause uses logical conditions to filter the results based on the values of [Analyst] and [Verified] fields, which are dynamically set using expressions that reference arguments passed into the lambda function. The [order] slot is used to sort the results based on a specified column, which is also dynamically determined through an expression referencing an argument. Finally, the [yield] slot is used to return the filtered and sorted records, assigning them to a node named [reports].
 * 
 * 1. [data.read] - Initiates a database read operation on the "StormReports" table.
 * 2. [table] - Specifies the table to query, "StormReports" in this case.
 * 3. [columns] - Lists the columns to be retrieved from the table.
 * 4. [where] - Defines the conditions for filtering the records.
 * 5. [and] - Combines multiple conditions that must all be true for a record to be included.
 * 6. [Analyst.eq] - Filters records where the "Analyst" column matches the provided argument.
 * 7. [Verified.eq] - Filters records where the "Verified" column matches the provided argument.
 * 8. [order] - Specifies the column by which to sort the results, determined by an argument.
 * 9. [yield] - Returns the resulting set of records, assigning them to the "reports" node.
 */
data.read
   table:StormReports
   columns
      ReportId
      StormName
      Analyst
      WindSpeed
      Verified
      ReportedDate
   where
      and
         Analyst.eq:x:@.arguments/*/analyst
         Verified.eq:x:@.arguments/*/verifiedFlag
   order:x:@.arguments/*/sortBy
yield
   reports:x:@data.read/*
