
// This Hyperlambda code defines an endpoint that retrieves and filters data from the "ml_types" table based on various parameters like order, direction, and several filtering criteria. It verifies authentication using [auth.ticket.verify], connects to a data source, and constructs a query with optional ordering and filtering. The code checks user roles and permissions to determine which data entries can be accessed, and finally returns the filtered data models.
hyper2lambda
   .arguments
      limit:long
      offset:long
      order:string
      direction:string
      ml_types.type.like:string
      ml_types.type.eq:string
      ml_types.model.like:string
      ml_types.model.eq:string
      ml_types.max_tokens.eq:long
      ml_types.max_request_tokens.eq:long
      ml_types.max_context_tokens.eq:long
      ml_types.temperature.eq:double
      ml_types.base_url.like:string
      ml_types.base_url.eq:string
      ml_types.contact_us.like:string
      ml_types.contact_us.eq:string
      ml_types.lead_email.like:string
      ml_types.lead_email.eq:string
      ml_types.api_key.like:string
      ml_types.api_key.eq:string
      ml_types.twilio_account_sid.like:string
      ml_types.twilio_account_sid.eq:string
      ml_types.system_message.like:string
      ml_types.system_message.eq:string
   auth.ticket.verify
   data.connect:[generic|magic]
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         table:ml_types
         columns
            ml_types.type
            ml_types.model
            ml_types.max_tokens
            ml_types.max_request_tokens
            ml_types.max_context_tokens
            ml_types.temperature
            ml_types.recaptcha
            ml_types.auth
            ml_types.supervised
            ml_types.cached
            ml_types.prefix
            ml_types.use_embeddings
            ml_types.threshold
            ml_types.vector_model
            ml_types.greeting
            ml_types.base_url
            ml_types.contact_us
            ml_types.lead_email
            ml_types.api_key
            ml_types.twilio_account_id
            ml_types.twilio_account_sid
            ml_types.webhook_incoming
            ml_types.webhook_outgoing
            ml_types.webhook_incoming_url
            ml_types.initial_questionnaire
            ml_types.webhook_outgoing_url
            ml_types.system_message
            ml_types.no_requests
            ml_types.max_requests
            ml_types.search_postfix
            ml_types.conversation_starters
            ml_types.max_function_invocations
            ml_types.max_session_items
            ml_types.completion_slot
         where
            and
      .models
      auth.ticket.get
      if
         not-null:x:@auth.ticket.get
         .lambda
            for-each:x:@data.read/*
               if
                  or
                     exists:x:@auth.ticket.get/*/roles/*/=root
                     null:x:@.dp/#/*/auth
                     eq:x:@.dp/#/*/auth
                        .:
                  .lambda
                     add:x:@.models
                        get-nodes:x:@.dp/#
               else
                  strings.split:x:@.dp/#/*/auth
                     .:,
                  for-each:x:@strings.split/*
                     strings.trim:x:@.dp/#
                        .:" \t"
                     if
                        and
                           exists:x:@auth.ticket.get/*/roles/*/={@strings.trim}
                           not-exists:x:"@.models/*/*/type/\"={@for-each/@.dp/#/*/type}\""
                        .lambda
                           add:x:@.models
                              get-nodes:x:@for-each/@.dp/#
      else
         for-each:x:@data.read/*
            if
               or
                  null:x:@.dp/#/*/auth
                  eq:x:@.dp/#/*/auth
                     .:
               .lambda
                  add:x:@.models
                     get-nodes:x:@.dp/#
      return-nodes:x:@.models/*
