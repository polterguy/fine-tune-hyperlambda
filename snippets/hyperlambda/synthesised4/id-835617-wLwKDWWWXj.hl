
/*
 * This Hyperlambda code snippet demonstrates how to perform a SQL query using the [data.read] slot with a SQLite database. It specifies a table [Orders] and performs left joins with [Employees] and [Shippers] tables, using aliases for the join conditions. The query selects distinct columns and includes a [where] clause for filtering results. The [columns] node uses a [distinct_functor] with an alias to ensure unique results. The joins are defined with [type] and [on] conditions to specify the relationships between tables.
 * 
 * 1. [data.read] - Initiates a read operation from a database.
 * 2. [database-type] - Specifies the type of database, in this case, SQLite.
 * 3. [table] - Indicates the primary table to query, here it's "Orders".
 * 4. [join] - Defines a join operation with another table.
 * 5. [as] - Provides an alias for the joined table.
 * 6. [type] - Specifies the type of join, such as "left".
 * 7. [on] - Sets the condition for the join operation.
 * 8. [columns] - Lists the columns to be selected in the query.
 * 9. [distinct_functor] - Ensures distinct results in the column selection.
 * 10. [where] - Begins a condition for filtering query results.
 * 11. [and] - Combines multiple conditions in the where clause.
 */
data.read
   database-type:sqlite
   table:Orders
      join:Employees
         as:EmployeeID
         type:left
         on
            and
               Orders.EmployeeID:EmployeeID.EmployeeID
      join:Shippers
         as:ShipVia
         type:left
         on
            and
               Orders.ShipVia:ShipVia.ShipperID
   columns
      distinct_functor
         as:.
   where
      and
