
// This Hyperlambda code iterates over all anchor elements in an HTML document, processes their URLs based on certain conditions, and constructs a Markdown list of links. It checks for conditions like URL prefixes, class attributes, and query parameters, modifying the URLs accordingly. The final Markdown list is built by concatenating the anchor text and processed URLs, decrementing a maximum count for each processed link. The code uses slots like [for-each], [if], [or], [strings.starts-with], [strings.concat], and [set-value] to achieve this.
for-each:x:@html2lambda/*/html/*/body/**/a
   if
      or
         not-exists:x:@.arguments/*/max
         mt:x:@.arguments/*/max
            .:int:0
      .lambda
         .url
         set-value:x:@.url
            get-value:x:"@.dp/#/*/\\@href"
         if
            strings.starts-with:x:@.url
               .://
            .lambda
               strings.split:x:@.base
                  .:"://"
               set-value:x:@.url
                  strings.concat
                     get-value:x:@strings.split/0
                     .:":"
                     get-value:x:@.url
         else-if
            strings.starts-with:x:@.url
               .:/
            .lambda
               set-value:x:@.url
                  strings.concat
                     get-value:x:@.base
                     get-value:x:@.url
         else-if
            and
               not
                  strings.starts-with:x:@.url
                     .:"https://"
               not
                  strings.starts-with:x:@.url
                     .:"http://"
            .lambda
               set-value:x:@.url
                  strings.concat
                     get-value:x:@.base
                     .:/
                     get-value:x:"@.dp/#/*/\\@href"
         if
            and
               or
                  not-exists:x:@.arguments/*/starts_with
                  strings.starts-with:x:@.url
                     get-value:x:@.arguments/*/starts_with
               or
                  not-exists:x:@.arguments/*/class
                  strings.contains:x:"@.dp/#/*/\\@class"
                     get-value:x:@.arguments/*/class
            .lambda
               .anchor:
               for-each:x:"@.dp/#/**/\\#text"
                  set-value:x:@.anchor
                     strings.concat
                        get-value:x:@.anchor
                        .:" "
                        get-value:x:@.dp/#
               set-value:x:@.anchor
                  strings.trim:x:@.anchor
                     .:@" 	
"
               set-value:x:@.anchor
                  strings.replace:x:@.anchor
                     .:"  "
                     .:" "
               set-value:x:@.anchor
                  strings.replace:x:@.anchor
                     .:"\r"
                     .:" "
               set-value:x:@.anchor
                  strings.replace:x:@.anchor
                     .:"\n"
                     .:" "
               if
                  and
                     not-null:x:@.anchor
                     neq:x:@.anchor
                        .:
                     not
                        strings.contains:x:@.url
                           .:#
                  .lambda
                     if
                        exists:x:@.arguments/*/query
                        .lambda
                           strings.split:x:@.url
                              .:?
                           if
                              mt
                                 get-count:x:@strings.split/*
                                 .:int:1
                              .lambda
                                 strings.split:x:@strings.split/1
                                    .:&
                                 .found:bool:false
                                 for-each:x:@strings.split/*
                                    if
                                       strings.starts-with:x:@.dp/#
                                          strings.concat
                                             get-value:x:@.arguments/*/query
                                             .:=
                                       .lambda
                                          set-value:x:@.found
                                             .:bool:true
                                          strings.split:x:@.dp/#
                                             .:=
                                          set-value:x:@.url
                                             strings.url-decode:x:@strings.split/1
                                 if
                                    not
                                       get-value:x:@.found
                                    .lambda
                                       set-value:x:@.url
                           else
                              set-value:x:@.url
                     if
                        not-null:x:@.url
                        .lambda
                           math.decrement:x:@.arguments/*/max
                           set-value:x:@.markdown
                              strings.concat
                                 get-value:x:@.markdown
                                 .:* [
                                 get-value:x:@.anchor
                                 .:](
                                 get-value:x:@.url
                                 .:)
                                 .:@"
"
