
/*
 * /*
 *  * This Hyperlambda code iterates over a collection of code snippets, checks their token size, and if they exceed a certain threshold, it summarizes them using OpenAI's API. It sends feedback messages through a socket channel during the process and handles errors by retrying up to three times.
 *  *
 *  * 1. [for-each] - Iterates over each snippet in the collection.
 *  * 2. [.tmp] - Temporary storage for concatenated prompt and completion.
 *  * 3. [set-value] - Sets the value of [.tmp] to the concatenated prompt and completion.
 *  * 4. [strings.concat] - Concatenates the prompt and completion with line breaks.
 *  * 5. [if] - Checks if the token size of [.tmp] exceeds the maximum allowed size.
 *  * 6. [mt] - Compares the token size to the maximum size.
 *  * 7. [openai.tokenize] - Calculates the token size of [.tmp].
 *  * 8. [sockets.signal] - Sends a feedback message to the specified channel.
 *  * 9. [sleep] - Pauses execution for a specified time.
 *  * 10. [.token] - Temporary storage for the API token.
 *  * 11. [set-value] - Sets the value of [.token] to the API token.
 *  * 12. [strings.concat] - Concatenates "Bearer " with the API key.
 *  * 13. [get-first-value] - Retrieves the API key from configuration.
 *  * 14. [.no] - Counter for retry attempts.
 *  * 15. [while] - Loops while [.no] is greater than zero.
 *  * 16. [try] - Attempts to summarize the snippet using OpenAI's API.
 *  * 17. [unwrap] - Evaluates all expressions in the current context.
 *  * 18. [http.post] - Sends a POST request to OpenAI's API.
 *  * 19. [headers] - Sets the request headers.
 *  * 20. [payload] - Sets the request payload.
 *  * 21. [if] - Checks if the API response indicates an error.
 *  * 22. [eq] - Compares the response status to 400.
 *  * 23. [sockets.signal] - Sends a warning message to the feedback channel.
 *  * 24. [lambda2hyper] - Converts the response to Hyperlambda format.
 *  * 25. [log.error] - Logs an error message.
 *  * 26. [set-value] - Sets [.no] to zero to stop retrying.
 *  * 27. [else-if] - Checks if the response status indicates success.
 *  * 28. [and] - Combines multiple conditions.
 *  * 29. [mte] - Checks if the response status is greater than or equal to 200.
 *  * 30. [lt] - Checks if the response status is less than 300.
 *  * 31. [sockets.signal] - Sends a success message to the feedback channel.
 *  * 32. [set-value] - Updates the completion and prompt with the summary.
 *  * 33. [strings.trim] - Trims whitespace from the summary.
 *  * 34. [strings.concat] - Concatenates "Summary; " with a substring of the prompt.
 *  * 35. [strings.substring] - Extracts a substring from the prompt.
 *  * 36. [else] - Handles other response statuses by retrying.
 *  * 37. [sockets.signal] - Sends a retry warning message.
 *  * 38. [sleep] - Pauses execution for 3 seconds before retrying.
 *  * 39. [log.error] - Logs an error message.
 *  * 40. [math.decrement] - Decreases the retry counter [.no].
 *  * 41. [.catch] - Decreases the retry counter [.no] if an exception occurs.
 *  */
 */
for-each:x:@.snippets/*
   .tmp
   set-value:x:@.tmp
      strings.concat
         get-value:x:@.dp/#/*/prompt
         .:@"
"
         .:@"
"
         get-value:x:@.dp/#/*/completion
   if
      mt
         openai.tokenize:x:@.tmp
         get-value:x:@.max-size
      .lambda
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:Summarizing snippet since it is larger than 80% of maximum context size for type
               type:info
         sleep:100
         .token
         set-value:x:@.token
            strings.concat
               .:"Bearer "
               get-first-value
                  get-value:x:@.api-key
                  config.get:"magic:openai:key"
         .no:int:3
         while
            mt:x:@.no
               .:int:0
            .lambda
               try
                  unwrap:x:+/**
                  http.post:"https://api.openai.com/v1/chat/completions"
                     headers
                        Authorization:x:@.token
                        Content-Type:application/json
                     payload
                        model:x:@.model
                        max_tokens:x:@.max-size
                        temperature:decimal:0.3
                        messages
                           .
                              role:system
                              content:Create a summary of the following information
                           .
                              role:user
                              content:x:@.dp/#/*/completion
                     convert:true
                  if
                     eq:x:@http.post
                        .:int:400
                     .lambda
                        sockets.signal:x:@.arguments/*/feedback-channel
                           args
                              message:Could not summarize snippet, check your log for details
                              type:warning
                        sleep:100
                        lambda2hyper:x:@http.post
                        log.error:Something went wrong while invoking OpenAI
                           message:x:@http.post/*/content/*/error/*/message
                           status:x:@http.post
                           error:x:@lambda2hyper
                        set-value:x:@.no
                           .:int:0
                  else-if
                     and
                        mte:x:@http.post
                           .:int:200
                        lt:x:@http.post
                           .:int:300
                     .lambda
                        sockets.signal:x:@.arguments/*/feedback-channel
                           args
                              message:Successfully created summary of snippet
                              type:info
                        sleep:100
                        set-value:x:@.dp/#/*/completion
                           strings.trim:x:@http.post/*/content/*/choices/0/*/message/*/content
                              .:@"
	 "
                        set-value:x:@.dp/#/*/prompt
                           strings.concat
                              .:"Summary; "
                              strings.substring:x:@.dp/#/*/prompt
                                 .:int:0
                                 .:int:150
                        set-value:x:@.no
                           .:int:0
                  else
                     sockets.signal:x:@.arguments/*/feedback-channel
                        args
                           message:Could not summarize snippet, check your log for details. Trying again in 3 seconds.
                           type:warning
                     sleep:3000
                     lambda2hyper:x:@http.post
                     log.error:Something went wrong while invoking OpenAI
                        message:x:@http.post/*/content/*/error/*/message
                        status:x:@http.post
                        error:x:@lambda2hyper
                     math.decrement:x:@.no
               .catch
                  math.decrement:x:@.no
