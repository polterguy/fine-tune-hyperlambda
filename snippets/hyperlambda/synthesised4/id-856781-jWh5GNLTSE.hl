
// This Hyperlambda code iterates while two conditions are true: a maximum count is greater than zero and a sorted list is not empty. It checks if URLs should be allowed or disallowed based on patterns, adjusting an "allowed" flag accordingly. If the URL matches the criteria, it adds the node to the return list and decrements the max count; otherwise, it increments an ignored counter. The sorted list is continually reduced by removing the first node.
while
   and
      mt:x:@.arguments/*/max
         .:int:0
      exists:x:@sort/0
   .lambda
      .allowed:bool:true
      for-each:x:@.arguments/*/disallow/*
         unwrap:x:+/*
         invoke:x:@.match
            url:x:@sort/0
            pattern:x:@.dp/#
         if
            get-value:x:@invoke
            .lambda
               set-value:x:@.allowed
                  .:bool:false
               for-each:x:@.arguments/*/allow/*
                  unwrap:x:+/*
                  invoke:x:@.match
                     url:x:@sort/0
                     pattern:x:@.dp/#
                  if
                     get-value:x:@invoke
                     .lambda
                        set-value:x:@.allowed
                           .:bool:true
      if
         and
            get-value:x:@.arguments/*/filter-on-url
            exists:x:@.arguments/*/url
            not-null:x:@.arguments/*/url
            neq:x:@.arguments/*/url
               .:
            not
               strings.starts-with:x:@sort/0
                  get-value:x:@.arguments/*/url
         .lambda
            set-value:x:@.allowed
               .:bool:false
      if
         eq:x:@.allowed
            .:bool:true
         .lambda
            add:x:@.return
               get-nodes:x:@sort/0
            math.decrement:x:@.arguments/*/max
      else
         math.increment:x:@.ignored
      remove-nodes:x:@sort/0
