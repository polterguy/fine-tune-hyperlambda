
/*
 * 1. `@tasks` - This iterator searches for the first node with the name "tasks" within the current context. It starts from the current node and looks upwards through the hierarchy, including siblings and ancestors, until it finds a node named "tasks". This is useful when you need to reference a specific node by name that might not be a direct child of the current node.
 * 
 * 2. `count` - This is not an iterator but rather the name of a node that is expected to be a child of the "tasks" node. The expression is looking for a node named "count" that is a direct child of the first "tasks" node found. This is useful when you want to retrieve or manipulate the value of a specific child node within a known parent node.
 */

.:x:@tasks.count