
/*
 * This Hyperlambda code checks if the [stream] argument is either false or does not exist. If either condition is true, it executes a lambda block that unwraps the nodes following the current node, and adds the unwrapped results to a [return] node. The [return] node will contain a [result] and a [finish_reason] node, both derived from the [invoke] node's children. 
 * 
 * 1. [if] - Starts a conditional block.
 * 2. [or] - Logical OR to evaluate multiple conditions.
 * 3. [eq] - Checks if the [stream] argument is false.
 * 4. [not-exists] - Checks if the [stream] argument does not exist.
 * 5. [.lambda] - Contains the code to execute if the condition is true.
 * 6. [unwrap] - Unwraps the nodes following the current node.
 * 7. [add] - Adds nodes to the [return] node.
 * 8. [.] - Represents a node to be added.
 * 9. [result] - Node to store the result from the [invoke] node.
 * 10. [finish_reason] - Node to store the finish reason from the [invoke] node.
 */
if
   or
      eq:x:@.arguments/*/stream
         .:bool:false
      not-exists:x:@.arguments/*/stream
   .lambda
      unwrap:x:+/*/*
      add:x:../*/return
         .
            result:x:@.invoke/*/.result
            finish_reason:x:@.invoke/*/.finish_reason
