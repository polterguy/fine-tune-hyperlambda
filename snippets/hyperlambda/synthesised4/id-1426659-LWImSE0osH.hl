
/*
 * This Hyperlambda code iterates over text nodes within a document and processes them to clean up whitespace and handle hyperlink references. It replaces carriage returns, newlines, tabs, and double spaces with single spaces. If a text node is within an anchor tag and contains an href attribute, it constructs a complete URL based on certain conditions and appends it to a completion string. The code ensures that URLs are correctly prefixed with a base URL if necessary, and formats the text content with the URL in parentheses.
 * 
 * 1. **[for-each]**: Iterates over text nodes in the document.
 * 2. **[if]**: Checks if the current node is not null and not empty.
 * 3. **[strings.replace]**: Replaces carriage returns, newlines, tabs, and double spaces with single spaces in the text.
 * 4. **[if]**: Checks if the current node is an anchor tag with a non-null href attribute.
 * 5. **[.url]**: Declares a temporary node for constructing the URL.
 * 6. **[if]**: Checks if the href starts with a slash and constructs a full URL using the base URL.
 * 7. **[else-if]**: Checks if the href does not start with "http://" or "https://" and constructs a full URL using the base URL.
 * 8. **[else]**: Uses the href as the URL if it is already complete.
 * 9. **[set-value]**: Updates the completion string with the formatted text and URL.
 * 10. **[else]**: Appends the cleaned-up text to the completion string if not an anchor tag.
 */
for-each:x:"@.dp/#/**/\\#text"
   if
      and
         not-null:x:@.dp/#
         neq:x:@.dp/#
            .:
      .lambda
         strings.replace:x:@.dp/#
            .:"\r"
            .:" "
         strings.replace:x:@strings.replace
            .:"\n"
            .:" "
         strings.replace:x:@strings.replace
            .:"\t"
            .:" "
         strings.replace:x:@strings.replace
            .:"  "
            .:" "
         if
            and
               eq
                  get-name:x:@.dp/#/.
                  .:a
               exists:x:"@.dp/#/./*/\\@href/[0,1]"
               not-null:x:"@.dp/#/./*/\\@href/[0,1]"
            .lambda
               .url
               if
                  strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                     .:/
                  .lambda
                     set-value:x:@.url
                        strings.concat
                           get-value:x:@.base
                           get-value:x:"@.dp/#/./*/\\@href/[0,1]"
               else-if
                  and
                     not
                        strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                           .:"http://"
                     not
                        strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                           .:"https://"
                  .lambda
                     set-value:x:@.url
                        strings.concat
                           get-value:x:@.base
                           .:/
                           get-value:x:"@.dp/#/./*/\\@href/[0,1]"
               else
                  set-value:x:@.url
                     get-value:x:"@.dp/#/./*/\\@href/[0,1]"
               set-value:x:@.completion
                  strings.concat
                     get-value:x:@.completion
                     .:" "
                     .:[
                     strings.trim:x:@strings.replace
                        .:@"  
	"
                     .:](
                     get-value:x:@.url
                     .:)
                     .:" "
         else
            set-value:x:@.completion
               strings.concat
                  get-value:x:@.completion
                  strings.trim:x:@strings.replace
                     .:@"  
	"
                  .:" "
