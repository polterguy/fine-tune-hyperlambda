
/*
 * This Hyperlambda code connects to a SQLite database and updates records in the "Appointments" table using values and conditions provided as arguments. If no records are updated, it sets the HTTP response status to 404 and returns a "Record not found" message. Otherwise, it sets the response status to 202, signals a socket event "hospital.Appointments.put" with admin and root roles, and returns the number of affected records. 
 * 
 * 1. [data.connect] - Connects to the SQLite database using a generic connection string for the "hospital".
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [add] - Adds nodes to the "values" and "where" clauses of the "data.update" operation.
 * 4. [data.update] - Updates records in the "Appointments" table based on provided values and conditions.
 * 5. [if] - Checks if no records were updated.
 * 6. [eq] - Compares the result of the "data.update" operation to zero.
 * 7. [response.status.set] - Sets the HTTP response status.
 * 8. [return] - Returns a result message or the number of affected records.
 * 9. [sockets.signal] - Signals a socket event with specified roles.
 * 10. [unwrap] - Evaluates expressions in the node.
 * 11. [affected] - Returns the number of affected records from the "data.update" operation.
 */
data.connect:[generic|hospital]
   database-type:sqlite
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]
   data.update
      database-type:sqlite
      table:Appointments
      values
      where
         and
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found
   response.status.set:202
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:hospital.Appointments.put
      args
      roles:admin,root
   unwrap:x:+/*
   return
      affected:x:@data.update
