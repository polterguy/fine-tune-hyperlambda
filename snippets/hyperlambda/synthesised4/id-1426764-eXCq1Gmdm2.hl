
/*
 * This Hyperlambda code connects to a MySQL database, retrieves the schema information of a specified table, and processes each column's metadata. It determines if columns are nullable, primary keys, or automatically generated, and maps MySQL data types to Hyperlambda types. The processed metadata is then returned as a node list. 
 * 
 * 1. [mysql.connect] - Connects to a MySQL database using a connection string.
 * 2. [strings.concat] - Constructs a SQL query to describe the table.
 * 3. [mysql.select] - Executes the SQL query to retrieve table schema information.
 * 4. [for-each] - Iterates over each column's metadata.
 * 5. [unwrap] - Evaluates expressions for the current column.
 * 6. [.tmp] - Temporary storage for processed column metadata.
 * 7. [if] - Checks if a column is nullable.
 * 8. [add] - Adds metadata about nullability.
 * 9. [if] - Checks if a column is a primary key.
 * 10. [add] - Adds metadata about primary key status.
 * 11. [if] - Checks if a column is automatically generated.
 * 12. [add] - Adds metadata about automatic generation.
 * 13. [.type] - Determines the Hyperlambda type for the column.
 * 14. [if] - Checks for specific MySQL types to map to Hyperlambda types.
 * 15. [set-value] - Sets the Hyperlambda type for the column.
 * 16. [else] - Handles other MySQL types and maps them to Hyperlambda types.
 * 17. [strings.regex-replace] - Removes size and unsigned attributes from MySQL types.
 * 18. [strings.replace] - Further processes MySQL types.
 * 19. [switch] - Maps MySQL types to Hyperlambda types.
 * 20. [case] - Handles specific MySQL types.
 * 21. [default] - Default case for unmapped types.
 * 22. [if] - Checks for enum types.
 * 23. [set-value] - Sets the type for enum types.
 * 24. [unwrap] - Evaluates expressions for the current column.
 * 25. [add] - Adds the Hyperlambda type to the column metadata.
 * 26. [add] - Adds processed metadata to the return node list.
 * 27. [return-nodes] - Returns the processed column metadata as a node list.
 */
mysql.connect:x:@.connection
   strings.concat
      .:"describe "
      .:`
      get-value:x:@.arguments/*/table
      .:`
   mysql.select:x:@strings.concat
   for-each:x:@mysql.select/*
      unwrap:x:+/*/*
      .tmp
         ""
            name:x:@.dp/#/*/Field
            db:x:@.dp/#/*/Type
      if
         eq
            get-value:x:@.dp/#/*/Null
            .:NO
         .lambda
            add:x:@.tmp/*
               .
                  nullable:bool:false
      else
         add:x:@.tmp/*
            .
               nullable:bool:true
      if
         eq
            get-value:x:@.dp/#/*/Key
            .:PRI
         .lambda
            add:x:@.tmp/*
               .
                  primary:bool:true
      else
         add:x:@.tmp/*
            .
               primary:bool:false
      if
         or
            and
               not
                  eq
                     get-value:x:@.dp/#/*/Default
                     .:
               not
                  eq
                     get-value:x:@.dp/#/*/Default
                     .
            eq
               get-value:x:@.dp/#/*/Extra
               .:auto_increment
            eq
               get-value:x:@.dp/#/*/Extra
               .:DEFAULT_GENERATED
         .lambda
            add:x:@.tmp/*
               .
                  automatic:bool:true
      else
         add:x:@.tmp/*
            .
               automatic:bool:false
      .type
      if
         or
            eq
               get-value:x:@.dp/#/*/Type
               .:tinyint(1)
            eq
               get-value:x:@.dp/#/*/Type
               .:bool
            eq
               get-value:x:@.dp/#/*/Type
               .:boolean
         .lambda
            set-value:x:@.type
               .:bool
      else
         strings.regex-replace:x:@.dp/#/*/Type
            .:"\\([0-9,]+\\)"
            .:
         strings.replace:x:@strings.regex-replace
            .:" unsigned"
            .:
         switch:x:@strings.replace
            case:date
            case:datetime
            case:timestamp
               set-value:x:@.type
                  .:date
            case:float
            case:double
            case:double precision
            case:decimal
            case:dec
               set-value:x:@.type
                  .:decimal
            case:bit
            case:tinyint
            case:bool
            case:boolean
            case:smallint
            case:mediumint
            case:integer
            case:bigint
            case:int
            case:int unsigned
               set-value:x:@.type
                  .:long
            case:char
            case:varchar
            case:binary
            case:varbinary
            case:tinyblob
            case:tinytext
            case:text
            case:blob
            case:mediumtext
            case:mediumblob
            case:longtext
            case:longblob
            case:enum
            case:set
               set-value:x:@.type
                  .:string
            case:tinyint
               set-value:x:@.type
                  .:bool
            default
               if
                  strings.starts-with:x:@strings.replace
                     .:enum
                  .lambda
                     set-value:x:@.type
                        .:string
               else
                  set-value:x:@.type
                     .:string
      unwrap:x:+/*/*
      add:x:@.tmp/*
         .
            hl:x:@.type
      add:x:../*/mysql.connect/*/return-nodes
         get-nodes:x:@.tmp/*
   return-nodes
