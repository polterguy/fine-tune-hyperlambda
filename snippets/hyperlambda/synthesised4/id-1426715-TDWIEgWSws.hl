
/*
 * // This Hyperlambda code checks if data from a database table named "ml_types" has been read into the current context. If not, it attempts to read specific columns from the "ml_types" table where the "type" is "default". If no data is found after this attempt, it throws an exception indicating that no such type exists and no default type was found. If data is successfully read, it adds the nodes from the read data to a model node and sets the type argument to "default".
 * // 1. [if] - Checks if data has not been read from the "ml_types" table.
 * // 2. [not-exists] - Verifies if there are no nodes from the "data.read" operation.
 * // 3. [data.read] - Reads data from the "ml_types" table with specified columns and conditions.
 * // 4. [table] - Specifies the table name "ml_types" to read from.
 * // 5. [columns] - Lists the columns to be retrieved from the table.
 * // 6. [where] - Specifies the condition for the data retrieval, checking for "type" equal to "default".
 * // 7. [and] - Logical AND condition for the "where" clause.
 * // 8. [type.eq] - Checks if the "type" column equals "default".
 * // 9. [if] - Nested if statement to handle the case where no data is found.
 * // 10. [not-exists] - Checks again if no data was read.
 * // 11. [throw] - Throws an exception if no data is found, with a status of 400 and public visibility.
 * // 12. [add] - Adds the nodes from the read data to a model node.
 * // 13. [get-nodes] - Retrieves nodes from the read data.
 * // 14. [set-value] - Sets the type argument to "default".
 */
if
   not-exists:x:@data.read/*
   .lambda
      data.read
         table:ml_types
         columns
            model
            max_tokens
            max_context_tokens
            max_request_tokens
            temperature
            recaptcha
            auth
            supervised
            cached
            prefix
            use_embeddings
            threshold
            vector_model
            contact_us
            lead_email
            api_key
            webhook_incoming
            webhook_outgoing
            webhook_incoming_url
            webhook_outgoing_url
            system_message
            initial_questionnaire
            no_requests
            max_requests
            session_timeout
            search_postfix
            max_function_invocations
            max_session_items
            completion_slot
         where
            and
               type.eq:default
      if
         not-exists:x:@data.read/*
         .lambda
            throw:No such type, and no default type was found
               status:int:400
               public:bool:true
      add:x:@.model
         get-nodes:x:@data.read/*/*
      set-value:x:@.arguments/*/type
         .:default
