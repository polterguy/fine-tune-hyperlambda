
/*
 * This Hyperlambda code iterates through each node in a given structure and checks if the node's name exists in a predefined vocabulary. If the name exists and is not already in the result, it adds the name with a count of one. If the name is already in the result, it increments the count by one. The code effectively counts occurrences of node names that are present in the vocabulary. 
 * 
 * 1. [for-each] - Iterates through each node in the specified structure.
 * 2. [get-name] - Retrieves the name of the currently iterated node.
 * 3. [if] - Checks if the node's name exists in the vocabulary.
 * 4. [exists] - Determines if the node name is present in the vocabulary.
 * 5. [not-exists] - Checks if the node name is not already in the result.
 * 6. [set-name] - Sets the name of the node in the result.
 * 7. [add] - Adds a new node with a count of one to the result.
 * 8. [set-value] - Updates the count of the node name in the result.
 * 9. [math.add] - Increments the count of the node name in the result.
 */
for-each:x:@hyper2lambda/*/**
   get-name:x:@.dp/#
   if
      exists:x:@vocabulary/*/={@get-name}
      .lambda
         if
            not-exists:x:@.result/*/{@get-name}
            .lambda
               set-name:x:+/*/*
                  get-value:x:@get-name
               add:x:@.result
                  .
                     .:int:1
         else
            set-value:x:@.result/*/{@get-name}
               math.add
                  get-value:x:@.result/*/{@get-name}
                  .:int:1
