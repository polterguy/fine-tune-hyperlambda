
// This Hyperlambda code snippet demonstrates the use of database transactions. It starts a transaction with [data.transaction.create], executes a SQL delete operation on the "users" table for entries with a "pending" status using [data.execute], and then simulates a failure by throwing an exception with [throw]. The transaction is then committed with [data.transaction.commit], but due to the exception, this commit will not be reached, illustrating how transactions can be used to ensure atomicity and rollback in case of errors.
data.transaction.create
   data.execute:"delete from users where status = 'pending'"
   throw:Simulated failure
   data.transaction.commit
