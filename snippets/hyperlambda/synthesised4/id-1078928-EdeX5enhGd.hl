
/*
 * 1. `@signal` - This iterator retrieves the first node named `signal` within the current context or hierarchy. It starts searching from the current node and moves upwards through its ancestors and siblings until it finds a node with the specified name. This is useful when you need to access a specific node that might not be a direct child of the current node but exists somewhere in the hierarchy.
 * 
 * 2. `@signal` - This iterator, following the first `@signal`, retrieves the first node named `signal` within the children of the node found by the previous iterator. It searches for a node named `signal` that is a direct child of the first `signal` node found.
 * 
 * Potential use cases:
 * - This expression could be used in a scenario where you have nested structures with nodes named `signal`, and you need to access a specific `signal` node that is a child of another `signal` node.
 * - It might be useful in configurations or data structures where signals or events are nested, and you need to process or retrieve information from a specific level of nested signals.
 */

.:x:@signal/@signal