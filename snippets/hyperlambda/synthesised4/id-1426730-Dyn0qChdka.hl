
/*
 * // This Hyperlambda code sorts nodes based on the length of their string values. It uses the [sort] slot to compare nodes from a specified list, [.sitemap], and sorts them by string length. The sorting logic is implemented using [if], [else-if], and [else] slots to determine the order of nodes based on the comparison of string lengths. The result of each comparison is stored in [.result] to indicate the order of nodes. The original list remains unchanged, and a new sorted list is returned.
 * // 1. [sort] - Initiates sorting of nodes based on a specified expression.
 * // 2. [if] - Checks if the length of the string value of [.lhs] is less than [.rhs].
 * // 3. [lt] - Compares the lengths of string values of [.lhs] and [.rhs].
 * // 4. [strings.length] - Retrieves the length of the string value of [.lhs] and [.rhs].
 * // 5. [set-value] - Sets the [.result] to -1 if [.lhs] is less than [.rhs].
 * // 6. [else-if] - Checks if the length of the string value of [.lhs] is more than [.rhs].
 * // 7. [mt] - Compares the lengths of string values of [.lhs] and [.rhs].
 * // 8. [set-value] - Sets the [.result] to 1 if [.lhs] is more than [.rhs].
 * // 9. [else] - Executes if [.lhs] and [.rhs] have equal string lengths.
 * // 10. [set-value] - Sets the [.result] to 0 if [.lhs] and [.rhs] are equal.
 */
sort:x:@.sitemap/*
   if
      lt
         strings.length:x:@.lhs/#
         strings.length:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:-1
   else-if
      mt
         strings.length:x:@.lhs/#
         strings.length:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:1
   else
      set-value:x:@.result
         .:int:0
