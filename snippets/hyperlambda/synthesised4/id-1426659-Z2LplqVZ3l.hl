
/*
 * // This Hyperlambda code processes a node's value by replacing specific characters with spaces, checks for certain conditions, and constructs a URL based on these conditions. It then appends the processed result to a completion node. The code performs the following steps:
 * // 1. [if] - Checks if the current node's value is not null and not empty.
 * // 2. [strings.replace] - Replaces carriage return characters with spaces in the node's value.
 * // 3. [strings.replace] - Replaces newline characters with spaces in the node's value.
 * // 4. [strings.replace] - Replaces tab characters with spaces in the node's value.
 * // 5. [strings.replace] - Replaces double spaces with a single space in the node's value.
 * // 6. [if] - Checks if the node name is "a" and if an "href" attribute exists and is not null.
 * // 7. [strings.starts-with] - Checks if the "href" value starts with a slash.
 * // 8. [set-value] - Concatenates the base URL with the "href" value and sets it to the .url node.
 * // 9. [else-if] - Checks if the "href" value does not start with "http://" or "https://".
 * // 10. [set-value] - Concatenates the base URL with a slash and the "href" value, setting it to the .url node.
 * // 11. [else] - Sets the .url node to the "href" value directly.
 * // 12. [set-value] - Concatenates the current completion value with the processed URL and appends it to the .completion node.
 * // 13. [else] - Concatenates the current completion value with the processed node value and appends it to the .completion node.
 */
if
   and
      not-null:x:@.dp/#
      neq:x:@.dp/#
         .:
   .lambda
      strings.replace:x:@.dp/#
         .:"\r"
         .:" "
      strings.replace:x:@strings.replace
         .:"\n"
         .:" "
      strings.replace:x:@strings.replace
         .:"\t"
         .:" "
      strings.replace:x:@strings.replace
         .:"  "
         .:" "
      if
         and
            eq
               get-name:x:@.dp/#/.
               .:a
            exists:x:"@.dp/#/./*/\\@href/[0,1]"
            not-null:x:"@.dp/#/./*/\\@href/[0,1]"
         .lambda
            .url
            if
               strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                  .:/
               .lambda
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.base
                        get-value:x:"@.dp/#/./*/\\@href/[0,1]"
            else-if
               and
                  not
                     strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                        .:"http://"
                  not
                     strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                        .:"https://"
               .lambda
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.base
                        .:/
                        get-value:x:"@.dp/#/./*/\\@href/[0,1]"
            else
               set-value:x:@.url
                  get-value:x:"@.dp/#/./*/\\@href/[0,1]"
            set-value:x:@.completion
               strings.concat
                  get-value:x:@.completion
                  .:" "
                  .:[
                  strings.trim:x:@strings.replace
                     .:@"  
	"
                  .:](
                  get-value:x:@.url
                  .:)
                  .:" "
      else
         set-value:x:@.completion
            strings.concat
               get-value:x:@.completion
               strings.trim:x:@strings.replace
                  .:@"  
	"
               .:" "
