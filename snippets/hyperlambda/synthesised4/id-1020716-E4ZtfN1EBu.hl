
/*
 * 1. `@.input` - This iterator retrieves the first node named "input" from the current context. It starts the search from the current node and looks upwards in the hierarchy until it finds a node with the specified name.
 * 
 * 2. `*` - This retrieves all children nodes of the "input" node. It allows the expression to access any child node directly under "input".
 * 
 * 3. `payload` - This filters the result set to only include nodes named "payload" from the previously retrieved children nodes of "input". It ensures that only nodes with this specific name are considered in the next steps.
 * 
 * 4. `#` - This iterator de-references the value of the "payload" node, assuming that the value itself is a node. It allows the expression to treat the value as a node and access its children.
 * 
 * 5. `*` - This retrieves all children nodes of the node obtained from the de-referenced value of "payload". It allows access to any node directly under the de-referenced node.
 * 
 * 6. `age` - This filters the result set to include only nodes named "age" from the previously retrieved children nodes. It ensures that the expression specifically targets nodes with this name, which is likely intended to access an age-related value or data.
 */

.:x:@.input/*/payload/#/*/age