
/*
 * This Hyperlambda code is designed to manage the execution of a function invocation within a session, handling errors and signaling results. It first checks if the number of iterations is less than or equal to 1, logging an error and signaling the session with an error message if true. If not, it executes a function and converts the result to JSON. It then checks if the result's token count exceeds a maximum limit, throwing an error if so. If successful, it signals the session with the result and updates the prompt based on whether a result exists. The code ensures proper handling of function invocations, error signaling, and result management.
 * 
 * 1. [try] - Initiates a try block to handle potential errors.
 * 2. [if] - Checks if the number of iterations is less than or equal to 1.
 * 3. [log.error] - Logs an error message if the condition is true.
 * 4. [sockets.signal] - Sends a signal with an error message to the session.
 * 5. [else] - Executes if the initial condition is false.
 * 6. [execute] - Invokes a function with specified parameters.
 * 7. [lambda2json] - Converts the function result to JSON format.
 * 8. [if] - Checks if the token count of the result exceeds a maximum limit.
 * 9. [throw] - Throws an error if the result is too large.
 * 10. [config.get] - Retrieves a success message from the configuration.
 * 11. [unwrap] - Unwraps the result for further processing.
 * 12. [sockets.signal] - Signals the session with the function result and invocation details.
 * 13. [if] - Checks if the function result exists.
 * 14. [set-value] - Updates the new prompt and function result based on the execution outcome.
 * 15. [else] - Updates the new prompt if no result exists.
 */
try
   if
      lte:x:@.iterations
         .:int:1
      .lambda
         log.error:Too many function invocations
         sockets.signal:x:@.session
            args
               function_error:Too many function invocations
         sockets.signal:x:@.session
            args
               function_waiting:bool:false
         sockets.signal:x:@.session
            args
               error:bool:true
               status:int:500
               message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
         sockets.signal:x:@.session
            args
               finished:bool:true
   else
      execute:magic.ai.functions.invoke
         type:x:@.type
         session:x:@.session
         user-id:x:@.user-id
         invocation:x:@.dp/#
      lambda2json:x:@execute/*/result/*
         format:true
      if
         mt
            openai.tokenize:x:@lambda2json
            get-value:x:@.arguments/@.arguments/*/max_context_tokens
         .lambda
            throw:Result too large, try to limit your result
               status:int:400
               public:bool:true
      config.get:"magic:chat:functions:success-message"
         .:Success!
      unwrap:x:+/*/*
      sockets.signal:x:@.session
         args
            function_result:x:@config.get
            invocation:x:@execute/*/json
            file:x:@execute/*/workflow
      if
         exists:x:@execute/*/result/*
         .lambda
            set-value:x:@.new-prompt
               strings.concat
                  get-value:x:@.new-prompt
                  .:"Response from '"
                  get-value:x:@execute/*/workflow
                  .:@"' was:
```json
"
                  get-value:x:@lambda2json
                  .:@"
"
                  .:```
                  .:@"
"
                  .:@"
"
            set-value:x:@.function-result
               get-value:x:@lambda2json
      else
         set-value:x:@.new-prompt
            strings.concat
               get-value:x:@.new-prompt
               .:"Invocation of '"
               get-value:x:@execute/*/workflow
               .:"' was a success."
               .:@"
"
               .:@"
"
