
/*
 * /*
 *  * This Hyperlambda code checks if the [massagePrompt] argument is not null and not empty, then constructs a Bearer token using a configuration key. It iterates over each [signal] node, making an HTTP POST request to OpenAI's chat completions API with specified headers and payload. If the HTTP response status code is not between 200 and 299, it logs an error with details. Otherwise, it sets the [prompt] node's value to the content of the response.
 *  *
 *  * 1. [if] - Checks if the [massagePrompt] argument is not null and not empty.
 *  * 2. [and] - Combines conditions to ensure [massagePrompt] is valid.
 *  * 3. [not-null] - Checks if [massagePrompt] is not null.
 *  * 4. [neq] - Checks if [massagePrompt] is not an empty string.
 *  * 5. [.lambda] - Executes the following nodes if the condition is true.
 *  * 6. [.token] - Declares a node for storing the token.
 *  * 7. [set-value] - Sets the value of [.token] to a concatenated string.
 *  * 8. [strings.concat] - Concatenates "Bearer " with the OpenAI key from configuration.
 *  * 9. [for-each] - Iterates over each child node of [signal].
 *  * 10. [http.post] - Sends a POST request to OpenAI's chat completions API.
 *  * 11. [convert] - Converts the response to a boolean type.
 *  * 12. [headers] - Specifies HTTP headers for the request.
 *  * 13. [Authorization] - Sets the authorization header with the token.
 *  * 14. [Content-Type] - Sets the content type to JSON.
 *  * 15. [Accept] - Sets the accept header to text/event-stream.
 *  * 16. [payload] - Specifies the request payload.
 *  * 17. [model] - Specifies the model to use.
 *  * 18. [max_tokens] - Sets the maximum tokens for the response.
 *  * 19. [temperature] - Sets the temperature for the response.
 *  * 20. [messages] - Specifies the messages for the chat completion.
 *  * 21. [role] - Sets the role for the message.
 *  * 22. [content] - Sets the content of the message.
 *  * 23. [if] - Checks if the HTTP response status code is not successful.
 *  * 24. [not] - Inverts the condition.
 *  * 25. [and] - Combines conditions for checking status code.
 *  * 26. [mte] - Checks if the status code is more than or equal to 200.
 *  * 27. [lt] - Checks if the status code is less than 300.
 *  * 28. [.lambda] - Executes the following nodes if the condition is true.
 *  * 29. [lambda2hyper] - Converts the HTTP response to a Hyperlambda object.
 *  * 30. [log.error] - Logs an error message with details.
 *  * 31. [message] - Logs the error message from the response.
 *  * 32. [status] - Logs the status code of the response.
 *  * 33. [error] - Logs the error details.
 *  * 34. [else] - Executes if the HTTP response status code is successful.
 *  * 35. [set-value] - Sets the value of the [prompt] node.
 *  * 36. [get-value] - Retrieves the content of the response message.
 *  */
 */
if
   and
      not-null:x:@.arguments/*/massagePrompt
      neq:x:@.arguments/*/massagePrompt
         .:
   .lambda
      .token
      set-value:x:@.token
         strings.concat
            .:"Bearer "
            config.get:"magic:openai:key"
      for-each:x:@signal/*
         http.post:"https://api.openai.com/v1/chat/completions"
            convert:bool:true
            headers
               Authorization:x:@.token
               Content-Type:application/json
               Accept:text/event-stream
            payload
               model:gpt-3.5-turbo
               max_tokens:int:1000
               temperature:decimal:0.3
               messages
                  .
                     role:system
                     content:x:@.arguments/*/massagePrompt
                  .
                     role:user
                     content:x:@.dp/#/*/completion
         if
            not
               and
                  mte:x:@http.post
                     .:int:200
                  lt:x:@http.post
                     .:int:300
            .lambda
               lambda2hyper:x:@http.post
               log.error:Something went wrong while invoking OpenAI
                  message:x:@http.post/*/content/*/error/*/message
                  status:x:@http.post
                  error:x:@lambda2hyper
         else
            set-value:x:@.dp/#/*/prompt
               get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
