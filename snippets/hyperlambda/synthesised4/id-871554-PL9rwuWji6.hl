
// This Hyperlambda code iterates over nodes in the [execute] node set, processing each node based on its file extension. If a node ends with ".hl", it converts it to a lambda object, removes its description, and checks if it's the root node. It then prepares a prompt and code for storage, with optional validation based on conditions. If a node ends with ".md" and contains "/static-snippets/", it splits the content and stores it as static code and prompt. Errors during processing are caught and re-thrown.
for-each:x:@execute/*
   try
      if
         strings.ends-with:x:@.dp/#
            .:.hl
         .lambda
            hyper2lambda:x:@.dp/#/0
               comments:true
            remove-nodes:x:-/*/.description
            if
               eq
                  get-name:x:@hyper2lambda/0
                  .:..
               .lambda
                  .prompt
                  set-value:x:-
                     get-value:x:@hyper2lambda/0
                  remove-nodes:x:@hyper2lambda/0
                  lambda2hyper:x:@hyper2lambda/*
                     comments:true
                  .validation:int:0
                  if
                     and
                        eq:x:@.arguments/*/randomize
                           .:bool:true
                        eq
                           math.modulo:x:@.no
                              .:int:8
                           .:int:0
                     .lambda
                        set-value:x:@.validation
                           .:int:1
                  else-if
                     strings.contains:x:@.dp/#
                        .:/validation/
                     .lambda
                        set-value:x:@.validation
                           .:int:1
                  data.connect:fine-tune
                     data.create
                        table:hyperlambda
                        values
                           code:x:@lambda2hyper
                           prompt:x:@.prompt
                           validation:x:@.validation
                     math.increment:x:@.no
            else
               throw:x:@.dp/#
      else-if
         and
            strings.ends-with:x:@.dp/#
               .:.md
            strings.contains:x:@.dp/#
               .:/static-snippets/
         .lambda
            strings.split:x:@.dp/#/0
               .:---
            if
               not
                  eq
                     get-count:x:@strings.split/*
                     .:int:2
               .lambda
                  throw:x:@.dp/#
            data.connect:fine-tune
               data.create
                  table:hyperlambda
                  values
                     prompt:x:@strings.split/0
                     code:x:@strings.split/1
                     is_static:int:1
               math.increment:x:@.no
   .catch
      throw:x:@.dp/#
