
/*
 * This Hyperlambda code defines a dynamic slot named [magic.auth.captcha-verify] to validate CAPTCHA tokens. It requires a [token], [workload], and [age] as arguments, with default values set for [workload] and [age]. The [token] is split into parts and validated for its structure and time constraints. It checks if the token ends with a specific workload requirement and verifies the token's authenticity using a secret key. If any validation fails, it throws an exception with a status code and public visibility. If successful, it returns true. 
 * 
 * 1. [slots.create] - Creates a new dynamic slot named [magic.auth.captcha-verify].
 * 2. [validators.mandatory] - Ensures [token] is provided.
 * 3. [validators.integer] - Validates [workload] and [age] as integers.
 * 4. [validators.default] - Sets default values for [workload] and [age].
 * 5. [strings.split] - Splits the [token] into parts.
 * 6. [if] - Checks if the split token has three parts.
 * 7. [throw] - Throws an exception if validation fails.
 * 8. [set-value] - Assigns values to [.token], [.time-challenge], and [.seed].
 * 9. [convert] - Converts the seed to a long type.
 * 10. [strings.starts-with] - Checks if [.time-challenge] starts with "c_".
 * 11. [cache.get] and [cache.set] - Validates and caches the challenge.
 * 12. [math.add] and [date.unix] - Validates the time challenge against current time.
 * 13. [while] - Ensures [.endswith] meets workload requirements.
 * 14. [strings.concat] - Concatenates strings for validation.
 * 15. [crypto.hash.sha256] - Hashes the secret and concatenated strings.
 * 16. [return] - Returns true if all validations pass.
 */
hyper2lambda
   slots.create:magic.auth.captcha-verify
      validators.mandatory:x:@.arguments/*/token
      validators.integer:x:@.arguments/*/workload
      validators.integer:x:@.arguments/*/age
      validators.default:x:@.arguments
         workload:int:3
         age:int:10000
      .token
      .time-challenge
      .seed
      strings.split:x:@.arguments/*/token
         .:;
      if
         neq
            get-count:x:@strings.split/*
            .:int:3
         .lambda
            throw:Invalid CAPTCHA token, token did not have 3 parts. A valid Magic CAPTCHA token requires 3 parts; actual token, UNIX time and seed value used to generate token.
               status:int:400
               public:bool:true
      set-value:x:@.token
         strings.to-lower:x:@strings.split/0
      set-value:x:@.time-challenge
         get-value:x:@strings.split/1
      set-value:x:@.seed
         convert:x:@strings.split/2
            type:long
      if
         strings.starts-with:x:@.time-challenge
            .:c_
         .lambda
            if
               neq
                  cache.get:x:@.time-challenge
                  .:valid
               .lambda
                  throw:Invalid CAPTCHA token. Challenge for token was not valid.
                     status:int:400
                     public:bool:true
            cache.set:x:@.time-challenge
      else
         set-value:x:@.time-challenge
            convert:x:@.time-challenge
               type:long
         if
            or
               lt
                  math.add
                     get-value:x:@.time-challenge
                     get-value:x:@.arguments/*/age
                  date.unix
               mt
                  get-value:x:@.time-challenge
                  date.unix
            .lambda
               throw:"Invalid CAPTCHA token. Please check your computer's BIOS time if you suspect this is a mistake."
                  status:int:400
                  public:bool:true
      .endswith:
      while
         lt
            strings.length:x:@.endswith
            get-value:x:@.arguments/*/workload
         .lambda
            set-value:x:@.endswith
               strings.concat
                  get-value:x:@.endswith
                  .:0
      if
         not
            strings.ends-with:x:@.token
               get-value:x:@.endswith
         .lambda
            throw:Invalid CAPTCHA token. Workload requirements of endpoint was not met.
               status:int:400
               public:bool:true
      config.get:"magic:auth:secret"
      crypto.hash.sha256:x:@config.get
      crypto.hash.sha256:x:-
      strings.concat
         get-value:x:@crypto.hash.sha256
         .:;
         get-value:x:@.time-challenge
         .:;
         get-value:x:@.seed
      if
         neq
            crypto.hash.sha256:x:@strings.concat
            get-value:x:@.token
         .lambda
            throw:Invalid CAPTCHA token. Please verify that public key was generated by server token was submitted to.
               status:int:400
               public:bool:true
      return:bool:true
