
/*
 * This Hyperlambda code generates SQL statements to create tables in a PostgreSQL database. It iterates over a list of tables, constructs SQL queries to retrieve table definitions, and concatenates these into a single result. The code uses [for-each] to loop through tables, [strings.concat] to build SQL strings, and [data.select] to execute SQL queries. The final result is returned using [unwrap] and [return].
 * 
 * 1. [case] - Begins a conditional block for PostgreSQL.
 * 2. [.result] - Initializes a node to store the final SQL result.
 * 3. [set-value] - Sets the value of [.result] with an initial comment string.
 * 4. [for-each] - Iterates over each table in the [.arguments] node.
 * 5. [.sql] - Temporary node to store SQL for each table.
 * 6. [strings.concat] - Concatenates strings to form SQL queries.
 * 7. [data.select] - Executes the SQL query to retrieve table definitions.
 * 8. [unwrap] - Evaluates and processes the resulting nodes.
 * 9. [return] - Returns the final concatenated SQL result.
 */
case:pgsql
   .result
   set-value:x:@.result
      strings.concat
         .:@"/*
 * Automatically generated by Magic.
 *
 * NOTICE! Sequences and indexes are NOT included.
 */
"
   for-each:x:@.arguments/*/tables/*
      .sql
      set-value:x:@.sql
         strings.concat
            .:"\nselect 'create table ' || pc.relname || E'(\\n' ||\n   string_agg('  ' || pa.attname || ' ' || pg_catalog.format_type(pa.atttypid, pa.atttypmod) ||\n   coalesce(' default ' || (\n      select pg_catalog.pg_get_expr(d.adbin, d.adrelid)\n         from pg_catalog.pg_attrdef d\n         where d.adrelid = pa.attrelid and d.adnum = pa.attnum and pa.atthasdef), '') || ' ' ||\n              case pa.attnotnull\n                  when true then 'not null'\n                  else 'null'\n              end, E',\\n') ||\n   coalesce((select E',\\n' || string_agg('  constraint ' || pc1.conname || ' ' ||\n      pg_get_constraintdef(pc1.oid), E',\\n' order by pc1.conindid)\n            from pg_constraint pc1\n            where pc1.conrelid = pa.attrelid), '') ||\n   E'\\n);' as sql\nfrom pg_catalog.pg_attribute pa\njoin pg_catalog.pg_class pc\n    on pc.oid = pa.attrelid and pc.relname = @name\njoin pg_catalog.pg_namespace pn\n    on pn.oid = pc.relnamespace and pn.nspname = 'public'\nwhere pa.attnum > 0\n    and not pa.attisdropped\ngroup by pn.nspname, pc.relname, pa.attrelid;"
      data.select:x:@.sql
         database-type:x:@.arguments/*/databaseType
         name:x:@.dp/#
      set-value:x:@.result
         strings.concat
            get-value:x:@.result
            get-value:x:@data.select/*/*/sql
            .:@"

"
   unwrap:x:+/*
   return
      result:x:@.result
