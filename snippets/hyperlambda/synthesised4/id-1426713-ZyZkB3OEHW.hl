
/*
 * This Hyperlambda code snippet is a conditional branching logic that modifies a prompt based on the presence of a colon in the model argument. If the model contains a colon, it appends " ->" to the prompt and adds a stop condition to the HTTP POST payload. Otherwise, it simply sets the prompt to its original value.
 * 
 * 1. [else] - Begins an else block for conditional logic.
 * 2. [if] - Checks if the model argument contains a colon.
 * 3. [strings.contains] - Evaluates whether the model string contains a colon.
 * 4. [.lambda] - Executes the following logic if the condition is true.
 * 5. [set-value] - Sets the prompt to its current value concatenated with " ->".
 * 6. [strings.concat] - Concatenates the prompt with " ->".
 * 7. [get-value] - Retrieves the current prompt value.
 * 8. [add] - Adds a stop condition to the HTTP POST payload.
 * 9. [else] - Executes if the initial if condition is false.
 * 10. [set-value] - Sets the prompt to its original value without modification.
 * 11. [get-value] - Retrieves the current prompt value.
 */
else
   if
      strings.contains:x:@.arguments/*/model
         .:":"
      .lambda
         set-value:x:@.prompt
            strings.concat
               get-value:x:@.arguments/*/prompt
               .:" ->"
         add:x:../*/http.post/*/payload
            .
               stop:" END"
   else
      set-value:x:@.prompt
         get-value:x:@.arguments/*/prompt
