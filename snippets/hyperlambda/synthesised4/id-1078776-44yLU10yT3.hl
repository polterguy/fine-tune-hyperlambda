
/*
 * 1. `@signal`: This iterator starts by finding the first node named "signal" in the current context. It searches through the hierarchy to locate this node. This is useful when you need to start your expression from a specific node that may not be a direct child of the current node.
 * 
 * 2. `*`: This iterator retrieves all children of the "signal" node. It is used to access each child node under "signal" without filtering by name. This is useful when you want to process or inspect all child nodes of a particular parent node.
 * 
 * 3. `vocabulary`: This iterator filters the result set to only include nodes named "vocabulary" from the previously retrieved children. It is used to narrow down the node set to those specifically named "vocabulary", which is useful when you are interested in processing or analyzing nodes with this specific name.
 * 
 * 4. `*`: This iterator retrieves all children of the "vocabulary" nodes. It allows you to access each child node under "vocabulary" without filtering by name. This is useful when you want to further process or inspect all child nodes of the "vocabulary" nodes.
 * 
 * Potential use case: This expression could be used to gather all vocabulary-related data from a signal processing context, where "signal" nodes contain "vocabulary" nodes, and you need to access all elements within these vocabulary nodes for further processing or analysis.
 */

.:x:@signal/*/vocabulary/*