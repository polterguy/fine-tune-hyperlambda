
// This Hyperlambda code connects to a SQLite database and performs a data read operation on the "Medications" table, joining it with the "Patients" table using a left join. It dynamically constructs SQL queries by setting and modifying node names and values based on input arguments, such as grouping, ordering, and aggregation functions. The code also handles the removal of temporary argument nodes after processing and returns the resulting data read nodes.
data.connect:[generic|hospital]
   database-type:sqlite
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function
   remove-nodes:x:@.arguments/*/group_column
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Medications
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Medications.PatientID:PatientID.PatientID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column
   return-nodes:x:@data.read/*
