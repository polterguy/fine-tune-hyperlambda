
/*
 * This Hyperlambda code connects to a SQLite database and performs a SQL query on the "Order Details" table, joining it with "Orders" and "Products" tables using left joins. It constructs an aggregate function dynamically using [strings.concat] and applies it to a specified column, storing the result as "result". The code removes specific nodes from the arguments and adds nodes to the where clause, limiting the result to one record. Finally, it returns the nodes from the data read operation. 
 * 
 * 1. [data.connect] - Connects to a SQLite database.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [set-name] - Constructs an aggregate function dynamically.
 * 4. [remove-nodes] - Removes specific nodes from the arguments.
 * 5. [add] - Adds nodes to the where clause.
 * 6. [data.read] - Performs a SQL query on the "Order Details" table.
 * 7. [join] - Joins "Order Details" with "Orders" and "Products" tables using left joins.
 * 8. [columns] - Specifies the columns to select, applying the aggregate function.
 * 9. [where] - Specifies the where clause.
 * 10. [limit] - Limits the result to one record.
 * 11. [return-nodes] - Returns the nodes from the data read operation.
 */
data.connect:[generic|northwind]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Order Details
         join:Orders
            as:OrderID
            type:left
            on
               and
                  Order Details.OrderID:OrderID.OrderID
         join:Products
            as:ProductID
            type:left
            on
               and
                  Order Details.ProductID:ProductID.ProductID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1
   return-nodes:x:@data.read/*/*
