
/*
 * This Hyperlambda code checks if a node named [function-result] is not null. If it is not null, it concatenates a string that includes the current [result] node value, some newline characters, a descriptive text, and the JSON representation of the [function-result]. This concatenated string is then set as the value of a node named [tmp-completion]. Finally, it updates the [function-result] node with the new value. The code effectively formats and logs the result of a function invocation in a readable JSON format.
 * 
 * 1. [if] - Checks if a condition is true.
 * 2. [not-null] - Checks if the [function-result] node is not null.
 * 3. [.lambda] - Executes its children if the condition is true.
 * 4. [set-value] - Sets the value of a node.
 * 5. [strings.concat] - Concatenates multiple strings.
 * 6. [get-value] - Retrieves the value of a node.
 * 7. [.tmp-completion] - Temporary node to store the concatenated result.
 * 8. [.result] - Node containing a part of the string to be concatenated.
 * 9. [.function-result] - Node containing the result of a function invocation.
 */
if
   not-null:x:@.function-result
   .lambda
      set-value:x:@.tmp-completion
         strings.concat
            get-value:x:@.result
            .:@"
"
            .:@"
"
            .:@"Result of function invocation:
"
            .:@"
"
            .:```json
            .:@"
"
            get-value:x:@.function-result
            .:@"
"
            .:```
      set-value:x:@.function-result
