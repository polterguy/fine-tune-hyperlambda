
// This Hyperlambda code defines a dynamic slot for ingesting products from WooCommerce into a database. It validates mandatory arguments, sets defaults, and logs the process. It connects to a database, deletes existing records, and fetches product data from WooCommerce using HTTP requests. It processes and stores product data, including descriptions and images, into a database table. If vectorization is enabled, it triggers a vectorization process. It logs the completion of the import and handles errors by logging them. Key slots include [validators.mandatory], [data.connect], [http.get], [data.create], and [log.info].
slots.create:woocommerce.products.ingest
   validators.mandatory:x:@.arguments/*/type
   validators.mandatory:x:@.arguments/*/base-url
   validators.mandatory:x:@.arguments/*/username
   validators.mandatory:x:@.arguments/*/secret
   validators.default:x:@.arguments
      quantity:bool:true
      vectorize:bool:true
      max_tokens:int:1000
   log.info:Deleting products to prepare for import using WooCommerce API
      type:x:@.arguments/*/type
      shop:x:@.arguments/*/base-url
   set-value:x:@.arguments/*/base-url
      strings.trim-end:x:@.arguments/*/base-url
         .:/
   try
      data.connect:[generic|magic]
         data.execute:"delete from vss_ml_training_snippets where rowid in (select id as rowid from ml_training_snippets where type = @type and meta = 'woocommerce-import')"
            @type:x:@.arguments/*/type
         data.delete
            table:ml_training_snippets
            where
               and
                  type.eq:x:@.arguments/*/type
                  meta.eq:woocommerce-import
      log.info:Importing products using WooCommerce API
         type:x:@.arguments/*/type
         shop:x:@.arguments/*/base-url
      .products
      .auth
      set-value:x:@.auth
         strings.concat
            get-value:x:@.arguments/*/username
            .:":"
            get-value:x:@.arguments/*/secret
      set-value:x:@.auth
         convert:x:@.auth
            type:bytes
      set-value:x:@.auth
         strings.concat
            .:"Basic "
            convert:x:@.auth
               type:base64
      .page:int:0
      .continue:bool:true
      while:x:@.continue
         .base-url:"https://project.mis.temple.edu/foodkiosk/wp-json/wc/v3/products?per_page=10"
         if
            mt:x:@.page
               .:int:0
            .lambda
               set-value:x:@.base-url
                  strings.concat
                     .:"https://project.mis.temple.edu/foodkiosk/wp-json/wc/v3/products?per_page=10&page="
                     get-value:x:@.page
         http.get:x:@.base-url
            headers
               Authorization:x:@.auth
            convert:bool:true
         add:x:@.products
            get-nodes:x:@http.get/*/content/*
         if
            lt
               get-count:x:@http.get/*/content/*
               .:int:10
            .lambda
               set-value:x:@.continue
                  .:bool:false
         math.increment:x:@.page
            .:int:10
         data.connect:[generic|magic]
            for-each:x:@http.get/*/content/*
               if
                  and
                     eq:x:@.dp/#/*/stock_status
                        .:instock
                     not-null:x:@.dp/#/*/description
                     neq:x:@.dp/#/*/description
                        .:
                  .lambda
                     .prompt
                     .completion
                     set-value:x:@.prompt
                        strings.concat
                           html2markdown:x:@.dp/#/*/description
                     set-value:x:@.completion
                        strings.concat
                           .:"Price: "
                           get-value:x:@.dp/#/*/price
                           .:@"

"
                           .:"URL: "
                           get-value:x:@.dp/#/*/permalink
                     if
                        and
                           not-null:x:@.dp/#/*/short_description
                           neq:x:@.dp/#/*/short_description
                              .:
                        .lambda
                           set-value:x:@.completion
                              strings.concat
                                 get-value:x:@.completion
                                 .:@"

"
                                 .:"Short description: "
                                 html2markdown:x:@.dp/#/*/short_description
                     if
                        exists:x:@.dp/#/*/images/*
                        .lambda
                           set-value:x:@.completion
                              strings.concat
                                 get-value:x:@.completion
                                 .:@"

Images of product:"
                           for-each:x:@.dp/#/*/images/*
                              set-value:x:@.completion
                                 strings.concat
                                    get-value:x:@.completion
                                    .:@"

"
                                    .:![
                                    get-value:x:@.dp/#/*/name
                                    .:](
                                    get-value:x:@.dp/#/*/src
                                    .:)
                     data.create
                        table:ml_training_snippets
                        values
                           type:x:@.arguments/*/type
                           prompt:x:@.prompt
                           completion:x:@.completion
                           uri:x:@.uri
                           meta:woocommerce-import
      if:x:@.arguments/*/vectorize
         log.info:Started vectorizing model after WooCommerce import
            type:x:@.arguments/*/type
            shop:x:@.arguments/*/base-url
         unwrap:x:+/*
         signal:magic.ai.vectorise
            feedback-channel:non-existing
            type:x:@.arguments/*/type
         log.info:Done vectorizing model after WooCommerce import
            type:x:@.arguments/*/type
            shop:x:@.arguments/*/base-url
      log.info:Done with WooCommerce import
         type:x:@.arguments/*/type
         shop:x:@.arguments/*/base-url
   .catch
      log.error:Something went wrong as we tried to import products from WooCommerce
         error:x:@.arguments/*/message
         type:x:@.arguments/*/type
         shop:x:@.arguments/*/base-url
