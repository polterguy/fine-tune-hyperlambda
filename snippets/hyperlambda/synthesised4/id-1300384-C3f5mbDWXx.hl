
/*
 * This Hyperlambda code snippet demonstrates how to perform a left join operation on a SQLite database using the [data.read] slot. The code connects to an SQLite database and reads from the "Employees" table. It performs a left join on the same "Employees" table, using an alias "ReportsTo" to differentiate between the original table and the joined table. The join condition is specified using the [on] slot, where it matches the "ReportsTo" column from the "Employees" table with the "EmployeeID" column from the "ReportsTo" alias. The [columns] slot specifies the columns to be retrieved, using a [distinct_functor] to ensure unique results, and the [where] slot is used for additional filtering conditions. Finally, the [return-nodes] slot retrieves the results of the [data.read] operation.
 * 
 * 1. [data.read] - Initiates a read operation from a database.
 * 2. [database-type] - Specifies the type of database being used, in this case, SQLite.
 * 3. [table] - Specifies the table to read from, here it is "Employees".
 * 4. [join] - Performs a join operation on the specified table.
 * 5. [as] - Provides an alias for the joined table, "ReportsTo".
 * 6. [type] - Specifies the type of join, in this case, a left join.
 * 7. [on] - Defines the condition for the join operation.
 * 8. [and] - Combines multiple conditions for the join.
 * 9. [Employees.ReportsTo:ReportsTo.EmployeeID] - Specifies the join condition between the "Employees" table and its alias.
 * 10. [columns] - Specifies the columns to be retrieved from the query.
 * 11. [distinct_functor] - Ensures that the results are distinct.
 * 12. [as] - Provides an alias for the result of the [distinct_functor].
 * 13. [where] - Placeholder for additional filtering conditions.
 * 14. [return-nodes] - Retrieves the results of the [data.read] operation.
 */
data.read
   database-type:sqlite
   table:Employees
      join:Employees
         as:ReportsTo
         type:left
         on
            and
               Employees.ReportsTo:ReportsTo.EmployeeID
   columns
      distinct_functor
         as:.
   where
      and
return-nodes:x:@data.read/*/*
