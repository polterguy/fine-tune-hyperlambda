
// This Hyperlambda code checks if a file name ends with ".hl", then parses it into a lambda hierarchy while preserving comments. It removes any description nodes, checks if the root node's name is "..", and if so, it sets a prompt and converts the lambda back to Hyperlambda text. It validates based on conditions, either randomizing or checking for "/validation/" in the path, and stores the result in a database, incrementing a counter. If the file doesn't end with ".hl", it throws an error.
if
   strings.ends-with:x:@.dp/#
      .:.hl
   .lambda
      hyper2lambda:x:@.dp/#/0
         comments:true
      remove-nodes:x:-/*/.description
      if
         eq
            get-name:x:@hyper2lambda/0
            .:..
         .lambda
            .prompt
            set-value:x:-
               get-value:x:@hyper2lambda/0
            remove-nodes:x:@hyper2lambda/0
            lambda2hyper:x:@hyper2lambda/*
               comments:true
            .validation:int:0
            if
               and
                  eq:x:@.arguments/*/randomize
                     .:bool:true
                  eq
                     math.modulo:x:@.no
                        .:int:8
                     .:int:0
               .lambda
                  set-value:x:@.validation
                     .:int:1
            else-if
               strings.contains:x:@.dp/#
                  .:/validation/
               .lambda
                  set-value:x:@.validation
                     .:int:1
            data.connect:fine-tune
               data.create
                  table:hyperlambda
                  values
                     code:x:@lambda2hyper
                     prompt:x:@.prompt
                     validation:x:@.validation
               math.increment:x:@.no
      else
         throw:x:@.dp/#
