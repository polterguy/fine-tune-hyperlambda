
// This Hyperlambda code processes a list of URLs, fetching and validating sitemaps. It first checks if the URL count is below 10,000 using [lt] and [get-count]. If true, it splits the domain using [strings.split] and constructs the full URL with [strings.concat]. It fetches the sitemap using [http.get] and validates the response status and content type with [if], [and], and [not]. If valid, it parses the XML content using [xml2lambda] and iterates through URLs with [for-each], ensuring each URL is unique and prepended with the domain if necessary. It also processes sitemap indexes, sending signals for further sitemap loading if needed.
if
   lt
      get-count:x:@.urls/*
      .:int:10000
   .lambda
      .domain
      strings.split:x:@.dp/#
         .:/
      set-value:x:@.domain
         strings.concat
            get-value:x:@strings.split/0
            .://
            get-value:x:@strings.split/1
      add:x:./*/http.get
         get-nodes:x:@.arguments/*/headers
      http.get:x:@.dp/#
         timeout:60
      if
         and
            not
               mte:x:@http.get
                  .:int:200
            not
               lt:x:@http.get
                  .:int:300
         .lambda
            log.error:Sitemap invocation did not return success status
               url:x:@.dp/#
               status:x:@http.get
            throw:Could not retrieve sitemap
      if
         not
            or
               strings.starts-with:x:@http.get/*/headers/*/Content-Type
                  .:application/xml
               strings.starts-with:x:@http.get/*/headers/*/content-type
                  .:application/xml
               strings.starts-with:x:@http.get/*/headers/*/Content-Type
                  .:text/xml
               strings.starts-with:x:@http.get/*/headers/*/content-type
                  .:text/xml
         .lambda
            throw:Sitemap was not XML
      else
         set-value:x:@.has-sitemap
            .:bool:true
         strings.trim:x:@http.get/*/content
         xml2lambda:x:@strings.trim
         for-each:x:"@xml2lambda/*/urlset/*/url/*/loc/*/\\#text"
            if
               lt
                  get-count:x:@.urls/*
                  .:int:10000
               .lambda
                  .url
                  set-value:x:@.url
                     get-value:x:@.dp/#
                  if
                     and
                        not
                           strings.starts-with:x:@.dp/#
                              .:"http://"
                        not
                           strings.starts-with:x:@.dp/#
                              .:"https://"
                     .lambda
                        set-value:x:@.url
                           strings.concat
                              get-value:x:@.domain
                              get-value:x:@.dp/#
                  if
                     not-exists:x:@.urls/*/={@.url}
                     .lambda
                        unwrap:x:+/*/*
                        add:x:@.urls
                           .
                              .:x:@.url
         for-each:x:"@xml2lambda/*/urlset/*/url/*/loc/*/\\#cdata-section"
            if
               lt
                  get-count:x:@.urls/*
                  .:int:10000
               .lambda
                  .url
                  set-value:x:@.url
                     get-value:x:@.dp/#
                  if
                     and
                        not
                           strings.starts-with:x:@.dp/#
                              .:"http://"
                        not
                           strings.starts-with:x:@.dp/#
                              .:"https://"
                     .lambda
                        set-value:x:@.url
                           strings.concat
                              get-value:x:@.domain
                              get-value:x:@.dp/#
                  if
                     not-exists:x:@.urls/*/={@.url}
                     .lambda
                        unwrap:x:+/*/*
                        add:x:@.urls
                           .
                              .:x:@.url
         for-each:x:"@xml2lambda/*/sitemapindex/*/sitemap/*/[0,25]/loc/*/\\#cdata-section"
            if
               lt
                  get-count:x:@.urls/*
                  .:int:10000
               .lambda
                  add:x:./*/signal
                     get-nodes:x:@.arguments/*/headers
                  unwrap:x:+/**
                  signal:magic.ai.load-sitemap
                     max:int:10000
                     feedback-channel:x:@.arguments/*/feedback-channel
                     filter-on-url:x:@.arguments/*/filter-on-url
                     sitemap
                        .:x:@.dp/#
                  add:x:@.urls
                     get-nodes:x:@signal/*/urls/*
                  if
                     and
                        eq:x:@signal/*/has-sitemap
                           .:bool:false
                        eq
                           get-count:x:@.urls/*
                           .:int:0
                     .lambda
                        set-value:x:@.has-sitemap
                           .:bool:false
         for-each:x:"@xml2lambda/*/sitemapindex/*/sitemap/*/[0,25]/loc/*/\\#text"
            if
               lt
                  get-count:x:@.urls/*
                  .:int:10000
               .lambda
                  unwrap:x:+/**
                  signal:magic.ai.load-sitemap
                     max:int:10000
                     feedback-channel:x:@.arguments/*/feedback-channel
                     filter-on-url:x:@.arguments/*/filter-on-url
                     sitemap
                        .:x:@.dp/#
                  add:x:@.urls
                     get-nodes:x:@signal/*/urls/*
                  if
                     and
                        eq:x:@signal/*/has-sitemap
                           .:bool:false
                        eq
                           get-count:x:@.urls/*
                           .:int:0
                     .lambda
                        set-value:x:@.has-sitemap
                           .:bool:false
