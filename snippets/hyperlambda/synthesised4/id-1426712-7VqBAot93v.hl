
/*
 * This Hyperlambda code is designed to handle a stream of data, processing and signaling based on specific conditions. It checks if the [stream] argument is true, then performs a series of operations involving unwrapping nodes, adding data to an HTTP POST request, and executing functions. The code includes conditional logic to handle message content, function invocation, and signaling through sockets. It manages invocation limits, logs errors, and constructs responses based on the results of executed functions. The code also handles JSON conversion and ensures that the results are within acceptable size limits. The main purpose is to process streaming data, invoke functions, and communicate results or errors through socket signals.
 * 
 * 1. [if] - Checks if the [stream] argument is true.
 * 2. [unwrap] - Unwraps specific nodes related to SSE (Server-Sent Events) data.
 * 3. [add] - Adds data to an HTTP POST request payload.
 * 4. [if] - Checks if the message starts with "data:" and processes it.
 * 5. [strings.substring] - Extracts a substring from the message.
 * 6. [strings.trim] - Trims whitespace from the substring.
 * 7. [if] - Checks if the trimmed string is not empty.
 * 8. [if] - Checks if the trimmed string is "[DONE]".
 * 9. [if] - Increments invocation count if conditions are met.
 * 10. [if] - Checks for specific content in the result and processes function invocations.
 * 11. [for-each] - Iterates over split strings to handle function invocations.
 * 12. [try] - Attempts to execute a function and handles errors.
 * 13. [sockets.signal] - Sends signals through sockets based on conditions.
 * 14. [execute] - Invokes a function with specified arguments.
 * 15. [lambda2json] - Converts lambda to JSON format.
 * 16. [if] - Checks if the result size exceeds the maximum allowed tokens.
 * 17. [config.get] - Retrieves a success message from configuration.
 * 18. [set-value] - Sets new prompt and function result values.
 * 19. [json2lambda] - Converts JSON to lambda format.
 * 20. [if] - Checks for finish reasons and signals through sockets.
 * 21. [if] - Appends content to the result and signals messages.
 * 22. [else-if] - Signals function waiting status if conditions are met.
 * 23. [add] - Adds a stream flag to the HTTP POST payload.
 */
if
   eq:x:@.arguments/*/stream
      .:bool:true
   .lambda
      unwrap:x:+/+/+/+/*/*/.sse/*/.extra
      unwrap:x:+/+/+/*/*/.sse/*/.user-id
      unwrap:x:+/+/*/*/.sse/*/.type
      unwrap:x:+/*/*/.sse/*/.session
      add:x:../*/.invoke/*/while/*/.lambda/*/http.post
         .
            .sse
               .session:x:@.arguments/*/session
               .extra:x:@.arguments/*/extra
               .type:x:@.arguments/*/type
               .user-id:x:@.arguments/*/user_id
               if
                  and
                     exists:x:@.arguments/*/message
                     not-null:x:@.arguments/*/message
                     strings.starts-with:x:@.arguments/*/message
                        .:"data:"
                  .lambda
                     strings.substring:x:@.arguments/*/message
                        .:int:5
                     strings.trim:x:@strings.substring
                     if
                        neq:x:@strings.trim
                           .:
                        .lambda
                           if
                              eq:x:@strings.trim
                                 .:[DONE]
                              .lambda
                                 if
                                    neq:x:@.no-invocation
                                       .:int:0
                                    .lambda
                                       math.increment:x:@.no-invocation
                                 if
                                    and
                                       strings.contains:x:@.result
                                          .:___
                                       strings.contains:x:@.result
                                          .:FUNCTION_INVOCATION[
                                    .lambda
                                       if
                                          eq:x:@.no-invocation
                                             .:int:0
                                          .lambda
                                             math.increment:x:@.no-invocation
                                       strings.split:x:@.result
                                          .:___
                                       for-each:x:@strings.split/*
                                          if
                                             strings.contains:x:@.dp/#
                                                .:FUNCTION_INVOCATION[/
                                             .lambda
                                                try
                                                   if
                                                      lte:x:@.iterations
                                                         .:int:1
                                                      .lambda
                                                         log.error:Too many function invocations
                                                         sockets.signal:x:@.session
                                                            args
                                                               function_error:Too many function invocations
                                                         sockets.signal:x:@.session
                                                            args
                                                               function_waiting:bool:false
                                                         sockets.signal:x:@.session
                                                            args
                                                               error:bool:true
                                                               status:int:500
                                                               message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                                                         sockets.signal:x:@.session
                                                            args
                                                               finished:bool:true
                                                   else
                                                      execute:magic.ai.functions.invoke
                                                         type:x:@.type
                                                         session:x:@.session
                                                         user-id:x:@.user-id
                                                         invocation:x:@.dp/#
                                                         extra:x:@.extra
                                                      lambda2json:x:@execute/*/result/*
                                                         format:true
                                                      if
                                                         mt
                                                            openai.tokenize:x:@lambda2json
                                                            get-value:x:@.arguments/@.arguments/*/max_context_tokens
                                                         .lambda
                                                            throw:Result too large, try to limit your result
                                                               status:int:400
                                                               public:bool:true
                                                      config.get:"magic:chat:functions:success-message"
                                                         .:Success!
                                                      unwrap:x:+/*/*
                                                      sockets.signal:x:@.session
                                                         args
                                                            function_result:x:@config.get
                                                            invocation:x:@execute/*/json
                                                            file:x:@execute/*/workflow
                                                      if
                                                         exists:x:@execute/*/result/*
                                                         .lambda
                                                            set-value:x:@.new-prompt
                                                               strings.concat
                                                                  get-value:x:@.new-prompt
                                                                  .:"Response from '"
                                                                  get-value:x:@execute/*/workflow
                                                                  .:@"' was:
```json
"
                                                                  get-value:x:@lambda2json
                                                                  .:@"
"
                                                                  .:```
                                                                  .:@"
"
                                                                  .:@"
"
                                                            set-value:x:@.function-result
                                                               strings.concat
                                                                  get-value:x:@.function-result
                                                                  get-value:x:@lambda2json
                                                                  .:"\n"
                                                      else
                                                         set-value:x:@.new-prompt
                                                            strings.concat
                                                               get-value:x:@.new-prompt
                                                               .:"Invocation of '"
                                                               get-value:x:@execute/*/workflow
                                                               .:"' was a success."
                                                               .:@"
"
                                                               .:@"
"
                                                .catch
                                                   log.error:Could not execute AI function
                                                      message:x:@.arguments/*/message
                                                   unwrap:x:+/*/*
                                                   sockets.signal:x:@.session
                                                      args
                                                         function_error:x:@.arguments/*/message
                                                   set-value:x:@.new-prompt
                                                      strings.concat
                                                         get-value:x:@.new-prompt
                                                         .:"Invocation failed, exception message was: '"
                                                         get-value:x:@.arguments/*/message
                                                         .:"'"
                                                         .:@"
"
                                                         .:@"
"
                                       set-value:x:@.new-prompt
                                          strings.trim:x:@.new-prompt
                                 else
                                    sockets.signal:x:@.session
                                       args
                                          finished:bool:true
                                    set-value:x:@.iterations
                                       .:int:0
                           else
                              json2lambda:x:@strings.trim
                              if
                                 and
                                    exists:x:@json2lambda/*/choices/0/*/finish_reason
                                    not-null:x:@json2lambda/*/choices/0/*/finish_reason
                                 .lambda
                                    set-value:x:@.finish_reason
                                       get-value:x:@json2lambda/*/choices/0/*/finish_reason
                                    unwrap:x:+/*/*
                                    sockets.signal:x:@.session
                                       args
                                          finish_reason:x:@.finish_reason
                              if
                                 and
                                    not-null:x:@json2lambda/*/choices/0/*/delta/*/content
                                    neq:x:@json2lambda/*/choices/0/*/delta/*/content
                                       .:
                                 .lambda
                                    set-value:x:@.result
                                       strings.concat
                                          get-value:x:@.result
                                          get-value:x:@json2lambda/*/choices/0/*/delta/*/content
                                    if
                                       not
                                          strings.contains:x:@.result
                                             .:___
                                       .lambda
                                          unwrap:x:+/*/*
                                          sockets.signal:x:@.session
                                             args
                                                message:x:@json2lambda/*/choices/0/*/delta/*/content
                                    else-if
                                       and
                                          strings.contains:x:@.result
                                             .:FUNCTION_INVOCATION[
                                          neq:x:@.has-sent-waiting
                                             .:bool:true
                                       .lambda
                                          sockets.signal:x:@.session
                                             args
                                                function_waiting:bool:true
                                          set-value:x:@.has-sent-waiting
                                             .:bool:true
      add:x:../*/.invoke/*/while/*/.lambda/*/http.post/*/payload
         .
            stream:bool:true
