
// This Hyperlambda snippet processes a data type string by first removing numeric sequences and "unsigned" using [strings.regex-replace] and [strings.replace]. It then uses [switch] to map the cleaned type string to a Hyperlambda type, setting [.type] to "date", "decimal", "long", "string", or "bool" based on the case matches. If no cases match, it checks if the string starts with "enum" and sets [.type] to "string", otherwise defaults to "string".
else
   strings.regex-replace:x:@.dp/#/*/Type
      .:"\\([0-9,]+\\)"
      .:
   strings.replace:x:@strings.regex-replace
      .:" unsigned"
      .:
   switch:x:@strings.replace
      case:date
      case:datetime
      case:timestamp
         set-value:x:@.type
            .:date
      case:float
      case:double
      case:double precision
      case:decimal
      case:dec
         set-value:x:@.type
            .:decimal
      case:bit
      case:tinyint
      case:bool
      case:boolean
      case:smallint
      case:mediumint
      case:integer
      case:bigint
      case:int
      case:int unsigned
         set-value:x:@.type
            .:long
      case:char
      case:varchar
      case:binary
      case:varbinary
      case:tinyblob
      case:tinytext
      case:text
      case:blob
      case:mediumtext
      case:mediumblob
      case:longtext
      case:longblob
      case:enum
      case:set
         set-value:x:@.type
            .:string
      case:tinyint
         set-value:x:@.type
            .:bool
      default
         if
            strings.starts-with:x:@strings.replace
               .:enum
            .lambda
               set-value:x:@.type
                  .:string
         else
            set-value:x:@.type
               .:string
