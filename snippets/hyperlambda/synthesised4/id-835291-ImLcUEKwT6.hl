
// This Hyperlambda code dynamically generates SQL statements to create tables based on the specified database type (SQLite, MySQL, PostgreSQL, or MSSQL). It uses a [switch] statement to handle different database types and constructs SQL strings accordingly. The [case] slots define the SQL syntax for each database type, considering primary key types and default values. The [set-value] and [strings.concat] slots are used to build the SQL statement, ensuring the correct syntax for creating tables with primary keys and optional default values.
switch:x:@.arguments/*/databaseType
   case:sqlite
      .type
      if
         eq:x:@.arguments/*/pkType
            .:auto_increment
         .lambda
            set-value:x:@.type
               strings.concat
                  .:integer not null primary key autoincrement
      else
         set-value:x:@.type
            strings.concat
               get-value:x:@.arguments/*/pkType
               .:(
               get-value:x:@.arguments/*/pkLength
               .:) not null primary key
      set-value:x:@.sql
         strings.concat
            .:"create table "
            get-value:x:@.arguments/*/tableName
            .:(
            get-value:x:@.arguments/*/pkName
            .:" "
            get-value:x:@.type
      if
         and
            exists:x:@.arguments/*/pkDefault
            neq:x:@.arguments/*/pkDefault
               .
            neq:x:@.arguments/*/pkDefault
               .:
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" default "
                  get-value:x:@.arguments/*/pkDefault
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:);
   case:mysql
      .type
      if
         eq:x:@.arguments/*/pkType
            .:auto_increment
         .lambda
            set-value:x:@.type
               strings.concat
                  .:int not null auto_increment primary key
      else
         set-value:x:@.type
            strings.concat
               get-value:x:@.arguments/*/pkType
               .:(
               get-value:x:@.arguments/*/pkLength
               .:) not null primary key
      set-value:x:@.sql
         strings.concat
            .:"create table "
            get-value:x:@.arguments/*/tableName
            .:(
            get-value:x:@.arguments/*/pkName
            .:" "
            get-value:x:@.type
      if
         and
            exists:x:@.arguments/*/pkDefault
            neq:x:@.arguments/*/pkDefault
               .
            neq:x:@.arguments/*/pkDefault
               .:
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" default "
                  get-value:x:@.arguments/*/pkDefault
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:);
   case:pgsql
      .type
      if
         eq:x:@.arguments/*/pkType
            .:auto_increment
         .lambda
            set-value:x:@.type
               strings.concat
                  get-value:x:@.arguments/*/pkName
                  .:" serial primary key"
      else
         set-value:x:@.type
            strings.concat
               get-value:x:@.arguments/*/pkName
               .:" "
               get-value:x:@.arguments/*/pkType
               .:(
               get-value:x:@.arguments/*/pkLength
               .:) primary key
      set-value:x:@.sql
         strings.concat
            .:"create table "
            get-value:x:@.arguments/*/tableName
            .:(
            get-value:x:@.type
      if
         and
            exists:x:@.arguments/*/pkDefault
            neq:x:@.arguments/*/pkDefault
               .
            neq:x:@.arguments/*/pkDefault
               .:
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" default "
                  get-value:x:@.arguments/*/pkDefault
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:);
   case:mssql
      .type
      if
         eq:x:@.arguments/*/pkType
            .:auto_increment
         .lambda
            set-value:x:@.type
               strings.concat
                  get-value:x:@.arguments/*/pkName
                  .:" integer"
                  .:" not null identity(1,1) primary key"
      else
         set-value:x:@.type
            strings.concat
               get-value:x:@.arguments/*/pkName
               .:" "
               get-value:x:@.arguments/*/pkType
               .:(
               get-value:x:@.arguments/*/pkLength
               .:) not null primary key
      set-value:x:@.sql
         strings.concat
            .:"create table "
            get-value:x:@.arguments/*/tableName
            .:(
            get-value:x:@.type
      if
         and
            exists:x:@.arguments/*/pkDefault
            neq:x:@.arguments/*/pkDefault
               .
            neq:x:@.arguments/*/pkDefault
               .:
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" default "
                  get-value:x:@.arguments/*/pkDefault
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:);
