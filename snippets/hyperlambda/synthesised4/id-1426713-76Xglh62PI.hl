
/*
 * This Hyperlambda code handles conditional logic for processing AI context and prompts based on input arguments. It first checks if embeddings should be used and retrieves context if true. It then checks for cached results and returns them if available. The code adjusts the prompt based on specific string patterns and appends context data. Finally, it adds reference data to the result if references are provided. 
 * 
 * 1. [if] - Checks if embeddings should be used by comparing an argument value.
 * 2. [eq] - Compares the converted 'use_embeddings' argument to 1.
 * 3. [convert] - Converts the 'use_embeddings' argument to an integer.
 * 4. [.lambda] - Executes if the condition is true.
 * 5. [unwrap] - Unwraps the next sibling nodes.
 * 6. [signal] - Retrieves AI context using specified arguments.
 * 7. [if] - Checks if a cached result exists.
 * 8. [exists] - Checks for the existence of a 'cached' node.
 * 9. [.lambda] - Executes if the cached result exists.
 * 10. [return] - Returns the cached result and a finish reason.
 * 11. [add] - Adds database time to the result.
 * 12. [if] - Checks for specific string patterns in 'prefix'.
 * 13. [and] - Combines multiple string checks.
 * 14. [strings.contains] - Checks if 'prefix' contains specific patterns.
 * 15. [.lambda] - Executes if patterns are found.
 * 16. [set-value] - Modifies the 'prompt' with replaced strings.
 * 17. [strings.replace] - Replaces parts of the 'prefix' with prompt and context.
 * 18. [else] - Executes if patterns are not found.
 * 19. [strings.concat] - Concatenates strings to form a new prompt.
 * 20. [if] - Checks if references exist and are not null.
 * 21. [not-null] - Checks if 'references' is not null.
 * 22. [.lambda] - Executes if references are valid.
 * 23. [add] - Adds references to the result.
 * 24. [get-nodes] - Retrieves nodes for snippets.
 */
if
   eq
      convert:x:@.arguments/*/use_embeddings
         type:int
      .:int:1
   .lambda
      unwrap:x:+/*
      signal:magic.ai.get-context
         type:x:@.arguments/*/type
         prompt:x:@.arguments/*/prompt
         threshold:x:@.arguments/*/threshold
         max_tokens:x:@.arguments/*/max_context_tokens
         api_key:x:@.arguments/*/api_key
      if
         exists:x:@signal/*/cached
         .lambda
            unwrap:x:+/*
            return
               result:x:@signal/*/cached
               finish_reason:cached
      add:x:@.result
         get-nodes:x:@signal/*/db_time
      if
         and
            strings.contains:x:@.arguments/*/prefix
               .:[CONTEXT]
            strings.contains:x:@.arguments/*/prefix
               .:[QUESTION]
            strings.contains:x:@.arguments/*/prefix
               .:"ANSWER:"
         .lambda
            set-value:x:@.prompt
               strings.replace:x:@.arguments/*/prefix
                  .:[QUESTION]
                  get-value:x:@.arguments/*/prompt
            set-value:x:@.prompt
               strings.replace:x:@.prompt
                  .:[CONTEXT]
                  get-value:x:@signal/*/context
      else
         set-value:x:@.prompt
            strings.concat
               get-value:x:@.arguments/*/prefix
               .:@"
QUESTION: "
               get-value:x:@.arguments/*/prompt
               .:@"
CONTEXT: 
"
               get-value:x:@signal/*/context
               .:@"
ANSWER: "
      if
         and
            exists:x:@.arguments/*/references
            not-null:x:@.arguments/*/references
            get-value:x:@.arguments/*/references
         .lambda
            add:x:@.result
               .
                  references
            add:x:@.result/*/references
               get-nodes:x:@signal/*/snippets/*
