
/*
 * This Hyperlambda code connects to a database to retrieve training snippet data, creates an embedding using OpenAI's API, and updates the database with the new embedding. It first reads data from the [ml_training_snippets] table, then concatenates the prompt and completion for embedding creation. An HTTP POST request is made to OpenAI's API to generate embeddings, with error handling for unsuccessful requests. Finally, it deletes the old snippet and inserts the new embedding into the [vss_ml_training_snippets] table.
 * 
 * 1. [data.connect] - Connects to the database.
 * 2. [data.read] - Reads data from the specified table with a join condition.
 * 3. [columns] - Specifies the columns to retrieve.
 * 4. [where] - Filters the data based on the provided condition.
 * 5. [.embedding] - Concatenates prompt and completion for embedding.
 * 6. [set-value] - Sets the value of the embedding.
 * 7. [http.post] - Sends a POST request to OpenAI's API to create embeddings.
 * 8. [headers] - Sets the headers for the HTTP request.
 * 9. [payload] - Specifies the payload for the HTTP request.
 * 10. [convert] - Converts the response to a usable format.
 * 11. [if] - Checks if the HTTP request was unsuccessful.
 * 12. [not] - Negates the condition.
 * 13. [and] - Combines multiple conditions.
 * 14. [mte] - Checks if the response code is more than or equal to 200.
 * 15. [lt] - Checks if the response code is less than 300.
 * 16. [.lambda] - Executes a block if the condition is true.
 * 17. [lambda2hyper] - Converts the response to Hyperlambda format.
 * 18. [log.error] - Logs an error message.
 * 19. [throw] - Throws an exception if embedding creation fails.
 * 20. [data.delete] - Deletes the old snippet from the database.
 * 21. [floatArray2bytes] - Converts the embedding to bytes.
 * 22. [data.create] - Inserts the new embedding into the database.
 */
data.connect:[generic|magic]
   data.read
      table:ml_training_snippets
         join:ml_types
            on
               and
                  ml_training_snippets.type.eq:ml_types.type
      columns
         prompt
         completion
         vector_model
      where
         and
            id.eq:x:@.arguments/*/id
   .embedding
   set-value:x:@.embedding
      strings.concat
         get-value:x:@data.read/*/*/prompt
         .:@"

"
         get-value:x:@data.read/*/*/completion
   http.post:"https://api.openai.com/v1/embeddings"
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         model:x:@data.read/*/*/vector_model
         input:x:@.embedding
      convert:true
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            message:x:@http.post/*/content/*/error/*/message
            error:x:@lambda2hyper
         throw:Could not create embeddings for model
   data.delete
      table:vss_ml_training_snippets
      where
         and
            rowid.eq:x:@.arguments/*/id
   floatArray2bytes:x:@http.post/*/content/*/data/0/*/embedding/*
   data.create
      table:vss_ml_training_snippets
      values
         embedding_vss:x:@floatArray2bytes
         rowid:x:@.arguments/*/id
