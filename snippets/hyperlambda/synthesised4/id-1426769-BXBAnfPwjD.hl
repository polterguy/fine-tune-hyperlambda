
/*
 * This Hyperlambda code uses a [switch] statement to determine the data type of a given input string and sets the [.type] node accordingly. It matches various cases like "smallserial", "serial", "timestamp", "numeric", "double precision", "integer", "string", "boolean", and others to assign types such as "int", "date", "decimal", "double", "long", "string", and "bool". If no case matches, it checks if the input starts with "enum" and sets the type to "string", otherwise defaults to "string". The code is useful for mapping database field types to Hyperlambda types.
 * 
 * 1. [switch] - Evaluates the input string and determines which case to execute.
 * 2. [case:smallserial], [case:serial], [case:smallint] - Matches input to set [.type] to "int".
 * 3. [case:timestamp] - Matches input to set [.type] to "date".
 * 4. [case:numeric], [case:decimal], [case:real], [case:money] - Matches input to set [.type] to "decimal".
 * 5. [case:double precision] - Matches input to set [.type] to "double".
 * 6. [case:integer], [case:bigint], [case:bigserial], [case:interval] - Matches input to set [.type] to "long".
 * 7. [case:string], [case:bit], [case:bit varying], [case:character], [case:character varying], [case:json], [case:text], [case:xml] - Matches input to set [.type] to "string".
 * 8. [case:boolean] - Matches input to set [.type] to "bool".
 * 9. [default] - Executes if no case matches.
 * 10. [if] - Checks if input starts with "enum" to set [.type] to "string".
 * 11. [else] - Sets [.type] to "string" if no conditions are met.
 */
switch:x:@strings.replace
   case:smallserial
   case:serial
   case:smallint
      set-value:x:@.type
         .:int
   case:timestamp
      set-value:x:@.type
         .:date
   case:numeric
   case:decimal
   case:real
   case:money
      set-value:x:@.type
         .:decimal
   case:double precision
      set-value:x:@.type
         .:double
   case:integer
   case:bigint
   case:bigserial
   case:interval
      set-value:x:@.type
         .:long
   case:string
   case:bit
   case:bit varying
   case:character
   case:character varying
   case:json
   case:text
   case:xml
      set-value:x:@.type
         .:string
   case:boolean
      set-value:x:@.type
         .:bool
   default
      if
         strings.starts-with:x:@strings.replace
            .:enum
         .lambda
            set-value:x:@.type
               .:string
      else
         set-value:x:@.type
            .:string
