
/*
 * This Hyperlambda code checks if a node named [stream] within [.arguments] is either false or does not exist. If either condition is true, it evaluates the [.lambda] block. Inside the [.lambda] block, it unwraps the children nodes of the sibling node following the current node, and adds two nodes, [result] and [finish_reason], to the [return] node. The values for these nodes are taken from the [invoke] node's children. 
 * 
 * 1. [or] - Checks if either of the following conditions is true.
 * 2. [eq] - Compares the value of the [stream] node to false.
 * 3. [not-exists] - Checks if the [stream] node does not exist.
 * 4. [.lambda] - Contains the code to execute if the [or] condition is true.
 * 5. [unwrap] - Evaluates and unwraps the children nodes of the sibling node following the current node.
 * 6. [add] - Adds nodes to the [return] node.
 * 7. [result] - Sets the value from the [invoke] node's [result] child.
 * 8. [finish_reason] - Sets the value from the [invoke] node's [finish_reason] child.
 */
if
   or
      eq:x:@.arguments/*/stream
         .:bool:false
      not-exists:x:@.arguments/*/stream
   .lambda
      unwrap:x:+/*/*
      add:x:../*/return
         .
            result:x:@.invoke/*/.result
            finish_reason:x:@.invoke/*/.finish_reason
