
/*
 * The code checks if the [completion] node is not empty, and if true, it further checks if a [completion] node exists within a specific path. If it exists, it concatenates its current value with a new value. If not, it adds a new [completion] node with the given value. The logic ensures that the [completion] node is updated or created based on its existence. 
 * 
 * 1. [if] - Checks if the [completion] node is not empty.
 * 2. [neq] - Compares the [completion] node's value to ensure it's not empty.
 * 3. [lambda] - Executes the contained logic if the condition is true.
 * 4. [if] - Nested check for the existence of a specific [completion] node.
 * 5. [exists] - Verifies if a [completion] node exists at a given path.
 * 6. [lambda] - Executes the logic if the nested condition is true.
 * 7. [set-value] - Updates the existing [completion] node's value.
 * 8. [strings.concat] - Concatenates the current and new values of the [completion] node.
 * 9. [get-first-value] - Retrieves the first value from the specified nodes.
 * 10. [else] - Executes if the nested [if] condition is false.
 * 11. [unwrap] - Evaluates expressions within the specified nodes.
 * 12. [add] - Adds a new [completion] node with the given value if it doesn't exist.
 */
if
   neq:x:@.completion
      .:
   .lambda
      if
         exists:x:@.snippets/0/-/*/completion
         .lambda
            set-value:x:@.snippets/0/-/*/completion
               strings.concat
                  get-first-value
                     get-value:x:@.snippets/0/-/*/completion
                     .:
                  get-value:x:@.completion
      else
         unwrap:x:+/*/*
         add:x:@.snippets/0/-
            .
               completion:x:@.completion
