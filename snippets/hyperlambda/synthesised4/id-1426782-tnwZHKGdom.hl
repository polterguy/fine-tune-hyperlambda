
/*
 * /*
 *  * This Hyperlambda code is designed to process product data and generate training snippets for machine learning purposes. It checks if a product is in stock and has a non-empty description, then creates a prompt and completion pair based on the product's details. If additional information such as a short description or images exists, it appends these to the completion. Finally, it stores the generated data in a database table named "ml_training_snippets".
 *  * 
 *  * 1. [if] - Checks if the product is in stock and has a non-empty description.
 *  * 2. [eq] - Compares the stock status to "instock".
 *  * 3. [not-null] - Ensures the description is not null.
 *  * 4. [neq] - Ensures the description is not an empty string.
 *  * 5. [.lambda] - Executes the following slots if the conditions are met.
 *  * 6. [.prompt] - Placeholder for the prompt data.
 *  * 7. [.completion] - Placeholder for the completion data.
 *  * 8. [set-value] - Sets the value of the prompt and completion.
 *  * 9. [strings.concat] - Concatenates strings to form the prompt and completion.
 *  * 10. [html2markdown] - Converts HTML description to Markdown for the prompt.
 *  * 11. [get-value] - Retrieves values such as price and permalink for the completion.
 *  * 12. [if] - Checks for the existence of a short description.
 *  * 13. [not-null] - Ensures the short description is not null.
 *  * 14. [neq] - Ensures the short description is not an empty string.
 *  * 15. [.lambda] - Executes the following slots if the short description conditions are met.
 *  * 16. [set-value] - Appends the short description to the completion.
 *  * 17. [html2markdown] - Converts HTML short description to Markdown.
 *  * 18. [if] - Checks for the existence of product images.
 *  * 19. [exists] - Ensures there are images associated with the product.
 *  * 20. [.lambda] - Executes the following slots if images exist.
 *  * 21. [set-value] - Appends image information to the completion.
 *  * 22. [for-each] - Iterates over each image.
 *  * 23. [set-value] - Appends each image's Markdown representation to the completion.
 *  * 24. [data.create] - Inserts the generated prompt and completion into the "ml_training_snippets" table.
 *  * 25. [table] - Specifies the database table for insertion.
 *  * 26. [values] - Specifies the values to be inserted into the table.
 *  */
 */
if
   and
      eq:x:@.dp/#/*/stock_status
         .:instock
      not-null:x:@.dp/#/*/description
      neq:x:@.dp/#/*/description
         .:
   .lambda
      .prompt
      .completion
      set-value:x:@.prompt
         strings.concat
            html2markdown:x:@.dp/#/*/description
      set-value:x:@.completion
         strings.concat
            .:"Price: "
            get-value:x:@.dp/#/*/price
            .:@"

"
            .:"URL: "
            get-value:x:@.dp/#/*/permalink
      if
         and
            not-null:x:@.dp/#/*/short_description
            neq:x:@.dp/#/*/short_description
               .:
         .lambda
            set-value:x:@.completion
               strings.concat
                  get-value:x:@.completion
                  .:@"

"
                  .:"Short description: "
                  html2markdown:x:@.dp/#/*/short_description
      if
         exists:x:@.dp/#/*/images/*
         .lambda
            set-value:x:@.completion
               strings.concat
                  get-value:x:@.completion
                  .:@"

Images of product:"
            for-each:x:@.dp/#/*/images/*
               set-value:x:@.completion
                  strings.concat
                     get-value:x:@.completion
                     .:@"

"
                     .:![
                     get-value:x:@.dp/#/*/name
                     .:](
                     get-value:x:@.dp/#/*/src
                     .:)
      data.create
         table:ml_training_snippets
         values
            type:x:@.arguments/*/type
            prompt:x:@.prompt
            completion:x:@.completion
            uri:x:@.uri
            meta:woocommerce-import
