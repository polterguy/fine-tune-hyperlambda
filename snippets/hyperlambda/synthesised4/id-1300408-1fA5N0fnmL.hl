
// This Hyperlambda code snippet demonstrates how to perform a SQL query using the [data.read] slot to interact with an SQLite database. The code is structured to select data from the "Orders" table, while performing left joins with the "Employees" and "Shippers" tables. The joins are specified using the [join] slot, with the [type] set to "left", indicating that all records from the "Orders" table will be included, and matched records from the "Employees" and "Shippers" tables will be retrieved. The [on] condition specifies the join criteria, matching "EmployeeID" and "ShipVia" fields across the tables. The [columns] slot specifies the columns to be retrieved, using an [aggregate_functor] to perform an aggregation operation, with the result being aliased as "result". The [where] slot is included but currently empty, indicating no additional filtering conditions. The [limit] slot restricts the query to return only one record. Finally, the [return-nodes] slot retrieves all nodes from the result set, effectively returning the data fetched by the query. This setup is useful for fetching a single aggregated result from joined tables in an SQLite database.
data.read
   database-type:sqlite
   table:Orders
      join:Employees
         as:EmployeeID
         type:left
         on
            and
               Orders.EmployeeID:EmployeeID.EmployeeID
      join:Shippers
         as:ShipVia
         type:left
         on
            and
               Orders.ShipVia:ShipVia.ShipperID
   columns
      aggregate_functor
         as:result
   where
      and
   limit:long:1
return-nodes:x:@data.read/*/*
