
/*
 * This Hyperlambda code snippet demonstrates how to sort a list of nodes using the [sort] slot. The [sort] slot takes an expression leading to a list of nodes and a lambda object responsible for comparing nodes. The lambda object uses [if], [else-if], and [else] slots to determine the order by comparing values of [.lhs] and [.rhs] nodes, setting [.result] to -1, 1, or 0 based on the comparison. The sorted result is returned as a new list of nodes. 
 * 
 * 1. [sort] - Initiates sorting of nodes specified by the expression.
 * 2. [if] - Checks if the left-hand side node value is less than the right-hand side.
 * 3. [lt] - Compares [.lhs] and [.rhs] node values.
 * 4. [set-value] - Sets [.result] to -1 if [.lhs] is less than [.rhs].
 * 5. [else-if] - Checks if [.lhs] is greater than [.rhs].
 * 6. [mt] - Compares [.lhs] and [.rhs] node values.
 * 7. [set-value] - Sets [.result] to 1 if [.lhs] is greater than [.rhs].
 * 8. [else] - Executes if [.lhs] and [.rhs] are equal.
 * 9. [set-value] - Sets [.result] to 0 if [.lhs] equals [.rhs].
 */
sort:x:@.result/*
   if
      lt:x:@.lhs/#
         get-value:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:-1
   else-if
      mt:x:@.lhs/#
         get-value:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:1
   else
      set-value:x:@.result
         .:int:0
