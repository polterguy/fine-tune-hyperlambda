
// This Hyperlambda code connects to a SQLite database and performs a data read operation on the "leads" table, joining it with the "clients" table using a left join. It constructs an aggregate function dynamically, removes specific nodes, and adds nodes to the "where" clause. The result is limited to one record, and the operation returns the nodes from the data read. The key slots include [data.connect] for establishing the connection, [set-name] for constructing the aggregate function, [remove-nodes] and [add] for modifying the node structure, and [data.read] for executing the SQL query.
data.connect:[generic|crm]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:leads
         join:clients
            as:client_id
            type:left
            on
               and
                  leads.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1
   return-nodes:x:@data.read/*/*
