
/*
 * This Hyperlambda code constructs a SQL query to calculate keyword density and count for a specified set of words in the "Regions" table of a SQLite database. It uses [strings.concat] to build dynamic SQL expressions, [for-each] to iterate over columns and words, and [set-value] to update the SQL query. The query orders results by keyword count and density, and optionally applies a limit and offset. The final SQL is executed with [data.select], and the results are returned after removing the keyword density and count nodes. 
 * 
 * 1. [data.connect] - Connects to the "northwind" SQLite database.
 * 2. [.sql] - Initializes the SQL query string.
 * 3. [.fields] - Constructs a concatenated string of column names with coalesce functions.
 * 4. [for-each:x:@.columns/*] - Iterates over columns to build the SQL fields string.
 * 5. [strings.concat] - Concatenates SQL parts for coalesce and other expressions.
 * 6. [unwrap:x:+/*/*] - Evaluates expressions to build the SQL query.
 * 7. [add:x:@.fields] - Adds concatenated field strings to the fields node.
 * 8. [set-value:x:@.fields] - Joins field strings with " || " for SQL query.
 * 9. [remove-nodes:x:@.fields/*] - Clears the fields node after use.
 * 10. [.no:int:0] - Initializes a counter for word iteration.
 * 11. [for-each:x:@.words/*] - Iterates over words to build keyword density and count expressions.
 * 12. [set-name:x:+/+/*/*] - Sets parameter names for SQL query.
 * 13. [if] - Conditional logic to build SQL expressions for keyword density.
 * 14. [math.increment:x:@.no] - Increments the word counter.
 * 15. [set-value:x:@.sql] - Updates the SQL query with keyword density and count calculations.
 * 16. [exists:x:@.arguments/*/offset] - Checks for an offset argument to modify the SQL query.
 * 17. [data.select:x:@.sql] - Executes the constructed SQL query.
 * 18. [remove-nodes:x:@data.select/*/*/keyword_density] - Removes keyword density nodes from results.
 * 19. [remove-nodes:x:@data.select/*/*/keyword_count] - Removes keyword count nodes from results.
 * 20. [return-nodes:x:@data.select/*] - Returns the final result set.
 */
data.connect:[generic|northwind]
   database-type:sqlite
   .sql:select *, (
   .fields
   for-each:x:@.columns/*
      strings.concat
         .:coalesce(
         get-value:x:@.dp/#
         .:", '')"
      unwrap:x:+/*/*
      add:x:@.fields
         .
            .:x:@strings.concat
   set-value:x:@.fields
      strings.join:x:@.fields/*
         .:" || "
   remove-nodes:x:@.fields/*
   .no:int:0
   for-each:x:@.words/*
      set-name:x:+/+/*/*
         strings.concat
            .:@p
            get-value:x:@.no
      unwrap:x:+/*/*
      add:x:@data.connect/*/data.select
         .
            .:x:@.dp/#
      if
         eq:x:@.no
            .:int:0
         .lambda
            set-value:x:@.sql
               strings.concat:x:@.sql
                  get-value:x:@.sql
                  .:" (length("
                  get-value:x:@.fields
                  .:) - length(replace(lower(
                  get-value:x:@.fields
                  .:), @p
                  get-value:x:@.no
                  .:", ''))) / length(@p"
                  get-value:x:@.no
                  .:)
      else
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" + (length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)
      math.increment:x:@.no
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:) * 1.0 / length(
         get-value:x:@.fields
         .:) as keyword_density, (
   .no:int:0
   for-each:x:@.words/*
      if
         eq:x:@.no
            .:int:0
         .lambda
            set-value:x:@.sql
               strings.concat:x:@.sql
                  get-value:x:@.sql
                  .:" CASE WHEN ((length("
                  get-value:x:@.fields
                  .:) - length(replace(lower(
                  get-value:x:@.fields
                  .:), @p
                  get-value:x:@.no
                  .:", ''))) / length(@p"
                  get-value:x:@.no
                  .:)) > 0 THEN 1 ELSE 0 END
      else
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" + CASE WHEN ((length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)) > 0 THEN 1 ELSE 0 END
      math.increment:x:@.no
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:) as keyword_count
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" from "
         .:Regions
         .:" where keyword_count > 0"
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" order by keyword_count desc, keyword_density desc limit "
         get-value:x:@.arguments/*/limit
   if
      exists:x:@.arguments/*/offset
      .lambda
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" offset "
               get-value:x:@.arguments/*/offset
   data.select:x:@.sql
      database-type:sqlite
   remove-nodes:x:@data.select/*/*/keyword_density
   remove-nodes:x:@data.select/*/*/keyword_count
   return-nodes:x:@data.select/*
