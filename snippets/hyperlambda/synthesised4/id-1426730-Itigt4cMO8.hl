
/*
 * // This Hyperlambda code evaluates a condition based on the value of [.value] and modifies nodes accordingly. 
 * // If [.value] equals "AINIRO", it removes nodes under [.allow] and [.disallow], and sets [.has-seen-ainiro] and [.relevant] to true.
 * // If [.value] is not "AINIRO" and [.has-seen-ainiro] is false, it sets [.relevant] to true.
 * // Otherwise, it sets [.relevant] to false.
 * // 1. [case:GPTBot] - Root node for the conditional logic.
 * // 2. [if] - Checks if [.value] equals "AINIRO".
 * // 3. [eq:x:@.value] - Compares the value of [.value] to "AINIRO".
 * // 4. [.lambda] - Executes if the condition is true, modifying nodes.
 * // 5. [remove-nodes:x:@.allow/*] - Removes nodes under [.allow].
 * // 6. [remove-nodes:x:@.disallow/*] - Removes nodes under [.disallow].
 * // 7. [set-value:x:@.has-seen-ainiro] - Sets [.has-seen-ainiro] to true.
 * // 8. [set-value:x:@.relevant] - Sets [.relevant] to true.
 * // 9. [else] - Executes if the first condition is false.
 * // 10. [if] - Checks if [.has-seen-ainiro] is false.
 * // 11. [eq:x:@.has-seen-ainiro] - Compares [.has-seen-ainiro] to false.
 * // 12. [.lambda] - Executes if the second condition is true, setting [.relevant] to true.
 * // 13. [set-value:x:@.relevant] - Sets [.relevant] to true.
 * // 14. [else] - Executes if the second condition is false.
 * // 15. [set-value:x:@.relevant] - Sets [.relevant] to false.
 */
case:GPTBot
   if
      eq:x:@.value
         .:AINIRO
      .lambda
         remove-nodes:x:@.allow/*
         remove-nodes:x:@.disallow/*
         set-value:x:@.has-seen-ainiro
            .:bool:true
         set-value:x:@.relevant
            .:bool:true
   else
      if
         eq:x:@.has-seen-ainiro
            .:bool:false
         .lambda
            set-value:x:@.relevant
               .:bool:true
      else
         set-value:x:@.relevant
            .:bool:false
