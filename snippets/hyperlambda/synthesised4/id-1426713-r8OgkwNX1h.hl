
/*
 * This Hyperlambda code defines a dynamic slot named "magic.ai.completion" that handles AI completion requests using OpenAI's API. It checks for cached responses and retrieves them if available. If embeddings are used, it fetches context and constructs the prompt accordingly. It sends a POST request to OpenAI's API with the constructed prompt and handles the response, logging errors if any occur. The result is stored in a database if certain conditions are met, and the response is returned with caching headers set. The code ensures secure handling of API keys and prevents SQL injection by using parameterized queries.
 * 
 * 1. [slots.create] - Creates a dynamic slot named "magic.ai.completion".
 * 2. [if] - Checks if cached data exists and is valid.
 * 3. [data.connect] - Connects to a database to read cached completion data.
 * 4. [return] - Returns cached completion data if found.
 * 5. [.result] - Initializes a result node.
 * 6. [.prompt] - Initializes a prompt node.
 * 7. [if] - Checks if embeddings should be used.
 * 8. [signal] - Invokes a slot to get context for embeddings.
 * 9. [add] - Adds database time to the result.
 * 10. [if] - Constructs the prompt based on the presence of specific strings.
 * 11. [set-value] - Sets the value of the prompt node.
 * 12. [else] - Constructs the prompt without specific strings.
 * 13. [if] - Checks for references and adds them to the result.
 * 14. [else] - Handles cases where embeddings are not used.
 * 15. [.token] - Initializes a token node.
 * 16. [set-value] - Sets the authorization token for the HTTP request.
 * 17. [http.post] - Sends a POST request to OpenAI's API.
 * 18. [if] - Checks the HTTP response status.
 * 19. [lambda2hyper] - Converts the response to a Hyperlambda object.
 * 20. [log.error] - Logs an error if the API request fails.
 * 21. [response.status.set] - Sets the response status.
 * 22. [unwrap] - Unwraps nodes for further processing.
 * 23. [return] - Returns an error message if the API request fails.
 * 24. [else] - Logs success if the API request is successful.
 * 25. [strings.trim] - Trims the response text.
 * 26. [add] - Adds the trimmed result to the result node.
 * 27. [get-first-value] - Retrieves the finish reason from the response.
 * 28. [add] - Adds the finish reason to the result node.
 * 29. [data.connect] - Connects to a database to store the result.
 * 30. [if] - Checks conditions for storing the result in the database.
 * 31. [data.create] - Inserts the result into the database.
 * 32. [response.headers.set] - Sets caching headers for the response.
 * 33. [add] - Adds result nodes to the response.
 * 34. [return] - Returns the final result.
 */
slots.create:magic.ai.completion
   if
      and
         exists:x:@.arguments/*/cached
         not-null:x:@.arguments/*/cached
         eq
            convert:x:@.arguments/*/cached
               type:int
            .:int:1
         or
            not-exists:x:@.arguments/*/references
            not
               get-value:x:@.arguments/*/references
      .lambda
         data.connect:[generic|magic]
            data.read
               table:ml_requests
               columns
                  completion
                  cached
               where
                  and
                     prompt.eq:x:@.arguments/*/prompt
                     type.eq:x:@.arguments/*/type
               limit:1
               order:created
               direction:desc
            if
               and
                  exists:x:@data.read/*/*
                  eq
                     convert:x:@data.read/*/*/cached
                        type:int
                     .:int:1
               .lambda
                  unwrap:x:+/*
                  return
                     result:x:@data.read/*/*/completion
                     finish_reason:cached
   .result
   .prompt
   if
      eq
         convert:x:@.arguments/*/use_embeddings
            type:int
         .:int:1
      .lambda
         unwrap:x:+/*
         signal:magic.ai.get-context
            type:x:@.arguments/*/type
            prompt:x:@.arguments/*/prompt
            threshold:x:@.arguments/*/threshold
            max_tokens:x:@.arguments/*/max_context_tokens
            api_key:x:@.arguments/*/api_key
         if
            exists:x:@signal/*/cached
            .lambda
               unwrap:x:+/*
               return
                  result:x:@signal/*/cached
                  finish_reason:cached
         add:x:@.result
            get-nodes:x:@signal/*/db_time
         if
            and
               strings.contains:x:@.arguments/*/prefix
                  .:[CONTEXT]
               strings.contains:x:@.arguments/*/prefix
                  .:[QUESTION]
               strings.contains:x:@.arguments/*/prefix
                  .:"ANSWER:"
            .lambda
               set-value:x:@.prompt
                  strings.replace:x:@.arguments/*/prefix
                     .:[QUESTION]
                     get-value:x:@.arguments/*/prompt
               set-value:x:@.prompt
                  strings.replace:x:@.prompt
                     .:[CONTEXT]
                     get-value:x:@signal/*/context
         else
            set-value:x:@.prompt
               strings.concat
                  get-value:x:@.arguments/*/prefix
                  .:@"
QUESTION: "
                  get-value:x:@.arguments/*/prompt
                  .:@"
CONTEXT: 
"
                  get-value:x:@signal/*/context
                  .:@"
ANSWER: "
         if
            and
               exists:x:@.arguments/*/references
               not-null:x:@.arguments/*/references
               get-value:x:@.arguments/*/references
            .lambda
               add:x:@.result
                  .
                     references
               add:x:@.result/*/references
                  get-nodes:x:@signal/*/snippets/*
   else
      if
         strings.contains:x:@.arguments/*/model
            .:":"
         .lambda
            set-value:x:@.prompt
               strings.concat
                  get-value:x:@.arguments/*/prompt
                  .:" ->"
            add:x:../*/http.post/*/payload
               .
                  stop:" END"
      else
         set-value:x:@.prompt
            get-value:x:@.arguments/*/prompt
   .token
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         get-first-value
            get-value:x:@.arguments/*/api_key
            config.get:"magic:openai:key"
   http.post:"https://api.openai.com/v1/completions"
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         prompt:x:@.prompt
         model:x:@.arguments/*/model
         max_tokens:x:@.arguments/*/max_tokens
         temperature:x:@.arguments/*/temperature
      convert:true
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            message:x:@http.post/*/content/*/error/*/message
            status:x:@http.post
            error:x:@lambda2hyper
         response.status.set:x:@http.post
         unwrap:x:+/*
         return
            error:bool:true
            result:x:@http.post/*/content/*/error/*/message
   else
      log.info:Invoking OpenAI was a success
   strings.trim:x:@http.post/*/content/*/choices/0/*/text
   unwrap:x:+/*/*
   add:x:@.result
      .
         result:x:@strings.trim
   get-first-value
      get-value:x:@http.post/*/content/*/choices/0/*/finish_reason
      .:unknown
   unwrap:x:+/*/*
   add:x:@.result
      .
         finish_reason:x:@get-first-value
   data.connect:[generic|magic]
      if
         and
            not
               get-value:x:@.result/*/error
            not
               exists:x:@data.read/*/*
            mt
               convert:x:@.arguments/*/supervised
                  type:int
               .:int:0
         .lambda
            data.create
               table:ml_requests
               values
                  type:x:@.arguments/*/type
                  prompt:x:@.arguments/*/prompt
                  completion:x:@.result/*/result
                  finish_reason:x:@.result/*/finish_reason
                  session:x:@.arguments/*/session
                  user_id:x:@.arguments/*/user_id
                  referrer:x:@.arguments/*/referrer
   response.headers.set
      Cache-Control:max-age=30
   add:x:+
      get-nodes:x:@.result/*/result
      get-nodes:x:@.result/*/finish_reason
      get-nodes:x:@.result/*/references
      get-nodes:x:@.result/*/db_time
   return
