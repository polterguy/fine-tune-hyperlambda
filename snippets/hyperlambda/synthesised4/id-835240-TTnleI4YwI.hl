
// This Hyperlambda code processes a PDF file, converting it to text, and optionally massages the text using OpenAI's API. It first constructs the file path and checks for file existence if overwrite is false. It saves the file stream and extracts text using [pdf2text]. If pages are preserved, it iterates through each page, creating prompts and completions. Otherwise, it massages the text and adds it to snippets. If a massage prompt exists, it posts to OpenAI's API for each snippet, handling errors and updating prompts. Finally, it constructs a URI and adds file data to snippets.
case:pdf
   .filename
   set-value:x:@.filename
      get-value:x:@.arguments/*/file/*/name
   .filepath
   set-value:x:@.filepath
      strings.concat
         .:/etc/system/openai/pdf/
         get-value:x:@.filename
   if
      and
         eq:x:@.arguments/*/overwrite
            .:bool:false
         io.file.exists:x:@.filepath
      .lambda
         throw:File already exists
            status:int:400
            public:bool:true
   io.stream.save-file:x:@.filepath
      get-value:x:@.arguments/*/file/*/stream
   .tmp-snippets
   pdf2text:x:@.filepath
      preserve-pages:x:@.arguments/*/preservePages
   if
      eq:x:@.arguments/*/preservePages
         .:bool:true
      .lambda
         .no:int:1
         for-each:x:@pdf2text/*
            .prompt
            set-value:x:@.prompt
               strings.concat
                  get-value:x:@.arguments/*/file/*/name
                  .:" - Page "
                  get-value:x:@.no
            unwrap:x:+/*/*/*
            add:x:@.tmp-snippets
               .
                  .
                     prompt:x:@.prompt
                     completion:x:@.dp/#
            math.increment:x:@.no
   else
      unwrap:x:+/*
      signal:magic.ai.massage
         content:x:@pdf2text
         massage:x:@.arguments/*/massage
         prompt:x:@.arguments/*/file/*/name
         type:x:@.arguments/*/type
      add:x:@.tmp-snippets
         get-nodes:x:@signal/*
   .uri
   set-value:x:@.uri
      strings.concat
         request.scheme
         .:"://"
         request.host
         .:/magic/system/openai/download-pdf?file=
         strings.url-encode:x:@.filename
   if
      and
         not-null:x:@.arguments/*/massagePrompt
         neq:x:@.arguments/*/massagePrompt
            .:
      .lambda
         .token
         set-value:x:@.token
            strings.concat
               .:"Bearer "
               config.get:"magic:openai:key"
         for-each:x:@.tmp-snippets/*
            http.post:"https://api.openai.com/v1/chat/completions"
               convert:bool:true
               headers
                  Authorization:x:@.token
                  Content-Type:application/json
                  Accept:text/event-stream
               payload
                  model:gpt-3.5-turbo
                  max_tokens:int:1000
                  temperature:decimal:0.3
                  messages
                     .
                        role:system
                        content:x:@.arguments/*/massagePrompt
                     .
                        role:user
                        content:x:@.dp/#/*/completion
            if
               not
                  and
                     mte:x:@http.post
                        .:int:200
                     lt:x:@http.post
                        .:int:300
               .lambda
                  lambda2hyper:x:@http.post
                  log.error:Something went wrong while invoking OpenAI
                     message:x:@http.post/*/content/*/error/*/message
                     status:x:@http.post
                     error:x:@lambda2hyper
            else
               set-value:x:@.dp/#/*/prompt
                  get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
   unwrap:x:+/*/*
   add:x:@.tmp-snippets/*
      .
         uri:x:@.uri
         filename:x:@.filepath
   add:x:@.file-data
      get-nodes:x:@.tmp-snippets/*
