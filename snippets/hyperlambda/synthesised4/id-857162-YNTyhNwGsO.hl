
// This Hyperlambda code defines an endpoint for querying a database, requiring specific arguments for grouping and aggregation. It validates the presence and correctness of these arguments, connects to a SQLite database, and constructs a SQL query with dynamic grouping, ordering, and filtering based on the provided parameters. The query results are then returned. Key slots include [validators.mandatory] for argument validation, [data.connect] for database connection, and [data.read] for executing the SQL query.
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      Shippers.ShipperID.mt:long
      Shippers.ShipperID.lt:long
      Shippers.ShipperID.mteq:long
      Shippers.ShipperID.lteq:long
      Shippers.ShipperID.neq:long
      Shippers.ShipperID.eq:long
      Shippers.CompanyName.like:string
      Shippers.CompanyName.mt:string
      Shippers.CompanyName.lt:string
      Shippers.CompanyName.mteq:string
      Shippers.CompanyName.lteq:string
      Shippers.CompanyName.neq:string
      Shippers.CompanyName.eq:string
      Shippers.Phone.like:string
      Shippers.Phone.mt:string
      Shippers.Phone.lt:string
      Shippers.Phone.mteq:string
      Shippers.Phone.lteq:string
      Shippers.Phone.neq:string
      Shippers.Phone.eq:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:Shippers.ShipperID
      .:Shippers.CompanyName
      .:Shippers.Phone
   validators.enum:x:@.arguments/*/aggregate_column
      .:Shippers.ShipperID
      .:Shippers.CompanyName
      .:Shippers.Phone
   data.connect:[generic|northwind]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:Shippers
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
