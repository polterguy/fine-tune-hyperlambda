
/*
 * This Hyperlambda code iterates through nodes using [for-each], checking if each node's name exists in a vocabulary. If it exists and is not already in the result, it adds it with a count of one; otherwise, it increments the count. The code uses [get-name] to retrieve node names, [exists] to check vocabulary presence, and [set-name] and [set-value] to manipulate the result node. [math.add] is used to increment counts.
 * 
 * 1. [for-each] - Iterates through all nodes in the specified path.
 * 2. [get-name] - Retrieves the name of the currently iterated node.
 * 3. [if] - Checks if the node name exists in the vocabulary.
 * 4. [exists] - Determines if the node name is present in the vocabulary.
 * 5. [not-exists] - Checks if the node name is not already in the result.
 * 6. [set-name] - Sets the name of the node in the result.
 * 7. [add] - Adds a new node to the result with an initial count.
 * 8. [set-value] - Updates the count of an existing node in the result.
 * 9. [math.add] - Increments the count of the node in the result.
 */
for-each:x:@hyper2lambda/*/**
   get-name:x:@.dp/#
   if
      exists:x:@vocabulary/*/={@get-name}
      .lambda
         if
            not-exists:x:@.result/*/{@get-name}
            .lambda
               set-name:x:+/*/*
                  get-value:x:@get-name
               add:x:@.result
                  .
                     .:int:1
         else
            set-value:x:@.result/*/{@get-name}
               math.add
                  get-value:x:@.result/*/{@get-name}
                  .:int:1
