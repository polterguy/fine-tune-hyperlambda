
/*
 * 1. `@for-each` - This iterator searches for the first node named "for-each" in the current context. It is useful when you want to locate a specific loop construct within a Hyperlambda script.
 * 
 * 2. `@.dp` - This iterator looks for the first node named ".dp" under the "for-each" node. The ".dp" node in a [for-each] loop typically represents the current node being iterated over, allowing you to access or modify its properties.
 * 
 * 3. `#` - This iterator retrieves the value of the ".dp" node as a node by reference. This means it accesses the actual node being iterated, not just a copy, allowing for direct manipulation of its children.
 * 
 * 4. `*` - This iterator retrieves all children nodes of the node referenced by the previous iterator. In this context, it will return all child nodes of the node currently being iterated over in the [for-each] loop.
 * 
 * 5. `path` - This final iterator filters the children nodes to only include those named "path". It is useful when you want to specifically access or manipulate nodes with this name within the iterated node.
 * 
 * Potential use cases:
 * - This expression could be used in a Hyperlambda script to iterate over a collection of nodes and perform operations specifically on their "path" child nodes. For example, it could be used to log, modify, or validate the "path" values within a set of data nodes.
 */

.:x:@for-each/@.dp/#/*/path