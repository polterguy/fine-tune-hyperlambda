
/*
 * 1. `@.tmp`: This iterator starts by finding the first node with the name "tmp" in the current context. It looks for this node starting from the current node and moving upwards in the hierarchy if necessary. This is useful for targeting a specific section of a Hyperlambda graph that is labeled as "tmp".
 * 
 * 2. `*`: This iterator retrieves all children nodes of the "tmp" node. It is used to access the immediate descendants of the "tmp" node, which might contain various data or configurations.
 * 
 * 3. `*`: The second `*` iterator retrieves all children nodes of each of the nodes returned by the previous `*` iterator. This effectively drills down two levels of hierarchy from the "tmp" node, accessing deeper nested nodes.
 * 
 * 4. `automatic`: This iterator filters the results to only include nodes with the name "automatic". It is used to pinpoint specific nodes within the nested structure that have this exact name.
 * 
 * Potential use cases:
 * - This expression could be used to gather or manipulate all nodes named "automatic" that are nested two levels deep within a node named "tmp". 
 * - It could be useful in scenarios where you need to apply a certain operation or extract data from these "automatic" nodes, such as configuration settings or status indicators within a temporary data structure.
 */

.:x:@.tmp/*/*/automatic