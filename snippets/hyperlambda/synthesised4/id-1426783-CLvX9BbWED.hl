
/*
 * This Hyperlambda code checks if the node [function-result] is not null, and if so, it concatenates a formatted string that includes the current [result] value and the [function-result] value into [tmp-completion]. It then updates [function-result] with this concatenated string. The code effectively formats and logs the result of a function invocation in a JSON-like format. 
 * 
 * 1. [if] - Checks if the [function-result] node is not null.
 * 2. [not-null] - Evaluates whether the [function-result] node exists and is not null.
 * 3. [.lambda] - Executes the following nodes if the condition is true.
 * 4. [set-value] - Sets the value of the [tmp-completion] node.
 * 5. [strings.concat] - Concatenates multiple string values.
 * 6. [get-value] - Retrieves the value of the [result] node.
 * 7. [.] - Represents static string values used in concatenation.
 * 8. [get-value] - Retrieves the value of the [function-result] node.
 * 9. [set-value] - Updates the [function-result] node with the concatenated string.
 */
if
   not-null:x:@.function-result
   .lambda
      set-value:x:@.tmp-completion
         strings.concat
            get-value:x:@.result
            .:@"
"
            .:@"
"
            .:@"Result of function invocation:
"
            .:@"
"
            .:```json
            .:@"
"
            get-value:x:@.function-result
            .:@"
"
            .:```
      set-value:x:@.function-result
