
// This Hyperlambda code checks if the token count of a text exceeds a specified maximum size using [mt]. If true, it sends a signal to a feedback channel and attempts to summarize the text using OpenAI's API. It uses a [while] loop to retry the request up to three times if it fails, logging errors and decrementing a counter on failure. Successful summaries are signaled back, and the original text is trimmed and concatenated with a "Summary" prefix. Key slots include [openai.tokenize], [sockets.signal], [http.post], and [math.decrement].
if
   mt
      openai.tokenize:x:@.tmp
      get-value:x:@.max-size
   .lambda
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:Summarizing snippet since it is larger than 80% of maximum context size for type
            type:info
      sleep:100
      .token
      set-value:x:@.token
         strings.concat
            .:"Bearer "
            get-first-value
               get-value:x:@.api-key
               config.get:"magic:openai:key"
      .no:int:3
      while
         mt:x:@.no
            .:int:0
         .lambda
            try
               unwrap:x:+/**
               http.post:"https://api.openai.com/v1/chat/completions"
                  headers
                     Authorization:x:@.token
                     Content-Type:application/json
                  payload
                     model:x:@.model
                     max_tokens:x:@.max-size
                     temperature:decimal:0.3
                     messages
                        .
                           role:system
                           content:Create a summary of the following information
                        .
                           role:user
                           content:x:@.dp/#/*/completion
                  convert:true
               if
                  eq:x:@http.post
                     .:int:400
                  .lambda
                     sockets.signal:x:@.arguments/*/feedback-channel
                        args
                           message:Could not summarize snippet, check your log for details
                           type:warning
                     sleep:100
                     lambda2hyper:x:@http.post
                     log.error:Something went wrong while invoking OpenAI
                        message:x:@http.post/*/content/*/error/*/message
                        status:x:@http.post
                        error:x:@lambda2hyper
                     set-value:x:@.no
                        .:int:0
               else-if
                  and
                     mte:x:@http.post
                        .:int:200
                     lt:x:@http.post
                        .:int:300
                  .lambda
                     sockets.signal:x:@.arguments/*/feedback-channel
                        args
                           message:Successfully created summary of snippet
                           type:info
                     sleep:100
                     set-value:x:@.dp/#/*/completion
                        strings.trim:x:@http.post/*/content/*/choices/0/*/message/*/content
                           .:@"
	 "
                     set-value:x:@.dp/#/*/prompt
                        strings.concat
                           .:"Summary; "
                           strings.substring:x:@.dp/#/*/prompt
                              .:int:0
                              .:int:150
                     set-value:x:@.no
                        .:int:0
               else
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:Could not summarize snippet, check your log for details. Trying again in 3 seconds.
                        type:warning
                  sleep:3000
                  lambda2hyper:x:@http.post
                  log.error:Something went wrong while invoking OpenAI
                     message:x:@http.post/*/content/*/error/*/message
                     status:x:@http.post
                     error:x:@lambda2hyper
                  math.decrement:x:@.no
            .catch
               math.decrement:x:@.no
