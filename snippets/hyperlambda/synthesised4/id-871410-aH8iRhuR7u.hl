
// This Hyperlambda code establishes a SQLite database connection and performs a data read operation on the "activities" table, joining it with the "clients" table using a left join. It dynamically constructs a distinct SQL function based on a provided column and manages query parameters like limit, offset, order, and direction by adding or removing nodes as needed. The final result of the data read operation is returned.
data.connect:[generic|crm]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:activities
         join:clients
            as:client_id
            type:left
            on
               and
                  activities.client_id:client_id.client_id
      columns
         distinct_functor
            as:.
      where
         and
   return-nodes:x:@data.read/*/*
