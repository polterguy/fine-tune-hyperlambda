
/*
 * This Hyperlambda code is designed to manage function invocations within a session, ensuring that they do not exceed a specified limit. It uses a [try] block to handle potential errors and conditions. If the number of invocations is less than or equal to one, it logs an error and sends multiple signals to a session indicating various states of error and completion. If the invocation limit is not exceeded, it executes a function, converts the result to JSON, and checks if the result size exceeds a maximum token limit. If the result is too large, it throws an error. It retrieves a success message from the configuration and sends a signal with the function result. Depending on whether a result exists, it updates the prompt and function result with appropriate messages. This code ensures controlled execution and error handling in a session-based environment.
 * 
 * 1. [try] - Initiates a try block to handle potential errors and conditions.
 * 2. [if] - Checks if the number of invocations is less than or equal to one.
 * 3. [lte] - Compares the number of invocations to the integer 1.
 * 4. [log.error] - Logs an error message if the invocation limit is exceeded.
 * 5. [sockets.signal] - Sends signals to a session indicating various states of error and completion.
 * 6. [else] - Executes if the invocation limit is not exceeded.
 * 7. [execute] - Executes a function with specified parameters.
 * 8. [lambda2json] - Converts the execution result to JSON format.
 * 9. [if] - Checks if the result size exceeds a maximum token limit.
 * 10. [mt] - Compares the tokenized result size to a maximum limit.
 * 11. [throw] - Throws an error if the result is too large.
 * 12. [config.get] - Retrieves a success message from the configuration.
 * 13. [unwrap] - Unwraps the configuration message.
 * 14. [sockets.signal] - Sends a signal with the function result.
 * 15. [if] - Checks if a result exists.
 * 16. [set-value] - Updates the prompt and function result with appropriate messages.
 * 17. [strings.concat] - Concatenates strings to form messages.
 * 18. [else] - Executes if no result exists, updating the prompt with a success message.
 */
try
   if
      lte:x:@.iterations
         .:int:1
      .lambda
         log.error:Too many function invocations
         sockets.signal:x:@.session
            args
               function_error:Too many function invocations
         sockets.signal:x:@.session
            args
               function_waiting:bool:false
         sockets.signal:x:@.session
            args
               error:bool:true
               status:int:500
               message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
         sockets.signal:x:@.session
            args
               finished:bool:true
   else
      execute:magic.ai.functions.invoke
         type:x:@.type
         session:x:@.session
         user-id:x:@.user-id
         invocation:x:@.dp/#
         extra:x:@.extra
      lambda2json:x:@execute/*/result/*
         format:true
      if
         mt
            openai.tokenize:x:@lambda2json
            get-value:x:@.arguments/@.arguments/*/max_context_tokens
         .lambda
            throw:Result too large, try to limit your result
               status:int:400
               public:bool:true
      config.get:"magic:chat:functions:success-message"
         .:Success!
      unwrap:x:+/*/*
      sockets.signal:x:@.session
         args
            function_result:x:@config.get
            invocation:x:@execute/*/json
            file:x:@execute/*/workflow
      if
         exists:x:@execute/*/result/*
         .lambda
            set-value:x:@.new-prompt
               strings.concat
                  get-value:x:@.new-prompt
                  .:"Response from '"
                  get-value:x:@execute/*/workflow
                  .:@"' was:
```json
"
                  get-value:x:@lambda2json
                  .:@"
"
                  .:```
                  .:@"
"
                  .:@"
"
            set-value:x:@.function-result
               strings.concat
                  get-value:x:@.function-result
                  get-value:x:@lambda2json
                  .:"\n"
      else
         set-value:x:@.new-prompt
            strings.concat
               get-value:x:@.new-prompt
               .:"Invocation of '"
               get-value:x:@execute/*/workflow
               .:"' was a success."
               .:@"
"
               .:@"
"
