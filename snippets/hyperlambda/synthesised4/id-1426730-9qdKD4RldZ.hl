
/*
 * This Hyperlambda code evaluates the value of the [.value] node using a [switch] statement. It checks for specific cases, including a wildcard case, "AINIRO", and "GPTBot". If the value is "AINIRO", it removes nodes under [.allow] and [.disallow], sets [.has-seen-ainiro] to true, and [.relevant] to true. For other cases, if [.has-seen-ainiro] is false, it sets [.relevant] to true; otherwise, it sets [.relevant] to false. If none of the cases match, it defaults to setting [.relevant] to false.
 * 
 * 1. [switch] - Evaluates the [.value] node.
 * 2. [case:*] - Wildcard case.
 * 3. [case:AINIRO] - Checks if the value is "AINIRO".
 * 4. [case:GPTBot] - Checks if the value is "GPTBot".
 * 5. [if] - Checks if the value is "AINIRO".
 * 6. [eq] - Compares [.value] with "AINIRO".
 * 7. [remove-nodes] - Removes nodes under [.allow] and [.disallow].
 * 8. [set-value] - Sets [.has-seen-ainiro] and [.relevant] to true.
 * 9. [else] - Handles cases other than "AINIRO".
 * 10. [if] - Checks if [.has-seen-ainiro] is false.
 * 11. [eq] - Compares [.has-seen-ainiro] with false.
 * 12. [set-value] - Sets [.relevant] to true or false.
 * 13. [default] - Default case setting [.relevant] to false.
 */
switch:x:@.value
   case:*
   case:AINIRO
   case:GPTBot
      if
         eq:x:@.value
            .:AINIRO
         .lambda
            remove-nodes:x:@.allow/*
            remove-nodes:x:@.disallow/*
            set-value:x:@.has-seen-ainiro
               .:bool:true
            set-value:x:@.relevant
               .:bool:true
      else
         if
            eq:x:@.has-seen-ainiro
               .:bool:false
            .lambda
               set-value:x:@.relevant
                  .:bool:true
         else
            set-value:x:@.relevant
               .:bool:false
   default
      set-value:x:@.relevant
         .:bool:false
