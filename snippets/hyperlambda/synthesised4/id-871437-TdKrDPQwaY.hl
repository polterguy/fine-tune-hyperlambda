
/*
 * The code establishes a connection to a SQLite database and performs a read operation on the "contacts" table, joining it with the "clients" table using a left join. It constructs an aggregate function dynamically and applies it to a specified column, then removes certain nodes from the arguments and adds nodes to the "where" clause. Finally, it reads the data with a limit of one record and returns the results. 
 * 
 * 1. [data.connect] - Connects to a SQLite database.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [set-name] - Constructs an aggregate function dynamically.
 * 4. [remove-nodes] - Removes nodes from the arguments.
 * 5. [add] - Adds nodes to the "where" clause.
 * 6. [data.read] - Reads data from the "contacts" table with a join on "clients".
 * 7. [return-nodes] - Returns the results of the data read operation.
 */
data.connect:[generic|crm]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:contacts
         join:clients
            as:client_id
            type:left
            on
               and
                  contacts.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1
   return-nodes:x:@data.read/*/*
