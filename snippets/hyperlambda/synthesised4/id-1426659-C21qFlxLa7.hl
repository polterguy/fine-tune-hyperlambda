
/*
 * This Hyperlambda code checks if the [completion] node is not empty. If it is not empty, it further checks if a [completion] node exists within the first snippet. If such a node exists, it concatenates its current value with the value of the [completion] node. If the [completion] node does not exist, it adds a new [completion] node with the value of the [completion] node to the first snippet.
 * 
 * 1. [if] - Checks if the [completion] node is not empty.
 * 2. [neq] - Compares the value of the [completion] node to an empty string.
 * 3. [.lambda] - Executes the following code if the [completion] node is not empty.
 * 4. [if] - Checks if a [completion] node exists within the first snippet.
 * 5. [exists] - Checks for the existence of a [completion] node.
 * 6. [.lambda] - Executes the following code if a [completion] node exists.
 * 7. [set-value] - Sets the value of the [completion] node.
 * 8. [strings.concat] - Concatenates the current value of the [completion] node with the new value.
 * 9. [get-first-value] - Retrieves the current value of the [completion] node.
 * 10. [get-value] - Retrieves the value of the [completion] node.
 * 11. [else] - Executes the following code if a [completion] node does not exist.
 * 12. [unwrap] - Evaluates the expressions within the node.
 * 13. [add] - Adds a new [completion] node with the value of the [completion] node to the first snippet.
 * 14. [.] - Represents the new node to be added.
 * 15. [completion] - The new node being added with the value of the [completion] node.
 */
if
   neq:x:@.completion
      .:
   .lambda
      if
         exists:x:@.snippets/0/-/*/completion
         .lambda
            set-value:x:@.snippets/0/-/*/completion
               strings.concat
                  get-first-value
                     get-value:x:@.snippets/0/-/*/completion
                     .:
                  get-value:x:@.completion
      else
         unwrap:x:+/*/*
         add:x:@.snippets/0/-
            .
               completion:x:@.completion
