
/*
 * This Hyperlambda code connects to a SQLite database named "hospital" and performs a read operation on the "Appointments" table. It joins the "Patients" and "Doctors" tables using left joins based on patient and doctor IDs. The code selects a count of appointments and applies a where condition, which is dynamically populated from arguments. The result is limited to one record and returned as nodes.
 * 
 * 1. [data.connect] - Establishes a connection to the "hospital" database using SQLite.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [add] - Dynamically adds nodes to the where condition from arguments.
 * 4. [data.read] - Initiates a read operation on the "Appointments" table.
 * 5. [table] - Specifies the "Appointments" table and joins with "Patients" and "Doctors".
 * 6. [join] - Performs left joins with "Patients" and "Doctors" tables.
 * 7. [as] - Aliases for join conditions.
 * 8. [type] - Specifies the type of join as left.
 * 9. [on] - Defines the join conditions using patient and doctor IDs.
 * 10. [columns] - Selects the count of appointments.
 * 11. [where] - Placeholder for dynamically added where conditions.
 * 12. [limit] - Limits the result to one record.
 * 13. [return-nodes] - Returns the result nodes from the read operation.
 */
data.connect:[generic|hospital]
   database-type:sqlite
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Appointments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Appointments.PatientID:PatientID.PatientID
         join:Doctors
            as:DoctorID
            type:left
            on
               and
                  Appointments.DoctorID:DoctorID.DoctorID
      columns
         count(*)
            as:count
      where
         and
      limit:long:1
   return-nodes:x:@data.read/*/*
