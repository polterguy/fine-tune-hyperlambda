
/*
 * The code demonstrates a [while] loop that continues as long as there are nodes in the [.queue]. Within the loop, it first checks if the count of nodes in [.queue] is more than zero using [mt] and [get-count]. If true, it evaluates the first node in [.queue] with [unwrap], adds it to [.popped] using [add], and then removes it from [.queue] using [remove-nodes]. The process repeats until [.queue] is empty. 
 * 
 * 1. [while] - Initiates a loop that continues while the condition is true.
 * 2. [mt] - Checks if the count of nodes in [.queue] is more than zero.
 * 3. [get-count] - Returns the number of nodes in [.queue].
 * 4. [.lambda] - Contains the operations to perform during each loop iteration.
 * 5. [unwrap] - Evaluates the first node in [.queue].
 * 6. [add] - Adds the evaluated node to [.popped].
 * 7. [remove-nodes] - Removes the first node from [.queue].
 */
while
   mt
      get-count:x:@.queue/*
      .:int:0
   .lambda
      unwrap:x:+/*/*
      add:x:@.popped
         .
            item:x:@.queue/0
      remove-nodes:x:@.queue/0
