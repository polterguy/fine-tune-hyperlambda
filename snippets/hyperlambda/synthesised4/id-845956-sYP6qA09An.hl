
/*
 * This Hyperlambda code processes an incoming request with a binary payload, verifies its authenticity using cryptographic methods, and ensures the request hasn't been replayed. It reads the payload stream, retrieves a cryptographic key, and verifies the payload's signature using a public key. If the request ID is missing or previously executed, it throws an error. The code then checks a whitelist for allowed operations, processes the request, and persists the invocation details. Finally, it signs the response with the server's private key and returns it, handling exceptions by logging errors and denying access. 
 * 
 * 1. [.arguments] - Declares the expected arguments for the endpoint.
 * 2. [.accept] - Specifies the accepted content type for the request.
 * 3. [validators.mandatory] - Ensures the 'body' argument is provided.
 * 4. [io.stream.read] - Reads the incoming stream from the 'body' argument.
 * 5. [try] - Begins a block to catch exceptions.
 * 6. [crypto.get-key] - Retrieves a cryptographic key from the stream.
 * 7. [unwrap] - Evaluates expressions in the node.
 * 8. [signal:magic.crypto.get-public-key] - Retrieves the public key using a signal.
 * 9. [crypto.verify] - Verifies the payload using the public key.
 * 10. [context:fingerprint] - Sets the context for the fingerprint.
 * 11. [hyper2lambda] - Converts the verified payload.
 * 12. [add] - Adds nodes to the whitelist.
 * 13. [set-value] - Sets values for request-related nodes.
 * 14. [if] - Checks conditions for request ID and replay attacks.
 * 15. [signal:magic.crypto.http.has-invoked] - Checks if the request was previously executed.
 * 16. [whitelist] - Processes whitelist operations.
 * 17. [else-if] - Checks for existing whitelist nodes.
 * 18. [signal:magic.crypto.http.persist-invocation] - Persists invocation details.
 * 19. [response.headers.set] - Sets the response content type.
 * 20. [signal:magic.crypto.get-server-private-key] - Retrieves the server's private key.
 * 21. [crypto.sign] - Signs the response with the private key.
 * 22. [return] - Returns the signed response.
 * 23. [.catch] - Handles exceptions by logging and throwing an error.
 */
hyper2lambda
   .arguments
      body:*
   .accept:application/octet-stream
   validators.mandatory:x:@.arguments/*/body
   io.stream.read:x:@.arguments/*/body
   try
      crypto.get-key:x:@io.stream.read
      unwrap:x:+/*
      signal:magic.crypto.get-public-key
         fingerprint:x:@crypto.get-key
      crypto.verify:x:@io.stream.read
         public-key:x:@signal/*/public_key
      context:fingerprint
         value:x:@crypto.get-key
         .lambda
            hyper2lambda:x:@crypto.verify
            add:x:./*/whitelist/*/.lambda
               get-nodes:x:@hyper2lambda/*
            .request
            .request-id
            .request-raw
            set-value:x:@.request
               get-value:x:@crypto.verify
            set-value:x:@.request-id
               get-value:x:@hyper2lambda/*/.request-id
            set-value:x:@.request-raw
               convert:x:@io.stream.read
                  type:base64
            if
               or
                  eq
                     get-value:x:@.request-id
                     .
                  eq
                     get-value:x:@.request-id
                     .:
               .lambda
                  throw:No [.request-id] found in the Hyperlambda payload
            unwrap:x:+/*/signal/*
            if
               signal:magic.crypto.http.has-invoked
                  request-id:x:@.request-id
               .lambda
                  strings.concat
                     .:"Request with the id of '"
                     get-value:x:@.request-id
                     .:"' has been previously executed implying a replay attack, hence execution was aborted"
                  throw:x:@strings.concat
            add:x:./*/whitelist/*/vocabulary
               get-nodes:x:@signal/*/vocabulary/*
            whitelist
               vocabulary
               .lambda
            .result:success
            if
               not
                  eq
                     get-value:x:@whitelist
                     .
               .lambda
                  set-value:x:@.result
                     get-value:x:@whitelist
            else-if
               exists:x:@whitelist/*
               .lambda
                  set-value:x:@.result
                     lambda2hyper:x:@whitelist/*
            unwrap:x:+/*
            signal:magic.crypto.http.persist-invocation
               crypto-key:x:@try/*/signal/[0,1]/*/id
               request-id:x:@.request-id
               request:x:@.request
               request-raw:x:@.request-raw
               response:x:@.result
            response.headers.set
               Content-Type:application/octet-stream
            signal:magic.crypto.get-server-private-key
            crypto.sign:x:@.result
               raw:true
               signing-key:x:@signal/*/private-key
               signing-key-fingerprint:x:@signal/*/fingerprint
            return:x:@crypto.sign
   .catch
      log.error:x:@.arguments/*/message
      throw:Access denied
         public:true
         status:401
