
// This Hyperlambda code constructs SQL statements for adding foreign key constraints to a table, with optional cascading delete behavior. It first checks if the foreign table and field arguments are not null. If the database type is not MySQL, it appends a "references" clause to the SQL statement. If cascading delete is enabled, it adds an "on delete cascade" clause. If the database type is MySQL, it constructs a full "alter table" statement with similar logic for cascading delete. The code uses [if], [and], [not-null], [neq], [exists], [eq], [set-value], and [strings.concat] slots to build the SQL dynamically.
if
   and
      not-null:x:@.arguments/*/foreignTable
      not-null:x:@.arguments/*/foreignField
   .lambda
      if
         neq:x:@.arguments/*/databaseType
            .:mysql
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" references "
                  get-value:x:@.arguments/*/foreignTable
                  .:(
                  get-value:x:@.arguments/*/foreignField
                  .:)
            if
               and
                  exists:x:@.arguments/*/cascading
                  not-null:x:@.arguments/*/cascading
                  eq
                     get-value:x:@.arguments/*/cascading
                     .:bool:true
               .lambda
                  set-value:x:@.sql
                     strings.concat
                        get-value:x:@.sql
                        .:" on delete cascade"
      else
         set-value:x:@.tail
            strings.concat
               .:"alter table "
               get-value:x:@.arguments/*/tableName
               .:" add foreign key ("
               get-value:x:@.arguments/*/columnName
               .:") references "
               get-value:x:@.arguments/*/foreignTable
               .:(
               get-value:x:@.arguments/*/foreignField
               .:)
         if
            and
               exists:x:@.arguments/*/cascading
               not-null:x:@.arguments/*/cascading
               eq
                  get-value:x:@.arguments/*/cascading
                  .:bool:true
            .lambda
               set-value:x:@.tail
                  strings.concat
                     get-value:x:@.tail
                     .:" on delete cascade"
         set-value:x:@.tail
            strings.concat
               get-value:x:@.tail
               .:"; "
