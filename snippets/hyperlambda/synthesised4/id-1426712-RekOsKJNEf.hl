
/*
 * This Hyperlambda code is a complex conditional logic structure that manages function invocation and error handling within a session. It checks if a trimmed string equals "[DONE]", and if not, it processes function invocations by incrementing a counter and splitting results. It evaluates conditions to handle function invocations, logs errors for excessive invocations, and signals session status updates. It executes a function if conditions are met, checks for token limits, and logs success or failure messages. It also updates prompts based on invocation results and handles exceptions by logging errors and signaling session updates. The code ensures proper session management and error handling during function invocations.
 * 
 * 1. [if] - Checks if a trimmed string equals "[DONE]".
 * 2. [eq] - Compares the trimmed string to "[DONE]".
 * 3. [strings.trim] - Trims whitespace from a string.
 * 4. [.lambda] - Executes a block of code if the condition is true.
 * 5. [neq] - Checks if a value is not equal to zero.
 * 6. [math.increment] - Increments a counter.
 * 7. [and] - Logical AND operation for multiple conditions.
 * 8. [strings.contains] - Checks if a string contains a substring.
 * 9. [strings.split] - Splits a string into parts.
 * 10. [for-each] - Iterates over each part of a split string.
 * 11. [try] - Attempts to execute a block of code, with error handling.
 * 12. [lte] - Checks if a value is less than or equal to another.
 * 13. [log.error] - Logs an error message.
 * 14. [sockets.signal] - Sends a signal with arguments to a session.
 * 15. [execute] - Executes a function with specified arguments.
 * 16. [lambda2json] - Converts a lambda expression to JSON.
 * 17. [mt] - Checks if a value is more than another.
 * 18. [openai.tokenize] - Tokenizes a string for OpenAI.
 * 19. [config.get] - Retrieves a configuration value.
 * 20. [unwrap] - Evaluates expressions in a node.
 * 21. [exists] - Checks if a node exists.
 * 22. [set-value] - Sets the value of a node.
 * 23. [strings.concat] - Concatenates strings.
 * 24. [.catch] - Handles exceptions in a try block.
 * 25. [throw] - Throws an exception with a message.
 */
if
   eq:x:@strings.trim
      .:[DONE]
   .lambda
      if
         neq:x:@.no-invocation
            .:int:0
         .lambda
            math.increment:x:@.no-invocation
      if
         and
            strings.contains:x:@.result
               .:___
            strings.contains:x:@.result
               .:FUNCTION_INVOCATION[
         .lambda
            if
               eq:x:@.no-invocation
                  .:int:0
               .lambda
                  math.increment:x:@.no-invocation
            strings.split:x:@.result
               .:___
            for-each:x:@strings.split/*
               if
                  strings.contains:x:@.dp/#
                     .:FUNCTION_INVOCATION[/
                  .lambda
                     try
                        if
                           lte:x:@.iterations
                              .:int:1
                           .lambda
                              log.error:Too many function invocations
                              sockets.signal:x:@.session
                                 args
                                    function_error:Too many function invocations
                              sockets.signal:x:@.session
                                 args
                                    function_waiting:bool:false
                              sockets.signal:x:@.session
                                 args
                                    error:bool:true
                                    status:int:500
                                    message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                              sockets.signal:x:@.session
                                 args
                                    finished:bool:true
                        else
                           execute:magic.ai.functions.invoke
                              type:x:@.type
                              session:x:@.session
                              user-id:x:@.user-id
                              invocation:x:@.dp/#
                              extra:x:@.extra
                           lambda2json:x:@execute/*/result/*
                              format:true
                           if
                              mt
                                 openai.tokenize:x:@lambda2json
                                 get-value:x:@.arguments/@.arguments/*/max_context_tokens
                              .lambda
                                 throw:Result too large, try to limit your result
                                    status:int:400
                                    public:bool:true
                           config.get:"magic:chat:functions:success-message"
                              .:Success!
                           unwrap:x:+/*/*
                           sockets.signal:x:@.session
                              args
                                 function_result:x:@config.get
                                 invocation:x:@execute/*/json
                                 file:x:@execute/*/workflow
                           if
                              exists:x:@execute/*/result/*
                              .lambda
                                 set-value:x:@.new-prompt
                                    strings.concat
                                       get-value:x:@.new-prompt
                                       .:"Response from '"
                                       get-value:x:@execute/*/workflow
                                       .:@"' was:
```json
"
                                       get-value:x:@lambda2json
                                       .:@"
"
                                       .:```
                                       .:@"
"
                                       .:@"
"
                                 set-value:x:@.function-result
                                    strings.concat
                                       get-value:x:@.function-result
                                       get-value:x:@lambda2json
                                       .:"\n"
                           else
                              set-value:x:@.new-prompt
                                 strings.concat
                                    get-value:x:@.new-prompt
                                    .:"Invocation of '"
                                    get-value:x:@execute/*/workflow
                                    .:"' was a success."
                                    .:@"
"
                                    .:@"
"
                     .catch
                        log.error:Could not execute AI function
                           message:x:@.arguments/*/message
                        unwrap:x:+/*/*
                        sockets.signal:x:@.session
                           args
                              function_error:x:@.arguments/*/message
                        set-value:x:@.new-prompt
                           strings.concat
                              get-value:x:@.new-prompt
                              .:"Invocation failed, exception message was: '"
                              get-value:x:@.arguments/*/message
                              .:"'"
                              .:@"
"
                              .:@"
"
            set-value:x:@.new-prompt
               strings.trim:x:@.new-prompt
      else
         sockets.signal:x:@.session
            args
               finished:bool:true
         set-value:x:@.iterations
            .:int:0
