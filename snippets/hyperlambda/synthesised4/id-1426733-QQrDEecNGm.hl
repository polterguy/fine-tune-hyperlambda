
/*
 * // This Hyperlambda code snippet retrieves a count of records from the "ml_training_snippets" table where specific conditions are met. It uses the [data.read] slot to create a SQL SELECT statement with a COUNT aggregate function. The conditions for the WHERE clause are specified using equality checks on the "type" and "uri" columns, which are compared to arguments passed into the lambda, and a static comparison on the "meta" column. The result is the count of records that match these conditions.
 * // 1. [data.read] - Initiates a SQL SELECT operation on the specified table.
 * // 2. [table] - Specifies the table name "ml_training_snippets" to query.
 * // 3. [columns] - Defines the columns to be included in the SELECT statement, here using an aggregate function.
 * // 4. [count(*):as:count] - Uses the COUNT function to count all rows and assigns the result an alias "count".
 * // 5. [where] - Begins the WHERE clause to filter records based on conditions.
 * // 6. [and] - Combines multiple conditions that must all be true.
 * // 7. [type.eq:x:@.arguments/*/type] - Compares the "type" column to an argument passed into the lambda.
 * // 8. [uri.eq:x:@.arguments/*/url] - Compares the "uri" column to another argument passed into the lambda.
 * // 9. [meta.eq:AINIRO-Website-Crawler] - Checks if the "meta" column equals the static value "AINIRO-Website-Crawler".
 */
data.read
   table:ml_training_snippets
   columns
      count(*)
         as:count
   where
      and
         type.eq:x:@.arguments/*/type
         uri.eq:x:@.arguments/*/url
         meta.eq:AINIRO-Website-Crawler
