
/*
 * This Hyperlambda code connects to a SQLite database, constructs an SQL query with a left join between "EmployeeTerritories" and "Employees" tables, and aggregates data using a specified function and column. It dynamically sets the aggregate function and column, removes specific nodes, adds conditions to the query, and returns the result of the query execution. The code is structured to allow flexible SQL query generation and execution.
 * 
 * 1. [data.connect] - Connects to a database, specifying the database type as SQLite.
 * 2. [set-name] - Concatenates the aggregate function and column into a single string.
 * 3. [remove-nodes] - Removes specified nodes from the argument list.
 * 4. [add] - Adds nodes from arguments to the where clause.
 * 5. [data.read] - Reads data from the database with specified conditions.
 * 6. [join] - Specifies a left join between two tables.
 * 7. [columns] - Defines the columns to be selected, including an aggregate function.
 * 8. [where] - Adds conditions to the SQL query.
 * 9. [limit] - Limits the query result to one record.
 * 10. [return-nodes] - Returns the result of the query execution.
 */
data.connect:[generic|northwind]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:EmployeeTerritories
         join:Employees
            as:EmployeeID
            type:left
            on
               and
                  EmployeeTerritories.EmployeeID:EmployeeID.EmployeeID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1
   return-nodes:x:@data.read/*/*
