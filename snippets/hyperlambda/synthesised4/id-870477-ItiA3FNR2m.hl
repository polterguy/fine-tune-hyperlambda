
/*
 * This Hyperlambda code recursively lists files, checks if they end with ".hl", and loads them. It then parses each file into a lambda structure, iterating through each node to check if its name exists in a predefined vocabulary. If a node's name is found in the vocabulary and not yet in the result, it adds the name to the result with a count of 1. If the name already exists in the result, it increments the count by 1. This process effectively counts occurrences of vocabulary names in the parsed files.
 * 
 * 1. [for-each] - Iterates over each file in the list of files.
 * 2. [if] - Checks if the file ends with ".hl".
 * 3. [io.file.load] - Loads the content of the file.
 * 4. [hyper2lambda] - Parses the file content into a lambda structure.
 * 5. [for-each] - Iterates over each node in the parsed lambda structure.
 * 6. [get-name] - Retrieves the name of the current node.
 * 7. [if] - Checks if the node's name exists in the vocabulary.
 * 8. [if] - Checks if the node's name does not exist in the result.
 * 9. [set-name] - Sets the name of the node in the result.
 * 10. [add] - Adds a new node to the result with a count of 1.
 * 11. [else] - Executes if the node's name already exists in the result.
 * 12. [set-value] - Increments the count of the node's name in the result.
 */
for-each:x:@io.file.list-recursively/*
   if
      strings.ends-with:x:@.dp/#
         .:.hl
      .lambda
         io.file.load:x:@.dp/#
         hyper2lambda:x:@io.file.load
            comments:true
         for-each:x:@hyper2lambda/*/**
            get-name:x:@.dp/#
            if
               exists:x:@vocabulary/*/={@get-name}
               .lambda
                  if
                     not-exists:x:@.result/*/{@get-name}
                     .lambda
                        set-name:x:+/*/*
                           get-value:x:@get-name
                        add:x:@.result
                           .
                              .:int:1
                  else
                     set-value:x:@.result/*/{@get-name}
                        math.add
                           get-value:x:@.result/*/{@get-name}
                           .:int:1
