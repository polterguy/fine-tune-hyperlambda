
/*
 * This Hyperlambda code snippet demonstrates the use of conditional branching with [else] and [if] slots to manipulate a prompt string. It first checks if the 'model' argument contains a colon using [strings.contains]. If true, it appends " ->" to the 'prompt' and adds " END" to the 'stop' node in the HTTP POST payload. If false, it simply sets the 'prompt' to its existing value. The code showcases string manipulation and conditional logic in Hyperlambda.
 * 
 * 1. [else] - Begins the conditional branching.
 * 2. [if] - Checks if the 'model' argument contains a colon.
 * 3. [strings.contains] - Evaluates if the 'model' argument includes ":".
 * 4. [.lambda] - Executes if the [if] condition is true.
 * 5. [set-value] - Updates the 'prompt' with a concatenated string.
 * 6. [strings.concat] - Concatenates the 'prompt' with " ->".
 * 7. [add] - Appends " END" to the 'stop' node in the HTTP POST payload.
 * 8. [else] - Executes if the [if] condition is false.
 * 9. [set-value] - Sets the 'prompt' to its current value.
 */
else
   if
      strings.contains:x:@.arguments/*/model
         .:":"
      .lambda
         set-value:x:@.prompt
            strings.concat
               get-value:x:@.arguments/*/prompt
               .:" ->"
         add:x:../*/http.post/*/payload
            .
               stop:" END"
   else
      set-value:x:@.prompt
         get-value:x:@.arguments/*/prompt
