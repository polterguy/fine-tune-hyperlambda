
/*
 * /*
 *  * This Hyperlambda code iterates over each node in the [scan] node set, checking if the [completion] node does not contain the string "{{". 
 *  * If the condition is met, it concatenates the [prompt] and [completion] nodes into a temporary string [tmp]. 
 *  * It then checks if the token count of [tmp] is less than a specified maximum token count [max_tokens]. 
 *  * If true, it updates the [context] with [tmp], adds the [id] to [ids], and if the [uri] is not null and doesn't already exist in [result], it adds the [prompt], [uri], and [distance] to [result]. 
 *  * If the token count exceeds [max_tokens], it resets [tmp] to the current [context].
 *  * 
 *  * 1. [for-each] - Iterates over each node in the [scan] node set.
 *  * 2. [if] - Checks if the [completion] node does not contain the string "{{".
 *  * 3. [set-value] - Concatenates the [prompt] and [completion] nodes into a temporary string [tmp].
 *  * 4. [if] - Checks if the token count of [tmp] is less than [max_tokens].
 *  * 5. [set-value] - Updates the [context] with [tmp].
 *  * 6. [add] - Adds the [id] to the [ids] node set.
 *  * 7. [if] - Checks if the [uri] is not null and doesn't exist in [result].
 *  * 8. [add] - Adds the [prompt], [uri], and [distance] to [result].
 *  * 9. [set-value] - Resets [tmp] to the current [context] if token count exceeds [max_tokens].
 *  */
 */
for-each:x:@.scan/*
   if
      not
         strings.contains:x:@.dp/#/*/completion
            .:{{
      .lambda
         set-value:x:@.tmp
            strings.concat
               get-value:x:@.tmp
               .:@"
"
               get-value:x:@.dp/#/*/prompt
               .:@"
"
               .:@"
"
               get-value:x:@.dp/#/*/completion
               .:@"

---
"
         if
            lt
               openai.tokenize:x:@.tmp
               get-value:x:@.arguments/*/max_tokens
            .lambda
               set-value:x:@.context
                  get-value:x:@.tmp
               unwrap:x:+/*/*
               add:x:@.ids
                  .
                     .:x:@.dp/#/*/id
               if
                  and
                     not-null:x:@.dp/#/*/uri
                     not-exists:x:"@.result/*/*/uri/\"={@.dp/#/*/uri}\""
                  .lambda
                     unwrap:x:+/*/*/*
                     add:x:@.result
                        .
                           .
                              prompt:x:@.dp/#/*/prompt
                              uri:x:@.dp/#/*/uri
                              distance:x:@.dp/#/*/distance
         else
            set-value:x:@.tmp
               get-value:x:@.context
