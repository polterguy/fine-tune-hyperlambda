
// Checks if a valid session argument exists and is not null or empty, then attempts to retrieve session data from the cache. If session data is found, it converts the max_session_items argument to an integer, deserializes the cached session data, and while the number of session items exceeds the allowed maximum, removes the oldest items. Finally, it adds the remaining session items to the current session node.
if
   and
      exists:x:@.arguments/*/session
      not-null:x:@.arguments/*/session
      neq:x:@.arguments/*/session
         .:
   .lambda
      cache.get:x:@.arguments/*/session
      if
         not-null:x:@cache.get
         .lambda
            convert:x:@.arguments/*/max_session_items
               type:int
            hyper2lambda:x:@cache.get
            while
               mt
                  get-count:x:@hyper2lambda/*
                  get-value:x:@convert
               .lambda
                  remove-nodes:x:@hyper2lambda/0
            add:x:@.session
               get-nodes:x:@hyper2lambda/*
