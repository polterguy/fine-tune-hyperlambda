
/*
 * The code checks if a specific expression does not exist within a nested structure of nodes. If the expression is not found, it unwraps and adds a new candidate node with specific attributes to the candidates list, marking it as complete.
 * 
 * 1. [if] - Initiates a conditional check.
 * 2. [not-exists] - Checks if a specific expression does not exist within a nested node structure.
 * 3. [.lambda] - Contains the operations to execute if the condition is true.
 * 4. [unwrap] - Unwraps and evaluates expressions within the specified node.
 * 5. [add] - Adds a new node to the candidates list with specified attributes.
 * 6. [name] - Sets the name attribute of the new candidate node.
 * 7. [expression] - Sets the expression attribute of the new candidate node.
 * 8. [complete] - Marks the new candidate node as complete with a boolean value.
 */
if
   not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
   .lambda
      unwrap:x:+/*/*/*
      add:x:../*/return/*/candidates
         .
            .
               name:x:@.x
               expression:x:@.x
               complete:bool:true
