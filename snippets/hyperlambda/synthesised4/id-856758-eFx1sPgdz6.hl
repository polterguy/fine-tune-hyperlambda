
/*
 * This Hyperlambda code defines an endpoint that processes a CSV file containing URLs, verifies its format, and scrapes data from the URLs for OpenAI training. It requires specific arguments and uses validators to ensure they are provided. The code reads the file, checks if it contains valid URLs, and logs errors if not. If valid, it scrapes data using a forked process and signals progress through a feedback channel. Optionally, it vectorizes the data if specified. Finally, it logs success and returns the result.
 * 
 * 1. [.arguments] - Declares the required arguments for the endpoint.
 * 2. [.accept] - Specifies the accepted content type as multipart/form-data.
 * 3. [auth.ticket.verify] - Verifies the user's authentication.
 * 4. [validators.mandatory] - Ensures required arguments are present.
 * 5. [validators.default] - Sets default values for optional arguments.
 * 6. [io.stream.read] - Reads the file stream from the arguments.
 * 7. [csv2lambda] - Converts the CSV content to a lambda object.
 * 8. [if] - Checks if the CSV file format is valid.
 * 9. [log.info] - Logs information about the file format and processing status.
 * 10. [sockets.signal] - Sends feedback messages through a specified channel.
 * 11. [get-count] - Counts the number of URLs in the CSV.
 * 12. [add] - Adds URLs to a list for further processing.
 * 13. [insert-before] - Inserts argument nodes before processing.
 * 14. [fork] - Processes each URL in parallel.
 * 15. [try] - Attempts to scrape data from each URL.
 * 16. [.catch] - Handles exceptions during scraping.
 * 17. [execute] - Executes the scraping and vectorization slots.
 * 18. [yield] - Returns the final result and count of processed URLs.
 */
hyper2lambda
   .arguments
      type:string
      feedback-channel:string
      vectorize:bool
      file:*
   .accept:multipart/form-data
   auth.ticket.verify:root
   validators.mandatory:x:@.arguments/*/type
   validators.mandatory:x:@.arguments/*/file
   validators.mandatory:x:@.arguments/*/file/*/name
   validators.mandatory:x:@.arguments/*/file/*/stream
   validators.default:x:@.arguments
      vectorize:bool:false
   io.stream.read:x:@.arguments/*/file/*/stream
   csv2lambda:x:@io.stream.read
   if
      or
         mt
            get-count:x:@csv2lambda/0/*
            .:int:1
         and
            not
               strings.starts-with:x:@csv2lambda/0/0
                  .:"http://"
            not
               strings.starts-with:x:@csv2lambda/0/0
                  .:"https://"
      .lambda
         log.info:URL list file not in correct format
            filename:x:@.arguments/*/file/*/name
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:File not valid. A URL list file must have only one column, and contain only URLs in its single column.
               type:error
         return
            result:error
   get-count:x:@csv2lambda/*
   log.info:URL list successfully uploaded
      count:x:@get-count
      type:x:@.arguments/*/type
   add:x:./*/fork/*/.urls
      get-nodes:x:@csv2lambda/*
   insert-before:x:./*/fork/0
      get-nodes:x:@.arguments
   fork
      .urls
      for-each:x:@.urls/*/*
         try
            execute:magic.ai.url.scrape
               url:x:@.dp/#
               type:x:@.arguments/*/type
               feedback-channel:x:@.arguments/*/feedback-channel
               lists:bool:false
               images:bool:false
               code:bool:false
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:------------------------------------------------------------------------------------------------------------------------
                  type:info
         .catch
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:x:@.arguments/*/message
                  type:warning
      sockets.signal:magic.backend.message
         roles:root
         args
            message:Done creating OpenAI training data from URL list
            type:success
      if
         eq:x:@.arguments/*/vectorize
            .:bool:true
         .lambda
            execute:magic.ai.vectorise
               type:x:@.arguments/*/type
               feedback-channel:x:@.arguments/*/feedback-channel
               .onafter
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:Done!
                        type:success
      else
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:Done!
               type:success
      log.info:OpenAI training data successfully created from URL list
         type:x:@.arguments/*/type
   yield
      result:success
      count:x:@get-count
