
// This Hyperlambda code snippet constructs a SQL statement by concatenating various string components. It uses [set-value] to assign the result to the [.sql] node, and [strings.concat] to build a complex SQL expression involving length calculations and string replacements. The code dynamically incorporates values from [.fields] and [.no] nodes into the SQL expression, which seems to be designed to count occurrences of a pattern within a field. The slots involved are: [set-value], [strings.concat], [get-value], and the use of static string segments.
set-value:x:@.sql
   strings.concat:x:@.sql
      get-value:x:@.sql
      .:" (length("
      get-value:x:@.fields
      .:) - length(replace(lower(
      get-value:x:@.fields
      .:), @p
      get-value:x:@.no
      .:", ''))) / length(@p"
      get-value:x:@.no
      .:)
