
/*
 * The code demonstrates how to perform a SQL join operation using Hyperlambda, specifically joining the "tasks" table with the "users" table using a left join. It specifies the database type as SQLite and sets a limit of 1 for the results. The join condition is based on matching "user_id" fields from both tables, and the result includes an aggregated column aliased as "result". The [where] clause is prepared for additional conditions. 
 * 
 * 1. [data.read] - Initiates a read operation from the database.
 * 2. [database-type] - Specifies the type of database being used, in this case, SQLite.
 * 3. [table] - Defines the primary table for the SQL operation, here "tasks".
 * 4. [join] - Specifies a left join with the "users" table.
 * 5. [as] - Aliases the join, here for "user_id".
 * 6. [type] - Sets the join type to "left".
 * 7. [on] - Defines the join condition.
 * 8. [and] - Logical operator for combining conditions.
 * 9. [columns] - Specifies the columns to be retrieved.
 * 10. [aggregate_functor] - Placeholder for an aggregation function.
 * 11. [as] - Aliases the aggregated result as "result".
 * 12. [where] - Prepares for additional filtering conditions.
 * 13. [limit] - Restricts the number of results returned to 1.
 */
data.read
   database-type:sqlite
   table:tasks
      join:users
         as:user_id
         type:left
         on
            and
               tasks.user_id:user_id.user_id
   columns
      aggregate_functor
         as:result
   where
      and
   limit:long:1
