
/*
 * This Hyperlambda code checks if a cached item exists using [cache.get]. If the item is not null, it converts a maximum session items argument to an integer, then converts the cached item to a Hyperlambda node structure. It enters a [while] loop, removing nodes from the beginning of the Hyperlambda node structure until the number of nodes is less than or equal to the maximum session items. Finally, it adds the remaining nodes to a session node. 
 * 
 * 1. [if] - Checks if the cached item is not null.
 * 2. [not-null] - Evaluates if the cached item exists.
 * 3. [.lambda] - Executes the following logic if the cached item is not null.
 * 4. [convert] - Converts the maximum session items argument to an integer.
 * 5. [hyper2lambda] - Converts the cached item to a Hyperlambda node structure.
 * 6. [while] - Loops while the number of nodes in the Hyperlambda structure is greater than the maximum session items.
 * 7. [mt] - Compares the number of nodes to the maximum session items.
 * 8. [get-count] - Retrieves the number of nodes in the Hyperlambda structure.
 * 9. [get-value] - Retrieves the converted maximum session items value.
 * 10. [.lambda] - Executes the following logic within the loop.
 * 11. [remove-nodes] - Removes the first node from the Hyperlambda structure.
 * 12. [add] - Adds the remaining nodes to the session node.
 * 13. [get-nodes] - Retrieves the nodes from the Hyperlambda structure.
 */
if
   not-null:x:@cache.get
   .lambda
      convert:x:@.arguments/*/max_session_items
         type:int
      hyper2lambda:x:@cache.get
      while
         mt
            get-count:x:@hyper2lambda/*
            get-value:x:@convert
         .lambda
            remove-nodes:x:@hyper2lambda/0
      add:x:@.session
         get-nodes:x:@hyper2lambda/*
