
/*
 * This Hyperlambda code is a complex logic handling function invocations, checking for iteration limits, and managing responses and errors in a session-based context. It uses conditional branching to determine the flow of execution based on the number of iterations and the size of the result. It sends signals to a session to indicate errors, waiting status, and completion. If the invocation is successful, it formats the result and sends it back to the session. If the result is too large, it throws an error. The code also constructs a new prompt based on the invocation's success or failure.
 * 
 * 1. [try] - Begins a try block to handle potential exceptions.
 * 2. [if] - Checks if the number of iterations is less than or equal to 1.
 * 3. [log.error] - Logs an error if the condition is true.
 * 4. [sockets.signal] - Sends a signal to the session indicating a function error.
 * 5. [sockets.signal] - Sends a signal to the session indicating the function is not waiting.
 * 6. [sockets.signal] - Sends a signal to the session with an error status and message.
 * 7. [sockets.signal] - Sends a signal to the session indicating the function has finished.
 * 8. [else] - Executes if the iteration condition is false.
 * 9. [execute] - Invokes a function with specified parameters.
 * 10. [lambda2json] - Converts the result to JSON format.
 * 11. [if] - Checks if the tokenized result exceeds the maximum context tokens.
 * 12. [throw] - Throws an error if the result is too large.
 * 13. [config.get] - Retrieves a success message from the configuration.
 * 14. [unwrap] - Unwraps the configuration value.
 * 15. [sockets.signal] - Sends a signal to the session with the function result and invocation details.
 * 16. [if] - Checks if the result exists.
 * 17. [set-value] - Constructs a new prompt with the response details if the result exists.
 * 18. [set-value] - Constructs the function result string.
 * 19. [else] - Executes if the result does not exist.
 * 20. [set-value] - Constructs a new prompt indicating the invocation was successful.
 */
try
   if
      lte:x:@.iterations
         .:int:1
      .lambda
         log.error:Too many function invocations
         sockets.signal:x:@.session
            args
               function_error:Too many function invocations
         sockets.signal:x:@.session
            args
               function_waiting:bool:false
         sockets.signal:x:@.session
            args
               error:bool:true
               status:int:500
               message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
         sockets.signal:x:@.session
            args
               finished:bool:true
   else
      execute:magic.ai.functions.invoke
         type:x:@.type
         session:x:@.session
         user-id:x:@.user-id
         invocation:x:@.dp/#
         extra:x:@.extra
      lambda2json:x:@execute/*/result/*
         format:true
      if
         mt
            openai.tokenize:x:@lambda2json
            get-value:x:@.arguments/@.arguments/*/max_context_tokens
         .lambda
            throw:Result too large, try to limit your result
               status:int:400
               public:bool:true
      config.get:"magic:chat:functions:success-message"
         .:Success!
      unwrap:x:+/*/*
      sockets.signal:x:@.session
         args
            function_result:x:@config.get
            invocation:x:@execute/*/json
            file:x:@execute/*/workflow
      if
         exists:x:@execute/*/result/*
         .lambda
            set-value:x:@.new-prompt
               strings.concat
                  get-value:x:@.new-prompt
                  .:"Response from '"
                  get-value:x:@execute/*/workflow
                  .:@"' was:
```json
"
                  get-value:x:@lambda2json
                  .:@"
"
                  .:```
                  .:@"
"
                  .:@"
"
            set-value:x:@.function-result
               strings.concat
                  get-value:x:@.function-result
                  get-value:x:@lambda2json
                  .:"\n"
      else
         set-value:x:@.new-prompt
            strings.concat
               get-value:x:@.new-prompt
               .:"Invocation of '"
               get-value:x:@execute/*/workflow
               .:"' was a success."
               .:@"
"
               .:@"
"
