
// This Hyperlambda code defines an endpoint for querying a SQLite database, specifically the "Customers" table, using various arguments for filtering, grouping, and aggregating data. It includes validators to ensure mandatory and enumerated arguments for grouping and aggregation functions, and dynamically constructs SQL queries based on provided arguments. The code uses slots like [data.connect] and [data.read] to interact with the database, and [validators.mandatory] and [validators.enum] for input validation. The endpoint supports complex query customization through arguments like group_column, aggregate_function, and various comparison operators for filtering.
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      Customers.CustomerID.like:string
      Customers.CustomerID.mt:string
      Customers.CustomerID.lt:string
      Customers.CustomerID.mteq:string
      Customers.CustomerID.lteq:string
      Customers.CustomerID.neq:string
      Customers.CustomerID.eq:string
      Customers.CompanyName.like:string
      Customers.CompanyName.mt:string
      Customers.CompanyName.lt:string
      Customers.CompanyName.mteq:string
      Customers.CompanyName.lteq:string
      Customers.CompanyName.neq:string
      Customers.CompanyName.eq:string
      Customers.ContactName.like:string
      Customers.ContactName.mt:string
      Customers.ContactName.lt:string
      Customers.ContactName.mteq:string
      Customers.ContactName.lteq:string
      Customers.ContactName.neq:string
      Customers.ContactName.eq:string
      Customers.ContactTitle.like:string
      Customers.ContactTitle.mt:string
      Customers.ContactTitle.lt:string
      Customers.ContactTitle.mteq:string
      Customers.ContactTitle.lteq:string
      Customers.ContactTitle.neq:string
      Customers.ContactTitle.eq:string
      Customers.Address.like:string
      Customers.Address.mt:string
      Customers.Address.lt:string
      Customers.Address.mteq:string
      Customers.Address.lteq:string
      Customers.Address.neq:string
      Customers.Address.eq:string
      Customers.City.like:string
      Customers.City.mt:string
      Customers.City.lt:string
      Customers.City.mteq:string
      Customers.City.lteq:string
      Customers.City.neq:string
      Customers.City.eq:string
      Customers.Region.like:string
      Customers.Region.mt:string
      Customers.Region.lt:string
      Customers.Region.mteq:string
      Customers.Region.lteq:string
      Customers.Region.neq:string
      Customers.Region.eq:string
      Customers.PostalCode.like:string
      Customers.PostalCode.mt:string
      Customers.PostalCode.lt:string
      Customers.PostalCode.mteq:string
      Customers.PostalCode.lteq:string
      Customers.PostalCode.neq:string
      Customers.PostalCode.eq:string
      Customers.Country.like:string
      Customers.Country.mt:string
      Customers.Country.lt:string
      Customers.Country.mteq:string
      Customers.Country.lteq:string
      Customers.Country.neq:string
      Customers.Country.eq:string
      Customers.Phone.like:string
      Customers.Phone.mt:string
      Customers.Phone.lt:string
      Customers.Phone.mteq:string
      Customers.Phone.lteq:string
      Customers.Phone.neq:string
      Customers.Phone.eq:string
      Customers.Fax.like:string
      Customers.Fax.mt:string
      Customers.Fax.lt:string
      Customers.Fax.mteq:string
      Customers.Fax.lteq:string
      Customers.Fax.neq:string
      Customers.Fax.eq:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:Customers.CustomerID
      .:Customers.CompanyName
      .:Customers.ContactName
      .:Customers.ContactTitle
      .:Customers.Address
      .:Customers.City
      .:Customers.Region
      .:Customers.PostalCode
      .:Customers.Country
      .:Customers.Phone
      .:Customers.Fax
   validators.enum:x:@.arguments/*/aggregate_column
      .:Customers.CustomerID
      .:Customers.CompanyName
      .:Customers.ContactName
      .:Customers.ContactTitle
      .:Customers.Address
      .:Customers.City
      .:Customers.Region
      .:Customers.PostalCode
      .:Customers.Country
      .:Customers.Phone
      .:Customers.Fax
   data.connect:[generic|northwind]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:Customers
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
