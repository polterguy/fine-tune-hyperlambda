
// This Hyperlambda code defines an endpoint for querying a SQLite database with dynamic SQL generation based on provided arguments. It validates mandatory arguments and their values, sets HTTP response headers, verifies authentication, and constructs a SQL query with optional filtering, grouping, and ordering. The query aggregates data from the "activities" table, optionally joining with the "clients" table, and returns the result. Key slots include [validators.mandatory] for argument validation, [data.connect] for database connection, and [data.read] for executing the SQL query.
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      activities.activity_id.mt:long
      activities.activity_id.lt:long
      activities.activity_id.mteq:long
      activities.activity_id.lteq:long
      activities.activity_id.neq:long
      activities.activity_id.eq:long
      activities.client_id.mt:long
      activities.client_id.lt:long
      activities.client_id.mteq:long
      activities.client_id.lteq:long
      activities.client_id.neq:long
      activities.client_id.eq:long
      activities.type.like:string
      activities.type.mt:string
      activities.type.lt:string
      activities.type.mteq:string
      activities.type.lteq:string
      activities.type.neq:string
      activities.type.eq:string
      activities.date.mt:date
      activities.date.lt:date
      activities.date.mteq:date
      activities.date.lteq:date
      activities.date.neq:date
      activities.date.eq:date
      activities.notes.like:string
      activities.notes.mt:string
      activities.notes.lt:string
      activities.notes.mteq:string
      activities.notes.lteq:string
      activities.notes.neq:string
      activities.notes.eq:string
      client_id.name.eq:string
      client_id.name.like:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:activities.activity_id
      .:activities.client_id
      .:activities.type
      .:activities.date
      .:activities.notes
      .:client_id.name
   validators.enum:x:@.arguments/*/aggregate_column
      .:activities.activity_id
      .:activities.client_id
      .:activities.type
      .:activities.date
      .:activities.notes
      .:client_id.name
   response.headers.set
      Cache-Control:public, max-age=300
   auth.ticket.verify:guest
   data.connect:[generic|crm]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:activities
            join:clients
               as:client_id
               type:left
               on
                  and
                     activities.client_id:client_id.client_id
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
