
// This Hyperlambda code defines an endpoint that retrieves and aggregates data from a SQLite database, specifically from the "opportunities" table with a left join to the "clients" table. It validates mandatory arguments such as group and aggregate columns, and functions, ensuring they match predefined enums. The code constructs a SQL query with dynamic grouping, ordering, and filtering based on the provided arguments, and sets caching headers for the response. It returns the aggregated result with the specified group and aggregate columns, supporting operations like min, max, sum, avg, and count.
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      opportunities.opportunity_id.mt:long
      opportunities.opportunity_id.lt:long
      opportunities.opportunity_id.mteq:long
      opportunities.opportunity_id.lteq:long
      opportunities.opportunity_id.neq:long
      opportunities.opportunity_id.eq:long
      opportunities.client_id.mt:long
      opportunities.client_id.lt:long
      opportunities.client_id.mteq:long
      opportunities.client_id.lteq:long
      opportunities.client_id.neq:long
      opportunities.client_id.eq:long
      opportunities.description.like:string
      opportunities.description.mt:string
      opportunities.description.lt:string
      opportunities.description.mteq:string
      opportunities.description.lteq:string
      opportunities.description.neq:string
      opportunities.description.eq:string
      opportunities.value.mt:double
      opportunities.value.lt:double
      opportunities.value.mteq:double
      opportunities.value.lteq:double
      opportunities.value.neq:double
      opportunities.value.eq:double
      opportunities.stage.like:string
      opportunities.stage.mt:string
      opportunities.stage.lt:string
      opportunities.stage.mteq:string
      opportunities.stage.lteq:string
      opportunities.stage.neq:string
      opportunities.stage.eq:string
      opportunities.close_date.mt:date
      opportunities.close_date.lt:date
      opportunities.close_date.mteq:date
      opportunities.close_date.lteq:date
      opportunities.close_date.neq:date
      opportunities.close_date.eq:date
      client_id.name.eq:string
      client_id.name.like:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:opportunities.opportunity_id
      .:opportunities.client_id
      .:opportunities.description
      .:opportunities.value
      .:opportunities.stage
      .:opportunities.close_date
      .:client_id.name
   validators.enum:x:@.arguments/*/aggregate_column
      .:opportunities.opportunity_id
      .:opportunities.client_id
      .:opportunities.description
      .:opportunities.value
      .:opportunities.stage
      .:opportunities.close_date
      .:client_id.name
   response.headers.set
      Cache-Control:public, max-age=300
   auth.ticket.verify:guest
   data.connect:[generic|crm]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:opportunities
            join:clients
               as:client_id
               type:left
               on
                  and
                     opportunities.client_id:client_id.client_id
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
