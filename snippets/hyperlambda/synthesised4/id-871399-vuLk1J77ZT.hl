
/*
 * This Hyperlambda code establishes a connection to a SQLite database named "northwind" and performs an SQL read operation on the "Shippers" table. It constructs an aggregate function dynamically using the provided arguments, removes certain nodes, and adds nodes to the "where" clause. The query retrieves a single result using the aggregate function and returns the result nodes. The code demonstrates dynamic SQL construction and execution using Hyperlambda. 
 * 
 * 1. [data.connect] - Connects to the "northwind" database using SQLite.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [set-name] - Constructs an aggregate function dynamically using provided arguments.
 * 4. [remove-nodes] - Removes specific nodes from the arguments.
 * 5. [add] - Adds nodes to the "where" clause of the SQL query.
 * 6. [data.read] - Performs an SQL read operation on the "Shippers" table.
 * 7. [columns] - Specifies the columns to retrieve, using the dynamically constructed aggregate function.
 * 8. [where] - Specifies the "where" clause for the SQL query.
 * 9. [limit] - Limits the query to return only one result.
 * 10. [return-nodes] - Returns the result nodes from the data read operation.
 */
data.connect:[generic|northwind]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:Shippers
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1
   return-nodes:x:@data.read/*/*
