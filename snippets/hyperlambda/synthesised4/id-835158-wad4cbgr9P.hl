
// This Hyperlambda code snippet performs a series of operations on a string. It first checks if the count of nodes from a split operation is greater than one. If true, it trims and splits the string by commas, iterates over the split results, and further splits each result by an equals sign. It then sets and trims names and values, adding them to a data structure. The code uses slots like [if], [mt], [get-count], [strings.split], [for-each], [strings.trim], [set-value], [set-name], and [add] to manipulate and organize string data into a structured format.
if
   mt
      get-count:x:@strings.split/*
      .:int:1
   .lambda
      strings.trim:x:@strings.split/1
      strings.split:x:-
         .:,
      for-each:x:@strings.split/*
         strings.split:x:@.dp/#
            .:=
         set-value:x:./*/add/*/*/name
            strings.trim:x:@strings.split/1
         set-name:x:./*/add/*/*/name
            strings.trim:x:@strings.split/0
         add:x:@for-each/@for-each/*/data.create/*/values
            .
               name:value
