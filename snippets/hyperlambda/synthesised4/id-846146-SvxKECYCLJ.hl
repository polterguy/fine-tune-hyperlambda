
/*
 * This Hyperlambda code processes and potentially summarizes training snippets based on specified conditions. It retrieves configuration data from a database, checks if snippets exceed a size threshold, and uses OpenAI's API to summarize them if needed. The code manages snippet existence checks, updates, and imports, signaling feedback through a channel. It handles various conditions for snippet processing, including size, similarity, and database existence, and logs the results of these operations.
 * 
 * 1. [else] - Begins an else block for conditional logic.
 * 2. [if] - Checks if both conditions are true.
 * 3. [and] - Combines multiple conditions.
 * 4. [exists] - Checks if a node exists.
 * 5. [eq] - Compares values for equality.
 * 6. [.lambda] - Contains the logic to execute if conditions are met.
 * 7. [.max-size], [.api-key], [.model] - Variables for storing configuration data.
 * 8. [data.connect] - Connects to a database.
 * 9. [data.read] - Reads data from a database table.
 * 10. [set-value] - Assigns a value to a node.
 * 11. [math.multiply] - Multiplies numeric values.
 * 12. [convert] - Converts data types.
 * 13. [for-each] - Iterates over a collection of nodes.
 * 14. [.tmp] - Temporary storage for concatenated strings.
 * 15. [strings.concat] - Concatenates strings.
 * 16. [if] - Checks if a condition is true.
 * 17. [mt] - Compares if one value is more than another.
 * 18. [openai.tokenize] - Calculates token usage for OpenAI.
 * 19. [sockets.signal] - Sends a signal with a message.
 * 20. [sleep] - Pauses execution for a specified time.
 * 21. [.token] - Stores an authorization token.
 * 22. [while] - Loops while a condition is true.
 * 23. [try] - Attempts to execute code, catching exceptions.
 * 24. [unwrap] - Evaluates expressions.
 * 25. [http.post] - Sends an HTTP POST request.
 * 26. [headers] - Defines HTTP headers.
 * 27. [payload] - Specifies the body of an HTTP request.
 * 28. [if] - Checks HTTP response status.
 * 29. [eq] - Compares values for equality.
 * 30. [lambda2hyper] - Converts lambda to Hyperlambda.
 * 31. [log.error] - Logs an error message.
 * 32. [else-if] - Checks alternative conditions.
 * 33. [mte] - Checks if a value is more than or equal to another.
 * 34. [lt] - Checks if a value is less than another.
 * 35. [strings.trim] - Trims whitespace from strings.
 * 36. [strings.substring] - Extracts a substring.
 * 37. [math.decrement] - Decreases a numeric value.
 * 38. [.catch] - Handles exceptions.
 * 39. [.below-threshold], [.total-snippets], [.already-exists], [.failed] - Variables for tracking snippet processing.
 * 40. [get-count] - Counts nodes in a collection.
 * 41. [if] - Checks if a condition is true.
 * 42. [not-exists] - Checks if a node does not exist.
 * 43. [throw] - Raises an exception.
 * 44. [data.execute] - Executes a database command.
 * 45. [data.delete] - Deletes data from a database.
 * 46. [.similar] - Tracks similar snippets.
 * 47. [add] - Adds nodes to a collection.
 * 48. [try-signal] - Attempts to send a signal.
 * 49. [strings.length] - Gets the length of a string.
 * 50. [strings.concat] - Concatenates strings.
 * 51. [data.create] - Inserts data into a database.
 * 52. [data.update] - Updates data in a database.
 * 53. [math.increment] - Increases a numeric value.
 * 54. [if] - Checks if a condition is true.
 * 55. [neq] - Checks if values are not equal.
 * 56. [unwrap] - Evaluates expressions.
 * 57. [sockets.signal] - Sends a signal with a message.
 * 58. [sleep] - Pauses execution for a specified time.
 */
else
   if
      and
         exists:x:@.arguments/*/summarize
         eq:x:@.arguments/*/summarize
            .:bool:true
      .lambda
         .max-size
         .api-key
         .model
         data.connect:[generic|magic]
            data.read
               table:ml_types
               columns
                  max_context_tokens
                  api_key
                  model
               where
                  and
                     type.eq:x:@.arguments/*/type
            set-value:x:@.max-size
               math.multiply
                  convert:x:@data.read/*/*/max_context_tokens
                     type:decimal
                  .:decimal:0.8
            set-value:x:@.max-size
               convert:x:@.max-size
                  type:int
            set-value:x:@.api-key
               get-value:x:@data.read/*/*/api_key
            set-value:x:@.model
               get-value:x:@data.read/*/*/model
         for-each:x:@.snippets/*
            .tmp
            set-value:x:@.tmp
               strings.concat
                  get-value:x:@.dp/#/*/prompt
                  .:@"
"
                  .:@"
"
                  get-value:x:@.dp/#/*/completion
            if
               mt
                  openai.tokenize:x:@.tmp
                  get-value:x:@.max-size
               .lambda
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:Summarizing snippet since it is larger than 80% of maximum context size for type
                        type:info
                  sleep:100
                  .token
                  set-value:x:@.token
                     strings.concat
                        .:"Bearer "
                        get-first-value
                           get-value:x:@.api-key
                           config.get:"magic:openai:key"
                  .no:int:3
                  while
                     mt:x:@.no
                        .:int:0
                     .lambda
                        try
                           unwrap:x:+/**
                           http.post:"https://api.openai.com/v1/chat/completions"
                              headers
                                 Authorization:x:@.token
                                 Content-Type:application/json
                              payload
                                 model:x:@.model
                                 max_tokens:x:@.max-size
                                 temperature:decimal:0.3
                                 messages
                                    .
                                       role:system
                                       content:Create a summary of the following information
                                    .
                                       role:user
                                       content:x:@.dp/#/*/completion
                              convert:true
                           if
                              eq:x:@http.post
                                 .:int:400
                              .lambda
                                 sockets.signal:x:@.arguments/*/feedback-channel
                                    args
                                       message:Could not summarize snippet, check your log for details
                                       type:warning
                                 sleep:100
                                 lambda2hyper:x:@http.post
                                 log.error:Something went wrong while invoking OpenAI
                                    message:x:@http.post/*/content/*/error/*/message
                                    status:x:@http.post
                                    error:x:@lambda2hyper
                                 set-value:x:@.no
                                    .:int:0
                           else-if
                              and
                                 mte:x:@http.post
                                    .:int:200
                                 lt:x:@http.post
                                    .:int:300
                              .lambda
                                 sockets.signal:x:@.arguments/*/feedback-channel
                                    args
                                       message:Successfully created summary of snippet
                                       type:info
                                 sleep:100
                                 set-value:x:@.dp/#/*/completion
                                    strings.trim:x:@http.post/*/content/*/choices/0/*/message/*/content
                                       .:@"
	 "
                                 set-value:x:@.dp/#/*/prompt
                                    strings.concat
                                       .:"Summary; "
                                       strings.substring:x:@.dp/#/*/prompt
                                          .:int:0
                                          .:int:150
                                 set-value:x:@.no
                                    .:int:0
                           else
                              sockets.signal:x:@.arguments/*/feedback-channel
                                 args
                                    message:Could not summarize snippet, check your log for details. Trying again in 3 seconds.
                                    type:warning
                              sleep:3000
                              lambda2hyper:x:@http.post
                              log.error:Something went wrong while invoking OpenAI
                                 message:x:@http.post/*/content/*/error/*/message
                                 status:x:@http.post
                                 error:x:@lambda2hyper
                              math.decrement:x:@.no
                        .catch
                           math.decrement:x:@.no
   .below-threshold:int:0
   .total-snippets
   set-value:x:@.total-snippets
      get-count:x:@.snippets/*
   .already-exists:int:0
   .failed:int:0
   data.connect:[generic|magic]
      data.read
         table:ml_types
         columns
            id
         where
            and
               type.eq:x:@.arguments/*/type
      if
         not-exists:x:@data.read/*
         .lambda
            throw:Machine learning type does not exist.
               type:x:@.arguments/*/type
      data.read
         table:ml_training_snippets
         columns
            count(*)
               as:count
         where
            and
               type.eq:x:@.arguments/*/type
               uri.eq:x:@.arguments/*/url
               meta.eq:AINIRO-Website-Crawler
      if
         neq
            convert:x:@data.read/*/*/count
               type:int
            .:int:0
         .lambda
            strings.concat
               .:"Deleting "
               get-value:x:@data.read/*/*/count
               .:" old training snippets with the same URL"
            unwrap:x:+/**
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:x:@strings.concat
                  type:info
            sleep:10
      data.execute:"\n   delete from vss_ml_training_snippets\n      where rowid in (select id as rowid from ml_training_snippets where type = @type and uri = @url)"
         @type:x:@.arguments/*/type
         @url:x:@.arguments/*/url
      data.delete
         table:ml_training_snippets
         where
            and
               type.eq:x:@.arguments/*/type
               uri.eq:x:@.arguments/*/url
               meta.eq:AINIRO-Website-Crawler
      .similar:int:0
      for-each:x:@.snippets/*
         if
            and
               exists:x:@.dp/#/*/completion
               not-null:x:@.dp/#/*/completion
            .lambda
               if
                  mt
                     strings.length:x:@.dp/#/*/completion
                     get-value:x:@.arguments/*/threshold
                  .lambda
                     add:x:+
                        get-nodes:x:@.arguments/*/type
                     try-signal:magic.ai.can-create-snippet
                     strings.concat
                        get-value:x:@.dp/#/*/completion
                        .:@"
"
                        .:@"
"
                        .:This information was taken from [this URL](
                        .:%
                     data.read
                        table:ml_training_snippets
                        columns
                           id
                           prompt
                           completion
                           uri
                        where
                           and
                              type.eq:x:@.arguments/*/type
                              or
                                 completion.eq:x:@.dp/#/*/completion
                                 completion.like:x:@strings.concat
                     if
                        not-exists:x:@data.read/*
                        .lambda
                           if:x:@.arguments/*/insert_url
                              set-value:x:@.dp/#/*/completion
                                 strings.concat
                                    get-value:x:@.dp/#/*/completion
                                    .:@"
"
                                    .:@"
"
                                    .:This information was taken from [this URL](
                                    get-value:x:@.arguments/*/url
                                    .:)
                           data.create
                              table:ml_training_snippets
                              values
                                 type:x:@.arguments/*/type
                                 uri:x:@.arguments/*/url
                                 prompt:x:@.dp/#/*/prompt
                                 completion:x:@.dp/#/*/completion
                                 meta:AINIRO-Website-Crawler
                     else-if
                        eq:x:@data.read/0/*/prompt
                           .:Common
                        .lambda
                           math.increment:x:@.already-exists
                     else-if
                        not
                           eq:x:@data.read/*/*/prompt
                              get-value:x:@.dp/#/*/prompt
                        .lambda
                           math.increment:x:@.similar
                           data.update
                              table:ml_training_snippets
                              values
                                 prompt:Common
                              where
                                 and
                                    id.eq:x:@data.read/0/*/id
               else
                  math.increment:x:@.below-threshold
      if
         neq:x:@.similar
            .:int:0
         .lambda
            strings.concat
               get-value:x:@.similar
               .:" snippets with similar completion exists, updating prompt to 'Common'"
            unwrap:x:+/**
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:x:@strings.concat
                  type:info
            sleep:10
   .imported
   set-value:x:@.imported
      math.subtract:x:@.total-snippets
         math.add
            get-value:x:@.below-threshold
            get-value:x:@.already-exists
   if
      mt:x:@.below-threshold
         .:int:0
      .lambda
         strings.concat
            get-value:x:@.below-threshold
            .:" snippets was below threshold and hence was not imported"
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:info
         sleep:100
   if
      mt:x:@.already-exists
         .:int:0
      .lambda
         strings.concat
            get-value:x:@.already-exists
            .:" snippets already exists in database and hence was not imported"
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:info
         sleep:100
   if
      mt:x:@.failed
         .:int:0
      .lambda
         strings.concat
            get-value:x:@.failed
            .:" snippets failed during import, probably because of OpenAI not being able to summarize them"
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:warning
         sleep:100
   if
      mt:x:@.imported
         .:int:0
      .lambda
         strings.concat
            .:"Done importing or updating "
            get-value:x:@.imported
            .:" training snippets from page"
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:info
         sleep:100
   else
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:We were not able to successfully import any snippets from page!
            type:warning
      sleep:100
