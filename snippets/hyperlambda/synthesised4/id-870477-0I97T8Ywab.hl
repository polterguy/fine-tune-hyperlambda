
/*
 * This Hyperlambda code sorts a list of nodes located at [.result] using a custom comparison logic. The [sort] slot iterates over pairs of nodes, comparing their values using [lt] and [mt] slots. If the left-hand side node is less than the right-hand side, [.result] is set to 1. If the left-hand side is greater, [.result] is set to -1. If they are equal, [.result] is set to 0. This sorting logic effectively orders the nodes in descending order. 
 * 
 * 1. [sort] - Initiates the sorting of nodes at [.result].
 * 2. [if] - Checks if the left node is less than the right node.
 * 3. [lt] - Compares values of left and right nodes.
 * 4. [set-value] - Sets [.result] to 1 if left is less.
 * 5. [else-if] - Checks if the left node is greater than the right node.
 * 6. [mt] - Compares values of left and right nodes.
 * 7. [set-value] - Sets [.result] to -1 if left is greater.
 * 8. [else] - Handles the case where nodes are equal.
 * 9. [set-value] - Sets [.result] to 0 if nodes are equal.
 */
sort:x:@.result/*
   if
      lt:x:@.lhs/#
         get-value:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:1
   else-if
      mt:x:@.lhs/#
         get-value:x:@.rhs/#
      .lambda
         set-value:x:@.result
            .:int:-1
   else
      set-value:x:@.result
         .:int:0
