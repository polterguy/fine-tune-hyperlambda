
// This Hyperlambda code checks if a node's name is "execute" and processes a file if true. It converts the file content from Hyperlambda to another format and checks for specific nodes like [yield], [return], or [return-nodes]. If these nodes exist without children, it creates a candidate expression. If they have children, it logs a warning about complex objects. The code uses slots like [if], [eq], [exists], [not-exists], [for-each], [set-value], [strings.concat], and [add] to perform these operations.
if
   eq:x:@.node-name
      .:execute
   .lambda
      load-file:x:@.dp/#/*/filename
      hyper2lambda:x:@load-file
      if
         and
            exists:x:@hyper2lambda/**/[yield|return|return-nodes]
            not-exists:x:@hyper2lambda/**/[yield|return|return-nodes]/*
         .lambda
            .x
            set-value:x:@.x
               strings.concat
                  .:--/execute/=
                  get-value:x:@.dp/#/*/name
                  .:/*
            if
               not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
               .lambda
                  unwrap:x:+/*/*/*
                  add:x:../*/return/*/candidates
                     .
                        .
                           name:x:@.x
                           expression:x:@.x
                           complete:bool:false
      else
         for-each:x:@hyper2lambda/**/[yield|return|return-nodes]/*
            if
               exists:x:@.dp/#/*
               .lambda
                  set-value:x:@.warning
                     .:Warning, some of your actions, and/or arguments, are returning complex objects, and we cannot automatically create candidate expressions for these. You will have to manually edit some of your expressions if you want to reference these nodes in your actions.
            .x
            set-value:x:@.x
               strings.concat
                  .:--/execute/=
                  get-value:x:@.dp/@.dp/#/*/name
                  .:/*/
                  get-name:x:@.dp/#
            if
               not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
               .lambda
                  unwrap:x:+/*/*/*
                  add:x:../*/return/*/candidates
                     .
                        .
                           name:x:@.x
                           expression:x:@.x
                           complete:bool:true
