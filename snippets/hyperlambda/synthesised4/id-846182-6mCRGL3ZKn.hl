
// This Hyperlambda code connects to a PostgreSQL database and retrieves metadata about columns in a specified table. It constructs a SQL query to fetch column details, including name, data type, nullability, primary key status, and default values. The code processes each column, determining its attributes such as nullable, primary, and automatic based on its properties. It also maps PostgreSQL data types to Hyperlambda types using a switch statement. Finally, it returns the processed column metadata as a node list.
pgsql.connect:x:@.connection
   strings.concat
      .:"\nselect c.column_name, c.is_nullable, c.data_type, c.column_default, exists(\n   select *\n      from information_schema.key_column_usage kcu  \n         join information_schema.table_constraints tc on tc.constraint_name = kcu.constraint_name \n      where tc.constraint_type = 'PRIMARY KEY' and\n         kcu.table_name = @table and \n         c.column_name = kcu.column_name and c.table_name = kcu.table_name\n   ) as is_pk\n   from information_schema.columns c\n   where c.table_name = @table and c.table_catalog = @database order by is_pk desc, c.column_name asc"
   pgsql.select:x:@strings.concat
      @table:x:@.arguments/*/table
      @database:x:@.arguments/*/database
   for-each:x:@pgsql.select/*
      unwrap:x:+/*/*
      .tmp
         ""
            name:x:@.dp/#/*/column_name
            db:x:@.dp/#/*/data_type
      if
         eq
            get-value:x:@.dp/#/*/is_nullable
            .:NO
         .lambda
            add:x:@.tmp/*
               .
                  nullable:bool:false
      else
         add:x:@.tmp/*
            .
               nullable:bool:true
      if
         get-value:x:@.dp/#/*/is_pk
         .lambda
            add:x:@.tmp/*
               .
                  primary:bool:true
      else
         add:x:@.tmp/*
            .
               primary:bool:false
      if
         and
            not
               eq
                  get-value:x:@.dp/#/*/column_default
                  .:
            not
               eq
                  get-value:x:@.dp/#/*/column_default
                  .
         .lambda
            add:x:@.tmp/*
               .
                  automatic:bool:true
      else
         add:x:@.tmp/*
            .
               automatic:bool:false
      .type
      strings.regex-replace:x:@.dp/#/*/data_type
         .:" \\([0-9,]+\\)"
         .:
      strings.regex-replace:x:@strings.regex-replace
         .:" \\[[0-9,]+\\]"
         .:
      strings.replace:x:@strings.regex-replace
         .:" unsigned"
         .:
      strings.replace:x:@strings.replace
         .:" without time zone"
         .:
      strings.replace:x:@strings.replace
         .:" with time zone"
         .:
      switch:x:@strings.replace
         case:smallserial
         case:serial
         case:smallint
            set-value:x:@.type
               .:int
         case:timestamp
            set-value:x:@.type
               .:date
         case:numeric
         case:decimal
         case:real
         case:money
            set-value:x:@.type
               .:decimal
         case:double precision
            set-value:x:@.type
               .:double
         case:integer
         case:bigint
         case:bigserial
         case:interval
            set-value:x:@.type
               .:long
         case:string
         case:bit
         case:bit varying
         case:character
         case:character varying
         case:json
         case:text
         case:xml
            set-value:x:@.type
               .:string
         case:boolean
            set-value:x:@.type
               .:bool
         default
            if
               strings.starts-with:x:@strings.replace
                  .:enum
               .lambda
                  set-value:x:@.type
                     .:string
            else
               set-value:x:@.type
                  .:string
      unwrap:x:+/*/*
      add:x:@.tmp/*
         .
            hl:x:@.type
      add:x:../*/pgsql.connect/*/return-nodes
         get-nodes:x:@.tmp/*
   return-nodes
