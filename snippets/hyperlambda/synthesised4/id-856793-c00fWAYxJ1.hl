
// This Hyperlambda code initiates a background thread to import a CSV file into a database. It logs the start, processes the CSV content by sanitizing table and column names, and creates a new table with columns based on the CSV data. It attempts to create a primary key and determine column data types, logging each step. If an error occurs, it logs the error message. Finally, it connects to the database, inserts the data, logs the completion, and sends a success message through a socket signal.
fork
   log.info:Successfully started a thread to import CSV file
      databaseType:x:@.arguments/*/databaseType
      connectionString:x:@.arguments/*/connectionString
      databaseName:x:@.arguments/*/databaseName
   .table
   strings.split:x:@.arguments/*/file/*/name
      .:.
   remove-nodes:x:-/0/-
   strings.join:x:@strings.split/*
      .:_
   strings.to-lower:x:-
   set-value:x:@.table
      strings.replace-not-of:x:@strings.to-lower
         .:abcdefghijklmnopqrstuvwxyz0123456789_
         .:_
   csv2lambda:x:@.content
   remove-nodes:x:@csv2lambda/*/*/
   log.info:Done removing empty columns
      databaseType:x:@.arguments/*/databaseType
      connectionString:x:@.arguments/*/connectionString
      databaseName:x:@.arguments/*/databaseName
      tableName:x:@.table
   for-each:x:@csv2lambda/*/*
      get-name:x:@.dp/#
      set-name:x:@.dp/#
         strings.to-lower:x:@get-name
      get-name:x:@.dp/#
      set-name:x:@.dp/#
         strings.replace-not-of:x:@get-name
            .:abcdefghijklmnopqrstuvwxyz0123456789_
            .:_
   log.info:Done sanitizing column names
      databaseType:x:@.arguments/*/databaseType
      connectionString:x:@.arguments/*/connectionString
      databaseName:x:@.arguments/*/databaseName
      tableName:x:@.table
   .changes:bool:false
   try
      .pk
      set-value:x:@.pk
         strings.concat
            get-value:x:@.table
            .:_id
      execute-file:/system/sql/ddl/table.post.hl
         databaseType:x:@.arguments/*/databaseType
         connectionString:x:@.arguments/*/connectionString
         databaseName:x:@.arguments/*/databaseName
         tableName:x:@.table
         pkName:x:@.pk
         pkType:auto_increment
         pkLength:int:10
         pkDefault:
      set-value:x:@.changes
         .:bool:true
      log.info:Table created
         databaseType:x:@.arguments/*/databaseType
         connectionString:x:@.arguments/*/connectionString
         databaseName:x:@.arguments/*/databaseName
         tableName:x:@.table
      for-each:x:@csv2lambda/0/*
         .type:text
         get-name:x:@.dp/#
         .found:bool:false
         for-each:x:@csv2lambda/*/*/{@get-name}
            if
               not
                  eq
                     strings.replace-not-of:x:@.dp/#
                        .:0123456789.
                        .:
                     get-value:x:@.dp/#
               .lambda
                  set-value:x:@.found
                     .:bool:true
         if
            eq:x:@.found
               .:bool:false
            .lambda
               set-value:x:@.type
                  .:numeric
         execute-file:/system/sql/ddl/column.post.hl
            databaseType:x:@.arguments/*/databaseType
            connectionString:x:@.arguments/*/connectionString
            databaseName:x:@.arguments/*/databaseName
            tableName:x:@.table
            columnName:x:@get-name
            columnType:x:@.type
      get-count:x:@csv2lambda/0/*
      log.info:Columns created
         column_count:x:@get-count
         databaseType:x:@.arguments/*/databaseType
         connectionString:x:@.arguments/*/connectionString
         databaseName:x:@.arguments/*/databaseName
         tableName:x:@.table
   .catch
      log.error:x:@.arguments/*/message
   strings.concat
      .:[
      get-value:x:@.arguments/*/connectionString
      .:|
      get-value:x:@.arguments/*/databaseName
      .:]
   data.connect:x:@strings.concat
      type:x:@.arguments/*/databaseType
      for-each:x:@csv2lambda/*
         remove-nodes:x:@.dp/#/*/=
         add:x:./*/data.create/*/values
            get-nodes:x:@.dp/#/*
         data.create
            type:x:@.arguments/*/databaseType
            table:x:@.table
            values
   log.info:Done importing CSV file
      databaseType:x:@.arguments/*/databaseType
      connectionString:x:@.arguments/*/connectionString
      databaseName:x:@.arguments/*/databaseName
      tableName:x:@.table
   strings.concat
      .:magic.sql.databases.
      get-value:x:@.arguments/*/databaseType
      :.
      get-value:x:@.arguments/*/connectionString
   cache.set:x:-
   sockets.signal:magic.backend.message
      roles:root
      args
         message:CSV file was successfully imported. Reload the page to see the changes.
         type:success
