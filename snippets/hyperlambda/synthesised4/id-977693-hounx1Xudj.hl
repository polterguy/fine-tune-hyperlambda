
// This Hyperlambda code connects to a generic database hub and performs a read operation on the "clusters" table. It dynamically adds nodes for limit, offset, order, and direction from the arguments, removes these nodes from the arguments, and adds any remaining argument nodes to the "where" clause. It then selects specific columns from the "clusters" table and returns the results. The code effectively manages query parameters and constructs a SQL-like query to fetch data.
data.connect:[generic|hub]
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      table:clusters
      columns
         clusters.id
         clusters.country
         clusters.name
         clusters.enabled
      where
         and
   return-nodes:x:@data.read/*
