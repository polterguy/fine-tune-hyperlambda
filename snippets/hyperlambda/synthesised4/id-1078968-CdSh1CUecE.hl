
/*
 * 1. `@signal` - This iterator searches for the first node named "signal" in the current context. It starts from the current node and looks upwards in the hierarchy, including siblings and ancestors, until it finds a node with the specified name.
 *    
 * 2. `@signal` - This iterator, similar to the previous one, searches for the first node named "signal" starting from the node found in the previous step. It again looks upwards in the hierarchy, including siblings and ancestors.
 * 
 * 3. `*` - This iterator retrieves all child nodes of the node found in the previous step. It does not filter by name, so it returns all direct children nodes.
 * 
 * 4. `result` - This iterator filters the result set from the previous step to only include nodes named "result". It will return all nodes with this name among the children of the node found in the previous step.
 * 
 * Potential use cases:
 * - This expression can be used to retrieve the "result" nodes from a nested "signal" structure, which might be useful in scenarios where you are processing or analyzing signals and need to extract specific results from them.
 * - It could also be used in a logging or monitoring system to extract the outcome of various signal processing operations, allowing for further analysis or reporting.
 */

.:x:@signal/@signal/*/result