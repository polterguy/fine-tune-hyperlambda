
/*
 * The code snippet demonstrates how to manipulate a node structure using Hyperlambda. It uses [case] to handle a specific condition, [unwrap] to evaluate expressions and simplify the node structure, and [insert-after] to insert new nodes after a specified node. The new nodes added are [consumes] and [produces], where [consumes] retrieves its value from a dynamic path, and [produces] is set to "application/json". 
 * 
 * 1. [case] - Handles a specific condition or case in the code.
 * 2. [unwrap] - Evaluates expressions to simplify the node structure.
 * 3. [insert-after] - Inserts new nodes after the specified node.
 * 4. [consumes] - Retrieves its value from a dynamic path.
 * 5. [produces] - Sets its value to "application/json".
 */
case:patch
   unwrap:x:+/*/*/*
   insert-after:x:@.buffer/*/*/*/operationId
      .
         consumes
            .:x:@.dp/#/*/consumes
         produces
            .:application/json
