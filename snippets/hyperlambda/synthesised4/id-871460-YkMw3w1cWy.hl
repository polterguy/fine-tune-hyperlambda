
// This Hyperlambda code establishes a connection to a SQLite database and performs a data read operation on the "leads" table, joining it with the "clients" table using a left join. It dynamically constructs a distinct column function and modifies the arguments by removing and adding nodes for order, direction, limit, and offset. The code concludes by returning the nodes from the data read operation. The slots used include [data.connect], [set-name], [strings.concat], [remove-nodes], [add], [data.read], and [return-nodes].
data.connect:[generic|crm]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:leads
         join:clients
            as:client_id
            type:left
            on
               and
                  leads.client_id:client_id.client_id
      columns
         distinct_functor
            as:.
      where
         and
   return-nodes:x:@data.read/*/*
