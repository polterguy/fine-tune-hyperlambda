
// This Hyperlambda code defines a data query operation with validation and transformation logic for SQL-like operations. It validates mandatory arguments and ensures they belong to specific enumerations. The code dynamically constructs a SQL query using the provided arguments, including grouping, aggregation, and filtering criteria. It connects to a SQLite database, reads data from the "Regions" table, and returns the query results. Key slots include [validators.mandatory] for argument validation, [data.connect] for database connection, and [data.read] for executing the query.
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      Regions.RegionID.mt:long
      Regions.RegionID.lt:long
      Regions.RegionID.mteq:long
      Regions.RegionID.lteq:long
      Regions.RegionID.neq:long
      Regions.RegionID.eq:long
      Regions.RegionDescription.like:string
      Regions.RegionDescription.mt:string
      Regions.RegionDescription.lt:string
      Regions.RegionDescription.mteq:string
      Regions.RegionDescription.lteq:string
      Regions.RegionDescription.neq:string
      Regions.RegionDescription.eq:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:Regions.RegionID
      .:Regions.RegionDescription
   validators.enum:x:@.arguments/*/aggregate_column
      .:Regions.RegionID
      .:Regions.RegionDescription
   data.connect:[generic|northwind]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:Regions
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
