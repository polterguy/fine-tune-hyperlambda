
/*
 * This code checks if the "to" and "from" arguments exist, are not null, and contain a colon. If all conditions are met, it splits these arguments by the colon, assigning the first part to "channel" and the second parts to "to" and "from". It then adds a signal with the reversed "to" and "from" values and the extracted "channel". 
 * 1. [if] - Checks if all conditions are true before executing its lambda.
 * 2. [and] - Ensures all child conditions must be true.
 * 3. [exists] - Checks if "to" and "from" arguments exist.
 * 4. [not-null] - Ensures "to" and "from" arguments are not null.
 * 5. [strings.contains] - Verifies "to" and "from" contain a colon.
 * 6. [.lambda] - Executes if all conditions are true.
 * 7. [strings.split] - Splits "to" and "from" by colon.
 * 8. [set-value] - Assigns split results to "channel", "to", and "from".
 * 9. [unwrap] - Evaluates expressions in the context.
 * 10. [add] - Adds a signal with reversed "to" and "from" values.
 */
if
   and
      exists:x:@.arguments/*/to
      exists:x:@.arguments/*/from
      not-null:x:@.arguments/*/to
      not-null:x:@.arguments/*/from
      strings.contains:x:@.arguments/*/to
         .:":"
      strings.contains:x:@.arguments/*/from
         .:":"
   .lambda
      .channel
      .to
      .from
      strings.split:x:@.arguments/*/to
         .:":"
      set-value:x:@.channel
         get-value:x:@strings.split/0
      set-value:x:@.to
         get-value:x:@strings.split/1
      strings.split:x:@.arguments/*/from
         .:":"
      set-value:x:@.from
         get-value:x:@strings.split/1
      unwrap:x:+/*/*
      add:x:@.exe/*/signal
         .
            to:x:@.from
            from:x:@.to
            channel:x:@.channel
