
/*
 * // This Hyperlambda code checks if a certain condition is met and sets a boolean flag accordingly. It first retrieves a value using [get-value] and if true, sets a node's value to false. It then iterates over a collection of nodes using [for-each], unwrapping each node, and invokes a match operation with a URL and pattern. If the match is successful, it sets the boolean flag to true.
 * // 1. [if] - Checks if the condition is true to execute its lambda block.
 * // 2. [get-value] - Retrieves the value of the [invoke] node.
 * // 3. [.lambda] - Contains the code to execute if the condition is true.
 * // 4. [set-value] - Sets the value of the [allowed] node to false.
 * // 5. [for-each] - Iterates over each node in the specified collection.
 * // 6. [unwrap] - Evaluates the expressions of the current node.
 * // 7. [invoke] - Calls a function with specified arguments.
 * // 8. [url] - Provides a URL for the [invoke] function.
 * // 9. [pattern] - Provides a pattern for the [invoke] function.
 * // 10. [if] - Checks if the condition is true to execute its lambda block.
 * // 11. [get-value] - Retrieves the value of the [invoke] node.
 * // 12. [.lambda] - Contains the code to execute if the condition is true.
 * // 13. [set-value] - Sets the value of the [allowed] node to true.
 */
if
   get-value:x:@invoke
   .lambda
      set-value:x:@.allowed
         .:bool:false
      for-each:x:@.arguments/*/allow/*
         unwrap:x:+/*
         invoke:x:@.match
            url:x:@sort/0
            pattern:x:@.dp/#
         if
            get-value:x:@invoke
            .lambda
               set-value:x:@.allowed
                  .:bool:true
