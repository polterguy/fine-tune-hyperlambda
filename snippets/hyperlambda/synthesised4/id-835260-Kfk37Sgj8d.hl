
// This Hyperlambda code checks if a sitemap exists and processes URLs for scraping. It sends feedback messages through sockets, evaluates conditions on URL counts, and handles errors during scraping. The code uses [if] for conditional logic, [for-each] to iterate URLs, and [sockets.signal] to communicate status updates. It also logs information and optionally executes a callback if provided.
if
   eq:x:@signal/*/has-sitemap
      .:bool:true
   .lambda
      get-count:x:@signal/*/urls/*
      strings.concat
         .:"We found "
         get-value:x:@signal/*/total
         .:" URLs in sitemap(s), we will be scraping "
         get-value:x:@get-count
         .:" URLs"
      unwrap:x:+/**
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:x:@strings.concat
            type:info
      sleep:100
      if
         eq:x:@get-count
            .:int:0
         .lambda
            strings.concat
               .:Warning, we could not find a single valid URL in site
            unwrap:x:+/**
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:x:@strings.concat
                  type:warning
            sleep:100
      else-if
         mt
            get-value:x:@signal/*/total
            get-value:x:@get-count
         .lambda
            strings.concat
               .:"Warning, site contains more than "
               get-value:x:@get-count
               .:" URLs and will only be partially scraped"
            unwrap:x:+/**
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:x:@strings.concat
                  type:warning
            sleep:100
      if
         mt:x:@get-count
            .:int:0
         .lambda
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:------------------------------------------------------------------------------------------------------------------------
                  type:info
            sleep:100
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:"URLs we will scrape are as follows:"
                  type:info
            sleep:100
      for-each:x:@signal/*/urls/*
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@.dp/#
               type:info
         sleep:10
      for-each:x:@signal/*/urls/*
         try
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:------------------------------------------------------------------------------------------------------------------------
                  type:info
            sleep:100
            unwrap:x:+/*
            signal:magic.ai.url.scrape
               url:x:@.dp/#
               type:x:@.arguments/*/type
               threshold:x:@.arguments/*/threshold
               summarize:x:@.arguments/*/summarize
               feedback-channel:x:@.arguments/*/feedback-channel
               images:x:@.arguments/*/images
               lists:x:@.arguments/*/lists
               code:x:@.arguments/*/code
               insert_url:x:@.arguments/*/insert_url
            if
               neq:x:@.dp/#
                  get-value:x:@signal/@signal/*/urls/0/-
               .lambda
                  strings.concat
                     .:"Waiting for "
                     math.divide:x:@.arguments/*/delay
                        .:int:1000
                     .:" seconds to avoid exhausting web server"
                  unwrap:x:+/**
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:x:@strings.concat
                        type:info
                  sleep:100
                  sleep:x:@.arguments/*/delay
         .catch
            log.error:Could not scrape URL
               url:x:@.dp/#
               message:x:@.arguments/*/message
            strings.concat
               .:"Could not scrape URL, error was: '"
               get-value:x:@.arguments/*/message
               .:"'"
            unwrap:x:+/**
            sockets.signal:x:@.arguments/@.arguments/*/feedback-channel
               roles:root
               args
                  message:x:@strings.concat
                  type:warning
            sleep:100
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:------------------------------------------------------------------------------------------------------------------------
            type:info
      sleep:100
      sockets.signal:magic.backend.message
         roles:root
         args
            message:Done creating OpenAI training data from URL
            type:success
      sleep:100
      log.info:OpenAI training data successfully created
         url:x:@.arguments/*/url
         type:x:@.arguments/*/type
      if
         exists:x:@.arguments/*/.onafter
         .lambda
            eval:x:@.arguments/*/.onafter
