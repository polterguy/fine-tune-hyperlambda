
/*
 * This Hyperlambda code demonstrates a loop using the [while] slot, which continues as long as the value of [.no] is less than 20. Within the loop, it updates the value of [.sum] by adding the current value of [.no] to it using [math.add], and then increments [.no] twice using [math.increment]. The loop effectively sums all even numbers from the initial value of [.no] up to, but not including, 20. 
 * 
 * 1. [while] - Initiates a loop that continues while the condition is true.
 * 2. [lt] - Checks if [.no] is less than 20.
 * 3. [get-value] - Retrieves the current value of [.no].
 * 4. [.lambda] - Contains the operations to execute during each loop iteration.
 * 5. [set-value] - Updates [.sum] with the result of the addition.
 * 6. [math.add] - Adds the current value of [.no] to [.sum].
 * 7. [math.increment] - Increments the value of [.no] by 1.
 * 8. [math.increment] - Increments the value of [.no] by 1 again.
 */
while
   lt
      get-value:x:@.no
      .:int:20
   .lambda
      set-value:x:@.sum
         math.add:x:@.sum
            get-value:x:@.no
      math.increment:x:@.no
      math.increment:x:@.no
