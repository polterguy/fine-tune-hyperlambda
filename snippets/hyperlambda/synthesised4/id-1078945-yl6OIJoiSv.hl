
/*
 * 1. `@signal` - This iterator searches for the first node with the name "signal" in the current context. It starts from the current node and moves upwards in the hierarchy until it finds a match. This is useful for accessing specific nodes that are known to exist somewhere in the hierarchy.
 * 
 * 2. `*` - This iterator retrieves all children nodes of the "signal" node. It is used to access any and all direct descendants of the "signal" node, regardless of their names.
 * 
 * 3. `context` - This iterator filters the result set to only include nodes named "context" from the previously retrieved children of the "signal" node. It is used to specifically target nodes that are named "context" within the children of the "signal" node.
 * 
 * Potential use case: This expression could be used in a scenario where you need to access configuration or state information encapsulated within a "context" node, which is a child of a "signal" node. This might be relevant in event-driven architectures where signals carry contextual data that needs to be processed or logged.
 */

.:x:@signal/*/context