
/*
 * This Hyperlambda code snippet demonstrates how to perform a SQL query using a left join on two tables, "Categories" and "Suppliers", with the main table being "Products". It aggregates the results by counting the entries and aliases the count as "count". The query limits the result to one entry and uses a SQLite database. The joins are performed on specific columns, and the query structure allows for potential conditions in the where clause. 
 * 
 * 1. [data.read] - Initiates a read operation from a specified database.
 * 2. [database-type] - Specifies the type of database being used, in this case, SQLite.
 * 3. [table] - Indicates the main table to query, here "Products".
 * 4. [join] - Defines a left join operation with the "Categories" table, using "ProductID" as an alias.
 * 5. [on] - Specifies the join condition between "Products" and "Categories" tables.
 * 6. [join] - Defines another left join with the "Suppliers" table, using "SupplierID" as an alias.
 * 7. [on] - Specifies the join condition between "Products" and "Suppliers" tables.
 * 8. [columns] - Specifies the columns to be selected, here counting all entries.
 * 9. [as] - Aliases the count result as "count".
 * 10. [where] - Placeholder for conditions to filter the results.
 * 11. [limit] - Limits the number of results returned by the query to one.
 */
data.read
   database-type:sqlite
   table:Products
      join:Categories
         as:ProductID
         type:left
         on
            and
               Products.ProductID:ProductID.CategoryID
      join:Suppliers
         as:SupplierID
         type:left
         on
            and
               Products.SupplierID:SupplierID.SupplierID
   columns
      count(*)
         as:count
   where
      and
   limit:long:1
