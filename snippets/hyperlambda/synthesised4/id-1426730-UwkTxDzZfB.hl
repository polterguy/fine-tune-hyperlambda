
/*
 * // This Hyperlambda code checks if there are any nodes under the [sitemap] node. If such nodes exist, it sorts them based on the length of their values. The sorting is done using a lambda object that compares the lengths of the values of the nodes, setting the [.result] node to -1, 1, or 0 depending on whether the left-hand side node's value is shorter, longer, or equal in length to the right-hand side node's value, respectively. After sorting, the sorted nodes are added to the current node's children, and the sorted result is added to the [return] node under [try]. This code is useful for organizing nodes by the length of their values, ensuring that the shortest values come first.
 * // 1. [if] - Checks if there are any nodes under the [sitemap] node.
 * // 2. [exists] - Evaluates whether there are any children nodes under [sitemap].
 * // 3. [sort] - Sorts the nodes under [sitemap] based on the length of their values.
 * // 4. [lt] - Compares the length of the left-hand side node's value with the right-hand side node's value.
 * // 5. [strings.length] - Retrieves the length of the string value of a node.
 * // 6. [set-value] - Sets the [.result] node to indicate the order of nodes based on comparison.
 * // 7. [add] - Adds the sorted nodes to the current node's children and the [return] node under [try].
 */
if
   exists:x:@.sitemap/*
   .lambda
      sort:x:@.sitemap/*
         if
            lt
               strings.length:x:@.lhs/#
               strings.length:x:@.rhs/#
            .lambda
               set-value:x:@.result
                  .:int:-1
         else-if
            mt
               strings.length:x:@.lhs/#
               strings.length:x:@.rhs/#
            .lambda
               set-value:x:@.result
                  .:int:1
         else
            set-value:x:@.result
               .:int:0
      add:x:+/*/*
         get-nodes:x:@sort/*
      add:x:@try/*/return
         .
            sitemap
