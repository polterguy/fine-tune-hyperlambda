
/*
 * This Hyperlambda code constructs SQL statements for adding foreign key constraints, with optional cascading delete behavior, based on provided arguments. It checks if the foreign table and field are not null, and if the database type is not MySQL, it appends a reference clause to the SQL string. If cascading is enabled, it adds an "on delete cascade" clause. If the database type is MySQL, it constructs an "alter table" statement with similar logic.
 * 
 * 1. [if] - Checks if both foreignTable and foreignField arguments are not null.
 * 2. [not-null] - Ensures the foreignTable and foreignField arguments are provided.
 * 3. [neq] - Checks if the database type is not MySQL.
 * 4. [set-value] - Appends a reference clause to the SQL string.
 * 5. [strings.concat] - Concatenates strings to build the SQL statement.
 * 6. [exists] - Checks if the cascading argument exists.
 * 7. [eq] - Verifies if cascading is set to true.
 * 8. [else] - Handles the case for MySQL by constructing an "alter table" statement.
 * 9. [get-value] - Retrieves values from arguments to use in SQL construction.
 */
if
   and
      not-null:x:@.arguments/*/foreignTable
      not-null:x:@.arguments/*/foreignField
   .lambda
      if
         neq:x:@.arguments/*/databaseType
            .:mysql
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" references "
                  get-value:x:@.arguments/*/foreignTable
                  .:(
                  get-value:x:@.arguments/*/foreignField
                  .:)
            if
               and
                  exists:x:@.arguments/*/cascading
                  not-null:x:@.arguments/*/cascading
                  eq
                     get-value:x:@.arguments/*/cascading
                     .:bool:true
               .lambda
                  set-value:x:@.sql
                     strings.concat
                        get-value:x:@.sql
                        .:" on delete cascade"
      else
         set-value:x:@.tail
            strings.concat
               .:"alter table "
               get-value:x:@.arguments/*/tableName
               .:" add foreign key ("
               get-value:x:@.arguments/*/columnName
               .:") references "
               get-value:x:@.arguments/*/foreignTable
               .:(
               get-value:x:@.arguments/*/foreignField
               .:)
         if
            and
               exists:x:@.arguments/*/cascading
               not-null:x:@.arguments/*/cascading
               eq
                  get-value:x:@.arguments/*/cascading
                  .:bool:true
            .lambda
               set-value:x:@.tail
                  strings.concat
                     get-value:x:@.tail
                     .:" on delete cascade"
         set-value:x:@.tail
            strings.concat
               get-value:x:@.tail
               .:"; "
