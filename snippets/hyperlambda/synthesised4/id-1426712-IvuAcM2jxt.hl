
/*
 * This Hyperlambda code is designed to handle a sequence of function invocations, particularly in the context of AI or chat applications. It checks for specific conditions and processes function invocations, managing errors and responses. The code ensures that function invocations do not exceed a certain limit, logs errors, and sends signals to a session. It also formats and sends the results of successful invocations or error messages back to the session. The code uses various slots to manipulate strings, evaluate conditions, and handle exceptions, ensuring robust error handling and response management.
 * 
 * 1. [if] - Checks if the trimmed string equals "[DONE]".
 * 2. [eq] - Compares the trimmed string to "[DONE]".
 * 3. [strings.trim] - Trims whitespace from the string.
 * 4. [neq] - Checks if the number of invocations is not equal to 0.
 * 5. [math.increment] - Increments the number of invocations.
 * 6. [strings.contains] - Checks if the result contains specific substrings.
 * 7. [and] - Combines multiple conditions.
 * 8. [strings.split] - Splits the result string by "___".
 * 9. [for-each] - Iterates over each split string.
 * 10. [try] - Begins a try-catch block for error handling.
 * 11. [lte] - Checks if iterations are less than or equal to 1.
 * 12. [log.error] - Logs an error message.
 * 13. [sockets.signal] - Sends a signal with arguments to a session.
 * 14. [execute] - Executes a function invocation.
 * 15. [lambda2json] - Converts a lambda to JSON format.
 * 16. [mt] - Checks if the token count exceeds the maximum context tokens.
 * 17. [config.get] - Retrieves a configuration value.
 * 18. [unwrap] - Unwraps a node.
 * 19. [exists] - Checks if a node exists.
 * 20. [set-value] - Sets the value of a node.
 * 21. [strings.concat] - Concatenates strings.
 * 22. [.catch] - Handles exceptions in the try block.
 * 23. [strings.trim] - Trims whitespace from the new prompt.
 * 24. [else] - Executes if the initial condition is false.
 */
if
   eq:x:@strings.trim
      .:[DONE]
   .lambda
      if
         neq:x:@.no-invocation
            .:int:0
         .lambda
            math.increment:x:@.no-invocation
      if
         and
            strings.contains:x:@.result
               .:___
            strings.contains:x:@.result
               .:FUNCTION_INVOCATION[
         .lambda
            if
               eq:x:@.no-invocation
                  .:int:0
               .lambda
                  math.increment:x:@.no-invocation
            strings.split:x:@.result
               .:___
            for-each:x:@strings.split/*
               if
                  strings.contains:x:@.dp/#
                     .:FUNCTION_INVOCATION[/
                  .lambda
                     try
                        if
                           lte:x:@.iterations
                              .:int:1
                           .lambda
                              log.error:Too many function invocations
                              sockets.signal:x:@.session
                                 args
                                    function_error:Too many function invocations
                              sockets.signal:x:@.session
                                 args
                                    function_waiting:bool:false
                              sockets.signal:x:@.session
                                 args
                                    error:bool:true
                                    status:int:500
                                    message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                              sockets.signal:x:@.session
                                 args
                                    finished:bool:true
                        else
                           execute:magic.ai.functions.invoke
                              type:x:@.type
                              session:x:@.session
                              user-id:x:@.user-id
                              invocation:x:@.dp/#
                              extra:x:@.extra
                           lambda2json:x:@execute/*/result/*
                              format:true
                           if
                              mt
                                 openai.tokenize:x:@lambda2json
                                 get-value:x:@.arguments/@.arguments/*/max_context_tokens
                              .lambda
                                 throw:Result too large, try to limit your result
                                    status:int:400
                                    public:bool:true
                           config.get:"magic:chat:functions:success-message"
                              .:Success!
                           unwrap:x:+/*/*
                           sockets.signal:x:@.session
                              args
                                 function_result:x:@config.get
                                 invocation:x:@execute/*/json
                                 file:x:@execute/*/workflow
                           if
                              exists:x:@execute/*/result/*
                              .lambda
                                 set-value:x:@.new-prompt
                                    strings.concat
                                       get-value:x:@.new-prompt
                                       .:"Response from '"
                                       get-value:x:@execute/*/workflow
                                       .:@"' was:
```json
"
                                       get-value:x:@lambda2json
                                       .:@"
"
                                       .:```
                                       .:@"
"
                                       .:@"
"
                                 set-value:x:@.function-result
                                    strings.concat
                                       get-value:x:@.function-result
                                       get-value:x:@lambda2json
                                       .:"\n"
                           else
                              set-value:x:@.new-prompt
                                 strings.concat
                                    get-value:x:@.new-prompt
                                    .:"Invocation of '"
                                    get-value:x:@execute/*/workflow
                                    .:"' was a success."
                                    .:@"
"
                                    .:@"
"
                     .catch
                        log.error:Could not execute AI function
                           message:x:@.arguments/*/message
                        unwrap:x:+/*/*
                        sockets.signal:x:@.session
                           args
                              function_error:x:@.arguments/*/message
                        set-value:x:@.new-prompt
                           strings.concat
                              get-value:x:@.new-prompt
                              .:"Invocation failed, exception message was: '"
                              get-value:x:@.arguments/*/message
                              .:"'"
                              .:@"
"
                              .:@"
"
            set-value:x:@.new-prompt
               strings.trim:x:@.new-prompt
      else
         sockets.signal:x:@.session
            args
               finished:bool:true
         set-value:x:@.iterations
            .:int:0
