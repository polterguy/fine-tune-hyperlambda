
/*
 * This Hyperlambda code validates input arguments, checks reCAPTCHA, and processes a query by either scraping a URL or searching DuckDuckGo. It then prepares context and instruction tokens for OpenAI, invokes the OpenAI API for chat completions, and streams the response back to the client. The code handles errors and logs success or failure of the OpenAI invocation.
 * 
 * 1. [hyper2lambda] - Entry point for the Hyperlambda code.
 * 2. [.arguments] - Defines the input arguments required for the process.
 * 3. [validators.mandatory] - Ensures required arguments are provided.
 * 4. [validators.string] - Validates string length for arguments.
 * 5. [config.get] - Retrieves configuration settings for reCAPTCHA.
 * 6. [if] - Conditional logic to handle reCAPTCHA validation.
 * 7. [strings.starts-with] - Checks if the query is a URL.
 * 8. [strings.concat] - Concatenates strings for messages.
 * 9. [sockets.signal] - Sends messages to a session.
 * 10. [signal] - Invokes signals for URL scraping and context creation.
 * 11. [while] - Loops to process snippets until token limit is reached.
 * 12. [set-value] - Assigns values to nodes.
 * 13. [remove-nodes] - Removes processed nodes.
 * 14. [strings.trim] - Trims whitespace from strings.
 * 15. [insert-before] - Inserts nodes before a specified position.
 * 16. [openai.tokenize] - Calculates token count for context and instruction.
 * 17. [fork] - Executes asynchronous operations.
 * 18. [try] - Attempts to execute the OpenAI API call.
 * 19. [http.post] - Sends a POST request to the OpenAI API.
 * 20. [headers] - Sets HTTP headers for the request.
 * 21. [payload] - Defines the payload for the OpenAI API request.
 * 22. [log.info] - Logs successful invocation of OpenAI.
 * 23. [.catch] - Handles exceptions and logs errors.
 * 24. [return] - Returns the result of the process.
 */
hyper2lambda
   .arguments
      session:string
      query:string
      instruction:string
      recaptcha_response:string
   validators.mandatory:x:@.arguments/*/session
   validators.string:x:@.arguments/*/session
      min:5
      max:50
   validators.mandatory:x:@.arguments/*/query
   validators.string:x:@.arguments/*/query
      min:2
      max:200
   validators.mandatory:x:@.arguments/*/instruction
   validators.string:x:@.arguments/*/instruction
      min:5
      max:750
   config.get:"magic:auth:recaptcha:key"
   if
      and
         neq:x:@config.get
            .
         neq:x:@config.get
            .:
      .lambda
         validators.mandatory:x:@.arguments/*/recaptcha_response
         config.get:"magic:auth:recaptcha:secret"
         validators.recaptcha:x:@.arguments/*/recaptcha_response
            min:decimal:0.3
            site-key:x:@config.get/@config.get
            secret:x:@config.get
   .context
   if
      or
         strings.starts-with:x:@.arguments/*/query
            .:"http://"
         strings.starts-with:x:@.arguments/*/query
            .:"https://"
      .lambda
         strings.concat
            .:"Scraping URL: "
            get-value:x:@.arguments/*/query
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/session
            args
               message:x:@strings.concat
               type:system
         sleep:100
         unwrap:x:+/*
         signal:magic.ai.url.get
            url:x:@.arguments/*/query
         unwrap:x:+/*
         signal:magic.ai.html.extract
            url:x:@.arguments/*/query
            images:bool:true
            code:bool:true
            lists:bool:true
            main:bool:true
            html:x:@signal/@signal
         .tmp:
         while
            and
               exists:x:@signal/*/snippets/0
               lt
                  openai.tokenize:x:@.tmp
                  .:int:5000
            .lambda
               set-value:x:@.context
                  get-value:x:@.tmp
               if
                  and
                     exists:x:@signal/*/snippets/0/*/prompt
                     not-null:x:@signal/*/snippets/0/*/prompt
                     neq:x:@signal/*/snippets/0/*/prompt
                        .:
                  .lambda
                     set-value:x:@.tmp
                        strings.concat
                           get-value:x:@.tmp
                           .:@"
"
                           .:@"
"
                           get-value:x:@signal/*/snippets/0/*/prompt
               if
                  and
                     exists:x:@signal/*/snippets/0/*/completion
                     not-null:x:@signal/*/snippets/0/*/completion
                     neq:x:@signal/*/snippets/0/*/completion
                        .:
                  .lambda
                     set-value:x:@.tmp
                        strings.concat
                           get-value:x:@.tmp
                           .:@"
"
                           .:@"
"
                           get-value:x:@signal/*/snippets/0/*/completion
               remove-nodes:x:@signal/*/snippets/0
   else
      strings.concat
         .:"Searching DuckDuckGo for: "
         get-value:x:@.arguments/*/query
      unwrap:x:+/**
      sockets.signal:x:@.arguments/*/session
         args
            message:x:@strings.concat
            type:system
      sleep:100
      unwrap:x:+/*
      signal:magic.ai.create-search-context
         query:x:@.arguments/*/query
         max_tokens:int:5000
         session:x:@.arguments/*/session
      set-value:x:@.context
         strings.trim:x:@signal
   set-value:x:@.context
      strings.trim:x:@.context
   insert-before:x:./*/fork/0
      get-nodes:x:@.arguments
      get-nodes:x:@.context
   openai.tokenize:x:@.arguments/*/instruction
   openai.tokenize:x:@.context
   strings.concat
      .:"Invoking OpenAI with "
      get-value:x:@openai.tokenize
      .:" context tokens and "
      get-value:x:@openai.tokenize/@openai.tokenize
      .:" instruction tokens"
   unwrap:x:+/**
   sockets.signal:x:@.arguments/*/session
      args
         message:x:@strings.concat
         type:system
   sleep:100
   fork
      try
         .token
         set-value:x:@.token
            strings.concat
               .:"Bearer "
               get-first-value
                  get-value:x:@.arguments/*/api_key
                  config.get:"magic:openai:key"
         unwrap:x:+/*/.sse/*/.session
         http.post:"https://api.openai.com/v1/chat/completions"
            convert:true
            .sse
               .session:x:@.arguments/*/session
               if
                  and
                     exists:x:@.arguments/*/message
                     not-null:x:@.arguments/*/message
                     strings.starts-with:x:@.arguments/*/message
                        .:"data:"
                  .lambda
                     strings.substring:x:@.arguments/*/message
                        .:int:5
                     strings.trim:x:@strings.substring
                     if
                        neq:x:@strings.trim
                           .:
                        .lambda
                           if
                              eq:x:@strings.trim
                                 .:[DONE]
                              .lambda
                                 sockets.signal:x:@.session
                                    args
                                       finished:bool:true
                           else
                              json2lambda:x:@strings.trim
                              if
                                 and
                                    exists:x:@json2lambda/*/choices/0/*/finish_reason
                                    not-null:x:@json2lambda/*/choices/0/*/finish_reason
                                 .lambda
                                    unwrap:x:+/*/*
                                    sockets.signal:x:@.session
                                       args
                                          finish_reason:x:@json2lambda/*/choices/0/*/finish_reason
                              if
                                 and
                                    not-null:x:@json2lambda/*/choices/0/*/delta/*/content
                                    neq:x:@json2lambda/*/choices/0/*/delta/*/content
                                       .:
                                 .lambda
                                    set-value:x:@.result
                                       strings.concat
                                          get-value:x:@.result
                                          get-value:x:@json2lambda/*/choices/0/*/delta/*/content
                                    unwrap:x:+/*/*
                                    sockets.signal:x:@.session
                                       args
                                          message:x:@json2lambda/*/choices/0/*/delta/*/content
            headers
               Authorization:x:@.token
               Content-Type:application/json
               Accept:text/event-stream
            payload
               model:gpt-4o
               max_tokens:int:4000
               temperature:decimal:0.3
               stream:bool:true
               messages
                  .
                     role:system
                     content:x:@.arguments/*/instruction
                  .
                     role:system
                     content:x:@.context
         if
            not
               and
                  mte:x:@http.post
                     .:int:200
                  lt:x:@http.post
                     .:int:300
            .lambda
               throw:x:@http.post/*/content/*/error/*/message
         else
            log.info:Invoking OpenAI was a success
      .catch
         log.error:x:@.arguments/*/message
   return
      result:success
