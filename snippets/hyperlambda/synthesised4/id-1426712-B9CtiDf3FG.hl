
/*
 * This Hyperlambda code is designed to handle function invocation and manage responses, particularly in the context of AI functions. It checks if a result contains specific markers, increments a counter if no invocation has occurred, and splits the result for further processing. It iterates over each part, checking for function invocation markers. If too many invocations occur, it logs an error and sends error signals. Otherwise, it executes a function, converts the result to JSON, checks token limits, and sends success signals. It updates the prompt with the function's response or success message. If an error occurs during execution, it logs the error and updates the prompt with the error message. Finally, it trims the new prompt. 
 * 
 * 1. [if] - Checks if the result contains specific markers.
 * 2. [and] - Combines multiple conditions to check within the [if] statement.
 * 3. [strings.contains] - Checks if the result contains specific substrings.
 * 4. [math.increment] - Increments the invocation counter.
 * 5. [strings.split] - Splits the result into parts for iteration.
 * 6. [for-each] - Iterates over each split part.
 * 7. [try] - Attempts to execute function invocation and handle errors.
 * 8. [lte] - Checks if iterations are less than or equal to 1.
 * 9. [log.error] - Logs an error message if too many invocations occur.
 * 10. [sockets.signal] - Sends various signals for error handling and success.
 * 11. [execute] - Executes a specific AI function.
 * 12. [lambda2json] - Converts the execution result to JSON format.
 * 13. [mt] - Checks if the token count exceeds a maximum limit.
 * 14. [config.get] - Retrieves a success message from configuration.
 * 15. [unwrap] - Processes the configuration result.
 * 16. [exists] - Checks if the execution result exists.
 * 17. [set-value] - Updates the new prompt or function result.
 * 18. [strings.concat] - Concatenates strings to form messages.
 * 19. [strings.trim] - Trims whitespace from the new prompt.
 * 20. [.catch] - Handles exceptions during function execution.
 * 21. [log.error] - Logs an error message if function execution fails.
 * 22. [unwrap] - Processes the error message.
 */
if
   and
      strings.contains:x:@.result
         .:___
      strings.contains:x:@.result
         .:FUNCTION_INVOCATION[
   .lambda
      if
         eq:x:@.no-invocation
            .:int:0
         .lambda
            math.increment:x:@.no-invocation
      strings.split:x:@.result
         .:___
      for-each:x:@strings.split/*
         if
            strings.contains:x:@.dp/#
               .:FUNCTION_INVOCATION[/
            .lambda
               try
                  if
                     lte:x:@.iterations
                        .:int:1
                     .lambda
                        log.error:Too many function invocations
                        sockets.signal:x:@.session
                           args
                              function_error:Too many function invocations
                        sockets.signal:x:@.session
                           args
                              function_waiting:bool:false
                        sockets.signal:x:@.session
                           args
                              error:bool:true
                              status:int:500
                              message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                        sockets.signal:x:@.session
                           args
                              finished:bool:true
                  else
                     execute:magic.ai.functions.invoke
                        type:x:@.type
                        session:x:@.session
                        user-id:x:@.user-id
                        invocation:x:@.dp/#
                        extra:x:@.extra
                     lambda2json:x:@execute/*/result/*
                        format:true
                     if
                        mt
                           openai.tokenize:x:@lambda2json
                           get-value:x:@.arguments/@.arguments/*/max_context_tokens
                        .lambda
                           throw:Result too large, try to limit your result
                              status:int:400
                              public:bool:true
                     config.get:"magic:chat:functions:success-message"
                        .:Success!
                     unwrap:x:+/*/*
                     sockets.signal:x:@.session
                        args
                           function_result:x:@config.get
                           invocation:x:@execute/*/json
                           file:x:@execute/*/workflow
                     if
                        exists:x:@execute/*/result/*
                        .lambda
                           set-value:x:@.new-prompt
                              strings.concat
                                 get-value:x:@.new-prompt
                                 .:"Response from '"
                                 get-value:x:@execute/*/workflow
                                 .:@"' was:
```json
"
                                 get-value:x:@lambda2json
                                 .:@"
"
                                 .:```
                                 .:@"
"
                                 .:@"
"
                           set-value:x:@.function-result
                              strings.concat
                                 get-value:x:@.function-result
                                 get-value:x:@lambda2json
                                 .:"\n"
                     else
                        set-value:x:@.new-prompt
                           strings.concat
                              get-value:x:@.new-prompt
                              .:"Invocation of '"
                              get-value:x:@execute/*/workflow
                              .:"' was a success."
                              .:@"
"
                              .:@"
"
               .catch
                  log.error:Could not execute AI function
                     message:x:@.arguments/*/message
                  unwrap:x:+/*/*
                  sockets.signal:x:@.session
                     args
                        function_error:x:@.arguments/*/message
                  set-value:x:@.new-prompt
                     strings.concat
                        get-value:x:@.new-prompt
                        .:"Invocation failed, exception message was: '"
                        get-value:x:@.arguments/*/message
                        .:"'"
                        .:@"
"
                        .:@"
"
      set-value:x:@.new-prompt
         strings.trim:x:@.new-prompt
