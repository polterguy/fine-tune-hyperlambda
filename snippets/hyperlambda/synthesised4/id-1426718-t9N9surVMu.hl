
/*
 * /*
 *  * This Hyperlambda code defines a dynamic slot named [magic.ai.import-zip-file] which processes a ZIP file containing various code files. It performs the following operations:
 *  * 1. Validates the presence of mandatory arguments [file], [file/*/name], and [file/*/stream].
 *  * 2. Checks if a temporary directory exists and creates it if not, or cleans it up if it does.
 *  * 3. Saves the uploaded file stream to the temporary directory.
 *  * 4. Unzips the file and processes each file within, identifying its type based on its extension.
 *  * 5. For certain file types, it loads the file content and optionally generates a summary using OpenAI's API.
 *  * 6. Stores the processed snippets in a database table named [ml_training_snippets].
 *  * 7. Sends feedback through a socket signal at various stages of the process.
 *  * 8. Returns a result indicating the process is pending.
 *  *
 *  * [magic.ai.import-zip-file] - Defines the dynamic slot for importing a ZIP file.
 *  * [validators.mandatory] - Ensures required arguments are present.
 *  * [if] - Checks if the temporary directory exists.
 *  * [not] - Negates the condition to create the directory if it doesn't exist.
 *  * [io.folder.create] - Creates the temporary directory.
 *  * [else] - Cleans up the temporary directory if it exists.
 *  * [io.file.list] - Lists files in the temporary directory.
 *  * [for-each] - Iterates over files and folders for deletion.
 *  * [neq] - Checks if the file is not README.md before deletion.
 *  * [io.file.delete] - Deletes files in the temporary directory.
 *  * [io.folder.list] - Lists folders in the temporary directory.
 *  * [io.folder.delete] - Deletes folders in the temporary directory.
 *  * [set-value] - Sets the filename for saving the uploaded file.
 *  * [strings.concat] - Concatenates strings to form paths or messages.
 *  * [io.stream.save-file] - Saves the uploaded file stream.
 *  * [insert-before] - Inserts nodes before a specified node.
 *  * [fork] - Executes the file processing in a separate thread.
 *  * [try] - Attempts to process the files with exception handling.
 *  * [io.file.unzip] - Unzips the uploaded file.
 *  * [io.file.list-recursively] - Lists all files recursively in the directory.
 *  * [switch] - Determines file type based on extension.
 *  * [case] - Handles specific file extensions.
 *  * [default] - Handles unsupported file types.
 *  * [sockets.signal] - Sends feedback through a socket signal.
 *  * [http.post] - Sends a request to OpenAI's API for generating summaries.
 *  * [unwrap] - Evaluates expressions and retrieves values.
 *  * [add] - Adds nodes to a list.
 *  * [data.connect] - Connects to a database.
 *  * [data.create] - Inserts data into the database.
 *  * [log.error] - Logs errors.
 *  * [return] - Returns the result of the operation.
 *  */
 */
slots.create:magic.ai.import-zip-file
   validators.mandatory:x:@.arguments/*/file
   validators.mandatory:x:@.arguments/*/file/*/name
   validators.mandatory:x:@.arguments/*/file/*/stream
   if
      not
         io.folder.exists:/etc/system/openai/temp/
      .lambda
         io.folder.create:/etc/system/openai/temp/
   else
      io.file.list:/etc/system/openai/temp/
      for-each:x:@io.file.list/*
         if
            neq:x:@.dp/#
               .:/etc/system/openai/temp/README.md
            .lambda
               io.file.delete:x:@.dp/#
      io.folder.list:/etc/system/openai/temp/
      for-each:x:@io.folder.list/*
         io.folder.delete:x:@.dp/#
   .filename
   set-value:x:@.filename
      strings.concat
         .:/etc/system/openai/temp/
         get-value:x:@.arguments/*/file/*/name
   io.stream.save-file:x:@.filename
      get-value:x:@.arguments/*/file/*/stream
   insert-before:x:./*/fork/0
      get-nodes:x:@.arguments
      get-nodes:x:@.filename
   fork
      try
         .token
         set-value:x:@.token
            strings.concat
               .:"Bearer "
               config.get:"magic:openai:key"
         io.file.unzip:x:@.filename
         io.file.delete:x:@.filename
         io.file.list-recursively:/etc/system/openai/temp/
         for-each:x:@io.file.list-recursively/*
            .handle:bool:false
            .file-meta:
            strings.split:x:@.dp/#
               .:.
            switch:x:@strings.split/0/-
               case:cs
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:"File type: VB.NET"
               case:vb
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:"Programming language: VB.NET"
               case:py
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:"Programming language: Python"
               case:rb
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:"Programming language: Ruby"
               case:js
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:"Programming language: JavaScript"
               case:ts
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:"Programming language: TypeScript"
               case:txt
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:Text file
               case:css
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:CSS file
               case:html
               case:htm
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:HTML file
               case:sass
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:SASS file
               case:scss
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:SCSS file
               case:sql
                  set-value:x:@.handle
                     .:bool:true
                  set-value:x:@.file-meta
                     strings.concat
                        get-value:x:@.file-meta
                        .:SQL file
               case:md
                  if
                     neq:x:@.dp/#
                        .:/etc/system/openai/temp/README.md
                     .lambda
                        set-value:x:@.handle
                           .:bool:true
                        set-value:x:@.file-meta
                           strings.concat
                              get-value:x:@.file-meta
                              .:Markdown file
               default
                  strings.concat
                     .:"File: "
                     get-value:x:@.dp/#
                     .:" is ignored"
                  unwrap:x:+/*/*/message
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:x:@strings.concat
                        type:info
            if:x:@.handle
               set-value:x:@.file-meta
                  strings.concat
                     get-value:x:@.file-meta
                     .:" - Filename: "
                     get-value:x:@.dp/#
               .content
               set-value:x:@.content
                  io.file.load:x:@.dp/#
               .snippets
               if
                  and
                     exists:x:@.arguments/*/massage
                     neq:x:@.arguments/*/massage
                        .
                     neq:x:@.arguments/*/massage
                        .:
                     lt
                        openai.tokenize:x:@.content
                        .:int:15000
                  .lambda
                     strings.concat
                        .:"Creating summary for file: "
                        get-value:x:@.dp/#
                     unwrap:x:+/*/*/message
                     sockets.signal:x:@.arguments/*/feedback-channel
                        args
                           message:x:@strings.concat
                           type:info
                     http.post:"https://api.openai.com/v1/chat/completions"
                        headers
                           Authorization:x:@.token
                           Content-Type:application/json
                        payload
                           model:gpt-3.5-turbo-1106
                           max_tokens:int:2000
                           temperature:decimal:0.5
                           messages
                              .
                                 role:system
                                 content:x:@.arguments/*/massage
                              .
                                 role:system
                                 content:x:@.content
                        convert:true
                     if
                        and
                           mte:x:@http.post
                              .:int:200
                           lt:x:@http.post
                              .:int:300
                        .lambda
                           unwrap:x:+/*/*/*
                           add:x:@.snippets
                              .
                                 .
                                    prompt:x:@http.post/*/content/*/choices/0/*/message/*/content
                                    completion:x:@.content
                     else
                        strings.concat
                           .:"Could not create summary for file: "
                           get-value:x:@.dp/#
                        unwrap:x:+/*/*/message
                        sockets.signal:x:@.arguments/*/feedback-channel
                           args
                              message:x:@strings.concat
                              type:warning
                        unwrap:x:+/*/*/*
                        add:x:@.snippets
                           .
                              .
                                 prompt:x:@.file-meta
                                 completion:x:@.content
               else
                  unwrap:x:+/*/*/*
                  add:x:@.snippets
                     .
                        .
                           prompt:x:@.file-meta
                           completion:x:@.content
               data.connect:[generic|magic]
                  for-each:x:@.snippets/*
                     data.create
                        table:ml_training_snippets
                        values
                           type:x:@.arguments/*/type
                           prompt:x:@.dp/#/*/prompt
                           completion:x:@.dp/#/*/completion
                           filename:x:@.dp/@.dp/#
                           cached:int:0
         strings.concat
            .:"Done importing "
            get-count:x:@.snippets/*
            .:" training snippets, now vectorising model"
         unwrap:x:+/*/*/message
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:done_crawling
      .catch
         log.error:x:@.arguments/*/message
         sockets.signal:x:@.arguments/@.arguments/*/feedback-channel
            roles:root
            args
               message:Something went wrong as we tried to import your file.
               type:error
   return
      result:pending
