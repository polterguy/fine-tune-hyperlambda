
// This Hyperlambda code sends a POST request to the OpenAI API for chat completions, converting the response to a lambda object. It processes server-sent events (SSE) to handle streaming responses, checking for message existence and formatting. If the message starts with "data:", it processes the data, signaling a session with the finished status or appending content to a result node. The request includes headers for authorization and content type, and a payload specifying model parameters and messages.
http.post:"https://api.openai.com/v1/chat/completions"
   convert:true
   .sse
      .session:x:@.arguments/*/session
      if
         and
            exists:x:@.arguments/*/message
            not-null:x:@.arguments/*/message
            strings.starts-with:x:@.arguments/*/message
               .:"data:"
         .lambda
            strings.substring:x:@.arguments/*/message
               .:int:5
            strings.trim:x:@strings.substring
            if
               neq:x:@strings.trim
                  .:
               .lambda
                  if
                     eq:x:@strings.trim
                        .:[DONE]
                     .lambda
                        sockets.signal:x:@.session
                           args
                              finished:bool:true
                  else
                     json2lambda:x:@strings.trim
                     if
                        and
                           exists:x:@json2lambda/*/choices/0/*/finish_reason
                           not-null:x:@json2lambda/*/choices/0/*/finish_reason
                        .lambda
                           unwrap:x:+/*/*
                           sockets.signal:x:@.session
                              args
                                 finish_reason:x:@json2lambda/*/choices/0/*/finish_reason
                     if
                        and
                           not-null:x:@json2lambda/*/choices/0/*/delta/*/content
                           neq:x:@json2lambda/*/choices/0/*/delta/*/content
                              .:
                        .lambda
                           set-value:x:@.result
                              strings.concat
                                 get-value:x:@.result
                                 get-value:x:@json2lambda/*/choices/0/*/delta/*/content
                           unwrap:x:+/*/*
                           sockets.signal:x:@.session
                              args
                                 message:x:@json2lambda/*/choices/0/*/delta/*/content
   headers
      Authorization:x:@.token
      Content-Type:application/json
      Accept:text/event-stream
   payload
      model:gpt-4o
      max_tokens:int:4000
      temperature:decimal:0.3
      stream:bool:true
      messages
         .
            role:system
            content:x:@.arguments/*/instruction
         .
            role:system
            content:x:@.context
