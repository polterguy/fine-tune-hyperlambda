
/*
 * This Hyperlambda code connects to a SQLite database, updates a record in the "Customers" table, and handles the response based on the update result. It uses [data.connect] to establish a connection, [data.update] to update the table, and checks if no records were affected to set a 404 status. If records are updated, it sets a 202 status and signals an update event using [sockets.signal]. The final response returns the number of affected records. 
 * 
 * 1. [data.connect] - Connects to the SQLite database.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [add] - Adds nodes to the update values and where conditions.
 * 4. [data.update] - Updates the "Customers" table.
 * 5. [if] - Checks if no records were updated.
 * 6. [eq] - Compares the update result to zero.
 * 7. [response.status.set] - Sets the HTTP response status.
 * 8. [return] - Returns a result message or affected records.
 * 9. [sockets.signal] - Signals an update event for the "Customers" table.
 * 10. [unwrap] - Evaluates expressions in the signal arguments.
 * 11. [set-name] - Sets the name for the signal's authorization.
 */
data.connect:[generic|northwind]
   database-type:sqlite
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]
   data.update
      database-type:sqlite
      table:Customers
      values
      where
         and
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found
   response.status.set:202
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   add:x:./*/sockets.signal
      get-nodes:x:@auth.ticket.verify
   set-name:x:./*/sockets.signal/*/auth.ticket.verify
      .:roles
   sockets.signal:northwind.Customers.put
      args
   unwrap:x:+/*
   return
      affected:x:@data.update
