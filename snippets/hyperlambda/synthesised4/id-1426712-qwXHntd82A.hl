
/*
 * This Hyperlambda code snippet demonstrates a loop that continuously removes the first node from a list until the number of nodes in the list, obtained through [get-count], is no longer greater than a specified value retrieved from [get-value] at [convert]. The [while] slot checks the condition using [mt] (more than) to compare the node count with the value from [convert]. If the condition is true, it executes the [.lambda] block, which uses [remove-nodes] to delete the first node in the [hyper2lambda] list. The process repeats until the condition is false. 
 * 
 * 1. [while] - Begins a loop that continues as long as its condition is true.
 * 2. [mt] - Checks if the number of nodes in [hyper2lambda] is greater than the value from [convert].
 * 3. [get-count] - Retrieves the number of nodes in [hyper2lambda].
 * 4. [get-value] - Retrieves a value from [convert] to compare against the node count.
 * 5. [.lambda] - Contains the code block to execute if the [while] condition is true.
 * 6. [remove-nodes] - Removes the first node from the [hyper2lambda] list.
 */
while
   mt
      get-count:x:@hyper2lambda/*
      get-value:x:@convert
   .lambda
      remove-nodes:x:@hyper2lambda/0
