
// This Hyperlambda code is designed to create a SQL query for retrieving product data from a database, with options for filtering, sorting, and joining related tables. It uses [validators.mandatory] and [validators.enum] to ensure the presence and validity of a distinct column. The [data.connect] slot connects to a SQLite database, and [data.read] performs the query, joining "Products" with "Categories" and "Suppliers" tables. The code dynamically constructs the SQL query based on input arguments for filtering and ordering, and returns the query results.
hyper2lambda
   .arguments
      distinct_column:string
      limit:long
      offset:long
      order:string
      direction:string
      Products.ProductID.mt:long
      Products.ProductID.lt:long
      Products.ProductID.mteq:long
      Products.ProductID.lteq:long
      Products.ProductID.neq:long
      Products.ProductID.eq:long
      Products.ProductName.like:string
      Products.ProductName.mt:string
      Products.ProductName.lt:string
      Products.ProductName.mteq:string
      Products.ProductName.lteq:string
      Products.ProductName.neq:string
      Products.ProductName.eq:string
      Products.SupplierID.mt:long
      Products.SupplierID.lt:long
      Products.SupplierID.mteq:long
      Products.SupplierID.lteq:long
      Products.SupplierID.neq:long
      Products.SupplierID.eq:long
      Products.CategoryID.mt:long
      Products.CategoryID.lt:long
      Products.CategoryID.mteq:long
      Products.CategoryID.lteq:long
      Products.CategoryID.neq:long
      Products.CategoryID.eq:long
      Products.QuantityPerUnit.like:string
      Products.QuantityPerUnit.mt:string
      Products.QuantityPerUnit.lt:string
      Products.QuantityPerUnit.mteq:string
      Products.QuantityPerUnit.lteq:string
      Products.QuantityPerUnit.neq:string
      Products.QuantityPerUnit.eq:string
      Products.UnitPrice.mt:decimal
      Products.UnitPrice.lt:decimal
      Products.UnitPrice.mteq:decimal
      Products.UnitPrice.lteq:decimal
      Products.UnitPrice.neq:decimal
      Products.UnitPrice.eq:decimal
      Products.UnitsInStock.mt:long
      Products.UnitsInStock.lt:long
      Products.UnitsInStock.mteq:long
      Products.UnitsInStock.lteq:long
      Products.UnitsInStock.neq:long
      Products.UnitsInStock.eq:long
      Products.UnitsOnOrder.mt:long
      Products.UnitsOnOrder.lt:long
      Products.UnitsOnOrder.mteq:long
      Products.UnitsOnOrder.lteq:long
      Products.UnitsOnOrder.neq:long
      Products.UnitsOnOrder.eq:long
      Products.ReorderLevel.mt:long
      Products.ReorderLevel.lt:long
      Products.ReorderLevel.mteq:long
      Products.ReorderLevel.lteq:long
      Products.ReorderLevel.neq:long
      Products.ReorderLevel.eq:long
      Products.Discontinued.like:string
      Products.Discontinued.mt:string
      Products.Discontinued.lt:string
      Products.Discontinued.mteq:string
      Products.Discontinued.lteq:string
      Products.Discontinued.neq:string
      Products.Discontinued.eq:string
      ProductID.CategoryName.eq:string
      ProductID.CategoryName.like:string
      SupplierID.CompanyName.eq:string
      SupplierID.CompanyName.like:string
   validators.mandatory:x:@.arguments/*/distinct_column
   validators.enum:x:@.arguments/*/distinct_column
      .:Products.ProductID
      .:Products.ProductName
      .:Products.SupplierID
      .:Products.CategoryID
      .:Products.QuantityPerUnit
      .:Products.UnitPrice
      .:Products.UnitsInStock
      .:Products.UnitsOnOrder
      .:Products.ReorderLevel
      .:Products.Discontinued
      .:ProductID.CategoryName
      .:SupplierID.CompanyName
   data.connect:[generic|northwind]
      database-type:sqlite
      set-name:x:./*/data.read/*/columns/*/distinct_functor
         strings.concat
            .:distinct(
            get-value:x:@.arguments/*/distinct_column
            .:)
      remove-nodes:x:@.arguments/*/distinct_column
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:Products
            join:Categories
               as:ProductID
               type:left
               on
                  and
                     Products.ProductID:ProductID.CategoryID
            join:Suppliers
               as:SupplierID
               type:left
               on
                  and
                     Products.SupplierID:SupplierID.SupplierID
         columns
            distinct_functor
               as:.
         where
            and
      return-nodes:x:@data.read/*/*
