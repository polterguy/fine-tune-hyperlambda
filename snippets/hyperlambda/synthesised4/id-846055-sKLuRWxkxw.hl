
// This Hyperlambda code defines a process for installing modules or frontends based on the specified type. It verifies user authentication, validates mandatory arguments, and handles the installation process by downloading, unzipping, and saving files. The code also logs installation success or failure and sends notifications accordingly. Key slots include [auth.ticket.verify], [validators.mandatory], [http.get], [io.file.save.binary], [io.file.unzip], and [sockets.signal].
hyper2lambda
   .arguments
      url:string
      name:string
      type:string
   auth.ticket.verify:root
   validators.default:x:@.arguments
      type:module
   validators.mandatory:x:@.arguments/*/url
   validators.mandatory:x:@.arguments/*/name
   insert-before:x:./*/fork/0
      get-nodes:x:@.arguments
   fork
      try
         switch:x:@.arguments/*/type
            case:module
               strings.concat
                  .:/modules/
                  get-value:x:@.arguments/*/name
                  .:/uninstall.hl
               if
                  io.file.exists:x:@strings.concat
                  .lambda
                     log.info:Uninstalling module
                        module:x:@strings.concat
                     io.file.execute:x:@strings.concat
               http.get:x:@.arguments/*/url
               strings.split:x:@http.get/*/headers/*/Content-Disposition
                  .:=
               strings.trim:x:@strings.split/1
                  .:"\""
               strings.concat
                  .:/modules/
                  get-value:x:@strings.trim
               io.file.save.binary:x:@strings.concat
                  get-value:x:@http.get/*/content
               .folder
               set-value:x:@.folder
                  strings.concat
                     .:/modules/
                     get-value:x:@.arguments/*/name
                     .:/
               if
                  io.folder.exists:x:@.folder
                  .lambda
                     io.folder.delete:x:@.folder
               io.folder.create:x:@.folder
               io.file.unzip:x:@strings.concat
                  folder:x:@.folder
               io.file.delete:x:@strings.concat
               .module-folder
               set-value:x:@.module-folder
                  strings.concat
                     .:/modules/
                     get-value:x:@.arguments/*/name
                     .:/
               if
                  not
                     io.folder.exists:x:@.module-folder
                  .lambda
                     strings.split:x:@strings.concat
                        .:.zip
                     io.folder.move:x:@strings.split/0
                        get-value:x:@.module-folder
               strings.split:x:@.module-folder
                  .:/
               execute:magic.modules.install-module
                  module:x:@strings.split/0/-
               sockets.signal:magic.backend.message
                  roles:root
                  args
                     message:Plugin was successfully installed
                     type:success
            case:frontend
               strings.concat
                  get-value:x:@.arguments/*/url
                  .:&type=frontend
               http.get:x:@strings.concat
               strings.split:x:@http.get/*/headers/*/Content-Disposition
                  .:=
               strings.trim:x:@strings.split/1
                  .:"\""
               strings.concat
                  .:/modules/
                  get-value:x:@strings.trim
               io.file.save.binary:x:@strings.concat
                  get-value:x:@http.get/*/content
               io.file.unzip:x:@strings.concat
                  folder:/etc/www/
                  overwrite:true
               io.file.delete:x:@strings.concat
               sockets.signal:magic.backend.message
                  roles:root
                  args
                     message:Frontend was successfully installed
                     type:success
      .catch
         log.error:Could not install plugin
            message:x:@.arguments/*/message
         sockets.signal:magic.backend.message
            roles:root
            args
               message:Plugin could not be installed, check your log for details
               type:error
   return
      result:success
