
/*
 * 1. `+` - This iterator retrieves the elder sibling of the current node. In the context of Hyperlambda, this means it will select the node immediately following the current node at the same hierarchical level. This is useful when you want to access or manipulate a node that comes directly after another node in a sequence.
 * 
 * 2. `*` - This iterator retrieves all children of the node(s) returned by the previous iterator. In this case, it will retrieve all children of the elder sibling node identified by the `+` iterator. This is useful for accessing or iterating over all child nodes of a specific node.
 * 
 * 3. `*` - This second `*` iterator retrieves all children of the nodes returned by the previous `*` iterator. This means it will access all grandchildren of the elder sibling node. This is useful for deep traversal within a specific branch of the node hierarchy, allowing you to access or manipulate nested structures.
 * 
 * Potential use cases:
 * - This expression can be used in scenarios where you need to process or analyze data that is organized in a hierarchical structure, and you need to access nodes that are siblings and their descendants.
 * - It can be useful in data transformation tasks where you need to apply operations to a specific subset of nodes that are related by their position in the hierarchy.
 */

.:x:+/*/*