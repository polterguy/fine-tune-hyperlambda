
/*
 * This code checks if a public key file exists and, if so, creates a backup of the existing key pair. It loads the public and private keys, generates a fingerprint of the public key, and constructs new filenames for the backup using this fingerprint. Finally, it saves the public and private keys to these new filenames. The process ensures that old keys are preserved with unique identifiers based on their fingerprint.
 * 
 * 1. [if] - Checks if the public key file exists.
 * 2. [log.info] - Logs the creation of a backup.
 * 3. [set-value] - Loads the public key into a variable.
 * 4. [set-value] - Loads the private key into a variable.
 * 5. [set-value] - Generates a fingerprint from the public key.
 * 6. [set-value] - Constructs a new filename for the public key backup.
 * 7. [set-value] - Constructs a new filename for the private key backup.
 * 8. [io.file.save] - Saves the public key to the new filename.
 * 9. [io.file.save] - Saves the private key to the new filename.
 */
if
   io.file.exists:/etc/system/crypto/keys/public.key
   .lambda
      log.info:Creating a backup of the old key pair
      .public-key
      set-value:x:@.public-key
         io.file.load:/etc/system/crypto/keys/public.key
      .private-key
      set-value:x:@.private-key
         io.file.load:/etc/system/crypto/keys/private.key
      .fingerprint
      set-value:x:@.fingerprint
         crypto.fingerprint:x:@.public-key
      .public-key-filename
      set-value:x:@.public-key-filename
         strings.concat
            .:/etc/system/crypto/keys/public-
            get-value:x:@.fingerprint
            .:.key
      .private-key-filename
      set-value:x:@.private-key-filename
         strings.concat
            .:/etc/system/crypto/keys/private-
            get-value:x:@.fingerprint
            .:.key
      io.file.save:x:@.public-key-filename
         get-value:x:@.public-key
      io.file.save:x:@.private-key-filename
         get-value:x:@.private-key
