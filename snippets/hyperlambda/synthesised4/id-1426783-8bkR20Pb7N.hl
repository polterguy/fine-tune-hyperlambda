
/*
 * This Hyperlambda code processes a message argument, checks for specific conditions, and executes actions based on those conditions. It first checks if a message exists and converts it from JSON to a lambda structure. If the message indicates a completed task, it processes potential function invocations, handling errors and signaling results. It also manages invocation limits and logs errors if necessary. If the task isn't complete, it checks for additional content in the message, appending it to the result and signaling updates. The code handles various conditions to ensure correct processing and signaling of function results or errors.
 * 
 * 1. [if] - Checks if the message argument exists.
 * 2. [json2lambda] - Converts the message from JSON to a lambda structure.
 * 3. [if] - Checks if the task is marked as done.
 * 4. [if] - Checks if the number of invocations is not zero.
 * 5. [if] - Checks if the result contains specific strings indicating function invocation.
 * 6. [if] - Checks if there are no previous invocations.
 * 7. [strings.split] - Splits the result string.
 * 8. [for-each] - Iterates through each split string.
 * 9. [if] - Checks if the current string contains a function invocation.
 * 10. [try] - Attempts to execute a block of code, handling exceptions.
 * 11. [if] - Checks if iteration count is less than or equal to 1.
 * 12. [log.error] - Logs an error message.
 * 13. [sockets.signal] - Sends a signal with error information.
 * 14. [else] - Executes a function invocation.
 * 15. [lambda2json] - Converts the result back to JSON.
 * 16. [if] - Checks if the result size exceeds the maximum context tokens.
 * 17. [throw] - Throws an error if the result is too large.
 * 18. [config.get] - Retrieves a success message from the configuration.
 * 19. [unwrap] - Evaluates and processes the configuration result.
 * 20. [sockets.signal] - Sends a signal with function results.
 * 21. [if] - Checks if the execution result exists.
 * 22. [set-value] - Sets the new prompt with the function response.
 * 23. [else] - Sets the new prompt indicating successful invocation.
 * 24. [.catch] - Handles exceptions during function execution.
 * 25. [log.error] - Logs an error message for failed function execution.
 * 26. [unwrap] - Processes the error message.
 * 27. [sockets.signal] - Sends a signal with the error message.
 * 28. [set-value] - Sets the new prompt with the error message.
 * 29. [set-value] - Trims the new prompt.
 * 30. [else] - Handles cases where the task is not done.
 * 31. [if] - Checks if a done reason exists and is not null.
 * 32. [set-value] - Sets the finish reason.
 * 33. [unwrap] - Processes the finish reason.
 * 34. [sockets.signal] - Sends a signal with the finish reason.
 * 35. [if] - Checks if the message content is not null or empty.
 * 36. [set-value] - Concatenates the message content to the result.
 * 37. [if] - Checks if the result does not contain specific strings.
 * 38. [unwrap] - Processes the result.
 * 39. [sockets.signal] - Sends a signal with the message content.
 * 40. [else-if] - Checks if the result contains a function invocation and if a waiting signal has not been sent.
 * 41. [sockets.signal] - Sends a waiting signal.
 * 42. [set-value] - Marks that a waiting signal has been sent.
 */
if
   exists:x:@.arguments/*/message
   .lambda
      json2lambda:x:@.arguments/*/message
      if
         eq:x:@json2lambda/*/done
            .:bool:true
         .lambda
            if
               neq:x:@.no-invocation
                  .:int:0
               .lambda
                  math.increment:x:@.no-invocation
            if
               and
                  strings.contains:x:@.result
                     .:___
                  strings.contains:x:@.result
                     .:FUNCTION_INVOCATION[
               .lambda
                  if
                     eq:x:@.no-invocation
                        .:int:0
                     .lambda
                        math.increment:x:@.no-invocation
                  strings.split:x:@.result
                     .:___
                  for-each:x:@strings.split/*
                     if
                        strings.contains:x:@.dp/#
                           .:FUNCTION_INVOCATION[/
                        .lambda
                           try
                              if
                                 lte:x:@.iterations
                                    .:int:1
                                 .lambda
                                    log.error:Too many function invocations
                                    sockets.signal:x:@.session
                                       args
                                          function_error:Too many function invocations
                                    sockets.signal:x:@.session
                                       args
                                          function_waiting:bool:false
                                    sockets.signal:x:@.session
                                       args
                                          error:bool:true
                                          status:int:500
                                          message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                                    sockets.signal:x:@.session
                                       args
                                          finished:bool:true
                              else
                                 execute:magic.ai.functions.invoke
                                    type:x:@.type
                                    session:x:@.session
                                    user-id:x:@.user-id
                                    invocation:x:@.dp/#
                                 lambda2json:x:@execute/*/result/*
                                    format:true
                                 if
                                    mt
                                       openai.tokenize:x:@lambda2json
                                       get-value:x:@.arguments/@.arguments/*/max_context_tokens
                                    .lambda
                                       throw:Result too large, try to limit your result
                                          status:int:400
                                          public:bool:true
                                 config.get:"magic:chat:functions:success-message"
                                    .:Success!
                                 unwrap:x:+/*/*
                                 sockets.signal:x:@.session
                                    args
                                       function_result:x:@config.get
                                       invocation:x:@execute/*/json
                                       file:x:@execute/*/workflow
                                 if
                                    exists:x:@execute/*/result/*
                                    .lambda
                                       set-value:x:@.new-prompt
                                          strings.concat
                                             get-value:x:@.new-prompt
                                             .:"Response from '"
                                             get-value:x:@execute/*/workflow
                                             .:@"' was:
```json
"
                                             get-value:x:@lambda2json
                                             .:@"
"
                                             .:```
                                             .:@"
"
                                             .:@"
"
                                       set-value:x:@.function-result
                                          get-value:x:@lambda2json
                                 else
                                    set-value:x:@.new-prompt
                                       strings.concat
                                          get-value:x:@.new-prompt
                                          .:"Invocation of '"
                                          get-value:x:@execute/*/workflow
                                          .:"' was a success."
                                          .:@"
"
                                          .:@"
"
                           .catch
                              log.error:Could not execute AI function
                                 message:x:@.arguments/*/message
                              unwrap:x:+/*/*
                              sockets.signal:x:@.session
                                 args
                                    function_error:x:@.arguments/*/message
                              set-value:x:@.new-prompt
                                 strings.concat
                                    get-value:x:@.new-prompt
                                    .:"Invocation failed, exception message was: '"
                                    get-value:x:@.arguments/*/message
                                    .:"'"
                                    .:@"
"
                                    .:@"
"
                  set-value:x:@.new-prompt
                     strings.trim:x:@.new-prompt
            else
               sockets.signal:x:@.session
                  args
                     finished:bool:true
               set-value:x:@.iterations
                  .:int:0
      else
         if
            and
               exists:x:@json2lambda/*/done_reason
               not-null:x:@json2lambda/*/done_reason
            .lambda
               set-value:x:@.finish_reason
                  get-value:x:@json2lambda/*/done_reason
               unwrap:x:+/*/*
               sockets.signal:x:@.session
                  args
                     finish_reason:x:@.finish_reason
         if
            and
               not-null:x:@json2lambda/*/message/*/content
               neq:x:@json2lambda/*/message/*/content
                  .:
            .lambda
               set-value:x:@.result
                  strings.concat
                     get-value:x:@.result
                     get-value:x:@json2lambda/*/message/*/content
               if
                  not
                     strings.contains:x:@.result
                        .:___
                  .lambda
                     unwrap:x:+/*/*
                     sockets.signal:x:@.session
                        args
                           message:x:@json2lambda/*/message/*/content
               else-if
                  and
                     strings.contains:x:@.result
                        .:FUNCTION_INVOCATION[
                     neq:x:@.has-sent-waiting
                        .:bool:true
                  .lambda
                     sockets.signal:x:@.session
                        args
                           function_waiting:bool:true
                     set-value:x:@.has-sent-waiting
                        .:bool:true
