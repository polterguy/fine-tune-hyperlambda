
/*
 * This Hyperlambda code iterates over all anchor tags in an HTML document, processes their URLs, and constructs a Markdown list of links. It resolves relative URLs based on a base URL, applies filters based on optional arguments, and formats the anchor text. The code also decrements a counter for a maximum number of links to process.
 * 
 * 1. **[for-each]**: Iterates over each anchor tag in the HTML document.
 * 2. **[if]**: Checks if the maximum number of links to process is not specified or greater than zero.
 * 3. **[.url]**: Temporary storage for the processed URL.
 * 4. **[set-value]**: Assigns values to nodes, including URL processing and anchor text formatting.
 * 5. **[strings.starts-with]**: Checks if a string starts with a specified prefix.
 * 6. **[strings.split]**: Splits strings based on a delimiter.
 * 7. **[strings.concat]**: Concatenates strings to form complete URLs.
 * 8. **[strings.contains]**: Checks if a string contains a specified substring.
 * 9. **[strings.trim]**: Trims whitespace from a string.
 * 10. **[strings.replace]**: Replaces occurrences of a substring within a string.
 * 11. **[not-null]**: Checks if a node is not null.
 * 12. **[neq]**: Checks if two values are not equal.
 * 13. **[exists]**: Checks if a node exists.
 * 14. **[math.decrement]**: Decrements an integer value.
 * 15. **[strings.url-decode]**: Decodes a URL-encoded string.
 * 16. **[get-value]**: Retrieves the value of a node.
 * 17. **[get-count]**: Retrieves the count of nodes in a node set.
 */
for-each:x:@html2lambda/*/html/*/body/**/a
   if
      or
         not-exists:x:@.arguments/*/max
         mt:x:@.arguments/*/max
            .:int:0
      .lambda
         .url
         set-value:x:@.url
            get-value:x:"@.dp/#/*/\\@href"
         if
            strings.starts-with:x:@.url
               .://
            .lambda
               strings.split:x:@.base
                  .:"://"
               set-value:x:@.url
                  strings.concat
                     get-value:x:@strings.split/0
                     .:":"
                     get-value:x:@.url
         else-if
            strings.starts-with:x:@.url
               .:/
            .lambda
               set-value:x:@.url
                  strings.concat
                     get-value:x:@.base
                     get-value:x:@.url
         else-if
            and
               not
                  strings.starts-with:x:@.url
                     .:"https://"
               not
                  strings.starts-with:x:@.url
                     .:"http://"
            .lambda
               set-value:x:@.url
                  strings.concat
                     get-value:x:@.base
                     .:/
                     get-value:x:"@.dp/#/*/\\@href"
         if
            and
               or
                  not-exists:x:@.arguments/*/starts_with
                  strings.starts-with:x:@.url
                     get-value:x:@.arguments/*/starts_with
               or
                  not-exists:x:@.arguments/*/class
                  strings.contains:x:"@.dp/#/*/\\@class"
                     get-value:x:@.arguments/*/class
            .lambda
               .anchor:
               for-each:x:"@.dp/#/**/\\#text"
                  set-value:x:@.anchor
                     strings.concat
                        get-value:x:@.anchor
                        .:" "
                        get-value:x:@.dp/#
               set-value:x:@.anchor
                  strings.trim:x:@.anchor
                     .:@" 	
"
               set-value:x:@.anchor
                  strings.replace:x:@.anchor
                     .:"  "
                     .:" "
               set-value:x:@.anchor
                  strings.replace:x:@.anchor
                     .:"\r"
                     .:" "
               set-value:x:@.anchor
                  strings.replace:x:@.anchor
                     .:"\n"
                     .:" "
               if
                  and
                     not-null:x:@.anchor
                     neq:x:@.anchor
                        .:
                     not
                        strings.contains:x:@.url
                           .:#
                  .lambda
                     if
                        exists:x:@.arguments/*/query
                        .lambda
                           strings.split:x:@.url
                              .:?
                           if
                              mt
                                 get-count:x:@strings.split/*
                                 .:int:1
                              .lambda
                                 strings.split:x:@strings.split/1
                                    .:&
                                 .found:bool:false
                                 for-each:x:@strings.split/*
                                    if
                                       strings.starts-with:x:@.dp/#
                                          strings.concat
                                             get-value:x:@.arguments/*/query
                                             .:=
                                       .lambda
                                          set-value:x:@.found
                                             .:bool:true
                                          strings.split:x:@.dp/#
                                             .:=
                                          set-value:x:@.url
                                             strings.url-decode:x:@strings.split/1
                                 if
                                    not
                                       get-value:x:@.found
                                    .lambda
                                       set-value:x:@.url
                           else
                              set-value:x:@.url
                     if
                        not-null:x:@.url
                        .lambda
                           math.decrement:x:@.arguments/*/max
                           set-value:x:@.markdown
                              strings.concat
                                 get-value:x:@.markdown
                                 .:* [
                                 get-value:x:@.anchor
                                 .:](
                                 get-value:x:@.url
                                 .:)
                                 .:@"
"
