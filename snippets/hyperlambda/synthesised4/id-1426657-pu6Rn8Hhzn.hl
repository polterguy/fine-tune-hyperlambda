
/*
 * This Hyperlambda code processes a URL and its associated text anchor, performing various string manipulations and conditional checks. It first checks if the URL starts with a specified prefix or contains a specific class. If these conditions are met, it extracts and concatenates text content from a node, trims and replaces whitespace characters, and checks for the presence of a query parameter. If the query parameter exists, it decodes and updates the URL accordingly. Finally, it decrements a maximum count and appends a Markdown-formatted link to a result node if the URL is not null. The code is structured to handle complex string operations and conditional logic efficiently.
 * 
 * 1. [if] - Checks if certain conditions about the URL and class are met.
 * 2. [and] - Combines multiple conditions that must all be true.
 * 3. [or] - Allows for alternative conditions to be true.
 * 4. [not-exists] - Checks if a node does not exist.
 * 5. [strings.starts-with] - Checks if a string starts with a specified prefix.
 * 6. [strings.contains] - Checks if a string contains a specified substring.
 * 7. [.lambda] - Contains the code to execute if conditions are met.
 * 8. [.anchor] - Initializes a variable to store concatenated text.
 * 9. [for-each] - Iterates over text nodes to concatenate their values.
 * 10. [set-value] - Updates the value of a node.
 * 11. [strings.concat] - Concatenates strings together.
 * 12. [strings.trim] - Trims whitespace from a string.
 * 13. [strings.replace] - Replaces substrings within a string.
 * 14. [not-null] - Checks if a node is not null.
 * 15. [neq] - Checks if two values are not equal.
 * 16. [not] - Inverts a condition.
 * 17. [exists] - Checks if a node exists.
 * 18. [strings.split] - Splits a string into parts based on a delimiter.
 * 19. [mt] - Checks if a value is greater than another.
 * 20. [get-count] - Retrieves the count of nodes.
 * 21. [.found] - A boolean flag to track if a condition is met.
 * 22. [math.decrement] - Decreases an integer value.
 * 23. [strings.url-decode] - Decodes a URL-encoded string.
 * 24. [strings.mixin] - Combines strings with embedded Hyperlambda expressions.
 */
if
   and
      or
         not-exists:x:@.arguments/*/starts_with
         strings.starts-with:x:@.url
            get-value:x:@.arguments/*/starts_with
      or
         not-exists:x:@.arguments/*/class
         strings.contains:x:"@.dp/#/*/\\@class"
            get-value:x:@.arguments/*/class
   .lambda
      .anchor:
      for-each:x:"@.dp/#/**/\\#text"
         set-value:x:@.anchor
            strings.concat
               get-value:x:@.anchor
               .:" "
               get-value:x:@.dp/#
      set-value:x:@.anchor
         strings.trim:x:@.anchor
            .:@" 	
"
      set-value:x:@.anchor
         strings.replace:x:@.anchor
            .:"  "
            .:" "
      set-value:x:@.anchor
         strings.replace:x:@.anchor
            .:"\r"
            .:" "
      set-value:x:@.anchor
         strings.replace:x:@.anchor
            .:"\n"
            .:" "
      if
         and
            not-null:x:@.anchor
            neq:x:@.anchor
               .:
            not
               strings.contains:x:@.url
                  .:#
         .lambda
            if
               exists:x:@.arguments/*/query
               .lambda
                  strings.split:x:@.url
                     .:?
                  if
                     mt
                        get-count:x:@strings.split/*
                        .:int:1
                     .lambda
                        strings.split:x:@strings.split/1
                           .:&
                        .found:bool:false
                        for-each:x:@strings.split/*
                           if
                              strings.starts-with:x:@.dp/#
                                 strings.concat
                                    get-value:x:@.arguments/*/query
                                    .:=
                              .lambda
                                 set-value:x:@.found
                                    .:bool:true
                                 strings.split:x:@.dp/#
                                    .:=
                                 set-value:x:@.url
                                    strings.url-decode:x:@strings.split/1
                        if
                           not
                              get-value:x:@.found
                           .lambda
                              set-value:x:@.url
                  else
                     set-value:x:@.url
            if
               not-null:x:@.url
               .lambda
                  math.decrement:x:@.arguments/*/max
                  set-value:x:@.markdown
                     strings.concat
                        get-value:x:@.markdown
                        .:* [
                        get-value:x:@.anchor
                        .:](
                        get-value:x:@.url
                        .:)
                        .:@"
"
