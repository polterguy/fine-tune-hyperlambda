
/*
 * // This Hyperlambda code iterates over nodes within the [disallow] argument, checking if a URL matches any patterns. 
 * // If a match is found, it sets the [allowed] node to false. It then iterates over nodes within the [allow] argument, 
 * // checking for matches again. If a match is found in this second iteration, it sets the [allowed] node to true.
 * // 1. [for-each] - Iterates over each node in the [disallow] argument.
 * // 2. [unwrap] - Evaluates expressions before reaching the current node.
 * // 3. [invoke] - Calls the [match] slot with the URL and pattern.
 * // 4. [if] - Checks if the [invoke] result is true.
 * // 5. [set-value] - Sets the [allowed] node to false if a match is found in [disallow].
 * // 6. [for-each] - Iterates over each node in the [allow] argument.
 * // 7. [unwrap] - Evaluates expressions before reaching the current node.
 * // 8. [invoke] - Calls the [match] slot with the URL and pattern.
 * // 9. [if] - Checks if the [invoke] result is true.
 * // 10. [set-value] - Sets the [allowed] node to true if a match is found in [allow].
 */
for-each:x:@.arguments/*/disallow/*
   unwrap:x:+/*
   invoke:x:@.match
      url:x:@sort/0
      pattern:x:@.dp/#
   if
      get-value:x:@invoke
      .lambda
         set-value:x:@.allowed
            .:bool:false
         for-each:x:@.arguments/*/allow/*
            unwrap:x:+/*
            invoke:x:@.match
               url:x:@sort/0
               pattern:x:@.dp/#
            if
               get-value:x:@invoke
               .lambda
                  set-value:x:@.allowed
                     .:bool:true
