
// This Hyperlambda code generates and optionally executes a SQL statement to create a table with a primary key in a specified database. It verifies user authentication and mandatory arguments, validates database type and primary key type, and constructs the SQL statement based on the database type (SQLite, MySQL, PostgreSQL, or MSSQL). If the "generate" argument is true, it returns the SQL statement; otherwise, it connects to the database, executes the statement, caches the connection, and returns a success result.
hyper2lambda
   .arguments
      databaseType:string
      connectionString:string
      databaseName:string
      tableName:string
      pkName:string
      pkType:string
      pkLength:int
      pkDefault:string
      generate:bool
   auth.ticket.verify:root
   validators.mandatory:x:@.arguments/*/connectionString
   validators.mandatory:x:@.arguments/*/databaseName
   validators.mandatory:x:@.arguments/*/tableName
   validators.mandatory:x:@.arguments/*/pkName
   validators.mandatory:x:@.arguments/*/pkType
   validators.mandatory:x:@.arguments/*/databaseType
   validators.enum:x:@.arguments/*/databaseType
      .:mysql
      .:sqlite
      .:pgsql
      .:mssql
   validators.enum:x:@.arguments/*/pkType
      .:auto_increment
      .:varchar
   .sql
   switch:x:@.arguments/*/databaseType
      case:sqlite
         .type
         if
            eq:x:@.arguments/*/pkType
               .:auto_increment
            .lambda
               set-value:x:@.type
                  strings.concat
                     .:integer not null primary key autoincrement
         else
            set-value:x:@.type
               strings.concat
                  get-value:x:@.arguments/*/pkType
                  .:(
                  get-value:x:@.arguments/*/pkLength
                  .:) not null primary key
         set-value:x:@.sql
            strings.concat
               .:"create table "
               get-value:x:@.arguments/*/tableName
               .:(
               get-value:x:@.arguments/*/pkName
               .:" "
               get-value:x:@.type
         if
            and
               exists:x:@.arguments/*/pkDefault
               neq:x:@.arguments/*/pkDefault
                  .
               neq:x:@.arguments/*/pkDefault
                  .:
            .lambda
               set-value:x:@.sql
                  strings.concat
                     get-value:x:@.sql
                     .:" default "
                     get-value:x:@.arguments/*/pkDefault
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:);
      case:mysql
         .type
         if
            eq:x:@.arguments/*/pkType
               .:auto_increment
            .lambda
               set-value:x:@.type
                  strings.concat
                     .:int not null auto_increment primary key
         else
            set-value:x:@.type
               strings.concat
                  get-value:x:@.arguments/*/pkType
                  .:(
                  get-value:x:@.arguments/*/pkLength
                  .:) not null primary key
         set-value:x:@.sql
            strings.concat
               .:"create table "
               get-value:x:@.arguments/*/tableName
               .:(
               get-value:x:@.arguments/*/pkName
               .:" "
               get-value:x:@.type
         if
            and
               exists:x:@.arguments/*/pkDefault
               neq:x:@.arguments/*/pkDefault
                  .
               neq:x:@.arguments/*/pkDefault
                  .:
            .lambda
               set-value:x:@.sql
                  strings.concat
                     get-value:x:@.sql
                     .:" default "
                     get-value:x:@.arguments/*/pkDefault
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:);
      case:pgsql
         .type
         if
            eq:x:@.arguments/*/pkType
               .:auto_increment
            .lambda
               set-value:x:@.type
                  strings.concat
                     get-value:x:@.arguments/*/pkName
                     .:" serial primary key"
         else
            set-value:x:@.type
               strings.concat
                  get-value:x:@.arguments/*/pkName
                  .:" "
                  get-value:x:@.arguments/*/pkType
                  .:(
                  get-value:x:@.arguments/*/pkLength
                  .:) primary key
         set-value:x:@.sql
            strings.concat
               .:"create table "
               get-value:x:@.arguments/*/tableName
               .:(
               get-value:x:@.type
         if
            and
               exists:x:@.arguments/*/pkDefault
               neq:x:@.arguments/*/pkDefault
                  .
               neq:x:@.arguments/*/pkDefault
                  .:
            .lambda
               set-value:x:@.sql
                  strings.concat
                     get-value:x:@.sql
                     .:" default "
                     get-value:x:@.arguments/*/pkDefault
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:);
      case:mssql
         .type
         if
            eq:x:@.arguments/*/pkType
               .:auto_increment
            .lambda
               set-value:x:@.type
                  strings.concat
                     get-value:x:@.arguments/*/pkName
                     .:" integer"
                     .:" not null identity(1,1) primary key"
         else
            set-value:x:@.type
               strings.concat
                  get-value:x:@.arguments/*/pkName
                  .:" "
                  get-value:x:@.arguments/*/pkType
                  .:(
                  get-value:x:@.arguments/*/pkLength
                  .:) not null primary key
         set-value:x:@.sql
            strings.concat
               .:"create table "
               get-value:x:@.arguments/*/tableName
               .:(
               get-value:x:@.type
         if
            and
               exists:x:@.arguments/*/pkDefault
               neq:x:@.arguments/*/pkDefault
                  .
               neq:x:@.arguments/*/pkDefault
                  .:
            .lambda
               set-value:x:@.sql
                  strings.concat
                     get-value:x:@.sql
                     .:" default "
                     get-value:x:@.arguments/*/pkDefault
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:);
   if:x:@.arguments/*/generate
      unwrap:x:+/*
      return
         sql:x:@.sql
   strings.concat
      .:[
      get-value:x:@.arguments/*/connectionString
      .:|
      get-value:x:@.arguments/*/databaseName
      .:]
   data.connect:x:-
      database-type:x:@.arguments/*/databaseType
      data.execute:x:@.sql
         database-type:x:@.arguments/*/databaseType
   strings.concat
      .:magic.sql.databases.
      get-value:x:@.arguments/*/databaseType
      :.
      get-value:x:@.arguments/*/connectionString
   cache.set:x:-
   unwrap:x:+/*
   return
      result:success
      sql:x:@.sql
