
// This Hyperlambda code connects to a SQLite database and constructs a dynamic SQL query. It sets up grouping, ordering, and aggregation based on input arguments, and performs a left join between "tasks" and "users" tables. The code dynamically modifies node names and values to reflect the desired SQL structure, including setting up a group column, aggregate function, and handling optional SQL clauses like limit and offset. Finally, it reads data from the database and returns the results.
data.connect:[generic|crm]
   database-type:sqlite
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function
   remove-nodes:x:@.arguments/*/group_column
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:tasks
         join:users
            as:user_id
            type:left
            on
               and
                  tasks.user_id:user_id.user_id
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column
   return-nodes:x:@data.read/*
