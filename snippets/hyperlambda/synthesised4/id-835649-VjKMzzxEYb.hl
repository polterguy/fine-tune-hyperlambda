
// This code constructs a dynamic SQL query to calculate keyword density and count in the "Shippers" table of a SQLite database. It iterates over specified columns and words, building expressions to compute keyword density and count, then orders results by these metrics. The query is executed using [data.select], and the results are returned after removing the keyword metrics. Key slots include [for-each] for iteration, [strings.concat] for building SQL strings, and [math.increment] for counter incrementation.
data.connect:[generic|northwind]
   database-type:sqlite
   .sql:select *, (
   .fields
   for-each:x:@.columns/*
      strings.concat
         .:coalesce(
         get-value:x:@.dp/#
         .:", '')"
      unwrap:x:+/*/*
      add:x:@.fields
         .
            .:x:@strings.concat
   set-value:x:@.fields
      strings.join:x:@.fields/*
         .:" || "
   remove-nodes:x:@.fields/*
   .no:int:0
   for-each:x:@.words/*
      set-name:x:+/+/*/*
         strings.concat
            .:@p
            get-value:x:@.no
      unwrap:x:+/*/*
      add:x:@data.connect/*/data.select
         .
            .:x:@.dp/#
      if
         eq:x:@.no
            .:int:0
         .lambda
            set-value:x:@.sql
               strings.concat:x:@.sql
                  get-value:x:@.sql
                  .:" (length("
                  get-value:x:@.fields
                  .:) - length(replace(lower(
                  get-value:x:@.fields
                  .:), @p
                  get-value:x:@.no
                  .:", ''))) / length(@p"
                  get-value:x:@.no
                  .:)
      else
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" + (length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)
      math.increment:x:@.no
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:) * 1.0 / length(
         get-value:x:@.fields
         .:) as keyword_density, (
   .no:int:0
   for-each:x:@.words/*
      if
         eq:x:@.no
            .:int:0
         .lambda
            set-value:x:@.sql
               strings.concat:x:@.sql
                  get-value:x:@.sql
                  .:" CASE WHEN ((length("
                  get-value:x:@.fields
                  .:) - length(replace(lower(
                  get-value:x:@.fields
                  .:), @p
                  get-value:x:@.no
                  .:", ''))) / length(@p"
                  get-value:x:@.no
                  .:)) > 0 THEN 1 ELSE 0 END
      else
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" + CASE WHEN ((length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)) > 0 THEN 1 ELSE 0 END
      math.increment:x:@.no
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:) as keyword_count
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" from "
         .:Shippers
         .:" where keyword_count > 0"
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" order by keyword_count desc, keyword_density desc limit "
         get-value:x:@.arguments/*/limit
   if
      exists:x:@.arguments/*/offset
      .lambda
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" offset "
               get-value:x:@.arguments/*/offset
   data.select:x:@.sql
      database-type:sqlite
   remove-nodes:x:@data.select/*/*/keyword_density
   remove-nodes:x:@data.select/*/*/keyword_count
   return-nodes:x:@data.select/*
