
// This Hyperlambda code defines an endpoint for querying a database with dynamic parameters. It validates mandatory arguments for grouping and aggregation, sets cache headers, and verifies authentication. The code constructs a SQL query using parameters for grouping, ordering, and filtering, and executes it against a SQLite database, returning the results. Key slots include [validators.mandatory] for argument validation, [data.connect] for database connection, and [data.read] for executing the query.
hyper2lambda
   .arguments
      group_column:string
      limit:long
      offset:long
      order:string
      direction:string
      aggregate_function:string
      aggregate_column:string
      campaigns.campaign_id.mt:long
      campaigns.campaign_id.lt:long
      campaigns.campaign_id.mteq:long
      campaigns.campaign_id.lteq:long
      campaigns.campaign_id.neq:long
      campaigns.campaign_id.eq:long
      campaigns.name.like:string
      campaigns.name.mt:string
      campaigns.name.lt:string
      campaigns.name.mteq:string
      campaigns.name.lteq:string
      campaigns.name.neq:string
      campaigns.name.eq:string
      campaigns.start_date.mt:date
      campaigns.start_date.lt:date
      campaigns.start_date.mteq:date
      campaigns.start_date.lteq:date
      campaigns.start_date.neq:date
      campaigns.start_date.eq:date
      campaigns.end_date.mt:date
      campaigns.end_date.lt:date
      campaigns.end_date.mteq:date
      campaigns.end_date.lteq:date
      campaigns.end_date.neq:date
      campaigns.end_date.eq:date
      campaigns.budget.mt:double
      campaigns.budget.lt:double
      campaigns.budget.mteq:double
      campaigns.budget.lteq:double
      campaigns.budget.neq:double
      campaigns.budget.eq:double
      campaigns.status.like:string
      campaigns.status.mt:string
      campaigns.status.lt:string
      campaigns.status.mteq:string
      campaigns.status.lteq:string
      campaigns.status.neq:string
      campaigns.status.eq:string
   validators.mandatory:x:@.arguments/*/group_column
   validators.mandatory:x:@.arguments/*/aggregate_function
   validators.mandatory:x:@.arguments/*/aggregate_column
   validators.enum:x:@.arguments/*/aggregate_function
      .:min
      .:max
      .:sum
      .:avg
      .:count
   validators.enum:x:@.arguments/*/group_column
      .:campaigns.campaign_id
      .:campaigns.name
      .:campaigns.start_date
      .:campaigns.end_date
      .:campaigns.budget
      .:campaigns.status
   validators.enum:x:@.arguments/*/aggregate_column
      .:campaigns.campaign_id
      .:campaigns.name
      .:campaigns.start_date
      .:campaigns.end_date
      .:campaigns.budget
      .:campaigns.status
   response.headers.set
      Cache-Control:public, max-age=300
   auth.ticket.verify:guest
   data.connect:[generic|crm]
      database-type:sqlite
      set-name:x:@data.connect/*/data.read/*/group/*/group_column
         get-value:x:@.arguments/*/group_column
      set-name:x:+/*/*
         get-value:x:@.arguments/*/group_column
      insert-before:x:@data.connect/*/data.read/*/columns/0
         .
            group_column
      set-value:x:@data.connect/*/data.read/*/columns/1/*/as
         get-value:x:@.arguments/*/aggregate_function
      remove-nodes:x:@.arguments/*/group_column
      add:x:@data.connect/*/data.read
         get-nodes:x:@.arguments/*/limit
         get-nodes:x:@.arguments/*/offset
      remove-nodes:x:@.arguments/*/limit
      remove-nodes:x:@.arguments/*/offset
      add:x:./*/data.read
         get-nodes:x:@.arguments/*/order
         get-nodes:x:@.arguments/*/direction
      remove-nodes:x:@.arguments/*/order
      remove-nodes:x:@.arguments/*/direction
      set-name:x:./*/data.read/*/columns/*/aggregate_functor
         strings.concat
            get-value:x:@.arguments/*/aggregate_function
            .:(
            get-value:x:@.arguments/*/aggregate_column
            .:)
      remove-nodes:x:@.arguments/*/[0,2]
      add:x:./*/data.read/*/where/*
         get-nodes:x:@.arguments/*
      data.read
         database-type:sqlite
         table:campaigns
         columns
            aggregate_functor
               as:result
         where
            and
         group
            group_column
      return-nodes:x:@data.read/*
