
// This Hyperlambda code manages database connections and configurations based on the specified database type. It uses a [switch] statement to handle different database types ([mssql], [mysql], [pgsql]), replacing placeholders in connection strings and executing database-specific queries. It loads configurations, checks for existing database entries, and updates or adds new configurations as needed. If a default database is specified, it retrieves user information, updates the configuration, and performs database operations like creating and deleting user records. Finally, it clears the cache and returns a success result.
try
   switch:x:@.arguments/*/databaseType
      case:mssql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:master
         mssql.connect:x:@strings.replace
            mssql.select:select name from master.dbo.sysdatabases
      case:mysql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:information_schema
         mysql.connect:x:@strings.replace
            mysql.select:show databases
      case:pgsql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:postgres
         pgsql.connect:x:@strings.replace
            pgsql.select:select datname from pg_database
   config.load
   json2lambda:x:-
   if
      not-exists:x:"@json2lambda/*/magic/*/databases/*/\"{@.arguments/*/databaseType}\""
      .lambda
         set-name:x:+/*/*
            get-value:x:@.arguments/*/databaseType
         add:x:@json2lambda/*/magic/*/databases
            .
               foo
   set-name:x:+/+/*/*
      get-value:x:@.arguments/*/name
   unwrap:x:+/*/*
   add:x:"@json2lambda/*/magic/*/databases/*/\"{@.arguments/*/databaseType}\""
      .
         foo:x:@.arguments/*/connectionString
   if
      and
         eq:x:@.arguments/*/name
            .:generic
         exists:x:@.arguments/*/useAsDefault
         get-value:x:@.arguments/*/useAsDefault
      .lambda
         .username
         .password
         .email
         .name
         auth.ticket.get
         data.connect:[generic|magic]
            data.read
               table:users
                  join:users_extra
                     as:ue1
                     on
                        and
                           users.username.eq:ue1.user
                  join:users_extra
                     as:ue2
                     on
                        and
                           users.username.eq:ue2.user
               columns
                  users.username
                  users.password
                  ue1.value
                     as:email
                  ue2.value
                     as:name
               where
                  and
                     ue1.type.eq:email
                     ue2.type.eq:name
                     users.username.eq:x:@auth.ticket.get
            set-value:x:@.username
               get-value:x:@data.read/*/*/username
            set-value:x:@.password
               get-value:x:@data.read/*/*/password
            set-value:x:@.email
               get-value:x:@data.read/*/*/email
            set-value:x:@.name
               get-value:x:@data.read/*/*/name
         set-value:x:@json2lambda/*/magic/*/databases/*/default
            get-value:x:@.arguments/*/databaseType
         lambda2json:x:@json2lambda/*
         config.save:x:-
         sleep:2000
         io.file.execute:/system/ensure-magic-database.hl
         data.connect:[generic|magic]
            data.delete
               table:users
               where
                  and
                     username.eq:x:@.username
            data.create
               table:users
               values
                  username:x:@.username
                  password:x:@.password
            data.create
               table:users_extra
               values
                  user:x:@.username
                  type:email
                  value:x:@.email
            data.create
               table:users_extra
               values
                  user:x:@.username
                  type:name
                  value:x:@.name
            for-each:x:@auth.ticket.get/*/roles/*
               data.create
                  table:users_roles
                  values
                     user:x:@.username
                     role:x:@.dp/#
         cache.clear
   else
      lambda2json:x:@json2lambda/*
      config.save:x:-
   return
      result:success
