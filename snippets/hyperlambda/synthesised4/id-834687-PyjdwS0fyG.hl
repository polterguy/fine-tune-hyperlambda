
/*
 * The code iterates over each node in the result of the [hyper2lambda] expression using [for-each], retrieves the name of each node with [get-name], and checks if the name does not exist in [.result] but exists in [vocabulary]. If both conditions are true, it adds the node's name to [.result] using [add] after unwrapping its children nodes with [unwrap]. 
 * 
 * 1. [for-each] - Iterates over each node in the result of the [hyper2lambda] expression.
 * 2. [get-name] - Retrieves the name of the current node.
 * 3. [if] - Checks the conditions for adding the node's name to [.result].
 * 4. [not-exists] - Ensures the node's name is not already in [.result].
 * 5. [exists] - Confirms the node's name is present in [vocabulary].
 * 6. [unwrap] - Unwraps the children nodes of the current node.
 * 7. [add] - Adds the node's name to [.result].
 */
for-each:x:@hyper2lambda/*/**
   get-name:x:@.dp/#
   if
      and
         not-exists:x:@.result/*/={@get-name}
         exists:x:@vocabulary/*/={@get-name}
      .lambda
         unwrap:x:+/*/*
         add:x:@.result
            .
               .:x:@get-name
