
// The code defines a dynamic Hyperlambda slot named "magic.db.mysql.columns" that retrieves metadata about columns from a specified MySQL database table. It requires "database" and "table" as mandatory arguments. The slot connects to the MySQL database using the provided connection string or defaults to a generic connection. It executes a "describe" SQL statement to fetch column details and iterates over the result to construct a metadata object for each column, including attributes like name, type, nullable, primary key status, and whether the column is automatically generated. The metadata is then returned as a node set.
slots.create:magic.db.mysql.columns
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table
   .connection:[information_schema]
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   mysql.connect:x:@.connection
      strings.concat
         .:"describe "
         .:`
         get-value:x:@.arguments/*/table
         .:`
      mysql.select:x:@strings.concat
      for-each:x:@mysql.select/*
         unwrap:x:+/*/*
         .tmp
            ""
               name:x:@.dp/#/*/Field
               db:x:@.dp/#/*/Type
         if
            eq
               get-value:x:@.dp/#/*/Null
               .:NO
            .lambda
               add:x:@.tmp/*
                  .
                     nullable:bool:false
         else
            add:x:@.tmp/*
               .
                  nullable:bool:true
         if
            eq
               get-value:x:@.dp/#/*/Key
               .:PRI
            .lambda
               add:x:@.tmp/*
                  .
                     primary:bool:true
         else
            add:x:@.tmp/*
               .
                  primary:bool:false
         if
            or
               and
                  not
                     eq
                        get-value:x:@.dp/#/*/Default
                        .:
                  not
                     eq
                        get-value:x:@.dp/#/*/Default
                        .
               eq
                  get-value:x:@.dp/#/*/Extra
                  .:auto_increment
               eq
                  get-value:x:@.dp/#/*/Extra
                  .:DEFAULT_GENERATED
            .lambda
               add:x:@.tmp/*
                  .
                     automatic:bool:true
         else
            add:x:@.tmp/*
               .
                  automatic:bool:false
         .type
         if
            or
               eq
                  get-value:x:@.dp/#/*/Type
                  .:tinyint(1)
               eq
                  get-value:x:@.dp/#/*/Type
                  .:bool
               eq
                  get-value:x:@.dp/#/*/Type
                  .:boolean
            .lambda
               set-value:x:@.type
                  .:bool
         else
            strings.regex-replace:x:@.dp/#/*/Type
               .:"\\([0-9,]+\\)"
               .:
            strings.replace:x:@strings.regex-replace
               .:" unsigned"
               .:
            switch:x:@strings.replace
               case:date
               case:datetime
               case:timestamp
                  set-value:x:@.type
                     .:date
               case:float
               case:double
               case:double precision
               case:decimal
               case:dec
                  set-value:x:@.type
                     .:decimal
               case:bit
               case:tinyint
               case:bool
               case:boolean
               case:smallint
               case:mediumint
               case:integer
               case:bigint
               case:int
               case:int unsigned
                  set-value:x:@.type
                     .:long
               case:char
               case:varchar
               case:binary
               case:varbinary
               case:tinyblob
               case:tinytext
               case:text
               case:blob
               case:mediumtext
               case:mediumblob
               case:longtext
               case:longblob
               case:enum
               case:set
                  set-value:x:@.type
                     .:string
               case:tinyint
                  set-value:x:@.type
                     .:bool
               default
                  if
                     strings.starts-with:x:@strings.replace
                        .:enum
                     .lambda
                        set-value:x:@.type
                           .:string
                  else
                     set-value:x:@.type
                        .:string
         unwrap:x:+/*/*
         add:x:@.tmp/*
            .
               hl:x:@.type
         add:x:../*/mysql.connect/*/return-nodes
            get-nodes:x:@.tmp/*
      return-nodes
