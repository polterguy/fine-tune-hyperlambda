
// This Hyperlambda code iterates over a subset of sitemap URLs, retrieves and processes each sitemap, and updates a list of URLs. It uses [for-each] to iterate through sitemap nodes, [http.get] to fetch sitemap content, and [xml2lambda] to parse XML content. The code checks for valid XML content types, logs errors for unsuccessful requests, and handles URLs by checking their format and uniqueness before adding them to a list. It also signals other processes to load additional sitemaps if necessary, ensuring a maximum URL count is not exceeded.
for-each:x:@.arguments/*/sitemap/*/[0,25]
   strings.concat
      .:"Retrieving sitemap "
      get-value:x:@.dp/#
   unwrap:x:+/**
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:x:@strings.concat
         type:info
   sleep:100
   if
      lt
         get-count:x:@.urls/*
         .:int:10000
      .lambda
         .domain
         strings.split:x:@.dp/#
            .:/
         set-value:x:@.domain
            strings.concat
               get-value:x:@strings.split/0
               .://
               get-value:x:@strings.split/1
         add:x:./*/http.get
            get-nodes:x:@.arguments/*/headers
         http.get:x:@.dp/#
            timeout:60
         if
            and
               not
                  mte:x:@http.get
                     .:int:200
               not
                  lt:x:@http.get
                     .:int:300
            .lambda
               log.error:Sitemap invocation did not return success status
                  url:x:@.dp/#
                  status:x:@http.get
               throw:Could not retrieve sitemap
         if
            not
               or
                  strings.starts-with:x:@http.get/*/headers/*/Content-Type
                     .:application/xml
                  strings.starts-with:x:@http.get/*/headers/*/content-type
                     .:application/xml
                  strings.starts-with:x:@http.get/*/headers/*/Content-Type
                     .:text/xml
                  strings.starts-with:x:@http.get/*/headers/*/content-type
                     .:text/xml
            .lambda
               throw:Sitemap was not XML
         else
            set-value:x:@.has-sitemap
               .:bool:true
            strings.trim:x:@http.get/*/content
            xml2lambda:x:@strings.trim
            for-each:x:"@xml2lambda/*/urlset/*/url/*/loc/*/\\#text"
               if
                  lt
                     get-count:x:@.urls/*
                     .:int:10000
                  .lambda
                     .url
                     set-value:x:@.url
                        get-value:x:@.dp/#
                     if
                        and
                           not
                              strings.starts-with:x:@.dp/#
                                 .:"http://"
                           not
                              strings.starts-with:x:@.dp/#
                                 .:"https://"
                        .lambda
                           set-value:x:@.url
                              strings.concat
                                 get-value:x:@.domain
                                 get-value:x:@.dp/#
                     if
                        not-exists:x:@.urls/*/={@.url}
                        .lambda
                           unwrap:x:+/*/*
                           add:x:@.urls
                              .
                                 .:x:@.url
            for-each:x:"@xml2lambda/*/urlset/*/url/*/loc/*/\\#cdata-section"
               if
                  lt
                     get-count:x:@.urls/*
                     .:int:10000
                  .lambda
                     .url
                     set-value:x:@.url
                        get-value:x:@.dp/#
                     if
                        and
                           not
                              strings.starts-with:x:@.dp/#
                                 .:"http://"
                           not
                              strings.starts-with:x:@.dp/#
                                 .:"https://"
                        .lambda
                           set-value:x:@.url
                              strings.concat
                                 get-value:x:@.domain
                                 get-value:x:@.dp/#
                     if
                        not-exists:x:@.urls/*/={@.url}
                        .lambda
                           unwrap:x:+/*/*
                           add:x:@.urls
                              .
                                 .:x:@.url
            for-each:x:"@xml2lambda/*/sitemapindex/*/sitemap/*/[0,25]/loc/*/\\#cdata-section"
               if
                  lt
                     get-count:x:@.urls/*
                     .:int:10000
                  .lambda
                     add:x:./*/signal
                        get-nodes:x:@.arguments/*/headers
                     unwrap:x:+/**
                     signal:magic.ai.load-sitemap
                        max:int:10000
                        feedback-channel:x:@.arguments/*/feedback-channel
                        filter-on-url:x:@.arguments/*/filter-on-url
                        sitemap
                           .:x:@.dp/#
                     add:x:@.urls
                        get-nodes:x:@signal/*/urls/*
                     if
                        and
                           eq:x:@signal/*/has-sitemap
                              .:bool:false
                           eq
                              get-count:x:@.urls/*
                              .:int:0
                        .lambda
                           set-value:x:@.has-sitemap
                              .:bool:false
            for-each:x:"@xml2lambda/*/sitemapindex/*/sitemap/*/[0,25]/loc/*/\\#text"
               if
                  lt
                     get-count:x:@.urls/*
                     .:int:10000
                  .lambda
                     unwrap:x:+/**
                     signal:magic.ai.load-sitemap
                        max:int:10000
                        feedback-channel:x:@.arguments/*/feedback-channel
                        filter-on-url:x:@.arguments/*/filter-on-url
                        sitemap
                           .:x:@.dp/#
                     add:x:@.urls
                        get-nodes:x:@signal/*/urls/*
                     if
                        and
                           eq:x:@signal/*/has-sitemap
                              .:bool:false
                           eq
                              get-count:x:@.urls/*
                              .:int:0
                        .lambda
                           set-value:x:@.has-sitemap
                              .:bool:false
