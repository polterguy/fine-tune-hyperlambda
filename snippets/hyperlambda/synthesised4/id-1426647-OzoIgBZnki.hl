
/*
 * The Hyperlambda code is designed to evaluate a condition and perform actions based on the presence of specific nodes and their structures. It checks if a node's name is "execute" and processes a file, converting it to a Hyperlambda structure. It then evaluates the presence of "yield" or "return" nodes and their children to determine if candidate expressions should be created or if a warning should be issued. The code dynamically constructs expressions and adds them to a list of candidates if they don't already exist, marking them as complete or incomplete based on the complexity of the returned objects.
 * 
 * 1. [if] - Checks if the node's name is "execute".
 * 2. [eq] - Compares the node's name to "execute".
 * 3. [load-file] - Loads a file based on a filename node.
 * 4. [hyper2lambda] - Converts the loaded file to a Hyperlambda structure.
 * 5. [if] - Checks for the existence of "yield" or "return" nodes without children.
 * 6. [set-value] - Constructs an expression string.
 * 7. [strings.concat] - Concatenates parts of the expression string.
 * 8. [if] - Checks if the constructed expression already exists in candidates.
 * 9. [unwrap] - Evaluates expressions.
 * 10. [add] - Adds a new candidate expression if it doesn't exist.
 * 11. [else] - Handles cases where "yield" or "return" nodes have children.
 * 12. [for-each] - Iterates over "yield" or "return" nodes with children.
 * 13. [if] - Checks for the existence of children in the current node.
 * 14. [set-value] - Sets a warning message if complex objects are returned.
 * 15. [strings.concat] - Constructs an expression string for complex objects.
 * 16. [if] - Checks if the constructed expression for complex objects already exists.
 * 17. [unwrap] - Evaluates expressions for complex objects.
 * 18. [add] - Adds a new candidate expression for complex objects if it doesn't exist.
 */
if
   eq:x:@.node-name
      .:execute
   .lambda
      load-file:x:@.dp/#/*/filename
      hyper2lambda:x:@load-file
      if
         and
            exists:x:@hyper2lambda/**/[yield|return|return-nodes]
            not-exists:x:@hyper2lambda/**/[yield|return|return-nodes]/*
         .lambda
            .x
            set-value:x:@.x
               strings.concat
                  .:--/execute/=
                  get-value:x:@.dp/#/*/name
                  .:/*
            if
               not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
               .lambda
                  unwrap:x:+/*/*/*
                  add:x:../*/return/*/candidates
                     .
                        .
                           name:x:@.x
                           expression:x:@.x
                           complete:bool:false
      else
         for-each:x:@hyper2lambda/**/[yield|return|return-nodes]/*
            if
               exists:x:@.dp/#/*
               .lambda
                  set-value:x:@.warning
                     .:Warning, some of your actions, and/or arguments, are returning complex objects, and we cannot automatically create candidate expressions for these. You will have to manually edit some of your expressions if you want to reference these nodes in your actions.
            .x
            set-value:x:@.x
               strings.concat
                  .:--/execute/=
                  get-value:x:@.dp/@.dp/#/*/name
                  .:/*/
                  get-name:x:@.dp/#
            if
               not-exists:x:../*/return/*/candidates/*/*/expression/={@.x}
               .lambda
                  unwrap:x:+/*/*/*
                  add:x:../*/return/*/candidates
                     .
                        .
                           name:x:@.x
                           expression:x:@.x
                           complete:bool:true
