
/*
 * The provided Hyperlambda code snippet demonstrates a switch-case structure that performs different actions based on the name of a node. It uses the [switch] slot to evaluate the result of [get-name] and has two [case] slots for handling specific node names. If the node name is "li", it checks if the [.completion] node is not empty and then concatenates a newline and "- " to its value. If the node name is "p", it concatenates a newline to the [.completion] node's value. The code effectively modifies the [.completion] node based on the node name being processed.
 * 
 * 1. [switch] - Evaluates the result of [get-name] to determine which case to execute.
 * 2. [case:li] - Handles the case where the node name is "li".
 * 3. [if] - Checks if the [.completion] node is not empty.
 * 4. [neq] - Compares the value of [.completion] to an empty string.
 * 5. [.lambda] - Contains the actions to execute if the [if] condition is true.
 * 6. [set-value] - Sets the value of the [.completion] node.
 * 7. [strings.concat] - Concatenates a newline, "- ", and the current value of [.completion].
 * 8. [case:p] - Handles the case where the node name is "p".
 * 9. [set-value] - Sets the value of the [.completion] node.
 * 10. [strings.concat] - Concatenates a newline and the current value of [.completion].
 */
switch:x:@get-name
   case:li
      if
         neq:x:@.completion
            .:
         .lambda
            set-value:x:@.completion
               strings.concat
                  .:@"
"
                  .:"- "
                  get-value:x:@.completion
   case:p
      set-value:x:@.completion
         strings.concat
            .:@"

"
            get-value:x:@.completion
