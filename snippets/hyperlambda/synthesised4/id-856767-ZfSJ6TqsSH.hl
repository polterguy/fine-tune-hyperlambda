
/*
 * The code checks if the next sibling of the [tail] node is not null, then concatenates its value with a comma to the [value] node. It trims trailing commas from [value], splits it by commas, and if the resulting list has 20 or more items, it removes items from index 15 to 19, then joins the remaining items back into a comma-separated string. 
 * 
 * 1. [if] - Checks if the next sibling of [tail] is not null.
 * 2. [set-value] - Concatenates the current [value] with the next sibling of [tail] and a comma.
 * 3. [set-value] - Trims trailing commas from [value].
 * 4. [strings.split] - Splits [value] by commas into a list.
 * 5. [if] - Checks if the list has 20 or more items.
 * 6. [remove-nodes] - Removes items from index 15 to 19 in the list.
 * 7. [set-value] - Joins the remaining items back into a comma-separated string.
 */
if
   not-null:x:@.tail/+
   .lambda
      set-value:x:@.value
         strings.concat
            get-value:x:@.value
            .:,
            get-value:x:@.tail/+
      set-value:x:@.value
         strings.trim:x:@.value
            .:,
      strings.split:x:@.value
         .:,
      if
         mte
            get-count:x:@strings.split/*
            .:int:20
         .lambda
            remove-nodes:x:@strings.split/*/[15,20]
            set-value:x:@.value
               strings.join:x:@strings.split/*
                  .:,
