
/*
 * // This Hyperlambda code checks if the value of [.completion] is not equal to an empty string. If true, it further checks if a completion node exists within the first snippet. If such a node exists, it appends a newline to its value. If not, it adds a new completion node with a newline as its value.
 * // 1. [case] - Starts a conditional block.
 * // 2. [if] - Checks if [.completion] is not an empty string.
 * // 3. [neq] - Compares [.completion] to an empty string.
 * // 4. [.lambda] - Contains the code to execute if the condition is true.
 * // 5. [if] - Checks if a completion node exists within the first snippet.
 * // 6. [exists] - Checks for the existence of a node.
 * // 7. [.lambda] - Contains the code to execute if the condition is true.
 * // 8. [set-value] - Sets the value of the completion node.
 * // 9. [strings.concat] - Concatenates the current value with a newline.
 * // 10. [get-value] - Retrieves the current value of the completion node.
 * // 11. [else] - Executes if no completion node exists.
 * // 12. [unwrap] - Evaluates expressions in the sibling node.
 * // 13. [add] - Adds a new completion node with a newline value.
 */
case:ol
   if
      neq:x:@.completion
         .:
      .lambda
         if
            exists:x:@.snippets/0/-/*/completion
            .lambda
               set-value:x:@.snippets/0/-/*/completion
                  strings.concat
                     get-value:x:@.snippets/0/-/*/completion
                     .:@"
"
         else
            unwrap:x:+/*/*
            add:x:@.snippets/0/-
               .
                  completion:@"
"
