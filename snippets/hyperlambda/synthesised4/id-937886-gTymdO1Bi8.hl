
// This Hyperlambda code calculates the Fibonacci sequence until a value less than 100 is reached. It uses a [while] loop to iterate as long as the value of [b] is less than 100. Within the loop, [math.add] calculates the next Fibonacci number, which is stored in [next.int]. If [b] is still less than 100, the new Fibonacci number is added to [fibonacci_return]. The values of [a] and [b] are then updated to the current and next Fibonacci numbers, respectively. The loop continues until the condition is no longer met.
while
   lt
      get-value:x:@.b
      .:int:100
   .lambda
      .next.int
      set-value:x:@.next.int
         math.add
            get-value:x:@.a
            get-value:x:@.b
      if
         lt
            get-value:x:@.b
            .:int:100
         .lambda
            unwrap:x:+/*/*
            add:x:../*/.fibonacci_return
               .
                  .:x:@.next.int
      set-value:x:@.a
         get-value:x:@.b
      set-value:x:@.b
         get-value:x:@.next.int
