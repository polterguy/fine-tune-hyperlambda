
/*
 * This Hyperlambda code is a complex logic for handling HTTP POST requests, particularly focusing on processing and signaling based on certain conditions. It involves checking for specific message patterns, handling function invocations, and signaling sessions with results or errors. The code includes multiple conditional checks, string manipulations, and session signaling to ensure proper handling of AI function invocations and responses. It also manages iterations and invocation limits to prevent excessive function calls. Below is a detailed breakdown of the slots used:
 * 
 * 1. [add] - Adds nodes to a specified location in the graph.
 * 2. [.] - Represents a data node used for structuring data.
 * 3. [.sse] - A data node for session-related information.
 * 4. [if] - Conditional branching to execute code based on conditions.
 * 5. [and] - Logical AND operation for multiple conditions.
 * 6. [exists] - Checks if a node exists.
 * 7. [not-null] - Ensures a node is not null.
 * 8. [strings.starts-with] - Checks if a string starts with a specified prefix.
 * 9. [strings.substring] - Extracts a substring from a string.
 * 10. [strings.trim] - Trims whitespace from a string.
 * 11. [neq] - Checks if two values are not equal.
 * 12. [eq] - Checks if two values are equal.
 * 13. [math.increment] - Increments an integer value.
 * 14. [strings.contains] - Checks if a string contains a specified substring.
 * 15. [strings.split] - Splits a string into parts based on a delimiter.
 * 16. [for-each] - Iterates over a set of nodes.
 * 17. [try] - Attempts to execute code and catches exceptions.
 * 18. [lte] - Checks if a value is less than or equal to another.
 * 19. [log.error] - Logs an error message.
 * 20. [sockets.signal] - Sends a signal to a session with arguments.
 * 21. [execute] - Executes a specified slot or function.
 * 22. [lambda2json] - Converts a lambda object to JSON.
 * 23. [mt] - Checks if a value is more than another.
 * 24. [openai.tokenize] - Tokenizes a string for processing.
 * 25. [get-value] - Retrieves the value of a node.
 * 26. [config.get] - Retrieves a configuration value.
 * 27. [unwrap] - Evaluates and processes expressions.
 * 28. [set-value] - Sets the value of a node.
 * 29. [json2lambda] - Converts JSON to a lambda object.
 * 30. [else-if] - Provides an alternative condition in branching.
 * 31. [throw] - Throws an exception with a message.
 * 32. [.catch] - Catches exceptions and handles them.
 * 33. [return] - Returns a value or node set from a function.
 */
add:x:../*/.invoke/*/while/*/.lambda/*/http.post
   .
      .sse
         .session:x:@.arguments/*/session
         .extra:x:@.arguments/*/extra
         .type:x:@.arguments/*/type
         .user-id:x:@.arguments/*/user_id
         if
            and
               exists:x:@.arguments/*/message
               not-null:x:@.arguments/*/message
               strings.starts-with:x:@.arguments/*/message
                  .:"data:"
            .lambda
               strings.substring:x:@.arguments/*/message
                  .:int:5
               strings.trim:x:@strings.substring
               if
                  neq:x:@strings.trim
                     .:
                  .lambda
                     if
                        eq:x:@strings.trim
                           .:[DONE]
                        .lambda
                           if
                              neq:x:@.no-invocation
                                 .:int:0
                              .lambda
                                 math.increment:x:@.no-invocation
                           if
                              and
                                 strings.contains:x:@.result
                                    .:___
                                 strings.contains:x:@.result
                                    .:FUNCTION_INVOCATION[
                              .lambda
                                 if
                                    eq:x:@.no-invocation
                                       .:int:0
                                    .lambda
                                       math.increment:x:@.no-invocation
                                 strings.split:x:@.result
                                    .:___
                                 for-each:x:@strings.split/*
                                    if
                                       strings.contains:x:@.dp/#
                                          .:FUNCTION_INVOCATION[/
                                       .lambda
                                          try
                                             if
                                                lte:x:@.iterations
                                                   .:int:1
                                                .lambda
                                                   log.error:Too many function invocations
                                                   sockets.signal:x:@.session
                                                      args
                                                         function_error:Too many function invocations
                                                   sockets.signal:x:@.session
                                                      args
                                                         function_waiting:bool:false
                                                   sockets.signal:x:@.session
                                                      args
                                                         error:bool:true
                                                         status:int:500
                                                         message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                                                   sockets.signal:x:@.session
                                                      args
                                                         finished:bool:true
                                             else
                                                execute:magic.ai.functions.invoke
                                                   type:x:@.type
                                                   session:x:@.session
                                                   user-id:x:@.user-id
                                                   invocation:x:@.dp/#
                                                   extra:x:@.extra
                                                lambda2json:x:@execute/*/result/*
                                                   format:true
                                                if
                                                   mt
                                                      openai.tokenize:x:@lambda2json
                                                      get-value:x:@.arguments/@.arguments/*/max_context_tokens
                                                   .lambda
                                                      throw:Result too large, try to limit your result
                                                         status:int:400
                                                         public:bool:true
                                                config.get:"magic:chat:functions:success-message"
                                                   .:Success!
                                                unwrap:x:+/*/*
                                                sockets.signal:x:@.session
                                                   args
                                                      function_result:x:@config.get
                                                      invocation:x:@execute/*/json
                                                      file:x:@execute/*/workflow
                                                if
                                                   exists:x:@execute/*/result/*
                                                   .lambda
                                                      set-value:x:@.new-prompt
                                                         strings.concat
                                                            get-value:x:@.new-prompt
                                                            .:"Response from '"
                                                            get-value:x:@execute/*/workflow
                                                            .:@"' was:
```json
"
                                                            get-value:x:@lambda2json
                                                            .:@"
"
                                                            .:```
                                                            .:@"
"
                                                            .:@"
"
                                                      set-value:x:@.function-result
                                                         strings.concat
                                                            get-value:x:@.function-result
                                                            get-value:x:@lambda2json
                                                            .:"\n"
                                                else
                                                   set-value:x:@.new-prompt
                                                      strings.concat
                                                         get-value:x:@.new-prompt
                                                         .:"Invocation of '"
                                                         get-value:x:@execute/*/workflow
                                                         .:"' was a success."
                                                         .:@"
"
                                                         .:@"
"
                                          .catch
                                             log.error:Could not execute AI function
                                                message:x:@.arguments/*/message
                                             unwrap:x:+/*/*
                                             sockets.signal:x:@.session
                                                args
                                                   function_error:x:@.arguments/*/message
                                             set-value:x:@.new-prompt
                                                strings.concat
                                                   get-value:x:@.new-prompt
                                                   .:"Invocation failed, exception message was: '"
                                                   get-value:x:@.arguments/*/message
                                                   .:"'"
                                                   .:@"
"
                                                   .:@"
"
                                 set-value:x:@.new-prompt
                                    strings.trim:x:@.new-prompt
                           else
                              sockets.signal:x:@.session
                                 args
                                    finished:bool:true
                              set-value:x:@.iterations
                                 .:int:0
                     else
                        json2lambda:x:@strings.trim
                        if
                           and
                              exists:x:@json2lambda/*/choices/0/*/finish_reason
                              not-null:x:@json2lambda/*/choices/0/*/finish_reason
                           .lambda
                              set-value:x:@.finish_reason
                                 get-value:x:@json2lambda/*/choices/0/*/finish_reason
                              unwrap:x:+/*/*
                              sockets.signal:x:@.session
                                 args
                                    finish_reason:x:@.finish_reason
                        if
                           and
                              not-null:x:@json2lambda/*/choices/0/*/delta/*/content
                              neq:x:@json2lambda/*/choices/0/*/delta/*/content
                                 .:
                           .lambda
                              set-value:x:@.result
                                 strings.concat
                                    get-value:x:@.result
                                    get-value:x:@json2lambda/*/choices/0/*/delta/*/content
                              if
                                 not
                                    strings.contains:x:@.result
                                       .:___
                                 .lambda
                                    unwrap:x:+/*/*
                                    sockets.signal:x:@.session
                                       args
                                          message:x:@json2lambda/*/choices/0/*/delta/*/content
                              else-if
                                 and
                                    strings.contains:x:@.result
                                       .:FUNCTION_INVOCATION[
                                    neq:x:@.has-sent-waiting
                                       .:bool:true
                                 .lambda
                                    sockets.signal:x:@.session
                                       args
                                          function_waiting:bool:true
                                    set-value:x:@.has-sent-waiting
                                       .:bool:true
