
/*
 * This Hyperlambda code iterates over each node in the [hyper2lambda] structure and checks if the node's name exists in a [vocabulary] list. If the name exists and is not already in [result], it adds the name with a count of 1. If the name already exists in [result], it increments the count. The [for-each] slot iterates nodes, [get-name] retrieves node names, [exists] checks for existence, [set-name] and [add] manage node creation, and [math.add] increments counts.
 * 
 * 1. [for-each] - Iterates over each node in the [hyper2lambda] structure.
 * 2. [get-name] - Retrieves the name of the current node.
 * 3. [if] - Checks if the node's name exists in the [vocabulary].
 * 4. [exists] - Determines if the node's name is in the [vocabulary].
 * 5. [not-exists] - Checks if the node's name is not already in [result].
 * 6. [set-name] - Sets the name of a new node in [result].
 * 7. [add] - Adds a new node with a count of 1 to [result].
 * 8. [set-value] - Updates the count of an existing node in [result].
 * 9. [math.add] - Increments the count of the node in [result].
 */
for-each:x:@hyper2lambda/*/**
   get-name:x:@.dp/#
   if
      exists:x:@vocabulary/*/={@get-name}
      .lambda
         if
            not-exists:x:@.result/*/{@get-name}
            .lambda
               set-name:x:+/*/*
                  get-value:x:@get-name
               add:x:@.result
                  .
                     .:int:1
         else
            set-value:x:@.result/*/{@get-name}
               math.add
                  get-value:x:@.result/*/{@get-name}
                  .:int:1
