
/*
 * This Hyperlambda code connects to a SQLite database and prepares a SQL query to read data from a "tasks" table, joining with a "users" table. It constructs a distinct function for a specified column, removes certain nodes, and adds limit, offset, order, and direction nodes to the query. It then executes the query and returns the results. The code demonstrates dynamic SQL query construction and execution using Hyperlambda slots.
 * 
 * 1. [data.connect] - Connects to a SQLite database.
 * 2. [database-type] - Specifies the database type as SQLite.
 * 3. [set-name] - Constructs a distinct function for a specified column.
 * 4. [remove-nodes] - Removes nodes related to distinct column, order, direction, limit, and offset.
 * 5. [add] - Adds limit, offset, order, and direction nodes to the query.
 * 6. [data.read] - Executes the SQL query on the "tasks" table.
 * 7. [join] - Joins the "tasks" table with the "users" table using a left join.
 * 8. [columns] - Specifies the columns to select, including the distinct function.
 * 9. [where] - Initializes an empty where clause.
 * 10. [return-nodes] - Returns the results of the executed query.
 */
data.connect:[generic|crm]
   database-type:sqlite
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*
   data.read
      database-type:sqlite
      table:tasks
         join:users
            as:user_id
            type:left
            on
               and
                  tasks.user_id:user_id.user_id
      columns
         distinct_functor
            as:.
      where
         and
   return-nodes:x:@data.read/*/*
