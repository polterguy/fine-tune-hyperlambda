
/*
 * This Hyperlambda code snippet reads data from an SQLite database, specifically from the "Employees" table. It performs a left join on the same table, aliasing it as "ReportsTo", to match employees with their managers based on the "ReportsTo" and "EmployeeID" columns. The code selects distinct values using a "distinct_functor" and aliases the result as "count". The [where] clause is prepared for additional conditions to filter the results. 
 * 
 * 1. [data.read] - Initiates a read operation from the specified database.
 * 2. [database-type] - Specifies the type of database, in this case, SQLite.
 * 3. [table] - Indicates the main table to read from, here "Employees".
 * 4. [join] - Performs a join operation on the same table, aliased as "ReportsTo".
 * 5. [as] - Aliases the joined table as "ReportsTo".
 * 6. [type] - Specifies the type of join, which is a left join.
 * 7. [on] - Defines the condition for the join operation.
 * 8. [and] - Combines multiple conditions for the join.
 * 9. [Employees.ReportsTo:ReportsTo.EmployeeID] - The condition matching employees to their managers.
 * 10. [columns] - Specifies the columns to be selected.
 * 11. [distinct_functor] - A placeholder for a distinct selection operation.
 * 12. [as] - Aliases the result of the distinct operation as "count".
 * 13. [where] - Prepares for additional filtering conditions.
 */
data.read
   database-type:sqlite
   table:Employees
      join:Employees
         as:ReportsTo
         type:left
         on
            and
               Employees.ReportsTo:ReportsTo.EmployeeID
   columns
      distinct_functor
         as:count
   where
      and
