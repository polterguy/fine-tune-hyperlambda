
/*
 * 1. `+` - This iterator retrieves the elder sibling of the current node. It moves to the next node below the current node in the Hyperlambda structure. This is useful when you want to access the next node in a sequence, often used when iterating through nodes or when you need to perform operations on consecutive nodes.
 * 
 * 2. `*` - This iterator retrieves all children nodes of its previous result set. After moving to the elder sibling with the `+` iterator, the `*` iterator will access all the children of that sibling node. This is useful for operations that need to consider all child nodes of a particular node, such as aggregating data or applying transformations to each child.
 * 
 * 3. `*` - This second `*` iterator retrieves all children nodes of the nodes returned by the previous `*` iterator. This means it will access all grandchildren of the elder sibling node. This is useful for deep traversal operations where you need to access nodes at multiple levels of hierarchy under a specific node.
 */

.:x:+/*/*