
// This Hyperlambda code processes multipart/form-data uploads, handling various file types such as zip, csv, xml, json, yaml, pdf, md, and txt. It verifies authentication and mandatory arguments, processes files based on their type, and optionally interacts with OpenAI's API for text processing. The code ensures that the uploaded file contains at least prompt and completion fields, and it imports processed snippets into the system.
hyper2lambda
   ```
   .arguments
      file:*
      type:string
      prompt:string
      completion:string
      massage:string
      massagePrompt:string
      preservePages:bool
      overwrite:bool
      forceAsText:bool
   .accept:multipart/form-data
   auth.ticket.verify:root
   validators.mandatory:x:@.arguments/*/file
   validators.mandatory:x:@.arguments/*/file/*/name
   validators.mandatory:x:@.arguments/*/file/*/stream
   validators.default:x:@.arguments
      preservePages:bool:false
      overwrite:bool:false
   if
      not-exists:x:@.arguments/*/prompt
      .lambda
         add:x:@.arguments
            .
               prompt:prompt
   if
      not-exists:x:@.arguments/*/completion
      .lambda
         add:x:@.arguments
            .
               completion:completion
   .file-data
   strings.split:x:@.arguments/*/file/*/name
      .:.
   strings.to-lower:x:@strings.split/0/-
   .text:bool:false
   switch:x:@strings.to-lower
      case:zip
         add:x:./*/signal
            get-nodes:x:@.arguments/*
         signal:magic.ai.import-zip-file
         return:x:-/*
      case:csv
         if
            eq:x:@.arguments/*/forceAsText
               .:bool:true
            .lambda
               set-value:x:@.text
                  .:bool:true
         else
            io.stream.read:x:@.arguments/*/file/*/stream
            add:x:@.file-data
               csv2lambda:x:@io.stream.read
      case:xml
         io.stream.read:x:@.arguments/*/file/*/stream
         xml2lambda:x:@io.stream.read
         for-each:x:@xml2lambda/*/*
            unwrap:x:./*/add/*/*/*
            set-name:x:./*/add/*/*/*/prompt
               get-value:x:@.arguments/*/prompt
            set-name:x:./*/add/*/*/*/completion
               get-value:x:@.arguments/*/completion
            add:x:@.file-data
               .
                  .
                     prompt:x:"@.dp/#/*/\"{@.arguments/*/prompt}\"/*/\\#text"
                     completion:x:"@.dp/#/*/\"{@.arguments/*/completion}\"/*/\\#text"
      case:json
         io.stream.read:x:@.arguments/*/file/*/stream
         add:x:@.file-data
            json2lambda:x:@io.stream.read
      case:yaml
         io.stream.read:x:@.arguments/*/file/*/stream
         add:x:@.file-data
            yaml2lambda:x:@io.stream.read
      case:pdf
         .filename
         set-value:x:@.filename
            get-value:x:@.arguments/*/file/*/name
         .filepath
         set-value:x:@.filepath
            strings.concat
               .:/etc/system/openai/pdf/
               get-value:x:@.filename
         if
            and
               eq:x:@.arguments/*/overwrite
                  .:bool:false
               io.file.exists:x:@.filepath
            .lambda
               throw:File already exists
                  status:int:400
                  public:bool:true
         io.stream.save-file:x:@.filepath
            get-value:x:@.arguments/*/file/*/stream
         .tmp-snippets
         pdf2text:x:@.filepath
            preserve-pages:x:@.arguments/*/preservePages
         if
            eq:x:@.arguments/*/preservePages
               .:bool:true
            .lambda
               .no:int:1
               for-each:x:@pdf2text/*
                  .prompt
                  set-value:x:@.prompt
                     strings.concat
                        get-value:x:@.arguments/*/file/*/name
                        .:" - Page "
                        get-value:x:@.no
                  unwrap:x:+/*/*/*
                  add:x:@.tmp-snippets
                     .
                        .
                           prompt:x:@.prompt
                           completion:x:@.dp/#
                  math.increment:x:@.no
         else
            unwrap:x:+/*
            signal:magic.ai.massage
               content:x:@pdf2text
               massage:x:@.arguments/*/massage
               prompt:x:@.arguments/*/file/*/name
               type:x:@.arguments/*/type
            add:x:@.tmp-snippets
               get-nodes:x:@signal/*
         .uri
         set-value:x:@.uri
            strings.concat
               request.scheme
               .:"://"
               request.host
               .:/magic/system/openai/download-pdf?file=
               strings.url-encode:x:@.filename
         if
            and
               not-null:x:@.arguments/*/massagePrompt
               neq:x:@.arguments/*/massagePrompt
                  .:
            .lambda
               .token
               set-value:x:@.token
                  strings.concat
                     .:"Bearer "
                     config.get:"magic:openai:key"
               for-each:x:@.tmp-snippets/*
                  http.post:"https://api.openai.com/v1/chat/completions"
                     convert:bool:true
                     headers
                        Authorization:x:@.token
                        Content-Type:application/json
                        Accept:text/event-stream
                     payload
                        model:gpt-3.5-turbo
                        max_tokens:int:1000
                        temperature:decimal:0.3
                        messages
                           .
                              role:system
                              content:x:@.arguments/*/massagePrompt
                           .
                              role:user
                              content:x:@.dp/#/*/completion
                  if
                     not
                        and
                           mte:x:@http.post
                              .:int:200
                           lt:x:@http.post
                              .:int:300
                     .lambda
                        lambda2hyper:x:@http.post
                        log.error:Something went wrong while invoking OpenAI
                           message:x:@http.post/*/content/*/error/*/message
                           status:x:@http.post
                           error:x:@lambda2hyper
                  else
                     set-value:x:@.dp/#/*/prompt
                        get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
         unwrap:x:+/*/*
         add:x:@.tmp-snippets/*
            .
               uri:x:@.uri
               filename:x:@.filepath
         add:x:@.file-data
            get-nodes:x:@.tmp-snippets/*
      case:md
      case:txt
         set-value:x:@.text
            .:bool:true
   if
      eq:x:@.text
         .:bool:true
      .lambda
         .filename
         set-value:x:@.filename
            get-value:x:@.arguments/*/file/*/name
         .filepath
         set-value:x:@.filepath
            strings.concat
               .:/etc/system/openai/pdf/
               get-value:x:@.filename
         io.stream.save-file:x:@.filepath
            get-value:x:@.arguments/*/file/*/stream
         io.file.load:x:@.filepath
         .uri
         set-value:x:@.uri
            strings.concat
               request.scheme
               .:"://"
               request.host
               .:/magic/system/openai/download-txt?file=
               strings.url-encode:x:@.filename
         unwrap:x:+/*
         signal:magic.ai.massage
            content:x:@io.file.load
            prompt:x:@.arguments/*/file/*/name
            type:x:@.arguments/*/type
         .uri
         set-value:x:@.uri
            strings.concat
               request.scheme
               .:"://"
               request.host
               .:/magic/system/openai/download-txt?file=
               strings.url-encode:x:@.filename
         if
            and
               not-null:x:@.arguments/*/massagePrompt
               neq:x:@.arguments/*/massagePrompt
                  .:
            .lambda
               .token
               set-value:x:@.token
                  strings.concat
                     .:"Bearer "
                     config.get:"magic:openai:key"
               for-each:x:@signal/*
                  http.post:"https://api.openai.com/v1/chat/completions"
                     convert:bool:true
                     headers
                        Authorization:x:@.token
                        Content-Type:application/json
                        Accept:text/event-stream
                     payload
                        model:gpt-3.5-turbo
                        max_tokens:int:1000
                        temperature:decimal:0.3
                        messages
                           .
                              role:system
                              content:x:@.arguments/*/massagePrompt
                           .
                              role:user
                              content:x:@.dp/#/*/completion
                  if
                     not
                        and
                           mte:x:@http.post
                              .:int:200
                           lt:x:@http.post
                              .:int:300
                     .lambda
                        lambda2hyper:x:@http.post
                        log.error:Something went wrong while invoking OpenAI
                           message:x:@http.post/*/content/*/error/*/message
                           status:x:@http.post
                           error:x:@lambda2hyper
                  else
                     set-value:x:@.dp/#/*/prompt
                        get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
         unwrap:x:+/*/*
         add:x:@signal/*
            .
               uri:x:@.uri
               filename:x:@.filepath
         add:x:@.file-data
            get-nodes:x:@signal/*
   if
      or
         not-exists:x:"@.file-data/0/*/\"{@.arguments/*/prompt}\""
         not-exists:x:"@.file-data/0/*/\"{@.arguments/*/completion}\""
      .lambda
         response.status.set:400
         return
            message:Your file needs to have at the very least prompt and completion fields, or you need to correctly apply the right fields to use as substitutes
   for-each:x:@.file-data/*
      set-name:x:"@.dp/#/*/\"{@.arguments/*/prompt}\""
         .:prompt
      set-name:x:"@.dp/#/*/\"{@.arguments/*/completion}\""
         .:completion
   add:x:+/+
      get-nodes:x:@.arguments/*/type
   add:x:+/*/snippets
      get-nodes:x:@.file-data/*
   signal:magic.ai.import-snippets
      snippets
   get-count:x:@.file-data/*
   unwrap:x:+/*
   return
      result:success
      count:x:@get-count
