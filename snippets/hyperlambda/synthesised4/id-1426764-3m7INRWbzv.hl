
/*
 * This Hyperlambda code processes the results of a MySQL `SELECT` query to extract and transform metadata about each field in the result set. It iterates over each field, evaluates its properties such as nullability, primary key status, and data type, and constructs a temporary node structure with this metadata. The code uses conditional logic to determine if a field is nullable, a primary key, or has automatic properties like auto-increment. It also maps MySQL data types to Hyperlambda types, handling various cases and default scenarios. Finally, it adds the processed metadata to a temporary node and appends it to the result nodes of a MySQL connection.
 * 
 * 1. [for-each] - Iterates over each field in the MySQL `SELECT` query result.
 * 2. [unwrap] - Evaluates expressions to process the field's metadata.
 * 3. [.tmp] - Temporary node to store field metadata.
 * 4. [if] - Conditional logic to determine field properties.
 * 5. [eq] - Checks for equality in field properties.
 * 6. [add] - Adds metadata to the temporary node.
 * 7. [or] - Logical OR for combining conditions.
 * 8. [and] - Logical AND for combining conditions.
 * 9. [not] - Logical NOT to invert conditions.
 * 10. [strings.regex-replace] - Removes numeric size and unsigned from data type.
 * 11. [strings.replace] - Replaces parts of the string.
 * 12. [switch] - Maps MySQL data types to Hyperlambda types.
 * 13. [case] - Handles specific data type cases.
 * 14. [default] - Default case for type mapping.
 * 15. [strings.starts-with] - Checks if a string starts with a specific prefix.
 * 16. [add] - Adds the final type to the temporary node.
 * 17. [add] - Appends the processed metadata to the result nodes.
 */
for-each:x:@mysql.select/*
   unwrap:x:+/*/*
   .tmp
      ""
         name:x:@.dp/#/*/Field
         db:x:@.dp/#/*/Type
   if
      eq
         get-value:x:@.dp/#/*/Null
         .:NO
      .lambda
         add:x:@.tmp/*
            .
               nullable:bool:false
   else
      add:x:@.tmp/*
         .
            nullable:bool:true
   if
      eq
         get-value:x:@.dp/#/*/Key
         .:PRI
      .lambda
         add:x:@.tmp/*
            .
               primary:bool:true
   else
      add:x:@.tmp/*
         .
            primary:bool:false
   if
      or
         and
            not
               eq
                  get-value:x:@.dp/#/*/Default
                  .:
            not
               eq
                  get-value:x:@.dp/#/*/Default
                  .
         eq
            get-value:x:@.dp/#/*/Extra
            .:auto_increment
         eq
            get-value:x:@.dp/#/*/Extra
            .:DEFAULT_GENERATED
      .lambda
         add:x:@.tmp/*
            .
               automatic:bool:true
   else
      add:x:@.tmp/*
         .
            automatic:bool:false
   .type
   if
      or
         eq
            get-value:x:@.dp/#/*/Type
            .:tinyint(1)
         eq
            get-value:x:@.dp/#/*/Type
            .:bool
         eq
            get-value:x:@.dp/#/*/Type
            .:boolean
      .lambda
         set-value:x:@.type
            .:bool
   else
      strings.regex-replace:x:@.dp/#/*/Type
         .:"\\([0-9,]+\\)"
         .:
      strings.replace:x:@strings.regex-replace
         .:" unsigned"
         .:
      switch:x:@strings.replace
         case:date
         case:datetime
         case:timestamp
            set-value:x:@.type
               .:date
         case:float
         case:double
         case:double precision
         case:decimal
         case:dec
            set-value:x:@.type
               .:decimal
         case:bit
         case:tinyint
         case:bool
         case:boolean
         case:smallint
         case:mediumint
         case:integer
         case:bigint
         case:int
         case:int unsigned
            set-value:x:@.type
               .:long
         case:char
         case:varchar
         case:binary
         case:varbinary
         case:tinyblob
         case:tinytext
         case:text
         case:blob
         case:mediumtext
         case:mediumblob
         case:longtext
         case:longblob
         case:enum
         case:set
            set-value:x:@.type
               .:string
         case:tinyint
            set-value:x:@.type
               .:bool
         default
            if
               strings.starts-with:x:@strings.replace
                  .:enum
               .lambda
                  set-value:x:@.type
                     .:string
            else
               set-value:x:@.type
                  .:string
   unwrap:x:+/*/*
   add:x:@.tmp/*
      .
         hl:x:@.type
   add:x:../*/mysql.connect/*/return-nodes
      get-nodes:x:@.tmp/*
