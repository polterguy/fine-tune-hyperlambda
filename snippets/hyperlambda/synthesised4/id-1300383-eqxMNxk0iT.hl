
/*
 * The Hyperlambda code provided is designed to perform a SQL query on an SQLite database, specifically targeting the "Employees" table. It utilizes a left join to self-join the "Employees" table with itself, using an alias "ReportsTo" for the joined table. This is done to potentially retrieve hierarchical data, such as an employee's manager. The query counts the number of records that meet the specified conditions, although no specific conditions are detailed in the [where] clause. The result is limited to a single record due to the [limit] slot. Finally, the [return-nodes] slot is used to return the result of the query execution. 
 * 
 * 1. [data.read] - Initiates a SQL read operation on the specified database.
 * 2. [database-type] - Specifies the type of database being used, which is SQLite in this case.
 * 3. [table] - Indicates the primary table to be queried, here it is "Employees".
 * 4. [join] - Performs a left join on the "Employees" table with itself, using "ReportsTo" as an alias.
 * 5. [type] - Specifies the type of join, which is "left" in this scenario.
 * 6. [on] - Defines the condition for the join, matching "Employees.ReportsTo" with "ReportsTo.EmployeeID".
 * 7. [columns] - Specifies the columns to be retrieved, in this case, a count of records.
 * 8. [where] - Placeholder for conditions to filter the results, currently unspecified.
 * 9. [limit] - Limits the result set to one record.
 * 10. [return-nodes] - Returns the nodes resulting from the SQL query execution.
 */
data.read
   database-type:sqlite
   table:Employees
      join:Employees
         as:ReportsTo
         type:left
         on
            and
               Employees.ReportsTo:ReportsTo.EmployeeID
   columns
      count(*)
         as:count
   where
      and
   limit:long:1
return-nodes:x:@data.read/*/*
