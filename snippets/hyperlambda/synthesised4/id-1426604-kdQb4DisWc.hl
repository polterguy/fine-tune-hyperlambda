
/*
 * /*
 *  * This Hyperlambda code snippet demonstrates the use of a [switch] statement to handle different HTTP verbs (post, put, patch).
 *  * It performs specific operations based on the verb found in the [.dp] node. If the verb is "post", "put", or "patch",
 *  * it unravels the expressions and inserts nodes after the [operationId] node in the [buffer] node.
 *  * The inserted nodes include [consumes] and [produces] nodes, where [consumes] takes its value from the [.dp] node,
 *  * and [produces] is set to "application/json".
 *  *
 *  * 1. [switch] - Evaluates the verb found in the [.dp] node.
 *  * 2. [case] - Matches the verb to "post", "put", or "patch".
 *  * 3. [unwrap] - Unwraps expressions in the specified node path.
 *  * 4. [insert-after] - Inserts nodes after the [operationId] node in the [buffer] node.
 *  * 5. [consumes] - Takes its value from the [.dp] node.
 *  * 6. [produces] - Sets its value to "application/json".
 *  */
 */
switch:x:@.dp/#/*/verb
   case:post
   case:put
   case:patch
      unwrap:x:+/*/*/*
      insert-after:x:@.buffer/*/*/*/operationId
         .
            consumes
               .:x:@.dp/#/*/consumes
            produces
               .:application/json
