
// This Hyperlambda code snippet demonstrates how to perform a SQL query using the [data.read] slot, targeting a SQLite database. The code specifies a query on the "Products" table, incorporating left joins with the "Categories" and "Suppliers" tables. The joins are defined using the [join] slot, with each join specifying a type of "left" and an [on] condition that matches the relevant IDs between the tables. The [columns] slot is used to select specific columns, applying an aggregate function and aliasing the result as "result". The [where] slot is included, although it currently has no conditions specified, allowing for future filtering criteria. The [group] slot groups the results by a specified column, "group_column", enabling aggregation of data. Finally, the [return-nodes] slot is used to return all nodes resulting from the [data.read] operation. This setup is useful for executing complex SQL queries with joins, aggregation, and grouping in a Hyperlambda context.
data.read
   database-type:sqlite
   table:Products
      join:Categories
         as:ProductID
         type:left
         on
            and
               Products.ProductID:ProductID.CategoryID
      join:Suppliers
         as:SupplierID
         type:left
         on
            and
               Products.SupplierID:SupplierID.SupplierID
   columns
      aggregate_functor
         as:result
   where
      and
   group
      group_column
return-nodes:x:@data.read/*
