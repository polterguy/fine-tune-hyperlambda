
/*
 * This Hyperlambda code iterates over a set of nodes resulting from splitting a string and checks if each node contains a specific substring indicating a function invocation. If the condition is met, it attempts to execute the function, ensuring the number of invocations does not exceed a limit. If the invocation is successful, it signals the result and updates the prompt. If an error occurs, it logs the error and signals the failure. The code handles both success and error scenarios by updating the prompt and signaling the session accordingly.
 * 
 * 1. [for-each] - Iterates through each node resulting from a string split operation.
 * 2. [if] - Checks if the current node contains a specific substring indicating a function invocation.
 * 3. [try] - Attempts to execute the function invocation.
 * 4. [if] - Checks if the number of iterations exceeds a limit.
 * 5. [log.error] - Logs an error if the iteration limit is exceeded.
 * 6. [sockets.signal] - Signals the session with an error message if the iteration limit is exceeded.
 * 7. [else] - Executes the function invocation if the iteration limit is not exceeded.
 * 8. [execute] - Invokes a magic AI function.
 * 9. [lambda2json] - Converts the result of the function invocation to JSON format.
 * 10. [if] - Checks if the result size exceeds a token limit.
 * 11. [throw] - Throws an error if the result size is too large.
 * 12. [config.get] - Retrieves a success message from the configuration.
 * 13. [unwrap] - Unwraps the success message.
 * 14. [sockets.signal] - Signals the session with the function result.
 * 15. [if] - Checks if the function invocation returned a result.
 * 16. [set-value] - Updates the new prompt with the function result.
 * 17. [else] - Updates the new prompt if the function invocation was successful but returned no result.
 * 18. [.catch] - Handles exceptions during function invocation.
 * 19. [log.error] - Logs an error if the function invocation fails.
 * 20. [unwrap] - Unwraps the error message.
 * 21. [sockets.signal] - Signals the session with the error message.
 * 22. [set-value] - Updates the new prompt with the error message.
 */
for-each:x:@strings.split/*
   if
      strings.contains:x:@.dp/#
         .:FUNCTION_INVOCATION[/
      .lambda
         try
            if
               lte:x:@.iterations
                  .:int:1
               .lambda
                  log.error:Too many function invocations
                  sockets.signal:x:@.session
                     args
                        function_error:Too many function invocations
                  sockets.signal:x:@.session
                     args
                        function_waiting:bool:false
                  sockets.signal:x:@.session
                     args
                        error:bool:true
                        status:int:500
                        message:Too many function invocations. Configure your type to handle more invocations or change your prompt.
                  sockets.signal:x:@.session
                     args
                        finished:bool:true
            else
               execute:magic.ai.functions.invoke
                  type:x:@.type
                  session:x:@.session
                  user-id:x:@.user-id
                  invocation:x:@.dp/#
                  extra:x:@.extra
               lambda2json:x:@execute/*/result/*
                  format:true
               if
                  mt
                     openai.tokenize:x:@lambda2json
                     get-value:x:@.arguments/@.arguments/*/max_context_tokens
                  .lambda
                     throw:Result too large, try to limit your result
                        status:int:400
                        public:bool:true
               config.get:"magic:chat:functions:success-message"
                  .:Success!
               unwrap:x:+/*/*
               sockets.signal:x:@.session
                  args
                     function_result:x:@config.get
                     invocation:x:@execute/*/json
                     file:x:@execute/*/workflow
               if
                  exists:x:@execute/*/result/*
                  .lambda
                     set-value:x:@.new-prompt
                        strings.concat
                           get-value:x:@.new-prompt
                           .:"Response from '"
                           get-value:x:@execute/*/workflow
                           .:@"' was:
```json
"
                           get-value:x:@lambda2json
                           .:@"
"
                           .:```
                           .:@"
"
                           .:@"
"
                     set-value:x:@.function-result
                        strings.concat
                           get-value:x:@.function-result
                           get-value:x:@lambda2json
                           .:"\n"
               else
                  set-value:x:@.new-prompt
                     strings.concat
                        get-value:x:@.new-prompt
                        .:"Invocation of '"
                        get-value:x:@execute/*/workflow
                        .:"' was a success."
                        .:@"
"
                        .:@"
"
         .catch
            log.error:Could not execute AI function
               message:x:@.arguments/*/message
            unwrap:x:+/*/*
            sockets.signal:x:@.session
               args
                  function_error:x:@.arguments/*/message
            set-value:x:@.new-prompt
               strings.concat
                  get-value:x:@.new-prompt
                  .:"Invocation failed, exception message was: '"
                  get-value:x:@.arguments/*/message
                  .:"'"
                  .:@"
"
                  .:@"
"
