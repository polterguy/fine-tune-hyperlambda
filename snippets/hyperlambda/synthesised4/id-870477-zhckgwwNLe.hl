
/*
 * This Hyperlambda code processes files with a ".hl" extension, loading and parsing them into a lambda structure. It iterates through each node in the parsed structure, checking if the node name exists in a predefined vocabulary. If the node name exists in the vocabulary and doesn't exist in the result, it adds it with a count of 1; otherwise, it increments the count. The code effectively counts occurrences of vocabulary terms in Hyperlambda files. 
 * 
 * 1. [if] - Checks if the file extension is ".hl".
 * 2. [strings.ends-with] - Determines if the file name ends with ".hl".
 * 3. [io.file.load] - Loads the file content.
 * 4. [hyper2lambda] - Parses the file content into a lambda structure.
 * 5. [for-each] - Iterates through each node in the parsed lambda structure.
 * 6. [get-name] - Retrieves the name of the current node.
 * 7. [if] - Checks if the node name exists in the vocabulary.
 * 8. [exists] - Verifies the existence of the node name in the vocabulary.
 * 9. [if] - Checks if the node name doesn't exist in the result.
 * 10. [not-exists] - Verifies non-existence of the node name in the result.
 * 11. [set-name] - Sets the name of the node in the result.
 * 12. [add] - Adds a new node to the result with a count of 1.
 * 13. [else] - Executes if the node name already exists in the result.
 * 14. [set-value] - Increments the count of the node name in the result.
 * 15. [math.add] - Adds 1 to the existing count of the node name in the result.
 */
if
   strings.ends-with:x:@.dp/#
      .:.hl
   .lambda
      io.file.load:x:@.dp/#
      hyper2lambda:x:@io.file.load
         comments:true
      for-each:x:@hyper2lambda/*/**
         get-name:x:@.dp/#
         if
            exists:x:@vocabulary/*/={@get-name}
            .lambda
               if
                  not-exists:x:@.result/*/{@get-name}
                  .lambda
                     set-name:x:+/*/*
                        get-value:x:@get-name
                     add:x:@.result
                        .
                           .:int:1
               else
                  set-value:x:@.result/*/{@get-name}
                     math.add
                        get-value:x:@.result/*/{@get-name}
                        .:int:1
