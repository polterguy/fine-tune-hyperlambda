
/*
 * This Hyperlambda code defines a dynamic slot [magic.ai.search] that interacts with OpenAI's API to generate embeddings for a given prompt, and then searches a database for matching training snippets based on vector similarity. It validates input arguments, converts the threshold to a double, and constructs an HTTP request with a bearer token for OpenAI's API. After receiving a response, it checks for errors and logs them if necessary. The code then constructs a SQL query to search for similar embeddings in the database, calculates the query execution time, and returns the results along with the execution time.
 * 
 * 1. [slots.create] - Creates a dynamic slot named "magic.ai.search".
 * 2. [validators.mandatory] - Ensures required arguments are provided.
 * 3. [validators.string] - Validates the prompt string length.
 * 4. [set-value] - Converts the threshold to a double.
 * 5. [.token] - Creates a bearer token for authorization.
 * 6. [http.post] - Sends a request to OpenAI's API for embeddings.
 * 7. [if] - Checks for HTTP response errors and logs them.
 * 8. [data.connect] - Connects to the database and constructs a SQL query.
 * 9. [floatArray2bytes] - Converts embedding data to bytes.
 * 10. [math.subtract] - Adjusts the threshold for the query.
 * 11. [strings.concat] - Constructs the SQL query string.
 * 12. [data.select] - Executes the SQL query to find similar embeddings.
 * 13. [.time] - Calculates and formats the query execution time.
 * 14. [unwrap] - Processes the query results.
 * 15. [return] - Returns the execution time and snippets found.
 */
hyper2lambda
   slots.create:magic.ai.search
      validators.mandatory:x:@.arguments/*/type
      validators.mandatory:x:@.arguments/*/prompt
      validators.mandatory:x:@.arguments/*/threshold
      validators.mandatory:x:@.arguments/*/max
      validators.mandatory:x:@.arguments/*/vector_model
      validators.string:x:@.arguments/*/prompt
         min:1
      set-value:x:@.arguments/*/threshold
         convert:x:@.arguments/*/threshold
            type:double
      .token
      set-value:x:@.token
         strings.concat
            .:"Bearer "
            config.get:"magic:openai:key"
      http.post:"https://api.openai.com/v1/embeddings"
         headers
            Authorization:x:@.token
            Content-Type:application/json
         payload
            input:x:@.arguments/*/prompt
            model:x:@.arguments/*/vector_model
         convert:true
      if
         not
            and
               mte:x:@http.post
                  .:int:200
               lt:x:@http.post
                  .:int:300
         .lambda
            lambda2hyper:x:@http.post
            log.error:Something went wrong while invoking OpenAI
               message:x:@http.post/*/content/*/error/*/message
               error:x:@lambda2hyper
            throw:x:@http.post/*/content/*/error/*/message
               public:bool:true
               status:x:@http.post
      data.connect:[generic|magic]
         .prefix-url:"ts.uri is not null and "
         if
            and
               exists:x:@.arguments/*/prefix-url
               not-null:x:@.arguments/*/prefix-url
               neq:x:@.arguments/*/prefix-url
                  .:
            .lambda
               set-value:x:@.prefix-url
                  .:"ts.uri like @prefix and "
               add:x:@data.connect/*/data.select
                  .
                     @prefix:x:@.arguments/*/prefix-url
         .begin
         set-value:x:@.begin
            date.now
         floatArray2bytes:x:@http.post/*/content/*/data/0/*/embedding/*
         math.subtract
            .:float:1
            get-value:x:@.arguments/*/threshold
         strings.concat
            .:"\nselect vss.distance, ts.prompt, ts.uri\n\tfrom vss_ml_training_snippets as vss\n    \tinner join ml_training_snippets ts on ts.id = vss.rowid\n   where\n      ts.type = @type and "
            get-value:x:@.prefix-url
            .:"vss_search(vss.embedding_vss, @embedding) and\n       vss.distance < @threshold\ngroup by ts.uri\norder by vss.distance\nlimit @limit"
         data.select:x:@strings.concat
            @embedding:x:@floatArray2bytes
            @type:x:@.arguments/*/type
            @threshold:x:@math.subtract
            @limit:x:@.arguments/*/max
         .end
         set-value:x:@.end
            date.now
         .time
         set-value:x:@.time
            math.subtract
               get-value:x:@.end
               get-value:x:@.begin
         set-value:x:@.time
            time.format:x:@.time
               format:"ss\\.fff"
         if
            not-exists:x:@data.select/*
            .lambda
               remove-nodes:x:../*/return/*/snippets
         else
            add:x:@data.connect/*/return/*/snippets
               get-nodes:x:@data.select/*
         unwrap:x:./*/return/*
         return
            db_time:x:@.time
            snippets
