
/*
 * This Hyperlambda code checks the value of [case:GPTBot] and executes different actions based on conditions. If the value is "AINIRO", it removes nodes under [allow] and [disallow], and sets [has-seen-ainiro] and [relevant] to true. If not, it checks if [has-seen-ainiro] is false and sets [relevant] to true; otherwise, it sets [relevant] to false.
 * 
 * 1. [case:GPTBot] - Root node for the conditional logic.
 * 2. [if] - Checks if the value is "AINIRO".
 * 3. [eq:x:@.value] - Compares the value to "AINIRO".
 * 4. [remove-nodes:x:@.allow/*] - Removes nodes under [allow].
 * 5. [remove-nodes:x:@.disallow/*] - Removes nodes under [disallow].
 * 6. [set-value:x:@.has-seen-ainiro] - Sets [has-seen-ainiro] to true.
 * 7. [set-value:x:@.relevant] - Sets [relevant] to true.
 * 8. [else] - Executes if the first [if] condition is false.
 * 9. [if] - Checks if [has-seen-ainiro] is false.
 * 10. [eq:x:@.has-seen-ainiro] - Compares [has-seen-ainiro] to false.
 * 11. [set-value:x:@.relevant] - Sets [relevant] to true.
 * 12. [else] - Executes if the second [if] condition is false.
 * 13. [set-value:x:@.relevant] - Sets [relevant] to false.
 */
case:GPTBot
   if
      eq:x:@.value
         .:AINIRO
      .lambda
         remove-nodes:x:@.allow/*
         remove-nodes:x:@.disallow/*
         set-value:x:@.has-seen-ainiro
            .:bool:true
         set-value:x:@.relevant
            .:bool:true
   else
      if
         eq:x:@.has-seen-ainiro
            .:bool:false
         .lambda
            set-value:x:@.relevant
               .:bool:true
      else
         set-value:x:@.relevant
            .:bool:false
