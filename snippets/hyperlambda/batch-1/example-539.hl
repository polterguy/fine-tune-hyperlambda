
/*
 * Defines a secure HTTP CRUD endpoint that updates an existing user in the 'users' table of the 'magic' database.
 * Only users with the 'root' role are authorized to invoke this endpoint.
 *
 * ## Input Arguments
 * - [username]: Required. Used to identify which user record should be updated.
 * - [password]: Optional. Used to update the user's password.
 *
 * ## Validation & Authorization
 * - [validators.mandatory] ensures the [username] is provided.
 * - [auth.ticket.verify:root] restricts access to users with the 'root' role.
 *
 * ## Database Logic
 * - [data.connect] with `generic|magic` opens a connection to the 'magic' database.
 * - [add] injects argument values into the [data.update] operation:
 *   - The [values] section receives all arguments from index 1 onward (i.e., fields to update).
 *   - The [where] clause is populated with the [username] argument to filter the target record.
 * - [data.update] attempts to update the user matching the provided username.
 *
 * ## Record Verification
 * - [if] condition checks if [data.update] returned 0 affected rows, indicating no matching user.
 *   - If so, a [404 Not Found] status is returned with a message.
 *
 * ## Response
 * - On success, [response.status.set] returns a 202 Accepted status.
 * - [yield] includes the number of affected rows under the [affected] node.
 *
 * ## Use Case
 * - Useful for updating user information securely, such as changing passwords or profile details,
 *   while ensuring the caller is both authenticated and authorized.
 */
.arguments
   username:string
   password:string

// Verifying user is authorized to access endpoint.
validators.mandatory:x:@.arguments/*/username

auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:users
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning success to caller.
   response.status.set:202
   yield
      affected:x:@data.update
