/*
 * Dynamically performs an aggregate operation (min, max, sum, avg) on a specified column
 * from the [CustomerDemographics] table in the 'northwind' SQLite database.
 *
 * Validates that both [aggregate_function] and [aggregate_column] arguments are present and legal.
 * Acceptable aggregate functions are limited to [min], [max], [sum], and [avg], and valid columns
 * are restricted to [CustomerTypeID] and [CustomerDesc] for safety and structure.
 *
 * Constructs a dynamic SQL expression (e.g., avg(CustomerDemographics.CustomerTypeID)) and applies
 * optional filters based on remaining arguments like 'like' and 'eq' conditions for supported fields.
 *
 * Uses [data.connect] to access the database and [data.read] with a [limit:1] clause to return
 * the aggregate result efficiently, labeling the output column as [result].
 *
 * This flexible yet safe pattern enables users to perform controlled aggregate queries through
 * dynamic parameterization, making it ideal for dashboards or reporting tools with configurable metrics.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   // Filtering
   CustomerDemographics.CustomerTypeID.like:string
   CustomerDemographics.CustomerTypeID.eq:string
   CustomerDemographics.CustomerDesc.like:string
   CustomerDemographics.CustomerDesc.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:CustomerDemographics.CustomerTypeID
   .:CustomerDemographics.CustomerDesc

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerDemographics
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
