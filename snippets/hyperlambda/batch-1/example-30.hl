
/*
 * This Hyperlambda endpoint computes an aggregate (min, max, sum, or avg) over a column in the [CustomerDemographics] table of the [northwind] SQLite database.
 * Filtering is optionally supported for [CustomerTypeID] and [CustomerDesc] fields.
 *
 * 1. [.arguments]
 *    * Declares the expected input arguments for the endpoint.
 *    * Includes [aggregate_function], [aggregate_column], and optional filtering fields.

 * 2. [validators.mandatory]
 *    * Ensures that [aggregate_function] and [aggregate_column] are supplied.

 * 3. [validators.enum]
 *    * Restricts [aggregate_function] to one of [min], [max], [sum], or [avg].
 *    * Ensures [aggregate_column] is a valid column from the [CustomerDemographics] table.

 * 4. [data.connect]
 *    * Opens a connection to the [northwind] database using the [generic] connection string.
 *    * Declares the database type as [sqlite].

 * 5. [set-name]
 *    * Dynamically creates the SQL aggregate function expression (e.g., `avg(CustomerDemographics.CustomerTypeID)`) and stores it in a node named [aggregate_functor].

 * 6. [remove-nodes]
 *    * Removes the original aggregate-related arguments to simplify node structure before passing to [data.read].

 * 7. [add]
 *    * Appends all remaining arguments (filter conditions) into the [where] clause of [data.read].

 * 8. [data.read]
 *    * Executes a SQL read query on the [CustomerDemographics] table with optional filtering.
 *    * Selects the computed [aggregate_functor] result using the alias [result].

 * 9. [return-nodes]
 *    * Returns the result from the SQL read operation to the HTTP caller.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   // Filtering
   CustomerDemographics.CustomerTypeID.like:string
   CustomerDemographics.CustomerTypeID.eq:string
   CustomerDemographics.CustomerDesc.like:string
   CustomerDemographics.CustomerDesc.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:CustomerDemographics.CustomerTypeID
   .:CustomerDemographics.CustomerDesc

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerDemographics
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
