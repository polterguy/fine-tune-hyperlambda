
/*
 * This Hyperlambda endpoint reads records from the 'media' table in the '[generic|cms]' SQLite database,
 * with optional filters and a left join to the 'posts' table. It includes authentication, input binding, and result delivery.

 * 1. [auth.ticket.verify]
 *    - Ensures only users with the 'enterprise' or 'root' role can access the endpoint.
 *    - Secures the endpoint using role-based access control and JWT authentication.

 * 2. [data.connect]
 *    - Opens a database connection to the 'cms' database using the 'generic' connection string.
 *    - Required for executing any database CRUD operations inside this scope.

 * 3. [add] + [get-nodes]
 *    - Dynamically injects filtering conditions into the [where] clause of [data.read].
 *    - Retrieves the user-supplied arguments for filtering the query.

 * 4. [data.read]
 *    - Performs a SQL SELECT query from the 'media' table.
 *    - Includes a [join] with the 'posts' table using a LEFT JOIN on 'media.post_id = post_id.id'.
 *    - Retrieves selected columns from both 'media' and 'posts', including aliased output for joined fields.

 * 5. [add] (result packaging)
 *    - Adds the result of the [data.read] query into the [return] node structure.
 *    - Prepares the response structure for returning the read results to the caller.

 * 6. [return]
 *    - Finalizes the response by returning the dynamically constructed result node.
 */
.arguments

   // ID field 'equals' filtering.
   media.id.eq:long

   // post_id field 'equals' filtering.
   media.post_id.eq:long

   // file_path field SQL 'like' filtering, allowing for using 5 characters.
   media.file_path.like:string

   // file_path field 'equals' filtering.
   media.file_path.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:enterprise,root

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:media
         join:posts
            as:post_id
            type:left
            on
               and
                  media.post_id:post_id.id
      columns
         media.id
         media.post_id
         media.file_path
         media.file_type
         media.created_at
         post_id.title
            as:post_id.title
      where
         and

   // Returning result of above read invocation to caller.
   add:x:./*/return
      get-nodes:x:@data.read/*
   return
