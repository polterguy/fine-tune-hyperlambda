
/*
 * Endpoint that ensures user is authorized to access endpoint.
 * Accepts optional [roles] argument and dynamically verifies authorization against the provided roles.
 *
 * 1. [.arguments]
 *    * Accepts a wildcard [roles:*] argument to support multiple role values.
 *
 * 2. [.roles]
 *    * Placeholder node used to store a joined, comma-separated string of role names.
 *
 * 3. [if] / [exists]
 *    * Checks whether the [roles] argument contains any children (i.e., if any roles were supplied).
 *
 * 4. [.lambda]
 *    * Executes only if roles were supplied.
 *    * Uses [strings.join] to concatenate all role names using commas and stores the result in [.roles].
 *
 * 5. [auth.ticket.verify]
 *    * Verifies the current userâ€™s ticket against the value in [.roles].
 *    * If [.roles] is empty (i.e., no roles provided), defaults to basic authentication check without role verification.
 */
.arguments
   roles:*

/*
 * Checking if we've got a [roles] argument,
 * and if so, joining all roles into a comma separated string of roles.
 */
.roles
if
   exists:x:@.arguments/*/roles/*
   .lambda

      // Creating comma separated list of roles.
      set-value:x:@.roles
         strings.join:x:@.arguments/*/roles/*
            .:,

// Making sure user is authenticated, and optionally authorised.
auth.ticket.verify:x:@.roles
