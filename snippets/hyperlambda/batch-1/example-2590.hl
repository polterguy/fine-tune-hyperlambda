
/*
 * This Hyperlambda snippet uses a [switch] statement to evaluate the selected payment method and
 * sets a descriptive message in the [.result] node based on the value.
 * It includes a [default] case to handle any unexpected input.
 *
 * 1. [.payment_method:PayPal]
 *    * Declares the selected payment method.
 *    * The value can be one of: "CreditCard", "PayPal", "Crypto", or any other custom value.
 *
 * 2. [.result]
 *    * A placeholder node where the final message about the selected payment method will be stored.
 *
 * 3. [switch:x:@.payment_method]
 *    * Begins a switch-case construct that checks the value of [.payment_method].
 *    * `@.payment_method` is a named iterator pointing to the current nodeâ€™s [.payment_method] value.
 *
 * 4. [case:CreditCard]
 *    * If the value is "CreditCard", sets [.result] to "Paid with Credit Card".
 *
 * 5. [case:PayPal]
 *    * If the value is "PayPal", sets [.result] to "Paid with PayPal".
 *
 * 6. [case:Crypto]
 *    * If the value is "Crypto", sets [.result] to "Paid with Cryptocurrency".
 *
 * 7. [default]
 *    * If the payment method doesn't match any predefined case, sets [.result] to "Unknown payment method".
 *
 * Result:
 * Dynamically maps a known or unknown payment method to a user-friendly message using switch-case logic.
 * Ensures robust handling of all values, including unexpected ones.
 */
.payment_method:PayPal
.result
switch:x:@.payment_method

   case:CreditCard

      // If payment method is CreditCard.
      set-value:x:@.result
         .:Paid with Credit Card

   case:PayPal

      // If payment method is PayPal.
      set-value:x:@.result
         .:Paid with PayPal

   case:Crypto

      // If payment method is Crypto.
      set-value:x:@.result
         .:Paid with Cryptocurrency

   default

      // If the payment method is unknown.
      set-value:x:@.result
         .:Unknown payment method
