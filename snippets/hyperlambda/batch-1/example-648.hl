
/*
 * Implements a conditional branching logic using [if], [else-if], and [else] slots.
 *
 * The [.value] node contains an integer value (3), and this is evaluated against
 * specific conditions:
 * - If it equals 1, the [if] block sets [.result] to 'One'.
 * - Else if it equals 2, the [else-if] block sets [.result] to 'Two'.
 * - If neither condition is true, the [else] block is executed,
 *   setting [.result] to the fallback value 'Other'.
 *
 * The [eq] slot compares the dereferenced value from '@.value' using [get-value]
 * with a constant integer.
 *
 * This pattern showcases Hyperlambdaâ€™s branching control flow,
 * allowing dynamic decision-making based on node values.
 */
.value:int:3
.result
if
   eq
      get-value:x:@.value
      .:int:1
   .lambda
      set-value:x:@.result
         .:One
else-if
   eq
      get-value:x:@.value
      .:int:2
   .lambda
      set-value:x:@.result
         .:Two
else
   set-value:x:@.result
      .:Other
