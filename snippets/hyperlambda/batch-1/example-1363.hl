
/*
 * This snippet demonstrates how to use database transactions in Hyperlambda using [data.transaction.create].
 *
 * - [data.connect:sakila] opens a connection to the 'sakila' database.
 * - [data.transaction.create] begins a transaction, within which we execute a [data.execute] statement to delete all records from the [film_actor] table.
 * - Since [data.transaction.commit] is commented out, the transaction is never committed, and will be rolled back automatically when the transaction ends.
 *
 * The second [data.connect:sakila] section confirms this behavior:
 * - A [data.scalar] query counts the rows in the [film_actor] table.
 * - The expected result is 5462, demonstrating that the deletion never took effect due to the rollback.
 *
 * This pattern provides a safe way to test destructive SQL commands within transactions, avoiding data loss during development.
 */
data.connect:sakila
   data.transaction.create
      data.execute:delete from film_actor

      /*
       * If you uncomment the line below the
       * transaction will be committed, resulting
       * in that everything from your film_actor
       * table will be deleted.
       */
      //data.transaction.commit

data.connect:sakila

   /*
    * Notice, this still returns 5462 items, since
    * transaction was implicitly rolled back above.
    */
   data.scalar:select count(*) from film_actor