
/*
 * Read endpoint that retrieves records from the 'spice_urls' table in the 'scraper' SQLite database.
 * It supports paging, sorting, and filtering. Only users with 'root' or 'admin' roles are authorized to use it.
 *
 * ### Arguments
 * - [.arguments] may include:
 *   - [limit]: Maximum number of records to return.
 *   - [offset]: Number of records to skip.
 *   - [order]: Column name to sort by.
 *   - [direction]: Sort direction, either 'asc' or 'desc'.
 *   - [spice_urls.spice_url_id.eq]: Filter by exact ID.
 *   - [spice_urls.url.like]: Pattern match on URL.
 *   - [spice_urls.url.eq]: Exact match on URL.
 *   - [spice_urls.type.like]: Pattern match on type.
 *   - [spice_urls.type.eq]: Exact match on type.
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures that only 'root' and 'admin' users can access the endpoint.
 *
 * ### Query Construction
 * - [data.connect] connects to the 'scraper' database using the 'generic' connection string.
 * - [add] applies sorting and paging parameters to the [data.read] node.
 * - [remove-nodes] ensures that sort and paging parameters are not included as filters.
 * - [add] appends any remaining arguments into the [and] node for dynamic filtering.
 *   [and] here ensures ALL filtering arguments must bu true for a row to be returned.
 *
 * ### Data Retrieval
 * - [data.read] queries the 'spice_urls' table using the specified filters, sort order, and paging.
 * - Selected columns include: [spice_url_id], [url], and [type].
 *
 * ### Response
 * - [return-nodes] returns the resulting data rows to the client.
 *
 * This endpoint demonstrates a flexible and secure data browsing API in Hyperlambda
 * with dynamic filtering, sorting, and pagination capabilities.
 */
.arguments

   // Number of records to return
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // What column to order by
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // spice_urls table spice_url_id column equality exact match filtering
   spice_urls.spice_url_id.eq:long

   // spice_urls table url column wildcard filtering with SQL like '%' comparison
   spice_urls.url.like:string

   // spice_urls table url column equality exact match filtering
   spice_urls.url.eq:string

   // spice_urls table type column wildcard filtering with SQL like '%' comparison
   spice_urls.type.like:string

   // spice_urls table type column equality exact match filtering
   spice_urls.type.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|scraper]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Making sure we add filtering conditions, if specified
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:spice_urls
      columns
         spice_urls.spice_url_id
         spice_urls.url
         spice_urls.type
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
