
/*
 * This Hyperlambda snippet calculates the sum of all odd numbers from 1 to 19 using a [while] loop.
 *
 * 1. [.no]
 *    - Initialized to 1, the starting point of our iteration.
 *    - Serves as the loop counter and represents the current odd number.
 *
 * 2. [.sum]
 *    - Accumulates the running total of the odd numbers as we iterate.
 *
 * 3. [while]
 *    - Continues looping as long as [.no] is less than 20.
 *    - Uses [lt] in combination with [get-value] to enforce the condition.
 *
 * 4. [set-value]
 *    - Inside the loop, [math.add] is used to add the current [.no] to [.sum].
 *    - This progressively accumulates the total of all odd numbers.
 *
 * 5. [math.increment]
 *    - Increments [.no] by 2 with two successive calls (each with the default step of 1),
 *      keeping [.no] odd throughout the loop.
 *    - Alternatively, one could use a single increment call with `.int:2`.
 *
 * This structure efficiently computes the sum 1 + 3 + ... + 19 = 100.
 */
.no:int:1
.sum:int:0
while
   lt
      get-value:x:@.no
      .:int:20
   .lambda

      // Summing odd numbers.
      set-value:x:@.sum
         math.add:x:@.sum
            get-value:x:@.no

      // Incrementing by 2 to keep it odd.
      math.increment:x:@.no
      math.increment:x:@.no
