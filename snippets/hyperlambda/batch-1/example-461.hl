
/*
 * Defines a secure logging endpoint that allows authenticated users to create structured log entries.
 * The log type is dynamically determined, and additional metadata can be attached to enrich the log context.
 *
 * ## Input Arguments
 * - [type]: Required. Determines the log level. Must be one of ['info', 'error', 'debug', 'fatal'].
 * - [content]: Required. The main message to be logged.
 * - [meta]: Optional. A collection of key-value pairs that add contextual information to the log.
 *
 * ## Authentication
 * - [auth.ticket.verify] ensures that the caller is authenticated, but does not enforce role-based restrictions.
 *
 * ## Validation
 * - [validators.mandatory] ensures [type] and [content] are provided.
 * - [validators.enum] restricts [type] to one of the allowed log levels.
 *
 * ## Log Construction
 * - [add] injects all key-value pairs from [meta] into a temporary [log-invocation] node.
 * - [set-name] renames [log-invocation] to a dynamic name such as 'log.info' or 'log.error', based on the [type] argument.
 * - The dynamically named [log-invocation] node is invoked with the [content] string as the payload.
 *
 * ## Result
 * - Returns a static success message once the log entry is created.
 *
 * ## Use Case
 * - This endpoint can be used as a general-purpose logging utility in systems where users can submit diagnostic or audit logs,
 *   and allows for flexible inclusion of additional metadata.
 */
.arguments
   type:string
   content:string
   meta:*

/*
 * Ensures user is authorized to access endpoint.
 * Notice, we only allow authenticated users to access this endpoint.
 * What roles they belong to is not important, as long as they're authenticated.
 */
auth.ticket.verify

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/content
validators.enum:x:@.arguments/*/type
   .:info
   .:error
   .:debug
   .:fatal

// Creating a log entry using the specified type of logger.
add:x:../*/log-invocation
   get-nodes:x:@.arguments/*/meta/*
set-name:x:../*/log-invocation
   strings.concat
      .:log.
      get-value:x:@.arguments/*/type

// This node is dynamically changing its name from the above logic.
log-invocation:x:@.arguments/*/content

// Returning success to caller.
return
   result:success
