
/*
 * This endpoint registers a new user in the system by inserting a username and a hashed password
 * into the 'users' table within the [generic|magic] database.
 *
 * 1. [.arguments]
 *    - Defines the expected input fields: [username] and [password], both of type string.
 *
 * 2. [validators.mandatory]
 *    - Ensures that both [username] and [password] are present in the request.
 *
 * 3. [validators.regex]
 *    - Enforces a pattern on the [username], allowing only lowercase letters, numbers, and dashes (2 to 20 characters).
 *
 * 4. [validators.string]
 *    - Validates the [password] string to ensure a minimum length of 12 characters.
 *
 * 5. [crypto.password.hash]
 *    - Hashes the provided [password] securely using Blowfish hashing.
 *    - The result is a cryptographically secure hash which is then stored in the database instead of the plaintext password.
 *
 * 6. [data.connect]
 *    - Opens a connection to the [generic|magic] database so that database operations can be performed.
 *
 * 7. [data.create]
 *    - Inserts a new record into the 'users' table.
 *    - Stores the plain [username] and the hashed [password] value into their respective columns.
 */
.arguments
   username:string
   password:string

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/password
validators.regex:x:@.arguments/*/username
   regex:[a-z0-9-]{2,20}
validators.string:x:@.arguments/*/password
   min:12

// Hashing user's password.
crypto.password.hash:x:@.arguments/*/password

// Opens up database connection.
data.connect:[generic|magic]

   // Inserting user into database.
   data.create
      table:users
      values
         username:x:@.arguments/*/username
         password:x:@crypto.password.hash
