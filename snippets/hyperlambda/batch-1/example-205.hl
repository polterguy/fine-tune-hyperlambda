
/*
 * Endpoint that searches for products on eBay using the SERP API, with a required [query] parameter and optional country code filter.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [query]: The search term to look for on eBay (mandatory).
 *   - [gl]: Optional country code for regional search (e.g., US, NO).
 *
 * ### API Key Retrieval
 * - [config.get] fetches the SERP API key from configuration using the key [magic:serp-api:api_key].
 * - If the API key is missing or empty, [throw] is used to abort with an error.
 *
 * ### URL Construction
 * - [strings.concat] builds the full API URL using:
 *   - Base endpoint: `https://serpapi.com/search.json`
 *   - Query parameters: `engine=ebay`, the API key, and `_nkw` for the search term.
 *   - [strings.url-encode] is used to safely encode the [query] value.
 *
 * ### API Invocation
 * - [http.get] sends a GET request to the constructed URL.
 * - [convert:true] converts the JSON response into lambda-compatible structure.
 *
 * ### Response Validation
 * - [if] with [mte] and [lt] checks that the status code is within the 2xx success range.
 * - If the request failed, the original lambda is logged with [lambda2hyper] and an error is thrown.
 *
 * ### Result Processing
 * - [for-each] loops through the first 5 items in the [organic_results] array.
 * - [unwrap] flattens nested result structure for easy access.
 * - [add] creates a structured result for each item with:
 *   - [title], [link], [condition], [price], and [thumbnail]
 *
 * ### Final Response
 * - [unwrap] cleans up the response structure.
 * - [return-nodes] returns:
 *   - [result]: The list of matched products.
 *   - [total_matches]: Total number of matches from the search metadata.
 *
 * This endpoint showcases structured API invocation, input validation, configuration usage,
 * and result transformation using Hyperlambda and the SERP API.
 */
.arguments

   // Mandatory query to search for.
   query:string

   // Optional parameter filtering result by country. If specified must be a two letter country code such as US or NO.
   gl:string

validators.mandatory:x:@.arguments/*/query

// Retrieving SERP API's API key and making sure we've got one.
.api-key
set-value:x:@.api-key
   config.get:"magic:serp-api:api_key"
if
   or
      null:x:@.api-key
      eq:x:@.api-key
         .:
   .lambda

      // Oops ...!!
      throw:Could not find a SERP API key to use for fetching hotels.

// Creating our URL.
.url
set-value:x:@.url
   strings.concat
      .:"https://serpapi.com/search.json?engine=ebay&api_key="
      get-value:x:@.api-key
      .:&_nkw=
      strings.url-encode:x:@.arguments/*/query

// Retrieving result.
http.get:x:@.url
   convert:true

// Sanity checking result of above invocation.
if
   not
      and
         mte:x:@http.get
            .:int:200
         lt:x:@http.get
            .:int:300
   .lambda

      // Oops ...!!
      lambda2hyper:x:../*
      log.info:x:-
      throw:Something went wrong while invoking SERP API

// Iterating through result, making sure we return the result to caller.
for-each:x:@http.get/*/content/*/organic_results/*/[0,5]
   unwrap:x:+/*/*/*
   add:x:../*/return-nodes/*/result
      .
         .
            title:x:@.dp/#/*/title
            link:x:@.dp/#/*/link
            condition:x:@.dp/#/*/condition
            price:x:@.dp/#/*/price/*/raw
            thumbnail:x:@.dp/#/*/thumbnail

// Returning result to caller.
unwrap:x:+/*
return-nodes
   result
   total_matches:x:@http.get/*/content/*/search_information/*/total_results
