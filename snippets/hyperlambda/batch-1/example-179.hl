
/*
 * Endpoint that deletes a single record from the [comments] table in the [cms] SQLite database.
 * Only users with the "partner" role are allowed to execute this operation.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [id]: The primary key of the comment to delete (mandatory).
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures the caller has the "partner" role.
 *
 * ### Validation
 * - [validators.mandatory] enforces that [id] is provided to prevent accidental deletion of all records.
 *
 * ### Database Operation
 * - [data.connect] opens a connection to the [cms] database.
 * - [add] dynamically injects the [id] argument into the [where] clause of the [data.delete] operation.
 * - [data.delete] deletes the record in the [comments] table that matches the specified [id].
 *
 * ### Response
 * - [yield] returns the number of affected rows to the caller as [affected].
 *
 * This endpoint demonstrates safe and role-restricted deletion of a single database record
 * using parameterized logic and structured access control in Hyperlambda.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:partner

// Ensuring only ONE record is deleted, and not the whole table.
validators.mandatory:x:@.arguments/*/id

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:comments
      where
         and

   // Returning result of above invocation to caller.
   yield
      affected:x:@data.delete
