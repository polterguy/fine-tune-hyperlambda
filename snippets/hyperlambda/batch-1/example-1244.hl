
/*
 * This Hyperlambda endpoint counts records from the [CustomerDemographics] table
 * in the [northwind] SQLite database, supporting optional filtering based on provided arguments.
 *
 * 1. [.arguments]
 *    * Defines optional filter parameters:
 *    * - [CustomerDemographics.CustomerTypeID.like]: SQL LIKE pattern match on CustomerTypeID.
 *    * - [CustomerDemographics.CustomerTypeID.eq]: Exact match on CustomerTypeID.
 *    * - [CustomerDemographics.CustomerDesc.like]: SQL LIKE pattern match on CustomerDesc.
 *    * - [CustomerDemographics.CustomerDesc.eq]: Exact match on CustomerDesc.
 *
 * 2. [data.connect:[generic|northwind]]
 *    * Connects to the [northwind] database using a generic connection string.
 *    * Specifies [sqlite] as the database type.
 *
 * 3. [add:x:+/*/where/*]
 *    * Dynamically adds all matching filters from [.arguments] into the WHERE clause of the query.
 *    * Ensures that only provided filters are applied.
 *
 * 4. [data.read]
 *    * Executes a SELECT query on the [CustomerDemographics] table.
 *    * Uses [count(*)] to return the number of rows that match the provided conditions.
 *    * Aliases the result column as [count].
 *    * Applies all filters under a [where and] clause.
 *    * Uses [limit:long:1] to ensure a single result row.
 *
 * 5. [return-nodes:x:@data.read/*/*]
 *    * Returns the count result to the caller.
 *
 * Result:
 * * A single value representing the number of records in [CustomerDemographics] that match the given filters.
 */
.arguments

   // Optional filter arguments
   CustomerDemographics.CustomerTypeID.like:string
   CustomerDemographics.CustomerTypeID.eq:string
   CustomerDemographics.CustomerDesc.like:string
   CustomerDemographics.CustomerDesc.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerDemographics
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
