
/*
 * Hyperlambda API endpoint for a CRUD update operation on the [questionnaires] table
 * in the [magic] database. The endpoint filters the record to update using [name]
 * and updates fields such as [type] and [action], with access restricted to [root] users.
 *
 * 1. [.arguments]
 *    * Accepts input parameters:
 *    * - [name]: Used to identify the record (mandatory).
 *    * - [type] and [action]: Fields to be updated.
 *
 * 2. [validators.mandatory]
 *    * Ensures that the [name] argument is provided to uniquely identify the record.
 *
 * 3. [auth.ticket.verify]
 *    * Confirms that the user has [root] role authorization to proceed with the update.
 *
 * 4. [data.connect]
 *    * Opens a connection to the [magic] SQLite database using the [generic] connection string.
 *    * Declares the database type explicitly as [sqlite].
 *
 * 5. [add] (for [values])
 *    * Adds all arguments from index 1 onward ([type], [action], etc.) into the [values] block of the update operation.
 *    * These are the fields being updated.
 *
 * 6. [add] (for [where])
 *    * Adds filtering logic using the first two arguments ([name], [type]).
 *    * Ensures only the targeted record(s) are updated.
 *
 * 7. [data.update]
 *    * Executes the update operation on the [questionnaires] table.
 *    * Applies the new [values] to records matching the [where and] clause.
 *
 * 8. [yield]
 *    * Returns the number of affected rows using the [affected] field from [data.update].
 */
.arguments
   name:string
   type:string
   action:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/name

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:questionnaires
      values
      where
         and

   // Returning success to caller.
   yield
      affected:x:@data.update
