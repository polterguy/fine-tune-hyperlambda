
/*
 * Hyperlambda endpoint that counts records from the `Categories` table in the `northwind` SQLite database,
 * with optional filtering on `CategoryID`, `CategoryName`, and `Description`.
 *
 * ### Arguments
 * - [.arguments] includes optional filtering parameters:
 *   - [Categories.CategoryID.eq]: Exact match on category ID.
 *   - [Categories.CategoryName.like]: Pattern match on category name.
 *   - [Categories.CategoryName.eq]: Exact match on category name.
 *   - [Categories.Description.like]: Pattern match on description.
 *   - [Categories.Description.eq]: Exact match on description.
 *
 * ### Database Operation
 * - [data.connect] opens a connection to the `northwind` database using the `generic` connection string.
 * - [add] inserts all supplied argument nodes into the [where] clause and its [and] child of the query dynamically.
 * - [data.read] performs a count query on the `Categories` table using:
 *   - [columns] with [count(*)] and [as] as `count` to alias the result.
 *   - [where] conditions based on any filtering arguments provided.
 *   - [limit] set to 1 to restrict the result to a single row.
 *
 * ### Response
 * - [return-nodes] returns the resulting first value being the count node to the caller.
 *
 * This endpoint is useful for reporting, analytics, or validation scenarios
 * where the number of matching category records must be determined based on flexible filters.
 */
.arguments
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Adding all arguments into [and] node ensuring filtering is applied
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
