
/*
 * This Hyperlambda snippet performs an inner join between two tables: [table1] and [table2],
 * based on the condition that [table1.id] equals `table2.ref_id`.
 *
 * ### Join Operation
 * - [data.read] is used to read from [table1] as the primary table.
 * - [join] specifies the secondary table to join with.
 * - [type] indicates that this is an INNER JOIN, meaning only matching rows
 *   from both tables will be included in the result.
 *
 * ### Join Condition
 * - The [on] clause defines the condition for the join using [and]:
 *   - [table1.id.eq] with a value of `table2.ref_id` ensures that rows are matched where [id] in [table1]
 *     is equal to [ref_id] in [table2].
 *
 * This is a standard relational join operation expressed declaratively in Hyperlambda
 * using its structured node-tree syntax, and is useful for retrieving related data across multiple tables
 * using SQL projection to create new table results based upon multiple tables and SQL JOIN.
 */
data.read
   table:table1
      join:table2
         type:inner
         on
            and
               table1.id.eq:table2.ref_id
