
/*
 * This Hyperlambda endpoint provides secure and dynamic updating of records in the 'roles' table
 * within the 'magic' SQLite database. It ensures both input validation and role-based access control.
 *
 * 1. [validators.mandatory]
 *    - Ensures the 'name' argument is provided before proceeding.
 *    - Prevents invalid or incomplete update attempts due to missing required keys.

 * 2. [auth.ticket.verify]
 *    - Verifies that the invoking user has 'root' access rights.
 *    - Enforces role-based access control using JWT-based authentication.

 * 3. [data.connect]
 *    - Opens a connection to the 'magic' database using the 'generic' connection string.
 *    - All child operations requiring database access must reside within this slot.

 * 4. [add]
 *    - Injects argument nodes into the appropriate parts of the [data.update] statement.
 *    - The first [add] pushes non-key attributes into [values].
 *    - The second [add] pushes keys (typically primary identifiers) into the [where]/[and] clause for conditional targeting.

 * 5. [data.update]
 *    - Executes a dynamic update operation against the 'roles' table.
 *    - Uses two child nodes: [values] defines updated values; [where]/[and] filters target records.

 * 6. [if] + [eq]
 *    - Verifies if any records were updated by checking if [data.update] returns 0.
 *    - If no record matched the filter criteria, a 404 status is returned.

 * 7. [response.status.set]
 *    - Sets the HTTP status code of the response to indicate success (202) or failure (404).

 * 8. [yield]
 *    - Returns the number of records affected by the update to the client as a part of the result.
 */
.arguments
   name:string
   description:string

// Verifying user is authorized to access endpoint.
validators.mandatory:x:@.arguments/*/name
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:roles
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning success to caller.
   response.status.set:202
   yield
      affected:x:@data.update
