
/*
 * Demonstrates basic exception handling in Hyperlambda using a [try] and [.catch] structure.
 * It attempts to divide two numbers and handles potential division-by-zero errors gracefully.
 *
 * ## Initialization
 * - [.numerator] is set to 5.
 * - [.denominator] is set to 0, which will trigger a division-by-zero exception.
 *
 * ## Try Block
 * - [math.divide] attempts to divide [.numerator] by [.denominator] using [get-value] references.
 * - Since division by zero is not allowed, an exception is thrown.
 *
 * ## Catch Block
 * - [.catch] intercepts the exception and logs a clear error message using [log.error].
 *
 * ## Use Case
 * - Useful for handling runtime errors in mathematical operations or any logic that may throw exceptions,
 *   ensuring system stability and meaningful diagnostics.
 */
.numerator:int:5
.denominator:int:0
try
   math.divide:x:@.numerator
      .:x:@.denominator
.catch
   log.error:Division by zero error occurred.
