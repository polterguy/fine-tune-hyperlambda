/*
 * Declares a custom slot [magic.auth.create-user] that creates a new user within the 'magic' database.
 *
 * The logic begins by checking whether the incoming 'password' is already hashed through [is_hashed].
 * If it is, the value is used as-is; otherwise, it is securely hashed using [crypto.password.hash].
 *
 * After password handling, a connection to the 'magic' database is established via [data.connect].
 * The user's credentials (username and password) are then inserted into the 'users' table using [data.create].
 *
 * The user's roles are iterated over using [for-each], and for each role, a mapping record is inserted
 * into the 'users_roles' table to link the user to their respective roles.
 *
 * If any additional metadata is provided under [extra], it iterates over those items,
 * extracts each name/value pair, and stores them into the 'users_extra' table by associating
 * each item with the username and respective 'type' and 'value'.
 *
 * This process ensures the user is registered with full information including hashed credentials,
 * assigned roles, and optional metadata in a modular and secure fashion.
 */
slots.create:magic.auth.create-user

   // Hashing password if we should.
   .password
   if
      get-value:x:@.arguments/*/is_hashed
      .lambda

         // Password is already hashed.
         set-value:x:@.password
            get-value:x:@.arguments/*/password
   else

      // Password is not hashed, hashing it.
      set-value:x:@.password
         crypto.password.hash:x:@.arguments/*/password

   // Opening up a database connection to magic.
   data.connect:magic

      // Inserting user.
      data.create
         table:users
         values
            username:x:@.arguments/*/username
            password:x:@.password

      // Inserting all roles.
      for-each:x:@.arguments/*/roles/*

         // Then inserting into users_roles an association between user and role.
         data.create
            table:users_roles
            values
               role:x:@.dp/#
               user:x:@.arguments/*/username

      // Inserting optionally supplied extra information.
      if
         exists:x:@.arguments/*/extra/*
         .lambda

            // Looping through each extra child specified.
            for-each:x:@.arguments/*/extra/*

               // Temporary variables.
               .type
               .value
               set-value:x:@.type
                  get-name:x:@.dp/#
               set-value:x:@.value
                  get-value:x:@.dp/#

               // Then inserting into users_extra an association between user and extra value.
               data.create
                  table:users_extra
                  values
                     user:x:@.arguments/*/username
                     type:x:@.type
                     value:x:@.value
