
/*
 * Defines a dynamic slot named [magic.auth.create-user] that creates a user in the 'magic' database.
 * It securely handles password hashing, assigns roles, and optionally inserts extra metadata about the user.
 *
 * ### Password Handling
 * - If [is_hashed] is true, the password is used as-is.
 * - Otherwise, [crypto.password.hash] is used to securely hash the raw password before storing it.

 * ### User Creation
 * - [data.connect] opens a connection to the 'magic' database.
 * - [data.create] inserts the user into the 'users' table with [username] and hashed [password] from arguments.

 * ### Role Assignment
 * - [for-each] iterates over each role in [roles] argument.
 * - A [data.create] inserts each role-to-user mapping into the 'users_roles' table.

 * ### Extra Metadata (Optional)
 * - If [extra] fields are provided:
 *   - [for-each] loops over each [extra] child node.
 *   - The node name becomes the [type], and its value becomes the [value].
 *   - Each pair is inserted into the 'users_extra' table with a reference to the 'username'.

 * This slot allows for robust and secure user creation,
 * supporting dynamic role assignment and optional extra profile metadata using Hyperlambda.
 */
slots.create:magic.auth.create-user

   // Hashing password if we should.
   .password
   if
      get-value:x:@.arguments/*/is_hashed
      .lambda

         // Password is already hashed.
         set-value:x:@.password
            get-value:x:@.arguments/*/password
   else

      // Password is not hashed, hashing it.
      set-value:x:@.password
         crypto.password.hash:x:@.arguments/*/password

   // Opening up a database connection to magic.
   data.connect:magic

      // Inserting user.
      data.create
         table:users
         values
            username:x:@.arguments/*/username
            password:x:@.password

      // Inserting all roles.
      for-each:x:@.arguments/*/roles/*

         // Then inserting into users_roles an association between user and role.
         data.create
            table:users_roles
            values
               role:x:@.dp/#
               user:x:@.arguments/*/username

      // Inserting optionally supplied extra information.
      if
         exists:x:@.arguments/*/extra/*
         .lambda

            // Looping through each extra child specified.
            for-each:x:@.arguments/*/extra/*

               // Temporary variables.
               .type
               .value
               set-value:x:@.type
                  get-name:x:@.dp/#
               set-value:x:@.value
                  get-value:x:@.dp/#

               // Then inserting into users_extra an association between user and extra value.
               data.create
                  table:users_extra
                  values
                     user:x:@.arguments/*/username
                     type:x:@.type
                     value:x:@.value
