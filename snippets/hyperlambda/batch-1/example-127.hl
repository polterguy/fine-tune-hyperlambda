
/*
 * Creates a [semaphore] named [foo-bar], ensuring only one thread can access the enclosed lambda block at a time.
 *
 * This construct is essential for synchronizing access to shared resources or preventing race conditions
 * in concurrent environments.
 *
 * 1. [semaphore]
 *    * Declares a named semaphore, limiting concurrent execution of the enclosed lambda.
 *    * Only a single thread can enter at a time; others must wait until the semaphore is released.
 *
 * 2. [foo-bar]
 *    * The identifier for the semaphore, which must be unique across your system if you want global exclusion.
 *
 * 3. .lambda
 *    * The code block that will be protected by the semaphore.
 *
 * Use Cases:
 * * Updating a shared configuration file to prevent corruption from simultaneous writes.
 * * Processing a queue where jobs must be executed sequentially, one at a time.
 */
semaphore:foo-bar
   /*
    * Only one thread will be allowed entrance into this piece of
    * code at the same time, ensuring synchronized access, for cases
    * where you cannot allow more than one thread to enter at the
    * same time.
    */