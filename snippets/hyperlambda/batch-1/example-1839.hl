
/*
 * This Hyperlambda endpoint unzips a specified file, optionally into a new folder
 * with the same name as the zip file (excluding the extension).
 * Only users with the [root] role are allowed to invoke it.
 *
 * 1. [.arguments]
 *    * Accepts two arguments:
 *      - [file]: The full path to the zip file to extract.
 *      - [create_folder]: A boolean indicating whether a new folder should be created for extraction.
 *
 * 2. [auth.ticket.verify:root]
 *    * Ensures that only users with the [root] role can access the endpoint.
 *
 * 3. [if:x:@.arguments/*/create_folder]
 *    * Checks whether the caller wants to create a new folder for the unzipped content.
 *
 * 4. [strings.length], [strings.substring], [math.subtract]
 *    * Extracts the base name of the zip file, removing the ".zip" extension.
 *
 * 5. [strings.concat]
 *    * Constructs the folder path by appending a forward slash to the zip file's base name.
 *
 * 6. [add:x:../*/io.file.unzip]
 *    * Dynamically injects the [folder] argument into the [io.file.unzip] call so that the contents are extracted into the correct folder.
 *
 * 7. [if not io.folder.exists]
 *    * If the folder does not exist:
 *      - [io.folder.create]: Creates the target folder.
 *    * Otherwise:
 *      - [io.folder.delete]: Deletes the existing folder.
 *      - [io.folder.create]: Re-creates the folder to ensure it's empty.
 *
 * 8. [io.file.unzip:x:@.arguments/*/file]
 *    * Unzips the file directly if [create_folder] is false.
 *    * If [create_folder] is true, this serves as a fallback unzipping call without the [folder] argument, in case injection failed or was skipped.
 *
 * 9. [return-nodes]
 *    * Returns a success node to indicate the operation completed.
 *
 * Result:
 * Unzips the specified file into its current folder, or a newly created one, depending on the [create_folder] flag.
 */
.arguments
   file:string
   create_folder:bool

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Checking if we need to create folder with name and path of zip file.
if:x:@.arguments/*/create_folder
   strings.length:x:@.arguments/*/file
   strings.substring:x:@.arguments/*/file
      .:int:0
      math.subtract:x:@strings.length
         .:int:4
   strings.concat
      get-value:x:@strings.substring
      .:/
   unwrap:x:+/*/*
   add:x:../*/io.file.unzip
      .
         folder:x:@strings.concat
   if
      not
         io.folder.exists:x:@strings.concat
      .lambda

         // Creating folder we're unzipping into.
         io.folder.create:x:@strings.concat
   else

      // Deleting folder and re-creating it to ensure it's empty.
      io.folder.delete:x:@strings.concat
      io.folder.create:x:@strings.concat

// Unzipping file.
io.file.unzip:x:@.arguments/*/file

// Returning success to caller.
return-nodes
   result:success
