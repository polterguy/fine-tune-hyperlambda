
/*
 * Read (list) Hyperlambda endpoint that returns records from the [roles] table in the [cms] SQLite database,
 * with optional filtering and strict access control allowing only users with the 'guest' role.
 *
 * ### Arguments
 * - [.arguments] supports optional filtering:
 *   - [roles.id.eq]: Matches an exact role ID.
 *   - [roles.name.like]: Matches role names using pattern-based comparison.
 *   - [roles.name.eq]: Matches role names exactly.
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures that only users belonging to the 'guest' role can access the endpoint.
 *
 * ### Database Operation
 * - [data.connect] opens a connection to the [cms] database.
 * - [add] forwards any matching argument nodes into the [where] clause of the [data.read] operation.
 * - [data.read] reads from the [roles] table and selects only [roles.id] and [roles.name].
 *
 * ### Response
 * - [return-nodes] returns the filtered records from the 'roles' table to the caller.
 *
 * This endpoint demonstrates optional filtering, role-restricted access, and secure querying
 * against a database using Hyperlambda's structured CRUD logic.
 */
.arguments
   roles.id.eq:long
   roles.name.like:string
   roles.name.eq:string

// Verifying user belongs to the 'guest' account.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:roles
      columns
         roles.id
         roles.name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
