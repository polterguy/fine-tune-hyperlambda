
/*
 * This Hyperlambda snippet demonstrates how to perform a secure and dynamic HTTP POST request
 * with a structured JSON payload and custom headers. It also verifies the HTTP response and
 * extracts fields if the request was successful.
 *
 * 1. [.payload]
 *    - Defines the body of the HTTP request with fields like [email], [pin], and [source].
 *    - These will be serialized as JSON automatically by [http.post] when [convert:true] is set.
 *
 * 2. [.headers]
 *    - Contains custom HTTP headers including:
 *      - [Content-Type] to ensure proper MIME type.
 *      - [X-Request-ID] as a custom identifier for traceability.
 *
 * 3. [add]
 *    - Dynamically injects the contents of [.headers] and [.payload] into the [http.post] slot before invocation.
 *    - This ensures that the request is constructed based on dynamic input rather than static child nodes.
 *
 * 4. [http.post]
 *    - Executes a POST request to the login endpoint "https://api.example.com/login/email".
 *    - The [headers] and [payload] are populated above.
 *    - [convert:true] ensures the response is automatically parsed into a lambda object for easy traversal.
 *
 * 5. [if] with [and], [mte], and [lt]
 *    - Verifies that the HTTP response code is within the 2xx success range (200 <= status < 300).
 *    - If valid, extracts and stores [user-name] and [session-id] from the response body.
 *
 * 6. [.lambda] with [set-value]
 *    - Conditionally sets [.user-name] and [.session-id] using values from the JSON response.
 *    - Demonstrates use of lambda expressions to retrieve values from the parsed HTTP response.
 *
 * 7. [else] with [throw]
 *    - If the status code is outside of 2xx, an exception is thrown with a descriptive error message.
 */
.payload
   email:user@example.com
   pin:4321
   source:mobile-app

// Create headers for content-type and custom request ID
.headers
   Content-Type:application/json
   X-Request-ID:abc-001-login

// Make the HTTP POST request
add:x:./*/http.post/*/headers
   get-value:x:@.headers/*
add:x:./*/http.post/*/payload
   get-value:x:@.payload/*
http.post:"https://api.example.com/login/email"
   headers
   payload
   convert:true

// Verify response status is 2xx
if
   and
      mte:x:@http.post
         .:int:200
      lt:x:@http.post
         .:int:300
   .lambda
      .user-name
      set-value:x:@.user-name
         get-value:x:@http.post/*/content/*/user-name

      .session-id
      set-value:x:@.session-id
         get-value:x:@http.post/*/content/*/session-id
else
   throw:Email login failed
