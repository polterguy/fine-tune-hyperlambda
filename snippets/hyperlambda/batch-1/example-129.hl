
/*
 * Hyperlambda endpoint that deletes a single record from the [Genre] table in the [chinook] SQLite database.
 *
 * ### Arguments
 * - [.arguments] contains input parameters:
 *   - [GenreId]: The primary key of the genre to delete (mandatory).
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures the user has either the "admin" or "basic" role.
 * - [validators.mandatory] enforces that [GenreId] is provided before continuing.
 *
 * ### Database Operation
 * - [data.connect] opens a connection to the [chinook] database.
 * - [add] dynamically injects the [GenreId] argument into the [where] clause of the delete statement.
 * - [data.delete] performs the deletion in the [Genre] table using a parameterized condition.
 *
 * ### Response Handling
 * - [unwrap] is used to forward-evaluate the [affected] node's value such that it becomes the return value of [data.delete].
 *   This ensures that the returned structure contains only the final response nodes, not internal metadata.
 * - [return] provides the number of affected rows to the caller as [affected].
 *
 * This endpoint demonstrates secure deletion with validation, role-based access control,
 * and proper result unwrapping using Hyperlambda.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   GenreId:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,basic
validators.mandatory:x:@.arguments/*/GenreId

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:Genre
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
