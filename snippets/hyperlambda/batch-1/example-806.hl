
/*
 * This Hyperlambda snippet uses the [if] control structure in combination with the [and] logical slot
 * to check that two separate conditions are both true before performing an action.
 *
 * 1. [.foo1], [.foo2]
 *    - These nodes are initialized with the value 'OK'.
 *    - They represent data points being evaluated.
 *
 * 2. [if]
 *    - Evaluates a conditional expression and executes the nested [.lambda] block if the condition is true.
 *
 * 3. [and]
 *    - Ensures that both sub-conditions must be true for the [if] block to be executed.
 *    - This logical operator returns true only if all its children evaluate to true.
 *
 * 4. [eq]
 *    - Used twice to compare the value of [.foo1] and [.foo2] to the literal string 'OK'.
 *    - If both comparisons succeed, the overall [and] condition becomes true.
 *
 * 5. [get-value]
 *    - Retrieves the values of [.foo1] and [.foo2] for evaluation.
 *    - The expression `../*/.foo1` accesses the corresponding sibling node at the correct level.
 *
 * 6. [set-value]
 *    - Sets the [.result] node to 'MATCH' if both [eq] conditions are true.
 *    - This is the intended outcome when all checks pass.
 */
.foo1:OK
.foo2:OK
if
   and
      eq
         get-value:x:../*/.foo1
         .:OK
      eq
         get-value:x:../*/.foo2
         .:OK
   .lambda
      set-value:x:../*/.result
         .:MATCH
