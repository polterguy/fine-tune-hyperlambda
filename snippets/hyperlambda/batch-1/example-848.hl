
/*
 * This Hyperlambda snippet demonstrates how to perform a compound database operation—
 * creating an order and updating product stock—within an atomic transaction using [data.transaction.create].
 * Both operations are committed together, ensuring consistency.
 *
 * 1. [data.connect]
 *    - Opens a connection to the [shopDB] database.
 *    - All database operations must occur within this connection context.
 *
 * 2. [data.transaction.create]
 *    - Begins a transactional block to group multiple database operations.
 *    - Ensures that either all contained operations succeed, or none are persisted if an error occurs.
 *
 * 3. [data.create]
 *    - Inserts a new order into the [orders] table.
 *    - Sets the [customer_id] to 42 and [total] to 100.00.
 *
 * 4. [data.update]
 *    - Updates the stock value for a specific product in the [products] table.
 *    - Targets the record where [product_id] is 123, updating its [stock] to 50.
 *
 * 5. [data.transaction.commit]
 *    - Commits the transaction, finalizing both the order creation and stock update in one atomic operation.
 *    - If this line is omitted or an error occurs before it's reached, the transaction will be rolled back.
 */
data.connect:shopDB

   // MUST be in a [data.connect] invocation
   data.transaction.create
      data.create
         table:orders
         values
            customer_id:42
            total:100.00
      data.update
         table:products
         values
            stock:long:50
         where
            and
               product_id:123

      // Commit the transaction to save both changes
      data.transaction.commit
