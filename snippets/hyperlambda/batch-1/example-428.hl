
/*
 * Declares an authenticated Hyperlambda endpoint that retrieves and parses all available training
 * template snippets stored as `.md` files under `/modules/` and `/system/` directories.
 * 
 * ## Input Arguments
 * - [private]: Optional boolean flag, not used in logic but could be used for future filtering or permission logic.
 * 
 * ## Authorization
 * - [auth.ticket.verify] ensures only users with the 'root' role can access this endpoint.
 * 
 * ## File Discovery
 * - [io.file.list-recursively] recursively lists files under the `/modules/` and `/system/` paths.
 * - [for-each] loops through the resulting file paths.
 * - [if] checks if the file path ends with `.md` and contains `/ts-templates/`, qualifying it as a template file.
 * 
 * ## Template Parsing
 * - [load-file] reads the content of each matching file.
 * - [strings.split] splits the file into lines based on newline characters.
 * - [set-value] assigns the first line (usually the prompt) to a [.prompt] node after trimming.
 * - [remove-nodes] removes the first line from the split lines.
 * - [strings.join] joins the remaining lines as the completion content, also trimmed using [set-value].
 * - [unwrap] simplifies the structure before adding it to the [.result] collection.
 * 
 * ## Output
 * - Each discovered template is added to [.result] as a new node with [prompt] and [completion] keys.
 * - The [return-nodes] slot returns the full list of processed template snippets to the client.
 */
.arguments
   private:bool

// Making sure user has access to invoked endpoint.
auth.ticket.verify:root

// Contains list of templates we find.
.result

// Listing files recursively.
io.file.list-recursively:/modules/
io.file.list-recursively:/system/
for-each:x:../*/io.file.list-recursively/*

   // Checking if this is a template file.
   if
      and
         strings.ends-with:x:@.dp/#
            .:.md
         strings.contains:x:@.dp/#
            .:/ts-templates/
      .lambda

         /*
          * This is a template file.
          * 
          * Figuring out its prompt and completion.
          */
         load-file:x:@.dp/#
         strings.split:x:@load-file
            .:"\n"
         .prompt
         set-value:x:@.prompt
            strings.trim:x:@strings.split/0
         .completion
         remove-nodes:x:@strings.split/0
         set-value:x:@.completion
            strings.join:x:@strings.split/*
               .:"\n"
         set-value:x:@.completion
            strings.trim:x:@.completion
         unwrap:x:+/*/*/*
         add:x:@.result
            .
               .
                  prompt:x:@.prompt
                  completion:x:@.completion

// Returning result to caller.
return-nodes:x:@.result/*
