
/*
 * CRUD Hyperlambda endpoint that deletes one record from the [media] table
 * in the [cms] SQLite database. This operation is restricted to users with the [admin] role.
 *
 * 1. [.arguments]
 *    * Accepts a single input:
 *    * - [id]: The primary key of the [media] record to be deleted.
 *
 * 2. [validators.mandatory]
 *    * Ensures that the [id] argument is present before proceeding.
 *    * Prevents invalid or incomplete deletion requests.
 *
 * 3. [auth.ticket.verify]
 *    * Authorizes the user by verifying they have the [admin] role.
 *    * Denies access to users without appropriate privileges.
 *
 * 4. [data.connect]
 *    * Opens a connection to the [cms] SQLite database using the [generic] connection string.
 *    * Declares the [database-type] as [sqlite].
 *
 * 5. [add]
 *    * Dynamically injects the [id] argument into the WHERE clause of the [data.delete] operation.
 *    * Ensures that the deletion is scoped to the specified record.
 *
 * 6. [data.delete]
 *    * Executes the deletion on the [media] table.
 *    * The [where and] block ensures proper filtering logic is applied.
 *
 * 7. [unwrap]
 *    * Unwraps the result from [data.delete] for top-level access in the response.
 *
 * 8. [return]
 *    * Returns the number of affected rows under the [affected] node.
 *    * Typically returns 1 if the record was successfully deleted.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

validators.mandatory:x:@.arguments/*/id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:media
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
