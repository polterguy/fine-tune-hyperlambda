
/*
 * This example demonstrates how to execute SQL statements against a database using [data.connect] and [data.select].
 *
 * ## Structure:
 * - [data.connect]: Opens a database connection for the duration of its child slots. The value should be the name of a configured database connection,
 *   such as 'northwind', 'magic', 'crm', or any alias declared in your appsettings.json.
 *   - Important: This connection is scoped and must wrap all data access logic such as [data.select], [data.read], [data.create], etc.
 *
 * ## Query Execution:
 * - [data.select]: Executes a raw SQL query. You can declare the SQL statically or construct it dynamically using lambda expressions.
 *   - The example query retrieves the first 5 rows from the 'log' table.
 *   - Avoid placing [data.select] outside of the scope of [data.connect], or the query will fail due to missing connection context.
 *
 * ## Security Note:
 * - Always validate and parameterize user input if you dynamically generate SQL to avoid SQL injection attacks.
 *
 * ## Usage:
 * Use this pattern whenever you need full control over SQL syntax and when ORM-style [data.read] or [data.scalar] slots are insufficient.
 */
data.connect:your_db_name_here

   // The [data.select] will execute SQL statically declared inside its value, or dynamically retrieved using lambda expressions.
   data.select:select * from log limit 5

   /*
    * NOTICE!
    * IT IS CRUCIAL THAT SLOTS ACCESSING THE DATABASE IS INSIDE A SLOT THAT HAS ALREADY CONNECTED TO THE DATABASE!
    *
    * Such as illustrated above, where [data.select] is a child node of [data.connect]
    */