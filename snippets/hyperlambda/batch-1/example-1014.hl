
/*
 * Endpoint sending a POST request to fetch user metadata by ID.
 * Extracts and yields the name and email if the request is successful.
 *
 * 1. [.arguments]
 *    * Declares a single input parameter [id], representing the user ID.
 *
 * 2. [http.post]
 *    * Sends a POST request to "https://user.example.io/meta".
 *    * Includes the [id] in the request payload.
 *    * [convert:true] parses the JSON response into a lambda structure.
 *
 * 3. [if]
 *    * Checks whether the HTTP response code is within the 2xx success range.
 *
 * 4. [and], [lt], [mte]
 *    * [mte]: Ensures the status code is â‰¥ 200.
 *    * [lt]: Ensures the status code is < 300.
 *    * Confirms that the request was successful before processing the result.
 *
 * 5. [.lambda] (success path)
 *    * Extracts the [name] and [email] from the parsed JSON content and returns them to the caller via [yield].
 *
 * 6. [return] (failure path)
 *    * If the request fails, returns a static error message under the [error] node.
 */
.arguments
   id:int

http.post:"https://user.example.io/meta"
   convert:true
   payload
      id:x:@.arguments/*/id

if
   and
      lt:x:@http.post
         .:int:300
      mte:x:@http.post
         .:int:200
   .lambda
      yield
         name:x:@http.post/*/content/*/name
         email:x:@http.post/*/content/*/email
return
   error:Unable to retrieve user metadata
