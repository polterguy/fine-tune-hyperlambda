
/*
 * This Hyperlambda endpoint requests a weather forecast from NOAA in XML format
 * and handles various HTTP status codes to provide informative responses.
 *
 * 1. [.arguments]
 *    * Declares that the endpoint accepts input arguments, although none are required for this call.
 *
 * 2. [.weather.result]
 *    * Placeholder node used to store the final result message based on the HTTP response.
 *
 * 3. [http.get]
 *    * Sends a GET request to the NOAA weather forecast API.
 *    * Specifies [Accept: application/xml] in the headers to request an XML-formatted response.
 *    * [convert:true] attempts to parse the response into a lambda-compatible structure.
 *
 * 4. [switch:x:@http.get]
 *    * Evaluates the HTTP status code returned by the request.
 *    * Routes execution based on matching status values.
 *
 * 5. [case:int:200]
 *    * Indicates a successful response.
 *    * Sets [.weather.result] to a success message confirming XML data was received.
 *
 * 6. [case:int:406]
 *    * Indicates the server cannot return XML (Not Acceptable).
 *    * Throws an error to signal this issue explicitly.
 *
 * 7. [default]
 *    * Handles any other status code not specifically matched above.
 *    * Sets [.weather.result] to a fallback message indicating failure to fetch data.
 *
 * 8. [yield]
 *    * Returns the result message to the caller in a node named [result].
 */
.arguments

// Result node for weather info
.weather.result

http.get:"https://api.weather.gov/gridpoints/MPX/107,71/forecast"
   convert:true
   headers
      Accept:application/xml

switch:x:@http.get

   case:int:200
      set-value:x:@.weather.result
         .:Weather data received in XML format

   case:int:406
      throw:406 Not Acceptable â€“ Server cannot return XML

   default
      set-value:x:@.weather.result
         .:Unable to fetch weather data

yield
   result:x:@.weather.result
