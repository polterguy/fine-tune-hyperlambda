
/*
 * This Hyperlambda endpoint allows authorized users to upload a backup SQLite database file.
 * The file is saved on the server and the SQLite connection pool is flushed to ensure consistency.
 *
 * 1. [.arguments]
 *    * Declares a single [file:*] argument to accept a file upload.
 *    * The [*] wildcard allows nested metadata nodes (e.g., [name], [stream]).
 *
 * 2. [.accept:multipart/form-data]
 *    * Declares that this endpoint accepts HTTP POST requests with [multipart/form-data],
 *      enabling file uploads from forms or APIs.
 *
 * 3. [auth.ticket.verify:root]
 *    * Restricts access to users with the [root] role.
 *
 * 4. [validators.mandatory]
 *    * Ensures the following nodes are provided:
 *      - [file]: The root file node.
 *      - [file/*/name]: The filename.
 *      - [file/*/stream]: The binary stream representing file content.
 *
 * 5. [validators.regex]
 *    * Validates the filename using a regular expression.
 *    * The regex `\\.db$` ensures only files with a `.db` extension are accepted.
 *
 * 6. [.full-path + strings.concat]
 *    * Constructs the full server-side path to store the file.
 *    * Concatenates the fixed folder [/data/] with the uploaded fileâ€™s name.
 *
 * 7. [io.stream.save-file]
 *    * Saves the binary stream to the computed path on the server.
 *
 * 8. [sqlite.connections.flush]
 *    * Flushes any existing SQLite database connections to ensure the uploaded database
 *      is immediately available and not blocked by old connections.
 *
 * 9. [return]
 *    * Returns a success message to the caller after upload and flushing complete.
 *
 * Result:
 * Securely uploads a SQLite backup file to the server's [/data/] folder and resets SQLite connections.
 */
.arguments
   file:*
.accept:multipart/form-data

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file
validators.mandatory:x:@.arguments/*/file/*/name
validators.mandatory:x:@.arguments/*/file/*/stream
validators.regex:x:@.arguments/*/file/*/name
   regex:"\\.db$"

// Saves the file to the specified folder.
.full-path
set-value:x:@.full-path
   strings.concat
      .:/data/
      get-value:x:@.arguments/*/file/*/name
io.stream.save-file:x:@.full-path
   get-value:x:@.arguments/*/file/*/stream

// Flushing SQLite, and returning success to caller.
sqlite.connections.flush
return
   result:success
