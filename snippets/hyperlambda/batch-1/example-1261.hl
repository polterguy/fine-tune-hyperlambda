
/*
 * This Hyperlambda endpoint deletes one or more cache items depending on the value of the [id] argument.
 * It ensures authorization and handles both wildcard and single-key cache deletions.
 *
 * 1. [.arguments]
 *    * Accepts a required argument:
 *    * - [id]: The cache key to delete, or a prefix followed by '*' to indicate a group of keys.
 *
 * 2. [auth.ticket.verify:root]
 *    * Ensures that only users with the [root] role can invoke this endpoint.
 *
 * 3. [validators.mandatory]
 *    * Validates that the [id] argument is provided by the caller.
 *
 * 4. [if] with [strings.ends-with]
 *    * Checks if the [id] ends with '*', indicating a bulk deletion is intended.
 *
 * 5. [.lambda] (wildcard branch)
 *    * [strings.split]: Removes the '*' suffix to get the cache key prefix.
 *    * [cache.clear]: Deletes all cache keys that begin with the specified prefix.
 *
 * 6. [else]
 *    * [cache.set] with only a key (no value) removes a single cache entry by key.
 *
 * 7. [return]
 *    * Returns a success message to confirm that the cache deletion has been processed.
 *
 * Example Use:
 * - To delete a single item: `id:my-cache-key`
 * - To delete all items starting with "user_": `id:user_*`
 */
.arguments
   id:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/id

// Checking if caller wants to delete multiple cache items simultaneously.
if
   strings.ends-with:x:@.arguments/*/id
      .:*
   .lambda

      // Deletes all cache items starting with specified string.
      strings.split:x:@.arguments/*/id
         .:*
      cache.clear
         filter:x:@strings.split/0
else

   // Deletes a single cache item.
   cache.set:x:@.arguments/*/id

// Returning success to caller.
return
   result:success
