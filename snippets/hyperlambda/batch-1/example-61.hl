/*
 * Demonstrates conditional logic and arithmetic operations to categorize numbers
 * into even or odd groups and calculate totals for each category.
 *
 * ### Initialization
 * - [.numbers] holds a collection of numeric values with keys [num1] to [num5].
 * - [.even-numbers] and [.odd-numbers] are initialized as containers for categorized results.

 * ### Categorization
 * - A [for-each] loop iterates through all entries in [.numbers].
 * - For each number:
 *   - [math.modulo] checks if the number is divisible by 2.
 *   - An [if] condition checks if the result of modulo is 0:
 *     - If true, it's even → added to [.even-numbers] and logged.
 *     - Else, it's odd → added to [.odd-numbers] and logged.
 *
 * ### Count Aggregation
 * - [.even-count] and [.odd-count] are initialized to 0.
 * - Two additional [for-each] loops increment the counters based on
 *   the number of items in [.even-numbers] and [.odd-numbers].

 * ### Logging Summary
 * - Logs a final message indicating completion of the categorization.
 * - Logs the total number of even and odd numbers found.

 * This snippet demonstrates:
 * - Arithmetic using [math.modulo] and [math.increment]
 * - Control flow using [if] and [else]
 * - Dynamic data grouping using [add]
 * - Logging using [log.info]
 */
.numbers
   num1:int:42
   num2:int:17
   num3:int:100
   num4:int:33
   num5:int:64

// Create containers for even and odd numbers
.even-numbers
.odd-numbers

// Iterate through each number and categorize
for-each:x:@.numbers/*

   // Check result and categorize accordingly
   math.modulo:x:@.dp/#
      .:int:2
   if
      eq:x:@math.modulo
         .:int:0
      .lambda

         // Number is even
         unwrap:x:+/*/*
         add:x:@.even-numbers
            .
               number:x:@.current

         // Log the even number
         log.info:Found even number

   else

      // Number is odd
      unwrap:x:+/*/*
      add:x:@.odd-numbers
         .
            number:x:@.current

      // Log the odd number
      log.info:Found odd number

// Calculate totals
.even-count:int:0
.odd-count:int:0

for-each:x:@.even-numbers/*
   math.increment:x:@.even-count

for-each:x:@.odd-numbers/*
   math.increment:x:@.odd-count

// Log summary
log.info:Number categorization complete
log.info:Even count
   count:x:@.even-count
log.info:Odd count
   count:x:@.odd-count