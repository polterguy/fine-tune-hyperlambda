
/*
 * This Hyperlambda snippet generates the Fibonacci sequence up to a maximum value of 100.
 * It stores each generated number into the [.fibonacci_return] node.
 *
 * 1. [.fibonacci_return]
 *    * Declares the container node where all Fibonacci numbers will be stored.
 *
 * 2. [.a] and [.b]
 *    * Initialize the first two Fibonacci numbers: 0 and 1 respectively.
 *    * These are used as the base of the computation.
 *
 * 3. [while]
 *    * Continues to loop as long as the value of [.b] is less than 100.
 *
 * 4. [.lambda]
 *    * Defines the body of the loop to compute the next Fibonacci number.
 *
 * 5. [.next.int]
 *    * Holds the computed next number in the sequence (a + b).
 *
 * 6. [if]
 *    * Ensures that the new Fibonacci number is still below 100 before adding it to the result.
 *
 * 7. [add]
 *    * Appends the new number to the [.fibonacci_return] list.
 *
 * 8. [set-value:x:@.a] and [set-value:x:@.b]
 *    * Update [.a] and [.b] to advance the sequence for the next loop iteration.
 *
 * Result:
 * * After execution, [.fibonacci_return] will contain a list of Fibonacci numbers
 *   up to (but not including) 100.
 */
.fibonacci_return
.a:int:0
.b:int:1
while
   lt
      get-value:x:@.b
      .:int:100
   .lambda
      // Compute next Fibonacci number
      .next.int
      set-value:x:@.next.int
         math.add
            get-value:x:@.a
            get-value:x:@.b
      if
         lt
            get-value:x:@.b
            .:int:100
         .lambda
            unwrap:x:+/*/*
            add:x:../*/.fibonacci_return
               .
                  .:x:@.next.int
      set-value:x:@.a
         get-value:x:@.b
      set-value:x:@.b
         get-value:x:@.next.int
