
/*
 * Defines an unprotected Hyperlambda endpoint to update a record in the 'CustomerDemographics' table
 * of the 'northwind' SQLite database. The endpoint does not implement any authorization mechanism.
 * 
 * ## Input Arguments
 * - [CustomerTypeID]: Mandatory string value serving as the primary key for identifying the record.
 * - [CustomerDesc]: Optional string value representing the new description for the customer type.
 * 
 * ## Input Validation
 * - [validators.mandatory] ensures that [CustomerTypeID] is provided before continuing.
 * 
 * ## Database Interaction
 * - [data.connect] opens a connection to the 'northwind' database using a generic SQLite connector.
 * - [add] dynamically injects argument values into [data.update]'s [values] and [where] / [and] nodes,
 *   effectively constructing a parameterized SQL `UPDATE` statement.
 * - [data.update] executes the actual update against the 'CustomerDemographics' table.
 * 
 * ## Error Handling
 * - If [data.update] affects 0 rows (meaning no record matched the primary key), a 404 status is returned
 *   via [response.status.set], and the function exits early using [return].
 * 
 * ## Success Handling
 * - If the update succeeds, a 202 HTTP status code is returned.
 * - [yield] returns the number of affected rows in the [affected] key.
 */
.arguments

   // CustomerTypeID column value being primary key of record to update, mandatory argument
   CustomerTypeID:string

   // CustomerDesc column's new value
   CustomerDesc:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/CustomerTypeID

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:CustomerDemographics
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   yield
      affected:x:@data.update
