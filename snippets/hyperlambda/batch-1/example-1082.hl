
/*
 * This Hyperlambda snippet demonstrates structured exception handling using [try], [.catch], and [.finally].
 * It shows how to handle thrown errors and execute cleanup or follow-up logic regardless of success or failure.
 *
 * 1. [try]
 *    * Begins a block where an exception may occur.
 *    * In this example, it explicitly throws an error using [throw] with the message "Whatever".
 *
 * 2. [.catch]
 *    * Executes only if an exception is thrown inside the [try] block.
 *    * Logs an error message: "ERROR HAPPENED!! 42, 42, 42!" using [log.info].
 *
 * 3. [.finally]
 *    * Executes after the [try] and [.catch] blocks regardless of whether an error occurred.
 *    * Logs a message indicating that final cleanup or post-processing is taking place.
 *
 * Use Case:
 * * Helps manage error scenarios and ensure that important code runs even in failure cases,
 *   such as logging, resource cleanup, or notifications.
 */
try
   throw:Whatever

.catch
   log.info:ERROR HAPPENED!! 42, 42, 42!

.finally
   log.info:Yup, we are finally there!