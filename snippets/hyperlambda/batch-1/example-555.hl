
/*
 * Implements a simple queue processor by moving items one-by-one from [.queue] to [.popped] until the queue is empty.
 *
 * ## Initial Structure
 * - [.queue] contains a list of [item] nodes with values: 'one', 'two', and 'three'.
 * - [.popped] is initially empty and will store dequeued items.
 *
 * ## Loop Logic
 * - [while] continues executing as long as at least one child exists under [.queue] using [exists].
 *
 * ## Loop Body
 * - [unwrap] ensures expressions like '@.queue/0' are resolved properly within the loop.
 * - [add] appends the first [item] from [.queue] into [.popped], preserving structure.
 * - [remove-nodes] deletes the first node from [.queue], effectively dequeuing it.
 *
 * ## Use Case
 * - Ideal for FIFO queue processing scenarios such as task execution, stream parsing, or message handling.
 */
.queue
   item:one
   item:two
   item:three
.popped

while
   exists:x:@.queue/*
   .lambda
      unwrap:x:+/*/*
      add:x:@.popped
         .
            item:x:@.queue/0
      remove-nodes:x:@.queue/0
