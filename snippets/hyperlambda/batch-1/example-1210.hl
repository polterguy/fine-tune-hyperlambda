
/*
 * This Hyperlambda endpoint retrieves distinct customer details from the [Chinook] SQLite database
 * for customers who have purchased tracks belonging to the "Rock" genre.
 * The endpoint takes ZERO arguments and uses a raw SQL query to perform the operation.
 *
 * 1. [.arguments]
 *    * Declared for endpoint structure compliance but no input is required.
 *
 * 2. [data.connect:chinook]
 *    * Opens a connection to the [Chinook] SQLite database using a [generic] connection string.
 *    * The [database-type] is explicitly set to [sqlite].
 *
 * 3. [data.select]
 *    * Executes a raw SQL query to join multiple tables and filter customers who purchased "Rock" genre tracks:
 *      - [Customer], [Invoice], [InvoiceLine], [Track], and [Genre] tables are joined.
 *      - Filters records where [Genre.Name = "Rock"].
 *      - Selects distinct values of [Email], [FirstName], [LastName], and [Genre name].
 *      - Results are sorted by customer email.
 *
 * 4. [return-nodes]
 *    * Returns the result of the SQL query to the caller using the path [@data.select/*].
 *
 * Result:
 * * The caller receives a list of distinct customer contact details filtered by the "Rock" genre purchase history.
 */
.arguments

// Connecting to database.
data.connect:chinook
   database-type:sqlite

   // Executing [data.select] slot with our SQL.
   data.select:"\n/*\n * Selects details from all customers that are listening to rock.\n * Make sure you select the chinook database before execxuting the script.\n */\nselect distinct c.Email, c.FirstName, c.LastName, g.name\n  from Customer c\n    inner join Invoice i on c.CustomerId = i.CustomerId\n    inner join InvoiceLine ii on i.InvoiceId = ii.InvoiceId\n    inner join Track t ON ii.TrackId = t.TrackId\n    inner join Genre g ON t.GenreId = g.GenreId\n  where g.Name = \"Rock\"\n  order by c.Email\n"
      database-type:sqlite

   // Returning a result of above invocation to caller.
   return-nodes:x:@data.select/*
