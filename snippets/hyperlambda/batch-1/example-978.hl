
/*
 * CRUD Hyperlambda endpoint that deletes a record from the [menu_items] table
 * in the [cms] SQLite database, without requiring authentication or authorization.
 *
 * 1. [.arguments]
 *    * Accepts one input: [id], which is the primary key of the record to delete.
 *
 * 2. [validators.mandatory]
 *    * Ensures the [id] argument is provided by the caller before executing the deletion logic.
 *
 * 3. [data.connect]
 *    * Establishes a connection to the [cms] SQLite database using the [generic] connection string.
 *    * Declares the [database-type] as [sqlite].
 *
 * 4. [add]
 *    * Injects the [id] argument into the WHERE clause of the [data.delete] statement.
 *    * Ensures that only the specified record is targeted for deletion.
 *
 * 5. [data.delete]
 *    * Executes the deletion query on the [menu_items] table, filtering by [id].
 *    * Scoped within a logical [and] clause for extensibility.
 *
 * 6. [unwrap]
 *    * Ensures that the result of [data.delete] is available as a sibling node for the return statement.
 *
 * 7. [return]
 *    * Returns a response containing how many records were affected by the deletion under the [affected] node.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

validators.mandatory:x:@.arguments/*/id

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:menu_items
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
