
/*
 * Demonstrates how to use [try], [.catch], and [.finally] in Hyperlambda to handle exceptions
 * and perform cleanup actions regardless of whether an error occurred.
 *
 * ### Execution Flow
 * - [try] contains logic that may fail — in this case, a [throw] simulates an error with the message "Error occurred".
 * - [.catch] is triggered if an exception is thrown in the [try] block:
 *   - [log.info] logs that the error was caught.
 * - [.finally] is executed no matter what — whether an error occurred or not:
 *   - [log.info] is used here to log cleanup actions.
 *
 * This pattern is useful for robust error handling and ensuring that important cleanup
 * or finalization logic is always executed in Hyperlambda.
 */
try
   throw:Error occurred
.catch
   log.info:Caught the error
.finally
   log.info:Cleanup done
