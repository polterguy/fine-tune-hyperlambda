
/*
 * Update endpoint that modifies a record in the 'crawl_urls' table of the 'scraper' SQLite database.
 * It identifies the record using the [crawl_url_id] and updates the [url] and [type] fields based on the provided arguments.
 * Only users with 'root' or 'admin' roles are allowed to execute this endpoint.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [crawl_url_id]: The primary key of the record to update (mandatory).
 *   - [url]: The new value for the URL column.
 *   - [type]: The new value for the type column.
 *
 * ### Validation
 * - [validators.mandatory] ensures that the [crawl_url_id] argument is present before continuing.
 *   If the argument is not specified an exception will be thrown.
 *
 * ### Authorization
 * - [auth.ticket.verify] allows only 'root' or 'admin' users to access the endpoint.
 *
 * ### Database Operation
 * - [data.connect] opens a connection to the 'scraper' SQLite database using the 'generic' connection string.
 * - [add] prepares:
 *   - [values] to update the [url] and [type] fields.
 *   - [where] clause to match the record using [crawl_url_id] by adding this ONLY the first argument (crawl_url_id) to the [and] node.
 * - [data.update] performs the update operation on the 'crawl_urls' table.
 *
 * ### Post-Update Check
 * - [if] block checks whether [data.update] affected zero records:
 *   - If so, it sets the HTTP response status to 404 and returns a message indicating the record was not found.
 *
 * ### Response
 * - [response.status.set] sets the HTTP status to 202 (Accepted) for successful updates.
 * - [unwrap] forward evaluates the expression being the value of the [affected] node.
 * - [return] sends the number of affected rows to the client as [affected].
 *
 * This endpoint demonstrates safe and role-restricted update operations in Hyperlambda,
 * with validation, conditional logic, and proper HTTP response semantics.
 */
.arguments

   // crawl_url_id column value being primary key of record to update
   crawl_url_id:long

   // url column's new value
   url:string

   // type column's new value
   type:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/crawl_url_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|scraper]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:crawl_urls
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
