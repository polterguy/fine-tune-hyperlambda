
/*
 * This Hyperlambda endpoint securely retrieves paginated, filtered, and sorted data from the [clusters] table
 * in the [hub] database. Only users with the [root] role can invoke this endpoint.
 *
 * 1. [.arguments]
 *    * Accepts input parameters that control paging, sorting, and filtering:
 *    * - [limit], [offset]: For pagination.
 *    * - [order], [direction]: For sorting the result set.
 *    * - Various filters such as [clusters.id.eq], [clusters.country.like], [clusters.enabled.eq], etc.
 *
 * 2. [auth.ticket.verify]
 *    * Verifies that the caller has the [root] role.
 *    * Ensures this endpoint is not accessible by unauthorized users.
 *
 * 3. [data.connect]
 *    * Establishes a connection to the [hub] database using the [generic] connection string.
 *
 * 4. [add] (pagination and sorting)
 *    * Injects [limit], [offset], [order], and [direction] nodes from [.arguments] into the structure of the [data.read] block.
 *    * Enables dynamic control over result windowing and ordering.
 *
 * 5. [remove-nodes]
 *    * Removes the used pagination and sorting arguments from [.arguments] to prevent duplication during filter generation.
 *
 * 6. [add] (filter conditions)
 *    * Adds any remaining argument nodes as filters under the WHERE clause of [data.read].
 *    * Dynamically constructs the filtering logic based on input.
 *
 * 7. [data.read]
 *    * Performs the actual database read operation.
 *    * Queries the [clusters] table and returns a specific set of columns: [id], [country], [name], and [enabled].
 *    * Filters are applied inside a logical [and] block using the values derived from [.arguments].
 *
 * 8. [return-nodes]
 *    * Returns the result nodes retrieved by [data.read] to the client.
 *    * Uses `@data.read/*` to capture all output records.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   clusters.id.like:string
   clusters.id.eq:string
   clusters.country.like:string
   clusters.country.eq:string
   clusters.name.like:string
   clusters.name.eq:string
   clusters.enabled.eq:bool

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|hub]

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Filtering conditions
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:clusters
      columns
         clusters.id
         clusters.country
         clusters.name
         clusters.enabled
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
