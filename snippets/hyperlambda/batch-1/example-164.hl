
/*
 * Creates a Hyperlambda endpoint that deletes a single record from the [Customer] table
 * in the [chinook] SQLite database, ensuring that only one specific record is targeted.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [CustomerId]: The primary key of the customer to delete (mandatory).
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures the caller has either the "root" or "admin" role.
 *
 * ### Safety Check
 * - [validators.mandatory] enforces that [CustomerId] is provided, preventing accidental deletion of all records.
 *
 * ### Database Operation
 * - [data.connect] opens a connection to the [chinook] database.
 * - [add] dynamically injects the [CustomerId] argument into the [where] clause of the [data.delete] operation.
 * - [data.delete] removes the specified customer from the [Customer] table.
 *
 * ### Response
 * - [yield] returns the number of affected rows as [affected], confirming the operation.
 *
 * This endpoint ensures safe deletion of individual records with proper role-based access
 * and mandatory input validation using Hyperlambda.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   CustomerId:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Making sure we do not delete ALL records in table!
validators.mandatory:x:@.arguments/*/CustomerId

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:Customer
      where
         and

   // Returning result of above invocation to caller.
   yield
      affected:x:@data.delete
