
/*
 * Delete a page from the CMS database by ID, with authorization and input validation.
 *
 * - The endpoint takes a required [id] argument of type `long`, identifying which record to delete from the 'pages' table.
 * - It begins by verifying the user's access with [auth.ticket.verify], allowing only users with the 'guest' role to proceed.
 * - The [validators.mandatory] slot ensures that the [id] argument is provided and not null.
 * - A connection to the 'cms' database is established using [data.connect], with 'sqlite' specified as the database type.
 * - The [add] slot dynamically inserts the [id] value into the [where]/[and] clause for the [data.delete] operation.
 * - The [data.delete] slot then executes the deletion based on the constructed condition, removing the row from the 'pages' table.
 * - The [unwrap] slot ensures the output from [data.delete] is properly passed to the [return] / [affected].
 * - Finally, the number of affected rows from the delete operation is returned to the client using the [return] node.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest
validators.mandatory:x:@.arguments/*/id

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:pages
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
