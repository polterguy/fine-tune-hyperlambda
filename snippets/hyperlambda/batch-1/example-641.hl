
/*
 * Demonstrates how to execute multiple loggers in parallel using [fork] and [join].
 *
 * ## Concurrency Structure
 * - [join] ensures that the main thread waits for all parallel [fork] threads to complete before proceeding.
 * - Two [fork] blocks are defined, each running independently in parallel.
 *
 * ## Logger 1
 * - Logs "Logging task 1 started".
 * - Sleeps for 500 milliseconds.
 * - Logs "Logging task 1 completed".
 *
 * ## Logger 2
 * - Logs "Logging task 2 started".
 * - Sleeps for 1000 milliseconds.
 * - Logs "Logging task 2 completed".
 *
 * ## Use Case
 * - Useful for executing logging, monitoring, or other independent tasks concurrently to improve performance
 *   or simulate asynchronous operations in Hyperlambda.
 */
join
   fork
      log.info:Logging task 1 started
      sleep:500
      log.info:Logging task 1 completed
   fork
      log.info:Logging task 2 started
      sleep:1000
      log.info:Logging task 2 completed
