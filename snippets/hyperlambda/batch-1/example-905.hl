/*
 * This Hyperlambda endpoint dynamically accepts any number of arguments,
 * converts them to integers, adds them together, and returns the total.
 *
 * 1. [.arguments] with * as its value
 *    - Accepts a flexible and dynamic set of input arguments.
 *    - The wildcard * allows for any number and name of arguments to be passed in.
 *
 * 2. [.result]
 *    - Initializes the accumulator variable as an integer with a starting value of 0.
 *    - It will hold the running total of all converted integer values.
 *
 * 3. [for-each]
 *    - Iterates over all input arguments under [.arguments].
 *    - The iterator variable [.dp/#] is used to reference each individual argument's value.
 *
 * 4. [set-value]
 *    - Updates [.result] with the result of each addition operation.
 *
 * 5. [math.add]
 *    - Performs integer addition of the current [.result] and the converted value of the current argument.
 *
 * 6. [convert]
 *    - Converts the value of each argument to an [int] before performing arithmetic.
 *    - Ensures type safety and allows input as strings or numeric literals.
 *
 * 7. [yield]
 *    - Returns the final sum stored in [.result] to the caller.
 *    - The use of `x:@.result` unwraps the value and places it into the [result] node of the HTTP response.
 */
.arguments:*

// Adding all arguments
.result:int:0
for-each:x:@.arguments/*
   set-value:x:@.result
      math.add
         get-value:x:@.result
         convert:x:@.dp/#
            type:int

// Returning result (notice, [yield] unwraps all its arguments)
yield
   result:x:@.result
