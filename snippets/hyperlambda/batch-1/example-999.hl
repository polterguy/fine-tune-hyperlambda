
/*
 * This Hyperlambda snippet attempts to verify if the user has the [superuser] role,
 * and executes different logic depending on whether access is granted or denied.
 *
 * 1. [.result]
 *    * Placeholder node used to store the outcome of the role verification logic.
 *
 * 2. [try]
 *    * Starts a try-catch block to handle exceptions gracefully.
 *
 * 3. [auth.ticket.verify]
 *    * Attempts to verify if the current user has the [superuser] role.
 *    * Throws an exception if the user lacks this role.
 *
 * 4. [set-value] (inside [try])
 *    * Executes only if [auth.ticket.verify] succeeds.
 *    * Sets [.result] to "Superuser access granted".
 *
 * 5. [.catch]
 *    * Catches exceptions thrown inside the [try] block.
 *    * Executes if the user does not have [superuser] privileges.
 *
 * 6. [set-value] (inside [.catch])
 *    * Sets [.result] to "You are not a superuser" if role verification fails.
 */
.result
try

   // This will throw an exception unless the user belongs to the 'superuser' role.
   auth.ticket.verify:superuser
   set-value:x:@.result
      .:Superuser access granted
.catch
   set-value:x:@.result
      .:You are not a superuser
