
/*
 * This Hyperlambda snippet demonstrates how to throw a custom exception
 * and retrieve its properties using a [.catch] block.
 *
 * 1. [.throws], [.status], [.public], [.message], [.type]
 *    * Initialize result placeholders that will be populated after the exception is caught.
 *
 * 2. [try]
 *    * Begins a try block that deliberately throws an exception.
 *
 * 3. [throw]
 *    * Throws a custom exception with:
 *    * - [public:true]: Indicates this error is safe to expose publicly.
 *    * - [status:123]: A custom status code for identifying the error.
 *    * - No explicit message, which will be tested later as "[no-message]".
 *
 * 4. [.catch]
 *    * Executes when an exception is thrown.
 *    * Captures the exception metadata using [get-value:x:@.arguments/*/...].
 *    * - [.throws] is set to true, confirming the exception occurred.
 *    * - [.status] retrieves the custom status code (123).
 *    * - [.public] retrieves the public flag (true).
 *    * - [.message] attempts to retrieve the message (which should default to "[no-message]").
 *    * - [.type] identifies the exception type (expected: "magic.node.extensions.HyperlambdaException").
 *
 * Expected Outcome:
 * - .throws: true
 * - .status: 123
 * - .public: true
 * - .message: "[no-message]" (or empty string if no default is assigned)
 * - .type: "magic.node.extensions.HyperlambdaException"
 */
.throws:bool:false
.status
.public
.message
.type
try
   throw
      public:true
      status:123
.catch
   set-value:x:@.throws
      .:bool:true
   set-value:x:@.status
      get-value:x:@.arguments/*/status
   set-value:x:@.public
      get-value:x:@.arguments/*/public
   set-value:x:@.message
      get-value:x:@.arguments/*/message
   set-value:x:@.type
      get-value:x:@.arguments/*/type
