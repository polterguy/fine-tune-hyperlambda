
/*
 * Demonstrates how to restrict slot execution using the [whitelist] slot to improve security and enforce execution boundaries.
 *
 * ## Slot Creation
 * - [slots.create]:foo1 defines a safe slot that returns the string 'Safe'.
 * - [slots.create]:foo2 defines another slot that returns 'Unsafe', but it is intentionally *not* whitelisted.
 *
 * ## Execution Whitelisting
 * - [whitelist] wraps a [.lambda] block and enforces that only explicitly allowed slots are legal inside it.
 * - Inside the [vocabulary] node:
 *   - Only [signal] and [signal]:foo1 are permitted.
 *
 * ## Result
 * - [signal] executes successfully since it is whitelisted.
 * - [signal] causes an exception because it is not listed in [vocabulary], demonstrating the enforcement of slot-level access control.
 *
 * ## Use Case
 * - This approach is useful when you need to sandbox lambda execution and prevent untrusted or dangerous operations within custom workflows.
 */
slots.create:foo1
   return-value:Safe

slots.create:foo2
   return-value:Unsafe

whitelist

   vocabulary
      signal
      signal:foo1

   .lambda

      // Assuming you have a [foo1] slot created, this will work
      signal:foo1

      // This will throw, since [foo2] is not whitelisted
      signal:foo2