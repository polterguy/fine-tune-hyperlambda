
/*
 * This snippet uses a [while] loop to count down from 10 to 1.
 * It demonstrates condition-based iteration using mathematical comparison and mutation.
 *
 * 1. [while]
 *    - Repeats a [.lambda] block as long as the provided condition evaluates to true.
 *    - In this example, the loop continues while [.counter] is greater than 0.
 *    - It uses [gt] (greater than) to compare the value of [.counter] with 0.

 * 2. [gt]
 *    - A comparison operator used inside [while] to determine whether to continue looping.
 *    - Returns true if the first operand is greater than the second.

 * 3. [get-value]
 *    - Retrieves the current value of [.counter] for evaluation in the loop condition.
 *    - Acts as the dynamic operand for [gt].

 * 4. [.lambda]
 *    - Defines the executable block of code that runs during each iteration of the loop.
 *    - Executed only if the loop condition is true.

 * 5. [math.decrement]
 *    - Decreases the value of [.counter] by 1 in each iteration.
 *    - Ensures progress toward loop termination.
 */
.counter:int:10
while
   gt
      get-value:x:@.counter
      .:int:0
   .lambda

      // Logging countdown.
      log.info:Counting down

      // Decrementing counter.
      math.decrement:x:@.counter
