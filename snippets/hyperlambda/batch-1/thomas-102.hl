
/*
 * This snippet demonstrates how to forward user-provided arguments into the [mail.smtp.send] slot.
 *
 * ## Arguments:
 * - [subject]: The subject line of the email.
 * - [body]: The plain text content of the email.
 * - [to]: The recipient's email address.
 * - [name]: The recipient's display name.
 *
 * ## Forwarding Logic:
 * - [unwrap:x:+/**]: Recursively evaluates all descendant nodes, ensuring that lambda expressions like [x:@.arguments/*/subject] are resolved to actual values.
 *   - This simplifies the code by allowing you to insert arguments directly into the slot configuration without manually evaluating each expression.
 *
 * ## Email Composition:
 * - [mail.smtp.send]: Sends an email using the SMTP transport.
 *   - [message]: Encapsulates the structure of the email.
 *     - [to]: Target recipient, with both [name] and [email] set using input arguments.
 *     - [subject]: The subject of the email, dynamically taken from arguments.
 *     - [entity:text/plain]: The main body of the email, provided in plain text format using the [body] argument.
 *
 * ## Response:
 * - [yield]: Returns a static success message once the email has been sent.
 */
.arguments
   subject:string
   body:string
   to:string
   name:string

/*
 * By executing [unwrap] with an all descendant iterator such as the following code,
 * the values of all expressions inside our [mail.smtp.send]
 * will be evaluated and we've basically forwarded our input arguments to the slot.
 */
unwrap:x:+/**
mail.smtp.send
   message
      to
         .
            name:x:@.arguments/*/name
            email:x:@.arguments/*/to
      subject:x:@.arguments/*/subject
      entity:text/plain
         content:x:@.arguments/*/body
yield
   message:Email sent successfully
