
/*
 * Loops over the children of [.data] and finds the minimum value, storing it in [.min].
 *
 * ### Data Structure
 * - [.data] contains a series of unnamed child nodes with integer values.
 * - [.min] is initialized to a high value (999) to serve as the starting point for comparison.
 *
 * ### Loop Logic
 * - [for-each] iterates through each child node of [.data].
 * - [if] checks whether the current node's value is less than the value of [.min] using [lt].
 * - If true:
 *   - [set-value] updates [.min] with the smaller value.
 *
 * This snippet demonstrates how to compute the minimum value from a collection
 * of nodes using comparison and conditional logic in Hyperlambda.
 */
.data
   .:int:11
   .:int:9
   .:int:22
   .:int:5
.min:int:999
for-each:x:@.data/*
   if
      lt:x:@.dp/#
         get-value:x:@.min
      .lambda
         set-value:x:@.min
            get-value:x:@.dp/#
