
/*
 * This Hyperlambda endpoint renames a specified file or folder,
 * with access restricted to users authenticated as 'root'.
 *
 * 1. [.arguments]
 *    - Accepts two string inputs:
 *      - [oldName]: The current path of the file or folder to be renamed.
 *      - [newName]: The new name or destination path.
 *
 * 2. [auth.ticket.verify]
 *    - Ensures that only 'root' users can execute the operation for security purposes.
 *
 * 3. [if]
 *    - Checks whether the path in [oldName] points to an existing folder using [io.folder.exists].
 *
 * 4. [io.folder.move]
 *    - If [oldName] is a folder, this slot moves (renames) the folder to [newName].
 *    - Uses [get-value] to resolve the dynamic destination path.
 *
 * 5. [else]
 *    - Executes if the [oldName] is not a folder, implying it's a file.
 *
 * 6. [io.file.move]
 *    - Moves (renames) the file.
 *    - The destination path is built by concatenating the folder path from [oldName]
 *      and the [newName] using [strings.concat] and [io.path.get-folder].
 *
 * 7. [return-nodes]
 *    - Returns a static result node to the caller indicating success.
 */
.arguments
   oldName:string
   newName:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Checking if specified object is a file or a folder.
if
   io.folder.exists:x:@.arguments/*/oldName
   .lambda

      // File object is a folder, renaming it.
      io.folder.move:x:@.arguments/*/oldName
         get-value:x:@.arguments/*/newName
else

   // File object is a file, renaming it.
   io.file.move:x:@.arguments/*/oldName
      strings.concat
         io.path.get-folder:x:@.arguments/*/oldName
         get-value:x:@.arguments/*/newName

// Returning result to caller.
return-nodes
   result:success
