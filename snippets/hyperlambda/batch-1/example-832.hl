
/*
 * This Hyperlambda snippet demonstrates how to dynamically control conditional execution
 * using a boolean variable within an [if] statement.
 *
 * 1. [.result]
 *    - Declared as a placeholder node where the result will be stored if the condition is true.
 *
 * 2. [.condition]
 *    - Boolean variable set to true. Acts as the control flag for the conditional logic.
 *
 * 3. [if]
 *    - Evaluates the value of [.condition] directly as the condition for the [if] block.
 *    - The shorthand syntax of [if] without a [.lambda] is equivalent to [if] â†’ [get-value] with ':x:@.condition' value.
 *
 * 4. [set-value]
 *    - Executes only if the [if] condition evaluates to true.
 *    - Sets the value of [.result] to the string "OK".
 *
 * This technique is useful for toggling logic execution dynamically using state variables.
 */
.result
.condition:bool:true
if:x:@.condition
   set-value:x:../*/.result
      .:OK
