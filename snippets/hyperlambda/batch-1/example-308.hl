
/*
 * Update endpoint that modifies one record in the 'spice_urls' table of the 'scraper' SQLite database.
 * The record is identified by [spice_url_id], and the [url] and [type] fields are updated.
 * Only users with the 'admin' role are allowed to access this endpoint.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [spice_url_id]: The primary key of the record to update (mandatory).
 *   - [url]: The new value for the URL field.
 *   - [type]: The new value for the type field.
 *
 * ### Validation
 * - [validators.mandatory] ensures that [spice_url_id] is provided before continuing.
 *
 * ### Authorization
 * - [auth.ticket.verify] restricts access to users with the 'admin' role.
 *
 * ### Database Operation
 * - [data.connect] establishes a connection to the 'scraper' database using the 'generic' connection string.
 * - [add] injects:
 *   - The [url] and [type] fields into the [values] section.
 *   - The [spice_url_id] filter into the [and] clause to target the correct row.
 * - [data.update] performs the update operation on the 'spice_urls' table.
 *
 * ### Existence Check
 * - [if] checks if the update affected zero rows:
 *   - If true, sets the HTTP status to 404 and returns a "Record not found" message.
 *
 * ### Response
 * - [response.status.set] sets the HTTP response code to 202 (Accepted) if the update succeeded.
 * - [unwrap] forward evaluates expressions in ALL children of [return].
 * - [return] sends the number of affected rows back to the client as [affected].
 *
 * This endpoint provides a secure and well-validated update mechanism for managing records
 * in the 'spice_urls' table using Hyperlambda.
 */
.arguments

   // spice_url_id column value being primary key of record to update
   spice_url_id:long

   // url column's new value
   url:string

   // type column's new value
   type:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/spice_url_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:[generic|scraper]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:spice_urls
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
