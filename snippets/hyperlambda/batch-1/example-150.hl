
/*
 * Updates car part statuses using string operations within [if] and [else] blocks inside a [for-each] loop.
 *
 * ### Data Structure
 * - [.car-parts] contains parts and their availability:
 *   - [engine]: available
 *   - [wheel]: out-of-stock
 *   - [door]: available
 *
 * ### Loop and Logic
 * - [for-each] iterates through each part inside [.car-parts].
 * - [if] checks if the current part’s value is equal to "available".
 *   - If true:
 *     - [set-value] updates the part’s value by appending " - checked" using [strings.concat].
 *   - [else] applies when the part is not available:
 *     - [set-value] appends " - needs restocking" instead.
 *
 * This pattern demonstrates how to combine control flow and string manipulation
 * to dynamically annotate or enrich data values in-place using Hyperlambda.
 */
.car-parts
   engine:available
   wheel:out-of-stock
   door:available

for-each:x:@.car-parts/*
   if
      eq:x:@.dp/#
         .:available
      .lambda
         set-value:x:@.dp/#
            strings.concat
               get-value:x:@.dp/#
               .:" - checked"
   else
      set-value:x:@.dp/#
         strings.concat
            get-value:x:@.dp/#
            .:" - needs restocking"
