/*
 * Dynamically retrieves filtered machine learning training snippets from the 'magic' database and returns the results as a downloadable CSV file.
 *
 * 1. Accepts optional filtering criteria through [.arguments], targeting partial matches on [completion], [prompt], and [uri], and an exact match on [type].
 * 2. Verifies the caller's authorization with [auth.ticket.verify], requiring 'root' access to proceed.
 * 3. Connects to the 'magic' database using the '[generic]' connection string with [data.connect].
 * 4. Builds a dynamic [data.read] query:
 *    - Combines the 'like' conditions under a logical [or] clause.
 *    - Adds the 'eq' condition for [type] as a separate [and] clause.
 *    - Ensures the [or] clause is only included if it has any operands.
 * 5. Executes [data.read] with a specified list of columns and unlimited results via [limit:-1].
 * 6. If no records match the filter, returns an HTTP 404 response.
 * 7. If results exist, converts the dataset to CSV format using [lambda2csv].
 * 8. Sets HTTP headers to indicate a downloadable CSV file with proper MIME type and filename.
 * 9. Returns the CSV content as the HTTP response payload.
 *
 * This endpoint is ideal for advanced admin-level export tooling, allowing filtered data extraction in a universally supported format.
 */
.arguments
   ml_training_snippets.completion.like:string
   ml_training_snippets.prompt.like:string
   ml_training_snippets.uri.like:string
   ml_training_snippets.type.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/*/or
      get-nodes:x:@.arguments/*/ml_training_snippets.completion.like
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.completion.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Removing [or] parts unless we've got something to actually or.
   if
      not-exists:x:@data.connect/*/data.read/*/where/*/and/*/or/*
      .lambda
         remove-nodes:x:@data.connect/*/data.read/*/where/*/and/*/or

   // Invoking our read slot.
   data.read
      table:ml_training_snippets
      columns
         type
         uri
         prompt
         completion
      where
         and
            or
      limit:-1

   // Verifying records exists.
   if
      not-exists:x:@data.read/*
      .lambda
         response.status.set:404
         return
            result:No records found

   // Converting result to CSV.
   lambda2csv:x:@data.read/*

   // Applying correct HTTP header.
   response.headers.set
      Content-Type:text/csv
      Access-Control-Expose-Headers:Content-Disposition
      Content-Disposition:"attachment; filename=\"training-snippets.csv\""

   // Returning content to caller.
   return:x:@lambda2csv
