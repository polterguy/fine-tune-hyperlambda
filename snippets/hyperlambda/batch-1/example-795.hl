
/*
 * This Hyperlambda snippet demonstrates structured exception handling using the [try], [.catch], and [.finally] slots.
 * It simulates an error being thrown, logs the exception, and performs a cleanup action regardless of success or failure.
 *
 * 1. [try]
 *    - Defines a block of code that may throw an exception during execution.
 *    - In this case, it includes a [throw] slot that deliberately raises an error.
 *
 * 2. [throw]
 *    - Throws a custom error message ("Some error is thrown here").
 *    - Immediately halts execution within the [try] block and transfers control to [.catch] if present.
 *
 * 3. [.catch]
 *    - Executes if an exception is thrown inside the [try] block.
 *    - The [log.info] slot logs the error message passed through the [message] argument of the caught exception.
 *
 * 4. [.finally]
 *    - Executes regardless of whether an exception was thrown or not.
 *    - Used for cleanup logic or post-processing; here it logs a message indicating that the [try] block has completed.
 *
 * This pattern ensures that errors are handled gracefully, and essential cleanup logic is always run.
 */
try

   // Perform your unsafe operation here.
   throw:Some error is thrown here
.catch

   // If an exception is triggered, this lambda will be evaluated.
   log.info:x:@.arguments/*/message
.finally

   // If an exception is triggered, this lambda will be evaluated.
   log.info:Try finished evaluating
