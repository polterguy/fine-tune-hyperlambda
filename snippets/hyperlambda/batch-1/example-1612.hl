
/*
 * This Hyperlambda endpoint returns a list of available theme names from both custom and system CSS directories.
 * The endpoint ensures the user has root access before performing the operation.
 *
 * 1. [.arguments]
 *    * Declares the HTTP endpoint interface (no arguments are required).
 *
 * 2. [auth.ticket.verify:root]
 *    * Ensures that only users with the [root] role can access the endpoint.
 *
 * 3. [.result]
 *    * Declares a container node to accumulate theme names found in the filesystem.
 *
 * 4. [if io.folder.exists:/etc/system/openai/css/search/]
 *    * Checks whether the custom CSS directory exists.
 *
 * 5. [io.file.list]
 *    * Lists all files within the custom CSS directory.
 *
 * 6. [for-each] and [strings.ends-with]
 *    * Iterates over each file and filters out files ending with ".css".
 *
 * 7. [strings.split]
 *    * Extracts the filename (without extension) as the theme name.
 *    * First splits by "/" to isolate the filename, then by "." to remove the extension.
 *
 * 8. [add:x:@.result]
 *    * Adds each unique theme name into the [.result] container.
 *
 * 9. [return-nodes]
 *    * Returns all children of [.result] to caller as a list.
 */
.arguments

// Making sure user has access to invoked endpoint.
auth.ticket.verify:root

// Checking if custom CSS file exists.
.result

// Listing custom files.
if
   io.folder.exists:/etc/system/openai/css/search/
   .lambda
      io.file.list:/etc/system/openai/css/search/
      for-each:x:@io.file.list/*
         if
            strings.ends-with:x:@.dp/#
               .:css
            .lambda
               strings.split:x:@.dp/#
                  .:/
               strings.split:x:@strings.split/0/-
                  .:.
               unwrap:x:+/*/*
               add:x:@.result
                  .
                     .:x:@strings.split/0

// Listing system files.
if
   io.folder.exists:/system/openai/front.files/search/
   .lambda
      io.file.list:/system/openai/front.files/search/
      for-each:x:@io.file.list/*
         if
            strings.ends-with:x:@.dp/#
               .:css
            .lambda
               strings.split:x:@.dp/#
                  .:/
               strings.split:x:@strings.split/0/-
                  .:.
               if
                  not-exists:x:"@.result/*/\"={@strings.split/0}\""
                  .lambda
                     unwrap:x:+/*/*
                     add:x:@.result
                        .
                           .:x:@strings.split/0

// Returning result to caller.
return-nodes:x:@.result/*
