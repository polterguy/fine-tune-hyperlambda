
/*
 * Read or list records endpoint from your [Categories] table in the [northwind] SQLite database,
 * supporting paging, filtering, and sorting via dynamic parameters.
 *
 * 1. [.arguments]
 *    * Accepts several optional parameters:
 *    * - [limit], [offset]: Used for paginating the result set.
 *    * - [order], [direction]: Used to apply sorting.
 *    * - Filtering fields such as [Categories.CategoryName.like], [Categories.Description.eq], etc.
 *
 * 2. [data.connect]
 *    * Connects to the [northwind] SQLite database using the [generic] connection string.
 *    * Explicitly specifies the database type as [sqlite].
 *
 * 3. [add] (ordering)
 *    * Injects [order] and [direction] nodes into the [data.read] block if provided.
 *    * Allows sorting based on any specified column and direction.
 *    * [remove-nodes] clears these from the argument list after use to avoid misplacement in later steps.
 *
 * 4. [add] (paging)
 *    * Injects [limit] and [offset] arguments to control pagination.
 *    * [remove-nodes] ensures they donâ€™t interfere with filtering.
 *
 * 5. [add] (filtering)
 *    * Dynamically adds remaining argument nodes as filtering conditions to the WHERE clause.
 *    * Supports various conditional formats like [eq] and [like] across multiple fields.
 *
 * 6. [data.read]
 *    * Executes the database read query on the [Categories] table.
 *    * Returns selected fields: [CategoryID], [CategoryName], [Description], [Picture].
 *    * The [where and] clause ensures that all filter conditions are applied conjunctively.
 *
 * 7. [return-nodes]
 *    * Returns the result set to the caller using the lambda expression `@data.read/*`.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // filtering (optional)
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         Categories.CategoryID
         Categories.CategoryName
         Categories.Description
         Categories.Picture
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
