
/*
 * Defines a secure HTTP endpoint that queries and returns log items from the database,
 * based on optional filter arguments such as 'from', 'max', and 'query'.
 *
 * ## Input Arguments
 * - [from]: Optional. A string used for pagination, representing the log ID or timestamp to start from.
 * - [max]: Optional. A long value specifying the maximum number of records to return.
 * - [query]: Optional. A string used to filter log messages by keyword or pattern.
 *
 * ## Authorization
 * - [auth.ticket.verify] restricts access to only users with the 'root' role.
 *
 * ## Slot Invocation
 * - [add] prepares and injects the optional arguments [max] and [from] into the [log.query] call.
 * - [log.query] is invoked with [query] as its main parameter to perform the search.
 * - This flexible invocation pattern allows partial filtering depending on which arguments are provided.
 *
 * ## Output
 * - [return-nodes] returns the complete result set from the [log.query] operation directly to the caller.
 *
 * ## Use Case
 * - Ideal for administrative dashboards, log viewers, or audit trail access endpoints where filtering by content or time range is required.
 */
.arguments
   from:string
   max:long
   query:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Invoking slot responsible for returning items, making sure we correctly parametrise invocation.
add:x:../*/log.query
   get-nodes:x:@.arguments/*/max
   get-nodes:x:@.arguments/*/from
log.query:x:@.arguments/*/query

// Returning result of above invocation to caller.
return-nodes:x:-/*
