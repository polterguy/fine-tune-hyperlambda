
/*
 * This Hyperlambda snippet sorts the child nodes of [.data] alphabetically by their [name] field.
 * It uses the [sort] slot with a custom comparator implemented through conditional branching.
 *
 * 1. [sort]
 *    - Sorts the children of [.data]. The lambda comparator receives two nodes (.lhs and .rhs),
 *      and must return -1, 0, or 1 via [.result] to indicate sorting order.
 *
 * 2. [if]
 *    - Checks if the [name] of [.lhs] is less than that of [.rhs].
 *    - If true, it sets [.result] to -1, meaning [.lhs] should come before [.rhs].
 *
 * 3. [lt]
 *    - Performs the “less than” comparison between [.lhs]'s [name] and [.rhs]'s [name].
 *
 * 4. [get-value]
 *    - Retrieves the value of [.rhs]'s [name] node to be used in the comparison.
 *
 * 5. [else-if]
 *    - Checks the opposite condition—if [.lhs]'s [name] is greater than [.rhs]'s [name].
 *    - If true, sets [.result] to 1, meaning [.lhs] should come after [.rhs].
 *
 * 6. [mt]
 *    - Compares if [.lhs]'s [name] is more than [.rhs]'s [name].
 *
 * 7. [else]
 *    - If neither condition is true (i.e., names are equal), sets [.result] to 0,
 *      keeping their relative order unchanged.
 *
 * 8. [set-value]
 *    - Assigns a value to [.result], which determines the ordering in the sort operation.
 */
sort:x:@.data/*
   if
      lt:x:@.lhs/#/*/name
         get-value:x:@.rhs/#/*/name
      .lambda
         set-value:x:@.result
            .:int:-1
   else-if
      mt:x:@.lhs/#/*/name
         get-value:x:@.rhs/#/*/name
      .lambda
         set-value:x:@.result
            .:int:1
   else
      set-value:x:@.result
         .:int:0
