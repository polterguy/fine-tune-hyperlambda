
/*
 * This Hyperlambda snippet demonstrates how to construct and send a dynamic HTTP POST request
 * with headers and payload, convert the response into a lambda structure, and handle the outcome.
 *
 * 1. [.payload]
 *    * Defines the JSON body for the request with credentials and a client identifier:
 *    * - [username], [password], and [client_id].
 *
 * 2. [.headers]
 *    * Declares custom HTTP headers:
 *    * - [Content-Type] set to 'application/json'.
 *    * - [X-Request-ID] for tracking or debugging.
 *
 * 3. [add]
 *    * Injects both headers and payload into the [http.post] slot using [get-value].
 *    * Ensures these are dynamically linked into the request structure.
 *
 * 4. [http.post]
 *    * Sends a POST request to "https://api.example.com/auth/login".
 *    * [convert:true] automatically parses the response into a lambda object, enabling expression-based access.
 *
 * 5. [if]
 *    * Validates whether the HTTP status code is within the 200â€“299 range (i.e., a successful request).
 *
 * 6. [.lambda] (success branch)
 *    * If successful, extracts the [name] and [user-id] fields from the response and stores them into local nodes.
 *    * Uses [set-value] with lambda expressions to dynamically reference the JSON response structure.
 *
 * 7. [else]
 *    * If the request fails, throws an error with a descriptive message.
 */
.payload
   username:admin
   password:supersecret123
   client_id:web-client

// Create headers for content-type and custom request ID
.headers
   Content-Type:application/json
   X-Request-ID:xyz-123-abc

// Make the HTTP POST request
add:x:./*/http.post/*/headers
   get-value:x:@.headers/*
add:x:./*/http.post/*/payload
   get-value:x:@.payload/*
http.post:"https://api.example.com/auth/login"
   headers
   payload

   // This automatically converts result to lambda object
   convert:true

// Verify above POST was a success.
if
   and
      mte:x:@http.post
         .:int:200
      lt:x:@http.post
         .:int:300
   .lambda

      // Store response status and body
      .name
      set-value:x:@.name
         get-value:x:@http.post/*/content/*/name

      .user-id
      set-value:x:@.user-id
         get-value:x:@http.post/*/content/*/user-id
else
   throw:Something went wrong when invoking HTTP POST