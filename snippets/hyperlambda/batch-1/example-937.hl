
/*
 * This Hyperlambda endpoint updates a single record in the [items] table of the [shopping-cart-demo] database.
 * It enforces required inputs and dynamically builds the update payload and WHERE clause.
 *
 * 1. [.arguments]
 *    * Defines input parameters required for the update:
 *    * - [item_id]: Primary key of the record to be updated (mandatory).
 *    * - [product_id], [session_id]: New values for their respective columns.
 *
 * 2. [validators.mandatory]
 *    * Ensures that [item_id] is provided since it is required to uniquely identify the record to be updated.
 *
 * 3. [data.connect]
 *    * Establishes a connection to the [shopping-cart-demo] SQLite database using the [generic] connection string.
 *
 * 4. [add] (for [values])
 *    * Extracts all non-primary-key arguments starting from index 1 and injects them into the [values] block of [data.update].
 *    * These will be the columns and new values to update.
 *
 * 5. [add] (for [where])
 *    * Injects the [item_id] into the WHERE clause as the filtering condition.
 *    * Ensures only the targeted record is updated.
 *
 * 6. [data.update]
 *    * Executes the update statement on the [items] table using dynamic values and a filtered WHERE clause.
 *
 * 7. [yield]
 *    * Returns how many records were affected by the update, using the [data.update] result.
 */
.arguments

   // item_id column value being primary key of record to update
   item_id:long

   // product_id column's new value
   product_id:long

   // session_id column's new value
   session_id:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/item_id

// Opening up our database connection.
data.connect:[generic|shopping-cart-demo]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:items
      values
      where
         and

   // Returning how many records were updated back to caller.
   yield
      affected:x:@data.update
