
/*
 * Hyperlambda endpoint returning unique and distinct values from the [CustomerCustomerDemo] table
 * in the [northwind] SQLite database. Supports filtering, sorting, and paging.
 *
 * 1. [.arguments]
 *    * Accepts the following parameters:
 *    * - [distinct_column]: Required. Must be in the format TABLE_NAME.COLUMN_NAME.
 *    * - [limit], [offset]: Controls pagination.
 *    * - [order], [direction]: Defines sorting logic.
 *    * - Filtering parameters for columns [CustomerID] and [CustomerTypeID] using [like] and [eq].
 *
 * 2. [validators.mandatory]
 *    * Ensures that the [distinct_column] argument is provided.
 *
 * 3. [validators.enum]
 *    * Limits [distinct_column] to only two valid columns:
 *    * - CustomerCustomerDemo.CustomerID
 *    * - CustomerCustomerDemo.CustomerTypeID
 *
 * 4. [data.connect]
 *    * Connects to the [northwind] SQLite database using the [generic] connection string.
 *
 * 5. [set-name]
 *    * Constructs a valid SQL fragment: [distinct(TABLE_NAME.COLUMN_NAME)].
 *    * This expression is injected into the [data.read] structure as [distinct_functor].
 *
 * 6. [remove-nodes]
 *    * Removes [distinct_column], [order], [direction], [limit], and [offset] from [.arguments]
 *    * after their values have been extracted and reused to avoid conflicts.
 *
 * 7. [add]
 *    * Dynamically injects remaining pagination and filter parameters into the [data.read] invocation.
 *    * Filters are added to the [where] clause.
 *
 * 8. [data.read]
 *    * Executes a query on the [CustomerCustomerDemo] table.
 *    * Applies filters, ordering, and pagination as defined.
 *    * Returns the distinct values for the specified column via the [distinct_functor].
 *
 * 9. [return-nodes]
 *    * Returns the resulting records to the client using the expression `@data.read/*/*`.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Optional filtering conditions.
   CustomerCustomerDemo.CustomerID.like:string
   CustomerCustomerDemo.CustomerID.eq:string
   CustomerCustomerDemo.CustomerTypeID.like:string
   CustomerCustomerDemo.CustomerTypeID.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:CustomerCustomerDemo.CustomerID
   .:CustomerCustomerDemo.CustomerTypeID

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerCustomerDemo
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
