
/*
 * Defines a dynamic slot [register-user] that sends a user registration payload to an external API
 * and handles both success and failure outcomes gracefully.
 *
 * Workflow:
 * - [slots.create:register-user] declares a reusable slot named "register-user".
 * - Initializes [.register.status] as a temporary status variable.
 *
 * - Sends an HTTP POST request to "https://api.example.com/users/register" with a JSON payload
 *   containing:
 *   - [username]: alice
 *   - [email]: alice@example.com
 *   - [password]: Secure123!
 *
 * - [convert:true] parses the JSON response into a lambda-compatible structure.
 *
 * - The [if] block checks the HTTP response code:
 *   - [mte] ensures the status is >= 200
 *   - [lt] ensures it is < 300
 *   - If successful, the status is set to "Registration successful".
 *   - If not, the [else] branch assigns "Registration failed".
 *
 * - [yield] returns the result status as an output node [status].
 *
 * This example demonstrates how to encapsulate API interaction with error handling
 * inside a named dynamic slot in Hyperlambda, making the logic modular and reusable.
 */
slots.create:register-user
   .register.status
   http.post:"https://api.example.com/users/register"
      convert:true
      payload
         username:alice
         email:alice@example.com
         password:Secure123!
   if
      and
         mte:x:@http.post
            .:int:200
         lt:x:@http.post
            .:int:300
      .lambda
         set-value:x:@.register.status
            .:Registration successful
   else
      set-value:x:@.register.status
         .:Registration failed
   yield
      status:x:@.register.status
