
/*
 * This Hyperlambda endpoint securely counts the number of items in the [roles] table from the [magic] database,
 * applying optional filters and enforcing that only users with the [root] role can access it.
 *
 * 1. [.arguments]
 *    - Accepts optional filtering parameters for querying the [roles] table:
 *      - [name.eq], [name.like], and [description.like] are supported.
 *    - These arguments are used to build a dynamic WHERE clause.

 * 2. [auth.ticket.verify]
 *    - Verifies that the requesting user has the [root] role.
 *    - Ensures access control for privileged database operations.

 * 3. [data.connect]
 *    - Opens a connection to the [magic] SQLite database using the default [generic] connection string.
 *
 * 4. [add]
 *    - Copies all [.arguments] child nodes with an [operator] suffix into the [.data.read] block.
 *    - This supports dynamic column filtering using operators like [eq] and [like].
 *
 * 5. [remove-nodes]
 *    - Removes the previously used [operator] arguments after theyâ€™ve been integrated into the WHERE clause.
 *
 * 6. [add] (second usage)
 *    - Injects remaining filter arguments into the WHERE clause of the [data.read] statement.
 *    - Builds a composite [and] filter block based on client input.
 *
 * 7. [data.read]
 *    - Executes a SQL query on the [roles] table.
 *    - Uses [count(*)] to return the total number of rows matching the filters.
 *    - Returns one row, aliased as [count].
 *
 * 8. [return-nodes]
 *    - Returns the result of [data.read] directly to the client.
 *    - Uses a lambda expression to return the inner [count] result node.
 */
.arguments
   name.eq:string
   name.like:string
   description.like:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/operator
   remove-nodes:x:@.arguments/*/operator
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:roles
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
