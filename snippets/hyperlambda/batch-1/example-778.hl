
/*
 * This endpoint reads (or lists) records from the 'comments' table in the [cms] database.
 * It supports dynamic filtering and performs SQL joins to include related data from posts and users tables.
 * Below is a description of the nodes and slots used:
 *
 * 1. [.arguments]
 *    - Defines optional filtering parameters that allow clients to query specific records.
 *    - Supports exact match and partial match filters (e.g., [comments.content.like], [post_id.title.eq]).
 *
 * 2. [auth.ticket.verify]
 *    - Validates that the user holds either the 'enterprise' or 'root' role before accessing the endpoint.
 *
 * 3. [data.connect]
 *    - Establishes a connection to the [generic|cms] database.
 *    - Declares that the database type is 'sqlite'.
 *
 * 4. [add]
 *    - Dynamically injects all filtering arguments from [.arguments] into the [where] clause of the upcoming [data.read] invocation.
 *    - Uses [get-nodes] to extract all filterable fields.
 *
 * 5. [get-nodes]
 *    - Retrieves all argument nodes under [.arguments] for use as filtering conditions.
 *
 * 6. [data.read]
 *    - Executes a SELECT query on the 'comments' table, joining it with 'posts' and 'users' via LEFT joins.
 *    - Ensures that related fields from the joined tables are accessible (like post titles and usernames).
 *
 * 7. [table]
 *    - Specifies the primary table being queried, in this case 'comments'.
 *    - Supports SQL-style JOINs with aliased tables ([post_id], [user_id]).
 *
 * 8. [columns]
 *    - Explicitly lists the fields to return from the query, including selected fields from joined tables.
 *    - Aliases are used to maintain clarity and support namespacing (e.g., [post_id.title]).
 *
 * 9. [where]
 *    - A conditional clause applied to the [data.read] operation to limit records based on provided arguments.
 *    - Populated dynamically via [add].
 *
 * 10. [return-nodes]
 *     - Returns the result set of the [data.read] invocation to the caller.
 *     - Uses lambda selector syntax to extract all resulting nodes.
 */
.arguments

   // Optional filtering args
   comments.id.eq:long
   comments.post_id.eq:long
   comments.user_id.eq:long
   comments.content.like:string
   comments.content.eq:string
   comments.created_at.eq:date
   post_id.title.eq:string
   post_id.title.like:string
   user_id.username.eq:string
   user_id.username.like:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:enterprise,root

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:comments
         join:posts
            as:post_id
            type:left
            on
               and
                  comments.post_id:post_id.id
         join:users
            as:user_id
            type:left
            on
               and
                  comments.user_id:user_id.id
      columns
         comments.id
         comments.post_id
         comments.user_id
         comments.content
         comments.created_at
         post_id.title
            as:post_id.title
         user_id.username
            as:user_id.username
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
