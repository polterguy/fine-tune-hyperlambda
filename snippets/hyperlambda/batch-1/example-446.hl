
/*
 * Defines a Hyperlambda endpoint that imports a batch of machine learning training snippets into a database table.
 *
 * ## Input Arguments
 * - [type]: A required string value representing the category or model type the snippets belong to.
 * - [snippets]: A collection (list) of training snippet objects. Each must contain a [prompt] and [completion].
 * - [meta]: An optional metadata string that is stored along with each snippet.
 *
 * ## Validation
 * - [validators.mandatory] ensures that the [type] argument is present before proceeding.
 *
 * ## Database Interaction
 * - [data.connect] establishes a connection to the 'magic' database using the 'generic' connection string.
 * - [for-each] loops over each individual snippet inside the [snippets] list.
 *   - [if] checks if the current snippet has a [prompt] field (to avoid inserting incomplete records).
 *   - [data.create] inserts each valid snippet into the 'ml_training_snippets' table, along with the specified [type] and [meta].
 *
 * ## Use Case
 * - Ideal for uploading multiple prompt-completion pairs at once into a training dataset.
 * - This is useful in scenarios like fine-tuning language models or building conversational datasets.
 */
.arguments
   type:string
   snippets:*
   meta:string

// Making sure mqndatory [type] argument was given.
validators.mandatory:x:@.arguments/*/type

// Connecting to database.
data.connect:[generic|magic]

   // Looping through each record specified in [snippets] collection.
   for-each:x:@.arguments/*/snippets/*

      // Verifying prompt is not null.
      if:x:@.dp/#/*/prompt

         // Inserting into database.
         data.create
            table:ml_training_snippets
            values
               type:x:@.arguments/*/type
               prompt:x:@.dp/#/*/prompt
               completion:x:@.dp/#/*/completion
               meta:x:@.arguments/*/meta
