
/*
 * Endpoint that deletes one record from your [menu_items] table in the [cms] database.
 * Access is restricted to users with the [guest] role.
 *
 * 1. [.arguments]
 *    * Accepts one input: [id], representing the primary key of the record to delete.
 *
 * 2. [auth.ticket.verify]
 *    * Ensures that only authenticated users with the [guest] role can execute this endpoint.
 *
 * 3. [validators.mandatory]
 *    * Enforces that the [id] argument is present before proceeding with the deletion.
 *
 * 4. [data.connect]
 *    * Opens a connection to the [cms] SQLite database using the [generic] connection string.
 *    * Specifies [database-type] explicitly as [sqlite].
 *
 * 5. [add]
 *    * Dynamically inserts the [id] argument into the WHERE clause of the [data.delete] statement.
 *    * Ensures the deletion targets a specific record.
 *
 * 6. [data.delete]
 *    * Executes the deletion on the [menu_items] table where [id] matches the provided argument.
 *    * Scoped inside an [and] clause to support extensibility for additional conditions.
 *
 * 7. [yield]
 *    * Returns the number of rows affected by the deletion using [data.delete].
 *    * Typically returns 1 if a record was deleted, 0 if no match was found.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

validators.mandatory:x:@.arguments/*/id

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:menu_items
      where
         and

   // Returning result of above invocation to caller.
   yield
      affected:x:@data.delete
