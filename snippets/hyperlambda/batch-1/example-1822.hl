
/*
 * This Hyperlambda endpoint returns a list of scheduled tasks with optional filtering and paging,
 * and includes any schedules associated with each task. Only users with the [root] role can access it.
 *
 * 1. [.arguments]
 *    * Defines optional input parameters:
 *    * - [offset]: Skips the first N tasks for paging.
 *    * - [limit]: Restricts how many tasks are returned.
 *    * - [filter]: An optional string to search or filter tasks by name.
 *
 * 2. [auth.ticket.verify:root]
 *    * Ensures the caller has [root] privileges before proceeding.
 *
 * 3. [add:x:../*/tasks.list]
 *    * Dynamically injects the optional [offset] and [limit] arguments into the [tasks.list] invocation.
 *
 * 4. [tasks.list:x:@.arguments/*/filter]
 *    * Retrieves a filtered and paged list of tasks, if a [filter] is provided.
 *
 * 5. [include:x:@tasks.list/*]
 *    * Iterates over the list of returned tasks and augments each with additional metadata.
 *    * [tasks.get]: Retrieves details for each task by its [id], including its [schedules].
 *    * [add]: Adds the [schedules] node to each task result using nested lambda logic.
 *
 * 6. [return-nodes:x:@tasks.list/*]
 *    * Returns the full enriched task list to the caller, including any associated schedules.
 *
 * Result:
 * * A list of scheduled tasks, optionally filtered and paged, with associated schedule data embedded per task.
 */
.arguments
   offset:long
   limit:long
   filter:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Retrieves all scheduled tasks in the system.
add:x:../*/tasks.list
   get-nodes:x:@.arguments/*/offset
   get-nodes:x:@.arguments/*/limit
tasks.list:x:@.arguments/*/filter

// Retrieving schedules for tasks, if any.
include:x:@tasks.list/*
   tasks.get:x:@.dp/#/*/id
      schedules:true
   add:x:+/*
      get-nodes:x:@tasks.get/*/schedules/*
   add:x:./*/return/*/schedules
      .
   return
      schedules

// Returning the results of the evaluation to caller.
return-nodes:x:@tasks.list/*
