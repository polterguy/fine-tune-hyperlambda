
/*
 * CRUD update endpoint that modifies an existing record in the 'roles' table of the 'magic' database.
 * The update targets a record using the [name] field as the identifier, and updates the [description] field.
 * Only users with the 'root' role are authorized to execute the endpoint.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [name]: The role name used to locate the record to update (mandatory).
 *   - [description]: The new description to assign to the role.
 *
 * ### Validation
 * - [validators.mandatory] ensures that [name] is provided before proceeding.
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures that only users with the 'root' role can access this endpoint.
 *
 * ### Database Operation
 * - [data.connect] connects to the 'magic' database using the 'generic' connection string.
 * - [add] uses index-based slicing:
 *   - The [description] (second argument) is added to the [values] section of the [data.update] operation.
 *   - The [name] (first argument) is used to build the [where] condition and its [and] parts.
 *     Using [and] here implies ALL arguments must match, to allow for ANY argument use [or] instead.
 * - [data.update] performs the update on the 'roles' table, applying the parameterized logic.
 *
 * ### Response
 * - [response.status.set] sets the HTTP status to 202 (Accepted).
 * - [yield] returns the number of affected rows as [affected].
 *
 * This endpoint demonstrates how to securely perform a targeted update in Hyperlambda
 * with access control, argument validation, and safe query construction.
 */
.arguments
   name:string
   description:string

// Mandatory argument!
validators.mandatory:x:@.arguments/*/name

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our invocation.

   // This adds all arguments EXCEPT the first argument into [values]
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]

   // This makes sure our first argument ([name]) is added into the [and] node
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:roles
      values
      where
         and

   // Returning success to caller.
   response.status.set:202
   yield
      affected:x:@data.update
