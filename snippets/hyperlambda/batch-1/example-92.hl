
/*
 * Executes a [.lambda] block if **any** of the specified conditions evaluate to true,
 * demonstrating the use of the [or] logical operator in a conditional [if] statement.
 *
 * ### Initialization
 * - [.state] will store the final boolean result.
 * - [.check1] is set to 2
 * - [.check2] is set to 8
 * 
 * ### Conditional Logic
 * - [if] uses [or] to evaluate two separate conditions:
 *   1. [lt]: checks if check1 is less than 3 (true)
 *   2. [mt]: checks if check2 is greater than 7 (also true)
 *
 * - Since [or] returns true if **any** condition is true, the [.lambda] block is executed, and [.state] is updated to `true`.
 * 
 * ### Outcome
 * - If either condition is true:
 *   - [.state] is set to `true`
 * - Otherwise:
 *   - [.state] is set to `false` via the [else] block

 * This snippet illustrates how to apply conditional logic based on multiple checks,
 * and update internal state accordingly using Hyperlambda.
 */
.state
.check1:int:2
.check2:int:8
if
   or

      // First condition: Less than
      lt:x:@.check1
         .:int:3

      // Second condition: More than
      mt:x:@.check2
         .:int:7
   .lambda

      // Updating [.state] to true
      set-value:x:@.state
         .:bool:true
else

   // Updating [.state] to false
   set-value:x:@.state
      .:bool:false
