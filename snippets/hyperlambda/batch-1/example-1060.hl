
/*
 * Endpoint for 'root' users that creates an item in the [clusters] table
 * of the [hub] database using the provided arguments.
 *
 * 1. [.arguments]
 *    * Defines the required input parameters:
 *    * - [id]: Unique string identifier for the cluster.
 *    * - [country]: Country where the cluster is located.
 *    * - [name]: Human-readable name of the cluster.
 *    * - [enabled]: Boolean indicating if the cluster is active.
 *
 * 2. [auth.ticket.verify]
 *    * Ensures only users with the [root] role are authorized to invoke this endpoint.
 *
 * 3. [validators.mandatory]
 *    * Validates that the required fields [id], [country], and [name] are provided.
 *
 * 4. [data.connect]
 *    * Opens a connection to the [hub] database using the [generic] connection string.
 *
 * 5. [add]
 *    * Populates the [values] block of the [data.create] operation using all provided arguments.
 *
 * 6. [data.create]
 *    * Executes the insert operation into the [clusters] table using the values passed from [.arguments].
 *
 * 7. [response.status.set]
 *    * Sets the HTTP response status to 201 (Created), indicating the item was successfully inserted.
 *
 * 8. [return]
 *    * Returns a success message to the client under the [result] node.
 */
.arguments
   id:string
   country:string
   name:string
   enabled:bool

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/id
validators.mandatory:x:@.arguments/*/country
validators.mandatory:x:@.arguments/*/name

// Opening up database connection.
data.connect:[generic|hub]

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      table:clusters
      values

   // Returning success to caller.
   response.status.set:201
   return
      result:success
