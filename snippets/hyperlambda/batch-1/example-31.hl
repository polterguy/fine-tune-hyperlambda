
/*
 * Initializes the Chinook SQLite database if it doesn't already exist by relocating SQL script files
 * into the correct templates folder and executing the database creation script.
 *
 * ### Step 1: Move SQL Scripts into Template Folder
 * - [io.file.list] lists all files in the [/modules/sqlite-chinook/magic.startup/] folder.
 * - A [for-each] loop processes each file:
 *   - [strings.split] splits the file path into parts using `/` as the delimiter.
 *   - [strings.ends-with] checks whether the file is a `.sql` file.
 *   - If true, [strings.concat] constructs a target path in [/etc/sqlite/templates/].
 *   - [io.file.exists] checks if the file already exists at the target.
 *   - If not, [io.file.move] relocates the `.sql` file and logs the action via [log.info].

 * ### Step 2: Create the Chinook Database File
 * - [io.file.exists] checks if the Chinook database file [/data/chinook.db] already exists.
 * - If not:
 *   - [io.file.save] creates an empty file at [/data/chinook.db] to initialize the DB.
 *   - A creation message is logged.
 *   - [io.file.load] reads the Chinook SQL script from [/etc/sqlite/templates/chinook.sql].
 *   - [sqlite.connect:chinook] connects to the database, and [sqlite.execute] runs the SQL.
 *   - Logs success after creation using [log.info].
 *
 * ### Step 3: Cache Invalidation
 * - [cache.set] resets the SQLite connection cache to reflect the new DB state,
 *   ensuring any subsequent operations see the newly created Chinook database.
 *
 * This snippet is ideal for automated initialization workflows and demonstrates
 * file manipulation, conditional logic, and database provisioning in Hyperlambda.
 */
io.file.list:/modules/sqlite-chinook/magic.startup/

// Looping through the result of above invocation
for-each:x:-/*
   strings.split:x:@.dp/#
      .:/

   // Making sure this is .sql file
   if
      strings.ends-with:x:@.dp/#
         .:.sql
      .lambda
         strings.concat
            .:/etc/sqlite/templates/
            get-value:x:@strings.split/0/-
         if
            not
               io.file.exists:x:@strings.concat
            .lambda

               // File doesn't exists, hence moving it.
               io.file.move:x:@.dp/#
                  .:/etc/sqlite/templates/
               log.info:SQL script moved into etc folder
                  filename:x:@.dp/#

// Creates the chinook database file.
if
   not
      io.file.exists:/data/chinook.db
   .lambda

      // Creating a default database file to store database in.
      io.file.save:/data/chinook.db
         .:
      log.info:Chinook database file created
         filename:/data/chinook.db

      // Loads and executes the chinook.sql script.
      io.file.load:/etc/sqlite/templates/chinook.sql
      sqlite.connect:chinook
         sqlite.execute:x:@io.file.load
      log.info:The chinook database was successfully created
         filename:/etc/sqlite/templates/chinook.sql

      // Evicting cache item related to SQLite.
      cache.set:magic.sql.databases.sqlite.generic
