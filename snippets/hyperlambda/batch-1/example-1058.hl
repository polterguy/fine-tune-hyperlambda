
/*
 * This Hyperlambda snippet demonstrates how to execute multiple computational tasks in parallel
 * using [fork] within a [join] block.
 *
 * 1. [join]
 *    * Waits for all [fork] operations to complete.
 *    * Used as a synchronizing mechanism to ensure all parallel tasks are completed before proceeding.
 *
 * 2. [fork] (math.multiply)
 *    * Executes a multiplication operation (5 * 10 = 50) in a separate thread.
 *
 * 3. [fork] (math.add)
 *    * Executes an addition operation (20 + 30 = 50) concurrently.
 *
 * 4. [fork] (math.subtract)
 *    * Executes a subtraction operation (100 - 40 = 60) in parallel with the others.
 *
 * Use Case:
 * * Ideal for performing independent, CPU-bound operations concurrently
 *   to improve efficiency and responsiveness.
 */
join
   fork
      math.multiply
         .:int:5
         .:int:10
   fork
      math.add
         .:int:20
         .:int:30
   fork
      math.subtract
         .:int:100
         .:int:40
