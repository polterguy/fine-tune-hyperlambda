
/*
 * Validates a session ID by POSTing it to an authentication API.
 * If the HTTP status code is within 200â€“299, the response content is returned.
 *
 * Can be invoked as an HTTP API endpoint if saved correctly.
 *
 * 1. [.arguments]
 *    * Declares a single input parameter [id], which represents the session ID to validate.
 *
 * 2. [http.post]
 *    * Sends a POST request to "https://auth.example.com/api/validate-session".
 *    * Includes a [payload] with [session_id] dynamically set from [.arguments].
 *    * [convert:true] ensures the response is automatically parsed into a lambda structure.
 *
 * 3. [if]
 *    * Branches execution based on whether the HTTP status code is in the 2xx range.
 *
 * 4. [and], [mte], [lt]
 *    * [mte]: Ensures the status is greater than or equal to 200.
 *    * [lt]: Ensures the status is less than 300.
 *    * Together they confirm a successful HTTP response.
 *
 * 5. [.lambda]
 *    * Executes if the HTTP request is successful.
 *    * Uses [yield] to return the parsed response content to the client.
 *
 * 6. [else]
 *    * Executes when the HTTP response status is outside the success range.
 *    * Triggers an error using [throw] with the message "Session validation failed".
 */
.arguments
   id:int

http.post:"https://auth.example.com/api/validate-session"
   convert:true
   payload
      session_id:x:@.arguments/*/id

if
   and
      mte:x:@http.post
         .:int:200
      lt:x:@http.post
         .:int:300
   .lambda
      yield
         result:x:@http.post/*/content/*
else
   throw:Session validation failed
