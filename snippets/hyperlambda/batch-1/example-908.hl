
/*
 * This Hyperlambda endpoint dynamically calculates an aggregate value (min, max, sum, or avg)
 * for a specific column in the [Customers] table in the [northwind] SQLite database.
 * Optional filtering is supported through standard WHERE clauses.
 *
 * 1. [.arguments]
 *    - Accepts user inputs, including:
 *      - [aggregate_function]: Type of aggregation (must be one of min, max, sum, avg).
 *      - [aggregate_column]: The column in the [Customers] table to aggregate on (e.g., Customers.City).
 *      - Optional filters for any customer-related fields using [like] or [eq] comparisons.
 *
 * 2. [validators.mandatory]
 *    - Ensures that [aggregate_function] and [aggregate_column] are present.
 *    - Prevents execution with missing key arguments.
 *
 * 3. [validators.enum]
 *    - Validates that the [aggregate_function] is one of the allowed operations: min, max, sum, or avg.
 *    - Also restricts [aggregate_column] to a safe list of fields from the [Customers] table to avoid SQL injection or invalid references.
 *
 * 4. [data.connect]
 *    - Connects to the 'northwind' SQLite database using a 'generic' connection string.
 *    - Specifies the [database-type] as 'sqlite'.
 *
 * 5. [set-name]
 *    - Dynamically constructs the SQL fragment for aggregation, e.g., `sum(Customers.City)`, using [strings.concat].
 *    - Renames the resulting node to [aggregate_functor] to inject it into the [data.read] structure.
 *
 * 6. [remove-nodes]
 *    - Removes [aggregate_function] and [aggregate_column] from the argument list after usage to clean up before building the WHERE clause.
 *
 * 7. [add]
 *    - Injects the remaining arguments into a WHERE clause inside [data.read].
 *    - Filters the result set based on any additional matching criteria provided by the caller.
 *
 * 8. [data.read]
 *    - Queries the [Customers] table using the constructed [aggregate_functor] as a dynamic column expression.
 *    - The result is aliased as [result] and returned in a single row (via [limit]).
 *
 * 9. [return-nodes]
 *    - Returns the computed aggregate value (aliased as [result]) to the caller.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   // Optional filtering
   Customers.CustomerID.like:string
   Customers.CustomerID.eq:string
   Customers.CompanyName.like:string
   Customers.CompanyName.eq:string
   Customers.ContactName.like:string
   Customers.ContactName.eq:string
   Customers.ContactTitle.like:string
   Customers.ContactTitle.eq:string
   Customers.Address.like:string
   Customers.Address.eq:string
   Customers.City.like:string
   Customers.City.eq:string
   Customers.Region.like:string
   Customers.Region.eq:string
   Customers.PostalCode.like:string
   Customers.PostalCode.eq:string
   Customers.Country.like:string
   Customers.Country.eq:string
   Customers.Phone.like:string
   Customers.Phone.eq:string
   Customers.Fax.like:string
   Customers.Fax.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Customers.CustomerID
   .:Customers.CompanyName
   .:Customers.ContactName
   .:Customers.ContactTitle
   .:Customers.Address
   .:Customers.City
   .:Customers.Region
   .:Customers.PostalCode
   .:Customers.Country
   .:Customers.Phone
   .:Customers.Fax

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
