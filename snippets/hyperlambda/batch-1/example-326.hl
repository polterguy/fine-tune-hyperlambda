
/*
 * Read/list endpoint that retrieves records from the 'categories' table in the 'cms' SQLite database.
 * The endpoint supports filtering only, and is ONLY accessible by users with the 'guest' role.
 *
 * ### Arguments
 * - [.arguments] includes filtering parameters:
 *   - [categories.id.eq]: Exact match on category ID.
 *   - [categories.name.like]: Pattern match on category name.
 *   - [categories.name.eq]: Exact match on category name.
 *   - [categories.description.like]: Pattern match on category description.
 *   - [categories.description.eq]: Exact match on category description.
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures that only users with the 'guest' role can invoke the endpoint.
 *
 * ### Database Operation
 * - [data.connect] connects to the 'cms' SQLite database using the 'generic' connection string.
 * - [add] dynamically injects all filtering arguments into the [and] clause of the [data.read] operation's [where] node.
 * - [data.read] queries the 'categories' table with the applied filters, returning the following fields:
 *   - [id], [name], and [description].
 *
 * ### Response
 * - [return-nodes] returns the matched records to the client.
 *
 * This endpoint demonstrates how to implement a secure, filterable read operation
 * in Hyperlambda with clear access control and dynamic query construction.
 */
.arguments

   // Filtering
   categories.id.eq:long
   categories.name.like:string
   categories.name.eq:string
   categories.description.like:string
   categories.description.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:categories
      columns
         categories.id
         categories.name
         categories.description
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
