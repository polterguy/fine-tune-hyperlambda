
/*
 * This endpoint counts the number of unique and distinct values from a specified column in the "city" table
 * within the "sakila" SQLite database, with support for optional filtering and caching.
 * 
 * ## Input Arguments
 * - [distinct_column]: Required; must match one of the valid column names in `city` table (e.g. city.city_id).
 * - [recaptcha]: Placeholder for a security check (e.g. CAPTCHA verification).
 * - Optional filtering parameters such as [city.city.like], [city.country_id.eq], etc.
 * 
 * ## Validation
 * - [validators.mandatory] ensures the [distinct_column] argument is present.
 * - [validators.enum] restricts [distinct_column] to a predefined safe list of column names.
 * 
 * ## Caching
 * - [response.headers.set] is used to add an HTTP `Cache-Control` header, caching the response for 500 seconds.
 * 
 * ## Database Access
 * - A connection is opened to the [sakila] database using the [generic] connection string.
 * - A node named [distinct_functor] is dynamically generated using [strings.concat] to contain the
 *   SQL function string `"count(distinct columnName)"`, where `columnName` comes from the [distinct_column] argument.
 * - The [set-name] slot renames the generated column node to fit into the required structure for [data.read].
 * - The original [distinct_column] argument is removed after use to avoid interfering with the dynamic [where] clause.
 * - Remaining arguments are added as filters to the [where] / [and] clause.
 * 
 * ## Execution
 * - The [data.read] slot reads from the "city" table using the generated distinct count expression as a column.
 * - The result is returned to the caller using [return-nodes].
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string
   recaptcha:string

   // Filter conditions (optional)
   city.city_id.eq:long
   city.city.like:string
   city.city.eq:string
   city.country_id.eq:long
   city.last_update.eq:date

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:city.city_id
   .:city.city
   .:city.country_id
   .:city.last_update

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=500

// Opening up our database connection.
data.connect:[generic|sakila]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:city
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
