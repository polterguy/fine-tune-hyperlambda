
/*
 * Endpoint to upload, unzip, and overwrite a specified folder.
 * Only accessible by users with [root] access.
 *
 * 1. [.arguments]
 *    * Accepts:
 *    * - [file]: A multi-part form-data file upload (expected to be a ZIP archive).
 *    * - [folder]: The folder where contents will be unzipped.
 *
 * 2. [.accept]
 *    * Declares support for [multipart/form-data] to enable file uploads.
 *
 * 3. [auth.ticket.verify]
 *    * Restricts access to users with the [root] role.
 *
 * 4. [validators.mandatory]
 *    * Ensures required arguments are provided:
 *    * - The uploaded file.
 *    * - The file’s name and binary stream.
 *    * - The destination folder.
 *
 * 5. [strings.split] + [if not eq]
 *    * Checks that the uploaded file has a `.zip` extension.
 *    * Throws a public error (HTTP 415) if the file is not a ZIP archive.
 *
 * 6. [io.folder.list] and [io.folder.delete]
 *    * Lists and deletes all subfolders in the target directory.
 *
 * 7. [io.file.list] and [io.file.delete]
 *    * Lists and deletes all files in the target directory, ensuring a clean overwrite.
 *
 * 8. [.filename] + [strings.concat]
 *    * Constructs the full path to the ZIP file based on the target folder and uploaded filename.
 *
 * 9. [io.stream.save-file]
 *    * Saves the uploaded file’s stream to disk at the constructed filename path.
 *
 * 10. [io.file.unzip]
 *     * Unzips the saved archive into the specified folder.
 *
 * 11. [io.file.delete]
 *     * Deletes the uploaded ZIP file after it has been extracted.
 *
 * 12. [return-nodes]
 *     * Returns a static success result to the caller.
 */
.arguments

   // File argument can take any type, and/or children nodes.
   file:*
   folder:string

// Endpoint can accept form-data
.accept:multipart/form-data

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file
validators.mandatory:x:@.arguments/*/file/*/name
validators.mandatory:x:@.arguments/*/file/*/stream
validators.mandatory:x:@.arguments/*/folder

// Making sure specified file is a ZIP file.
strings.split:x:@.arguments/*/file/*/name
   .:.
if
   not
      eq
         get-value:x:@strings.split/0/-
         .:zip
   .lambda

      // Oops, not a ZIP file ...
      throw:You can only upload ZIP files
         public:true
         status:415

// Emptying folder.
io.folder.list:x:@.arguments/*/folder
   display-hidden:true
for-each:x:-/*
   io.folder.delete:x:@.dp/#
io.file.list:x:@.arguments/*/folder
   display-hidden:true
for-each:x:-/*
   io.file.delete:x:@.dp/#

// Figuring out full path of ZIP file as it should be saved.
.filename
set-value:x:@.filename
   strings.concat
      get-value:x:@.arguments/*/folder
      get-value:x:@.arguments/*/file/*/name

// Saving stream to file.
io.stream.save-file:x:@.filename
   get-value:x:@.arguments/*/file/*/stream

// Unzipping file.
io.file.unzip:x:@.filename

// Deleting ZIP file.
io.file.delete:x:@.filename

// Returning success to caller.
return-nodes
   result:Success
