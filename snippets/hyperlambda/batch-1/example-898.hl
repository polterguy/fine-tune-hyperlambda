
/*
 * This Hyperlambda endpoint counts unique/distinct values in a column from the [Categories] table in the [northwind] database.
 * It allows optional filtering and performs validation to ensure proper usage.
 *
 * 1. [.arguments]
 *    - Accepts input arguments, primarily [distinct_column] which must follow the format 'TABLE.COLUMN'.
 *    - Includes optional filter parameters for the [Categories] table such as [eq], [like], and column-specific filters.

 * 2. [validators.mandatory]
 *    - Ensures the [distinct_column] argument is provided by the caller.
 *
 * 3. [validators.enum]
 *    - Validates that the value of [distinct_column] matches one of the preapproved columns from the [Categories] table.
 *    - Protects against SQL injection and invalid column references.
 *
 * 4. [data.connect]
 *    - Opens a connection to the 'northwind' SQLite database using the 'generic' connection string.
 *    - Declares the [database-type] explicitly as 'sqlite'.
 *
 * 5. [set-name]
 *    - Dynamically constructs the SQL fragment `count(distinct COLUMN_NAME)` using [strings.concat].
 *    - The constructed value is inserted into the query structure as a placeholder column named [distinct_functor].
 *
 * 6. [remove-nodes]
 *    - Deletes the original [distinct_column] argument from [.arguments] to prevent it from interfering with filtering logic.
 *
 * 7. [add]
 *    - Adds any remaining arguments under a [where] clause for filtering.
 *    - These become dynamic filters in the final [data.read] call.
 *
 * 8. [data.read]
 *    - Queries the [Categories] table.
 *    - Dynamically uses the previously set [distinct_functor] as a column alias [count] to count distinct values.
 *    - Applies optional filters from [.arguments] inside a logical [and] group.
 *
 * 9. [return-nodes]
 *    - Returns the inner node result of [data.read], effectively returning the distinct count to the client.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Apply optional filtering if you wish
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Categories.CategoryID
   .:Categories.CategoryName
   .:Categories.Description
   .:Categories.Picture

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
