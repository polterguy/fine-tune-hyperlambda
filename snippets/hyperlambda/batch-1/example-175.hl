
/*
 * Dynamically accesses all values under [.settings] and builds a comma-separated string
 * containing those values, storing the result in [.result].
 *
 * ### Data Structure
 * - [.settings] holds multiple configuration entries:
 *   - [apiKey]: XYZ-123
 *   - [secretKey]: ABC-987
 *   - [region]: us-east
 * - [.result] is initialized to accumulate the final string.
 *
 * ### Loop and Concatenation
 * - [for-each] iterates over each child of [.settings].
 * - In each iteration:
 *   - [get-value] retrieves the value of the current node with the expression `:x:@.dp/#` being passed in by the [for-each] invocation.
 *   - [strings.concat] appends the value to [.result], followed by a comma.
 *
 * ### Cleanup
 * - After the loop, [strings.trim-end] removes the trailing comma from the final string.
 * - [set-value] updates [.result] with the cleaned-up value.
 *
 * This snippet demonstrates how to aggregate dynamic values from a node collection
 * into a formatted string in Hyperlambda.
 */
.settings
   apiKey:XYZ-123
   secretKey:ABC-987
   region:us-east
.result
for-each:x:@.settings/*
   set-value:x:@.result
      strings.concat
         get-value:x:@.result

         // This expression is referencing the currently iterated data node, hence [.dp] as in 'data pointer'.
         get-value:x:@.dp/#
         .:,

// Removing last comma.
set-value:x:@.result
   strings.trim-end:x:@.result
      .:,