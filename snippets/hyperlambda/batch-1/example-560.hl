
/*
 * Simulates a queue by popping items from the front of a list until it is empty.
 *
 * ## Initialization
 * - [.queue] contains a list of [item] nodes with values: 'one', 'two', and 'three'.
 * - [.popped] will store the dequeued items.
 *
 * ## Loop Logic
 * - [while] continues looping as long as the number of children in [.queue] is greater than 0.
 * - [mt] (more than) compares the count of [.queue/*] against 0 using [get-count].
 *
 * ## Loop Body
 * - [unwrap] ensures all expression references within the loop are evaluated correctly.
 * - [add] appends the first item from [.queue] (index 0) into [.popped] under a new [item] node.
 * - [remove-nodes] deletes the first node in [.queue], effectively "popping" the item.
 *
 * ## Use Case
 * - Useful for processing items in FIFO order such as tasks, events, or buffered data.
 */
.queue
   item:one
   item:two
   item:three
.popped

while
   mt
      get-count:x:@.queue/*
      .:int:0
   .lambda
      unwrap:x:+/*/*
      add:x:@.popped
         .
            item:x:@.queue/0
      remove-nodes:x:@.queue/0
