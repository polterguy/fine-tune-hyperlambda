
/*
 * Attempts to fetch a random cat fact from the MeowFacts API and assigns it to a [.cat-fact] node,
 * with fallback error handling if the request fails.
 *
 * Steps:
 * - Initializes a [.cat-fact] node to store the result or an error message.
 * - [http.get] sends a GET request to "https://meowfacts.herokuapp.com/".
 * - [convert:true] ensures the JSON response is automatically transformed into a lambda tree.
 *
 * - An [if] block checks whether the HTTP response status code is within the 2xx success range:
 *   - [mte] ensures the status is >= 200
 *   - [lt] ensures it is < 300
 *
 * - If successful, [set-value] extracts the first cat fact from [data/0]
 *   in the JSON and stores it in [.cat-fact].
 *
 * - If the request fails (non-2xx response), the [else] block assigns
 *   a default message "Failed to fetch cat fact" to [.cat-fact].
 *
 * This example demonstrates how to handle API calls with both success and failure logic in Hyperlambda.
 */
.cat-fact
http.get:"https://meowfacts.herokuapp.com/"
   convert:true
if
   and
      mte:x:@http.get
         .:int:200
      lt:x:@http.get
         .:int:300
   .lambda
      set-value:x:@.cat-fact
         get-value:x:@http.get/*/content/*/data/0
else
   set-value:x:@.cat-fact
      .:Failed to fetch cat fact
