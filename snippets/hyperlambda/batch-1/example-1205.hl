
/*
 * This Hyperlambda snippet demonstrates an incorrect use of [whitelist],
 * which results in an exception when a non-whitelisted slot is executed inside the lambda.
 *
 * 1. [.result]
 *    * Placeholder node for the operation (not actively used in the logic).
 *
 * 2. [add:x:-]
 *    * Executes the [whitelist] construct as an inline operation.
 *
 * 3. [whitelist]
 *    * Defines a restricted execution environment where only explicitly allowed slots can be used.
 *
 * 4. [vocabulary]
 *    * Declares the allowed slots inside the lambda:
 *    * - [return]
 *    * - [vocabulary]
 *    * Any slot not listed here will result in a runtime exception if used.
 *
 * 5. [.lambda]
 *    * Encapsulates the logic to be evaluated under the whitelist restriction.
 *    * Contains a non-whitelisted slot: [set-value].
 *
 * 6. [set-value]
 *    * Attempts to assign a value, but is not declared in the whitelist.
 *    * This causes an exception to be thrown at runtime, demonstrating whitelist enforcement.
 *
 * 7. [return:x:-/*]
 *    * Would return the result if the lambda executed successfully, but it will not be reached.
 *
 * Result:
 * * Execution fails with an exception due to the use of a non-whitelisted slot ([set-value]).
 */
.result
add:x:-
   whitelist
      vocabulary
         return
         vocabulary
      .lambda
         .foo

         // This will throw an exception (not whitelisted above)
         set-value:x:@.foo
            .:foo
         vocabulary
         return:x:-/*
