
/*
 * This example demonstrates nested [try] blocks to handle specific exceptions differently.
 * The outer [try] block handles general exceptions, while the inner [try] block
 * specifically handles potential errors from [io.file.load].
 *
 * 1. [.file-content]
 *    * Declares a buffer node intended to hold the contents of a file.
 *
 * 2. [try] (outer)
 *    * Catches any unexpected errors that occur during the file handling process.
 *
 * 3. [try] (inner)
 *    * Encapsulates the [io.file.load] call and value assignment.
 *    * Used to isolate file-specific errors for more granular handling.
 *
 * 4. [io.file.load]
 *    * Attempts to load a file based on a dynamic file path found in [.file-path].
 *    * May throw an exception if the file is missing or unreadable.
 *
 * 5. [set-value]
 *    * Stores the loaded file content into [.file-content] if successful.
 *
 * 6. [.catch] (inner)
 *    * Executes only if [io.file.load] throws an exception.
 *    * Logs a specific error: "File not found".
 *
 * 7. [.catch] (outer)
 *    * Executes if an unexpected exception occurs anywhere inside the outer [try] block.
 *    * Logs a general error message indicating a broader failure in the file handling logic.
 */
.file-content

try
   try
      io.file.load:x:@.file-path
      set-value:x:@.file-content
         .:x:@io.file.load
   .catch
      log.error:File not found
.catch
   log.error:An unexpected error occurred during file processing.
