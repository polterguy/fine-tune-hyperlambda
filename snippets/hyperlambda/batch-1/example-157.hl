
/*
 * Runs a loop that executes once per second for a total of 5 iterations,
 * logging a message and decrementing a countdown timer in each step.
 *
 * ### Initialization
 * - [.time_left] is set to 5, representing the number of iterations to run.
 *
 * ### Loop Logic
 * - [while] continues looping as long as [.time_left] is greater than 0, using [mt] (more than).
 * - Inside the [.lambda] block:
 *   - [log.info] logs "Time remaining" once per iteration.
 *   - [sleep] pauses execution for 1000 milliseconds (1 second).
 *   - [math.decrement] subtracts 1 from [.time_left].
 *
 * This structure is useful for building timed loops or countdown behaviors,
 * such as polling, retry logic, or scheduled delay cycles in Hyperlambda.
 */
.time_left:int:5
while
   mt
      get-value:x:@.time_left
      .:int:0
   .lambda

      // Logging remaining time.
      log.info:Time remaining

      // Waits for 1 second
      sleep:1000

      // Decrement time.
      math.decrement:x:@.time_left
