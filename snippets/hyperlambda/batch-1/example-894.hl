
/*
 * This Hyperlambda snippet demonstrates a [while] loop that executes 20 times.
 * During each iteration, it logs a message and increments a counter.
 *
 * 1. [.no]
 *    - Declares an integer variable initialized to 0.
 *    - Serves as the loop counter for controlling iteration.
 *
 * 2. [while]
 *    - Repeatedly executes its [.lambda] child as long as the condition evaluates to true.
 *    - The condition uses [lt] (less than) to compare [.no] to 20.
 *
 * 3. [lt]
 *    - Evaluates whether the current value of [.no] is less than 20.
 *    - Uses [get-value] to dynamically fetch the counterâ€™s value for comparison.
 *
 * 4. [.lambda]
 *    - Contains the logic to execute in each iteration of the loop.
 *
 * 5. [log.info]
 *    - Logs a static message ("Howdy from while") during each loop iteration.
 *
 * 6. [math.increment]
 *    - Increments the value of [.no] by 1 after each iteration, progressing the loop toward its exit condition.
 */
.no:int:0
while
   lt
      get-value:@.no
      .:int:20
   .lambda

      // Executing log inside the loop
      log.info:Howdy from while
      math.increment:@.no
