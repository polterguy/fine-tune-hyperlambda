
/*
 * Loops from 1 to 5 and appends each number as a [value] node under [.result].
 *
 * ## Initialization
 * - [.counter] is set to 1 and used to track the current number.
 * - [.result] acts as a container to hold the generated nodes.
 *
 * ## Loop Logic
 * - [while] continues execution as long as [.counter] is less than or equal to 5.
 * - [lte] performs the comparison using [get-value] to retrieve [.counter].
 *
 * ## Loop Body
 * - [unwrap] ensures node references within the lambda body are correctly evaluated.
 * - [add] creates a new child node under [.result], each containing:
 *   - [value]: The current counter value.
 * - [math.increment] increases [.counter] by 1 for the next iteration.
 *
 * ## Use Case
 * - Ideal for generating numeric sequences, pagination indexes, or structured lists for UI or logic processing.
 */
.counter:int:1
.result

while
   lte
      get-value:x:@.counter
      .:int:5
   .lambda
      unwrap:x:+/*/*
      add:x:@.result
         .
            value:x:@.counter
      math.increment:x:@.counter
