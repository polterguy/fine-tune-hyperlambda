
/*
 * This Hyperlambda snippet demonstrates the use of the [switch] control structure
 * to handle multiple conditional branches based on the value of [.val].
 *
 * 1. [.val]
 *    * Declares a node with the value 'foo', which serves as the input for the [switch] statement.
 *
 * 2. [.result]
 *    * Placeholder node to hold the output from the matching case.
 *
 * 3. [switch]
 *    * Evaluates the value of [.val] and compares it to each [case] in order.
 *    * The expression `x:@.val` retrieves the value dynamically.
 *
 * 4. [case:bar]
 *    * This case is skipped because [.val] does not equal 'bar'.
 *
 * 5. [case:foo]
 *    * This case matches since [.val] equals 'foo'.
 *    * Executes [set-value] to assign 'Success!' to [.result].
 *
 * Result:
 * * [.result] will contain the value 'Success!' after execution.
 */
.val:foo
.result
switch:x:@.val

   case:bar
      set-value:x:@.result
         .:Oops

   case:foo
      set-value:x:@.result
         .:Success!