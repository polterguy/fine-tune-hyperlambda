
/*
 * Generates and returns a grouped bar chart image based on user-provided values, ticks, and legend labels.
 *
 * ## Input Arguments
 * - Accepts dynamic arguments via [arguments]:*, but enforces that the following are mandatory:
 *   - [ticks]: Comma-separated string representing x-axis labels.
 *   - [legend]: Comma-separated string for each series represented in the grouped bars.
 *   - [values1]: At least one data series of comma-separated values (e.g., "5,10,15").
 * - Additional [valuesN] series (e.g., values2, values3, etc.) are dynamically detected by checking argument names using [strings.starts-with].
 *
 * ## Data Preparation
 * - [for-each] iterates through all arguments.
 *   - For every key starting with 'values', it:
 *     - Adds a primary node for each bar group under [.bars].
 *     - Splits the value string into individual bar values using [strings.split].
 *
 * ## Chart Configuration
 * - [image.chart:grouped] generates a grouped bar chart image:
 *   - Chart dimensions are statically set to 800x500.
 *   - [ticks] and [legend] are split and added from their respective string arguments.
 *   - [bars] are dynamically built based on the number of value series found.
 *
 * ## Output & Response
 * - [response.headers.set] sets the content type to [application/octet-stream] to ensure binary image data is interpreted correctly.
 * - [return] sends the generated chart image back to the client.
 *
 * ## Use Case
 * - Ideal for dynamically creating grouped visual analytics charts, where each series and axis label is provided at runtime.
 */
.arguments:*

// 3 mandatory arguments being [ticks], [legend] and [values1]
validators.mandatory:x:@.arguments/*/ticks
validators.mandatory:x:@.arguments/*/legend
validators.mandatory:x:@.arguments/*/values1

// Creating our individual bars.
.bars
for-each:x:@.arguments/*
   get-name:x:@.dp/#
   if
      strings.starts-with:x:@get-name
         .:values
      .lambda

         // Adding primary node for bar.
         add:x:@.bars
            .
               .

         // Adding values for individual cells.
         add:x:@.bars/0/-
            strings.split:x:@.dp/#
               .:,

// Creating our individual ticks.
add:x:../*/image.chart/*/ticks
   strings.split:x:@.arguments/*/ticks
      .:,

// Creating our legend.
add:x:../*/image.chart/*/legend
   strings.split:x:@.arguments/*/legend
      .:,

// Parametrizing [image.chart] invocation.
add:x:../*/image.chart/*/bars
   get-nodes:x:@.bars/*
image.chart:grouped
   width:800
   height:500
   bars
   ticks
   legend

// Applying correct HTTP header.
response.headers.set
   Content-Type:application/octet-stream

// Returning chart to caller.
return:x:@image.chart
