
/*
 * Defines a secure HTTP CRUD endpoint that deletes a single record from the 'comments' table
 * in the 'cms' SQLite database based on a specified primary key.
 *
 * ## Input Arguments
 * - [id]: A required long value representing the primary key of the comment to be deleted.
 *
 * ## Authorization
 * - [auth.ticket.verify] restricts access to users with either 'root' or 'admin' roles.
 *
 * ## Validation
 * - [validators.mandatory] ensures the [id] argument is present before continuing.
 *
 * ## Database Logic
 * - [data.connect] opens a connection to the 'cms' SQLite database.
 * - [add] dynamically injects the [id] argument into the WHERE clause of the delete operation.
 * - [data.delete] removes the record from the 'comments' table where the [id] matches.
 *
 * ## Response
 * - [unwrap] ensures the [affected] node's expression is evaluated.
 * - [return] provides the number of rows affected via the [affected] node to confirm deletion.
 *
 * ## Use Case
 * - Useful for administrative dashboards or content management systems that require controlled deletion
 *   of user comments or records by authorized users only.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin
validators.mandatory:x:@.arguments/*/id

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:comments
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
