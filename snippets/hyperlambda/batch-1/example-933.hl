
/*
 * This Hyperlambda endpoint returns a list of cloudlets belonging to the currently authenticated user.
 * It performs secure access control and ensures users can only retrieve their own records.
 *
 * 1. [.arguments]
 *    - Declares the endpoint's argument structure, which is empty here since the user's identity is derived from the authentication context.
 *
 * 2. [auth.ticket.verify]
 *    - Ensures the user is authorized to access this endpoint.
 *    - Accepts users with roles: [root], [guest], or [impersonated].
 *
 * 3. [auth.ticket.get]
 *    - Retrieves the identity (e.g., user ID or username) of the currently authenticated user.
 *    - Used to securely scope the database query to this user.
 *
 * 4. [data.connect]
 *    - Establishes a connection to the 'hub' SQLite database using a generic connection string.
 *
 * 5. [data.read]
 *    - Executes a query on the [cloudlets] table, joining it with the [plans] and [clusters] tables to enrich the data.
 *    - Uses [inner join] to only include results with matching records in both [plans] and [clusters].
 *    - The [on] clauses ensure proper joining conditions:
 *        - [cloudlets.plan] must equal [plans.name]
 *        - [cloudlets.cluster] must equal [clusters.id]
 *
 * 6. [columns]
 *    - Specifies which fields to return from the joined tables, including metadata about cloudlets, pricing, resource limits, and location info.
 *    - The [clusters.name] column is aliased as [node_name] for clarity.
 *
 * 7. [where]
 *    - Filters results using a dynamic condition that ensures only cloudlets belonging to the authenticated user are returned.
 *    - Uses [user.eq] with the value from [auth.ticket.get].
 *
 * 8. [return-nodes]
 *    - Returns all result nodes from the executed [data.read] query back to the HTTP caller.
 */
.arguments

// Ensuring user is authorised to invoke endpoint.
auth.ticket.verify:root, guest, impersonated

/*
 * Retrieving currently authenticated user to prevent a user
 * from retrieving cloudlets not belonging to him/her.
 */
auth.ticket.get

// Opening up our database connection.
data.connect:[generic|hub]

   // Reading data from database.
   data.read
      table:cloudlets
         join:plans
            type:inner
            on
               and
                  cloudlets.plan.eq:plans.name
         join:clusters
            type:inner
            on
               and
                  cloudlets.cluster.eq:clusters.id
      columns
         cloudlets.id
         cloudlets.created
         cloudlets.name
         cloudlets.plan
         cloudlets.cluster
         cloudlets.destruction_date
         cloudlets.enabled
         cloudlets.source_cloudlet
         plans.price
         plans.storage
         plans.cpu
         plans.memory
         plans.frontend
         plans.max_upload
         plans.bandwidth
         plans.max_timeout
         clusters.country
         clusters.name
            as:node_name
         plans.description
      where
         and
            user.eq:x:@auth.ticket.get

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
