
/*
 * This Hyperlambda snippet demonstrates conditional logic inside a [for-each] loop,
 * evaluating each [car-parts] item to determine its availability status and updating the value accordingly.
 *
 * 1. [.car-parts]
 *    * Contains key-value pairs for different parts and their availability status.
 *    * Example: [engine:available], [wheel:out-of-stock], [door:out-of-stock].
 *
 * 2. [for-each:x:@.car-parts/*]
 *    * Iterates over all child nodes of [.car-parts].
 *    * `@.car-parts` – Named iterator to locate the [car-parts] node.
 *    * `*` – Wildcard iterator to select all its children (i.e., engine, wheel, door).
 *
 * 3. [if eq:x:@.dp/# .:available]
 *    * Checks if the current part's value is "available".
 *    * If so, sets the value to "checked" to indicate it has passed inspection.
 *
 * 4. [else]
 *    * Executes if the part is not available.
 *    * Retrieves the part name using [get-name:x:@.dp/#].
 *
 * 5. [if eq:x:@get-name .:wheel]
 *    * Nested [if] condition to check if the current part is specifically "wheel".
 *    * If true, sets the value to "urgent restock".
 *
 * 6. [else]
 *    * If the part is not "wheel", but still out of stock, sets the value to "restock".
 *
 * Result:
 * Each car part's value is updated based on availability:
 * - Available parts → "checked"
 * - Out-of-stock "wheel" → "urgent restock"
 * - Other out-of-stock parts → "restock"
 */
.car-parts
   engine:available
   wheel:out-of-stock
   door:out-of-stock

for-each:x:@.car-parts/*
   if
      eq:x:@.dp/#
         .:available
      .lambda
         set-value:x:@.dp/#
            .:checked
   else
      get-name:x:@.dp/#
      if
         eq:x:@get-name
            .:wheel
         .lambda
            set-value:x:@.dp/#
               .:urgent restock
      else
         set-value:x:@.dp/#
            .:restock