
/*
 * Endpoint to update one record in the [city] table of the [sakila] database using filtering,
 * where [city_id] is used as the primary key. The update includes fields like [city] and [country_id].
 *
 * 1. [.arguments]
 *    * Accepts three parameters:
 *    * - [city_id]: Primary key for filtering (mandatory).
 *    * - [city]: New value for the city name.
 *    * - [country_id]: New value for the related country.
 *
 * 2. [validators.mandatory]
 *    * Ensures that [city_id] is provided to safely target a record for update.
 *
 * 3. [data.connect]
 *    * Opens a connection to the [sakila] SQLite database using the [generic] connection string.
 *
 * 4. [add] (values block)
 *    * Dynamically inserts updateable fields (starting from index 1) into the [values] section of [data.update].
 *    * These represent the new values for the record.
 *
 * 5. [add] (where block)
 *    * Adds filtering logic using the first argument ([city_id]) to target the specific record for update.
 *
 * 6. [data.update]
 *    * Executes the update operation on the [city] table with the specified values and filter conditions.
 *
 * 7. [if]
 *    * Checks if the update affected 0 records, which means the record was not found.
 *    * If so, returns a 404 response with the message "Record not found".
 *
 * 8. [response.status.set]
 *    * Sets the response status to 202 (Accepted) if the update was successful.
 *
 * 9. [yield]
 *    * Returns how many records were affected by the update using the [data.update] result.
 */
.arguments

   // city_id column value being primary key of record to update, mandatory argument
   city_id:long

   // city column's new value
   city:string

   // country_id column's new value
   country_id:long

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/city_id

// Opening up our database connection.
data.connect:[generic|sakila]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:city
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   yield
      affected:x:@data.update
