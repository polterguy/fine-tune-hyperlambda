
/*
 * Endpoint that counts items from the [items] table in the [shopping-cart-demo] SQLite database.
 * Supports filtering across both the [items] and [products] tables and requires [root] or [admin] role for access.
 *
 * 1. [.arguments]
 *    * Accepts optional filters for the count query:
 *    * - [items.item_id.eq], [items.product_id.eq], [items.quantity.eq]: Exact match filters on columns in the [items] table.
 *    * - [items.session_id.like], [items.session_id.eq]: Filters on session ID using LIKE and exact match.
 *    * - [product_id.name.eq], [product_id.name.like]: Filters on the joined [products] table by product name.
 *
 * 2. [auth.ticket.verify:root,admin]
 *    * Ensures the endpoint can only be accessed by users with [root] or [admin] roles.
 *
 * 3. [data.connect]
 *    * Connects to the [shopping-cart-demo] SQLite database using the [generic] connection string.
 *    * Declares the [database-type] explicitly as [sqlite].
 *
 * 4. [add]
 *    * Dynamically adds all filters provided in [.arguments] into the WHERE clause (the [and] node).
 *    * Ensures only relevant filters are included in the query.
 *
 * 5. [data.read]
 *    * Performs a SELECT query with JOIN logic:
 *    * - From the [items] table.
 *    * - LEFT joins the [products] table using [product_id] as alias.
 *    * - Joins on matching [items.product_id] and [product_id.product_id].
 *    * Selects a [count(*)] column aliased as [count] to get the total number of matching records.
 *    * Applies all filters under a [where and] clause.
 *    * Limits the result to a single row with [limit:long:1].
 *
 * 6. [return-nodes]
 *    * Returns the count result using the path `@data.read/*/*`, making it accessible in the response.
 */
.arguments

   // items table item_id column equality exact match filtering
   items.item_id.eq:long

   // items table product_id column equality exact match filtering
   items.product_id.eq:long

   // items table quantity column equality exact match filtering
   items.quantity.eq:long

   // items table session_id column wildcard filtering with SQL like '%' comparison
   items.session_id.like:string

   // items table session_id column equality exact match filtering
   items.session_id.eq:string

   // products table name column equality exact match filtering
   product_id.name.eq:string

   // products table name column wildcard filtering with SQL like '%' comparison
   product_id.name.like:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|shopping-cart-demo]
   database-type:sqlite

   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:items
         join:products
            as:product_id
            type:left
            on
               and
                  items.product_id:product_id.product_id
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
