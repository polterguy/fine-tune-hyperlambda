
/*
 * Demonstrates parallel execution using [fork] and synchronization using [join] in Hyperlambda.
 *
 * ### Parallel Threads
 * - Two [fork] slots are created inside a [join] block.
 * - Each [fork] executes an [http.get] request to a different URL:
 *   - "https://servergardens.com"
 *   - "https://gaiasoul.com"
 *
 * ### Synchronization
 * - [join] ensures that the main thread waits for both [fork] threads to complete
 *   before proceeding to any logic that might follow.
 *
 * This pattern is useful when performing multiple asynchronous tasks (like API calls)
 * in parallel while ensuring results are available before continuing.
 */
join
   fork
      http.get:"https://servergardens.com"
   fork
      http.get:"https://gaiasoul.com"