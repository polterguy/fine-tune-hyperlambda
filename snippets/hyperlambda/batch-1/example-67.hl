
/*
 * Defines an HTTP endpoint that deletes a single record from the [Album] table
 * in the chinook SQLite database using a provided primary key, with authentication and validation.
 *
 * ### Arguments
 * - [.arguments] / [AlbumId] declares a required input parameter representing the Album's primary key.
 * - [validators.mandatory] ensures the [AlbumId] argument is present.
 * 
 * ### Authorization
 * - [auth.ticket.verify] checks that the user has either "root" or "admin" role access
 *   before proceeding with the operation.
 * 
 * ### Database Operation
 * - [data.connect] opens a connection to the chinook SQLite database.
 *   - [database-type] explicitly defines the type for accurate driver resolution, which is SQLite for this invocation.
 * 
 * - [add] dynamically injects the deletion criteria into the
 *   [data.delete] and its [where] / [and] parts, by copying the relevant argument nodes.
 * 
 * - [data.delete] removes the record from the [Album] table where the [AlbumId] matches the argument value.
 *
 * ### Response
 * - [unwrap] forward evaluates any expressions inside [return].
 * - [return] / [affected] returns the number of rows affected by the delete operation to the API caller.
 *   The [unwrap] invocation is crucial to ensure we're returning whatever the expressions inside of [return] is pointing to
 *
 * This endpoint demonstrates secure and dynamic deletion logic using:
 * - Input validation
 * - Role-based access control
 * - Parameterized and safe database access patterns in Hyperlambda.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   AlbumId:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

validators.mandatory:x:@.arguments/*/AlbumId

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:Album
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
