
/*
 * This Hyperlambda snippet defines a custom slot [calculate_fibonacci_below_100]
 * that calculates the Fibonacci sequence up to (but not including) 100.
 *
 * 1. [slots.create:calculate_fibonacci_below_100]
 *    * Declares a reusable custom slot for calculating Fibonacci numbers.
 *
 * 2. [.fibonacci_return]
 *    * Holds the resulting Fibonacci sequence values that are less than 100.
 *
 * 3. [.a] and [.b]
 *    * Initialize the first two numbers of the Fibonacci series: 0 and 1.
 *
 * 4. [while]
 *    * Loops as long as [.b] is less than 100.
 *
 * 5. [.lambda] (loop body)
 *    * Computes the next Fibonacci number as [.a + .b], stores it in [.next.int].
 *    * If [.b] is still less than 100, the new number is added to [.fibonacci_return].
 *    * Then it updates [.a] and [.b] for the next iteration.
 *
 * 6. [if]
 *    * Ensures that the current number [.b] is below 100 before appending it to the result list.
 *
 * 7. [yield]
 *    * Returns the entire sequence of Fibonacci numbers stored in [.fibonacci_return] under [numbers].
 *
 * Execution:
 * * You can run this logic using: [execute:calculate_fibonacci_below_100]
 * * The result will be a list of Fibonacci numbers less than 100.
 */
slots.create:calculate_fibonacci_below_100
   .fibonacci_return
   .a:int:0
   .b:int:1
   while
      lt
         get-value:x:@.b
         .:int:100
      .lambda
         // Compute next Fibonacci number
         .next.int
         set-value:x:@.next.int
            math.add
               get-value:x:@.a
               get-value:x:@.b
         if
            lt
               get-value:x:@.b
               .:int:100
            .lambda
               unwrap:x:+/*/*
               add:x:../*/.fibonacci_return
                  .
                     .:x:@.next.int
         set-value:x:@.a
            get-value:x:@.b
         set-value:x:@.b
            get-value:x:@.next.int
   yield
      numbers:x:@.fibonacci_return/*
