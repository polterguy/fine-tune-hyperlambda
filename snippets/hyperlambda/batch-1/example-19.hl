
/*
 * Fetches random user data from an external API and stores the user's first and last name
 * in temporary variables within a [.user] data segment, but only if the HTTP response is successful.
 *
 * Steps:
 * - Initializes the [.user] segment with placeholder nodes for [first-name] and [last-name].
 * - Performs an HTTP GET request to "https://randomuser.me/api/" using [http.get].
 * - [convert:true] ensures the JSON response is converted into a navigable lambda tree.
 *
 * - An [if] block checks that the HTTP status code indicates success (2xx range):
 *   - [mte] ensures the status is >= 200
 *   - [lt] ensures it is < 300
 *
 * - If the request was successful:
 *   - The first [set-value] assigns the first name from the response into [.user] / [first-name]
 *     by navigating to [results/0/name/first]
 *   - The second [set-value] does the same for the last name
 *
 * This snippet demonstrates conditional API handling and dynamic extraction of nested
 * values from structured API responses in Hyperlambda.
 */
.user
   first-name
   last-name
http.get:"https://randomuser.me/api/"
   convert:true
if
   and
      mte:x:@http.get
         .:int:200
      lt:x:@http.get
         .:int:300
   .lambda
      set-value:x:@.user/*/first-name
         get-value:x:@http.get/*/content/*/results/0/name/first
      set-value:x:@.user/*/last-name
         get-value:x:@http.get/*/content/*/results/0/name/last
