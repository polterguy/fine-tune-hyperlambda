
/*
 * Conditionally evaluates a [.lambda] block using [if] and [or] logic,
 * executing based on whether any sub-conditions are true.
 *
 * This snippet checks two separate numeric conditions using logical OR:
 *
 * - The first condition uses [lt] (less than) to check if [value1] is less than 4.
 * - The second condition uses [mt] (more than) to check if [value2] is greater than 9.
 *
 * If either condition evaluates to true, the [.lambda] block is triggered, and it sets
 * the [.result] node's value to `true`. If both conditions are false, the [else] branch
 * sets [.result] to `false`.
 *
 * This demonstrates how to perform compound logical evaluations using [or] inside an [if]
 * block, and how to control execution flow in Hyperlambda based on dynamic boolean logic.
 *
 * Result:
 * - [.result] will contain `true` if *any* condition is met
 * - Otherwise, it will contain `false`
 */
.result
.value1:int:3
.value2:int:10
if
   or

      // [lt] implies "less than"
      lt:x:@.value1
         .:int:4

      // [mt] implies "more than"
      mt:x:@.value2
         .:int:9
   .lambda

      // Changing the value of [.result] to true
      set-value:x:@.result
         .:bool:true
else

   // Changing the value of [.result] to false
   set-value:x:@.result
      .:bool:false
