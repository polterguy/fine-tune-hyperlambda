
/*
 * This Hyperlambda snippet conditionally executes logic depending on the boolean value of [.switch].
 * It demonstrates the use of [if], [eq], and [else] slots for flow control based on dynamic evaluation.
 *
 * 1. [.switch]
 *    - Declares a boolean node set to 'true', which acts as the condition for branching.
 *
 * 2. [if]
 *    - Evaluates a condition and executes its [.lambda] block if the condition is true.
 *
 * 3. [eq]
 *    - Compares the value of [.switch] to the literal boolean value 'true'.
 *    - If the values are equal, the condition evaluates as true.
 *
 * 4. [log.info]
 *    - Inside [.lambda], logs a message stating "[.switch] is enabled" when the condition is true.
 *    - Under [else], logs "[.switch] is disabled" if the condition is false.
 *
 * 5. [else]
 *    - Executes a fallback [log.info] if [.switch] is not 'true'.
 *
 * This structure allows for clean, readable conditional execution based on any evaluated value.
 */
.switch:bool:true
if
   eq:x:@.switch
      .:bool:true
   .lambda

      // Executes when [.switch] is true.
      log.info:[.switch] is enabled

else

   // Executes when [.switch] is false.
   log.info:[.switch] is disabled
