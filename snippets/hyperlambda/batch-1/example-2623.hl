
/*
 * Demonstrates how to declare and execute a dynamic process node in Hyperlambda with looping logic.
 *
 * 1. [.process]
 *    - A hidden lambda object (not executed automatically because it starts with a dot) used to encapsulate a loop.
 *    - Declares a counter [.i] and a container [.list] to collect items.
 *
 * 2. [while]
 *    - Executes a loop while the value of [.i] is less than 3.
 *    - On each iteration, it:
 *        - Adds a node with name [item] to [.list], creating a new element.
 *        - Increments the counter [.i] using [math.increment].
 *
 * 3. [eval]
 *    - Explicitly evaluates the [.process] lambda object, which causes the loop to run and populate [.list].
 *
 * This pattern is useful for deferring logic until explicitly invoked, simulating function calls or reusable routines.
 */
.process
   .i:int:0
   .list
   while
      lt
         get-value:x:@.i
         .:int:3
      .lambda
         add:x:@.list
            .
               item
         math.increment:x:@.i

// Now we're executing lambda object explicitly
eval:x:@.process