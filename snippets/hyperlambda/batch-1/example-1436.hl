
/*
 * This Hyperlambda snippet demonstrates how to evaluate a user's role
 * using the [switch] slot with multiple [case] branches and a [default] fallback.
 *
 * 1. [.user_role]
 *    * Defines the current role of the user, e.g., "admin", "editor", or "user".
 *
 * 2. [.result]
 *    * Placeholder node that will hold the output message based on the role evaluation.
 *
 * 3. [switch:x:@.user_role]
 *    * Begins a switch-case evaluation based on the value of [.user_role].
 *
 * 4. [case:admin], [case:editor], [case:user]
 *    * Each [case] matches a specific role value and sets an appropriate message in [.result].
 *
 * 5. [default]
 *    * Executes if none of the [case] values match.
 *    * Sets [.result] to "Unknown role" for undefined or unexpected roles.
 *
 * Result:
 * * Based on the value in [.user_role], [.result] will be set to a descriptive string.
 */
.user_role:admin
.result
switch:x:@.user_role

   case:admin

      // If user role is "admin".
      set-value:x:@.result
         .:Has admin privileges

   case:editor

      // If user role is "editor".
      set-value:x:@.result
         .:Has editor privileges

   case:user

      // If user role is "user".
      set-value:x:@.result
         .:Has user privileges

   default

      // If none of the above roles match.
      set-value:x:@.result
         .:Unknown role
