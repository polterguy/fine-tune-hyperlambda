
/*
 * This Hyperlambda script defines a CRUD read endpoint for retrieving records
 * from the [questions] table in the [magic] SQLite database.
 * It supports paging, sorting, and filtering, and is restricted to [root] users.
 *
 * 1. [.arguments]
 *    * Accepts input for:
 *    * - [limit], [offset]: Used for pagination.
 *    * - [order], [direction]: For sorting results.
 *    * - Various filters for [question_id], [question], and [questionnaire]
 *      using both [like] and [eq] operators.
 *
 * 2. [auth.ticket.verify]
 *    * Restricts access to users with the [root] role.
 *    * Ensures that unauthorized users cannot access question data.
 *
 * 3. [data.connect]
 *    * Opens a connection to the [magic] database using a generic connection string.
 *    * Specifies [database-type] as [sqlite].
 *
 * 4. [add] (ordering)
 *    * Dynamically injects [order] and [direction] into the [data.read] block.
 *    * These define how results should be sorted.
 *    * [remove-nodes] is used afterward to avoid interference during filtering.
 *
 * 5. [add] (paging)
 *    * Dynamically adds [limit] and [offset] to the [data.read] block.
 *    * Enables control over the number of records returned and pagination.
 *    * Removes the original argument nodes after usage.
 *
 * 6. [add] (filters)
 *    * Adds all remaining argument nodes as filter conditions under the [where and] clause.
 *    * Dynamically supports multiple filter conditions depending on which arguments are supplied.
 *
 * 7. [data.read]
 *    * Executes a SELECT query against the [questions] table.
 *    * Retrieves selected columns including:
 *      - [question_id], [question], [questionnaire], [type], [context], and [name].
 *    * Applies the constructed [where and] filters, sorting, and pagination.
 *
 * 8. [return-nodes]
 *    * Returns the final result set to the caller using `@data.read/*`.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   questions.question_id.eq:long
   questions.question.like:string
   questions.question.eq:string
   questions.questionnaire.like:string
   questions.questionnaire.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:questions
      columns
         questions.question_id
         questions.question
         questions.questionnaire
         questions.type
         questions.context
         questions.name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
