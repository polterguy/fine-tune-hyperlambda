
/*
 * Defines a dynamic slot named [magic.auth.ensure-role] that ensures a specific role exists in the [roles] table
 * of the [magic] SQLite database. If the role does not exist, it is created. All logic is wrapped in a [try] block
 * with a silent [.catch] in case the system is not yet initialized.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [role]: The name of the role to check or create (mandatory).
 *   - [description]: A human-readable description of the role (mandatory).
 *
 * ### Validation
 * - [validators.mandatory] enforces that both [role] and [description] are supplied.
 *
 * ### Operation Logic
 * - [try] block wraps the entire process to handle any potential failures silently.
 * - [data.connect] establishes a connection to the [magic] database.
 * - [data.read] checks if a role with the given name already exists in the [roles] table.
 * - [if] and [exists] evaluate the read result:
 *   - If the role does not exist, [data.create] inserts a new role with the specified name and description.
 *
 * ### Error Handling
 * - [.catch] is set to [.silent] to avoid system crashes if the roles table or database is not yet available.
 *
 * This snippet is a reusable utility slot that helps maintain access control integrity
 * by dynamically ensuring roles exist, and is safe to use during setup or runtime.
 */
slots.create:magic.auth.ensure-role

   // Ensuring both [role] and [description] was supplied, since they're mandatory arguments
   validators.mandatory:x:@.arguments/*/role
   validators.mandatory:x:@.arguments/*/description

   /*
    * Ensures the [role] role exists.
    * 
    * Notice, in case system hasn't been setup yet, we'll need to silently
    * catch all exceptions.
    */
   try

      // Connecting to Magic database.
      data.connect:[generic|magic]

         // Checking to see if [role] role exists.
         data.read
            table:roles
            where
               and
                  name.eq:x:@.arguments/*/role

         // Checking result of above invocation.
         if
            not
               exists:x:@data.read/*/*
            .lambda

               // We need to insert [role] role into Magic database.
               data.create
                  table:roles
                  values
                     name:x:@.arguments/*/role
                     description:x:@.arguments/*/description
   .catch

      /*
       * Silently catching here, to avoid application crash
       * if system hasn't been setup yet.
       */
      .silent
