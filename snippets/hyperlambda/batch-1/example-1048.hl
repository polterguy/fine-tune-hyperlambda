
/*
 * This Hyperlambda snippet demonstrates how to use a nested [if] structure inside a [for-each] loop
 * to apply conditional logic for each item in an [inventory] node.
 * It modifies the [status] field of each item based on complex conditions.
 *
 * 1. [.inventory]
 *    * Contains multiple parts, each with a [name] and [status].
 *
 * 2. [for-each]
 *    * Iterates through each part node (e.g., [part1], [part2], [part3]).
 *    * Each part's value is accessible via the lambda expression [.dp/#].
 *
 * 3. [if] (outer)
 *    * Checks if the [status] of the current item is "available".
 *    * If true, sets the [status] to "checked".
 *
 * 4. [else] (if not available)
 *    * Triggers further nested checks.
 *
 * 5. [if] (nested inside else)
 *    * Checks if the [name] of the item is "wheel".
 *    * If true, sets the [status] to "urgent restock".
 *
 * 6. [else] (nested)
 *    * Default action for all other non-"available" and non-"wheel" items.
 *    * Sets the [status] to "restock".
 *
 * Result:
 * * Part statuses are updated based on their [name] and [status] values:
 *   - "available" becomes "checked"
 *   - "wheel" becomes "urgent restock"
 *   - all others become "restock"
 */
.inventory
   part1
      name:engine
      status:out-of-stock
   part2
      name:wheel
      status:out-of-stock
   part3
      name:door
      status:available

for-each:x:@.inventory/*
   if
      eq:x:@.dp/#/*/status
         .:available
      .lambda
         set-value:x:@.dp/#/*/status
            .:checked
   else
      if
         eq:x:@.dp/#/*/name
            .:wheel
         .lambda
            set-value:x:@.dp/#/*/status
               .:urgent restock
      else
         set-value:x:@.dp/#/*/status
            .:restock
