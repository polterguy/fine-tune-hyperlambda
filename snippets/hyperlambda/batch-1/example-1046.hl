
/*
 * This Hyperlambda snippet demonstrates conditional branching using [if] and [else-if].
 * It evaluates multiple conditions sequentially to determine which block of logic to execute.
 *
 * 1. [.result]
 *    * Placeholder node that will store the outcome of the condition evaluation.
 *
 * 2. [if]
 *    * Evaluates the condition [. :bool:false].
 *    * Since the condition is false, the [.lambda] block under [if] is skipped.
 *
 * 3. [else-if]
 *    * Provides an alternate condition [. :bool:true] after the initial [if].
 *    * Since the condition is true, the [.lambda] block is executed.
 *
 * 4. [set-value]
 *    * Sets [.result] to "Two" because the [else-if] condition evaluated to true.
 *
 * Result:
 * * [.result] will contain the value "Two" after execution.
 */
.result
if
   .:bool:false
   .lambda
      set-value:x:@.result
         .:One
else-if
   .:bool:true
   .lambda
      set-value:x:@.result
         .:Two
