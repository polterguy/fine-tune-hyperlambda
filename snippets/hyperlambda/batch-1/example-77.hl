
/*
 * Creates an HTTP endpoint that returns cryptographically secure random text,
 * using minimum and maximum length constraints provided by the caller.
 *
 * ### Arguments
 * - [.arguments] / [min] and [.arguments] / [max] specify the minimum and maximum length
 *   of the random text to generate.
 *
 * ### Random Text Generation
 * - [add] injects the provided arguments into the [crypto.random] slot
 *   dynamically using [get-nodes] to forward all argument values as parameters.
 * - [crypto.random] uses these constraints to generate a secure, random string.
 *
 * ### Result Handling
 * - [unwrap] forward evaluates any expressions inside of [return].
 * - [return] sends the generated text back to the caller in a field named [result].
 *   The previous [unwrap] invocation is mandatory to ensure we're returning whatever the expressions inside of [return] is pointing to
 *
 * This demonstrates how to securely generate randomized data in Hyperlambda
 * based on external input, and return the result from an API endpoint.
 */
.arguments
   min:long
   max:long

// Generating gibberish text.
add:x:./*/crypto.random
   get-nodes:x:@.arguments/*
crypto.random

// Generating gibberish text.
unwrap:x:+/*
return
   result:x:@crypto.random
