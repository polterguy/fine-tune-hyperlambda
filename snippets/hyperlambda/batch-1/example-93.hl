
/*
 * This snippet demonstrates the use of [whitelist] to explicitly restrict which slots are allowed to be executed within a [.lambda] object.
 *
 * 1. [whitelist]
 *    * Restricts the execution context to only allow specific slots listed under [vocabulary].
 *    * Any slot not listed will result in a runtime exception if used inside [.lambda].

 * 2. [vocabulary]
 *    * Defines the set of legal slot names that can be used within the [.lambda] execution block.

 * 3. [if]
 *    * Included in the whitelist, so conditional branching is permitted within [.lambda].

 * 4. [set-value]
 *    * Also whitelisted, used here to modify the [.result] node's value.

 * 5. [get-value]
 *    * Allowed to retrieve the value from nodes, used for evaluating the condition.

 * 6. [eq]
 *    * Used for comparison to check if the current value of [.result] is equal to `"finished"`.

 * 7. [.lambda]
 *    * The lambda block where only whitelisted functions are allowed.
 *    * Inside, it checks if [.result] equals `"finished"`, and if true, sets [.result] to `"OK"`.

 * 8. [.result]
 *    * A data node used in the logic; initialized with `"finished"` and potentially updated.
 */
whitelist
   vocabulary

      // These are the only slots that are allowed to execute inside of our [.lambda] object
      if
      set-value
      get-value
      eq

   .lambda
      .result:finished
      if
         eq
            get-value:x:@.result
            .:finished
         .lambda
            set-value:x:../*/.result
               .:OK
