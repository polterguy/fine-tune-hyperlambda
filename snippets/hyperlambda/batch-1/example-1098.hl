
/*
 * CRUD delete endpoint that deletes one record from the [InvoiceLine] table
 * in the [chinook] SQLite database. Access is restricted to users with the [employee] role.
 *
 * 1. [.arguments]
 *    * Accepts one required argument:
 *    * - [InvoiceLineId]: The primary key of the record to be deleted.
 *
 * 2. [auth.ticket.verify]
 *    * Ensures that only users with the [employee] role can execute this endpoint.
 *
 * 3. [validators.mandatory]
 *    * Verifies that the [InvoiceLineId] argument is provided before proceeding with deletion.
 *
 * 4. [data.connect]
 *    * Opens a connection to the [chinook] database using a [generic] connection string.
 *    * Explicitly declares the [database-type] as [sqlite].
 *
 * 5. [add]
 *    * Injects the [InvoiceLineId] into the [where and] clause of the [data.delete] operation.
 *    * Ensures that only the matching record is targeted.
 *
 * 6. [data.delete]
 *    * Executes the delete operation on the [InvoiceLine] table.
 *    * Applies the previously defined filtering logic.
 *
 * 7. [unwrap]
 *    * Makes the result of [data.delete] accessible for inclusion in the return statement.
 *
 * 8. [return]
 *    * Returns a node named [affected] to indicate how many records were deleted (typically 0 or 1).
 */
.arguments

   // Primary key of record to delete, mandatory argument
   InvoiceLineId:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:employee

validators.mandatory:x:@.arguments/*/InvoiceLineId

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:InvoiceLine
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
