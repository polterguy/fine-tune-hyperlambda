
/*
 * Endpoint that loops from 1 up to the specified number (inclusive) and returns the complete list of numbers.
 *
 * ## Input Arguments
 * - [to]: An integer that defines the upper bound of the loop. The loop will include this value.
 *
 * ## Initialization
 * - [.counter] is initialized to 1 and represents the current number in the loop.
 * - [.numbers] is an empty container that will hold the list of counted values.
 *
 * ## Loop Logic
 * - [while] continues looping as long as [.counter] is less than or equal to [to].
 * - [lte] compares [.counter] with the [to] argument.
 * - Inside [.lambda]:
 *   - [unwrap] resolves references for correct placement of added values.
 *   - [add] appends the current value of [.counter] to [.numbers].
 *   - [math.increment] increases [.counter] by 1 for the next iteration.
 *
 * ## Output
 * - [yield] returns a list of all values added to [.numbers] via the [result] node.
 *
 * ## Use Case
 * - This logic is suitable for generating numeric sequences, pagination helpers, index builders, or basic numeric simulations.
 */
.arguments
   to:int

.counter:int:1
.numbers

while
   lte
      get-value:x:@.counter
      get-value:x:@.arguments/*/to
   .lambda
      unwrap:x:+/*/*
      add:x:@.numbers
         .
            .:x:@.counter
      math.increment:x:@.counter

yield
   result:x:@.numbers/*
