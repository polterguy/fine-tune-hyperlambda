
/*
 * This Hyperlambda endpoint deletes a single record from the [categories] table in the [cms] database
 * based on a mandatory [id] argument. It uses SQLite as the underlying database engine.
 *
 * 1. [.arguments]
 *    - Declares a required [id] parameter of type long, representing the primary key of the record to delete.
 *
 * 2. [validators.mandatory]
 *    - Ensures that the [id] argument is provided.
 *    - If missing, the invocation will fail early with a validation error.
 *
 * 3. [data.connect]
 *    - Opens a connection to the [cms] database, using the [sqlite] database type.
 *    - All database operations must occur within this connection block.
 *
 * 4. [add]
 *    - Dynamically injects the [id] condition into the [where] clause of the [data.delete] invocation.
 *    - Uses [get-nodes] to extract the filtering criteria from [.arguments].
 *
 * 5. [data.delete]
 *    - Deletes a record from the [categories] table where the [id] matches the provided value.
 *    - The [where] block with [and] ensures conditional safety for the deletion.
 *
 * 6. [yield]
 *    - Returns the number of records affected (deleted) under the [affected] node in the response.
 *    - This helps confirm whether a deletion actually occurred.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

validators.mandatory:x:@.arguments/*/id

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:categories
      where
         and

   // Returning result of above invocation to caller.
   yield
      affected:x:@data.delete
