
/*
 * This Hyperlambda snippet demonstrates a compound condition using both [and] and [or] logical operators.
 * It evaluates multiple conditions and sets [.result] only if the entire [and] block resolves to true.
 *
 * 1. [.foo1], [.foo2], [.foo3]
 *    - Defines test input values:
 *      - [.foo1] must equal "bar"
 *      - [.foo2] is false
 *      - [.foo3] is true
 *
 * 2. [if]
 *    - Main control flow that checks whether the combined condition evaluates as true.
 *
 * 3. [and]
 *    - Top-level logical operator ensuring that *both* its children evaluate to true.
 *      - First child: [eq] must confirm [.foo1] equals "bar".
 *      - Second child: [or] must confirm *at least one* of [.foo2] or [.foo3] is true.
 *
 * 4. [eq]
 *    - Compares the value of [.foo1] to the string "bar".
 *
 * 5. [or]
 *    - Returns true if either [.foo2] or [.foo3] is true.
 *    - In this case, [.foo2] is false but [.foo3] is true, so the [or] block evaluates to true.
 *
 * 6. [.lambda]
 *    - Executes when the entire [and] block is true.
 *    - Inside, [set-value] assigns the string "Yup!" to [.result].
 */
.foo1:bar
.foo2:bool:false
.foo3:bool:true
.result
if
   and
      eq:x:@.foo1
         .:bar
      or
         get-value:x:@.foo2
         get-value:x:@.foo3
   .lambda
      set-value:x:@.result
         .:Yup!
