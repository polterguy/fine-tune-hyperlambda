
/*
 * Creates an HTTP endpoint that performs a Google News search using the SERP API,
 * requiring a mandatory query parameter and returning structured results.
 *
 * ### Arguments
 * - [.arguments] / [query] defines a required input string used as the search term.
 * - [validators.mandatory] ensures that the 'query' parameter is present.
 * 
 * ### API Key Retrieval
 * - Attempts to retrieve the SERP API key from the configuration using [config.get].
 * - If the key is missing or empty ([null] or [eq:""]), it throws an error
 *   to prevent further execution.
 * 
 * ### URL Construction
 * - Constructs the SERP API query URL dynamically using [strings.concat].
 * - Encodes the query using [strings.url-encode] and appends it with the API key and endpoint.
 * 
 * ### API Call
 * - Performs the GET request using [http.get] to retrieve news results.
 * - [convert:true] ensures the JSON response is parsed into a lambda object after execution.
 * 
 * ### Response Validation
 * - A sanity check ensures the HTTP response status is in the 2xx range.
 * - If not, logs the failing lambda and throws an error indicating the SERP call failed.
 * 
 * ### Result Parsing
 * - Iterates through the [news_results] array using [for-each].
 * - For each item, extracts and structures the fields:
 *   - title, link, snippet, thumbnail, date, source
 * - These fields are added to a [return-nodes] / [result] structure to accumulate results.
 * 
 * ### Response Delivery
 * - [unwrap] evaluates all expressions inside of [return], which are there because they're added as is further up in the file.
 * - [return-nodes] / [result] sends the final structured results back to the API caller.
 *   The previous [unwrap] invocation is crucial to ensure we're returning whatever the expressions inside of [return-nodes] is pointing to
 *
 * This endpoint demonstrates how to enforce input validation, securely retrieve API credentials,
 * interact with an external service, handle errors robustly, and return structured data to the client.
 */
.arguments

   // Mandatory query to search for.
   query:string

// Making sure mandatory argument was given.
validators.mandatory:x:@.arguments/*/query

// Retrieving SERP API's API key and making sure we've got one.
.api-key
set-value:x:@.api-key
   config.get:"magic:serp-api:api_key"
if
   or
      null:x:@.api-key
      eq:x:@.api-key
         .:
   .lambda

      // Oops ...!!
      throw:Could not find a SERP API key to use for fetching hotels.

// Creating our URL.
.url
set-value:x:@.url
   strings.concat
      .:"https://serpapi.com/search.json?tbm=nws&api_key="
      get-value:x:@.api-key
      .:&q=
      strings.url-encode:x:@.arguments/*/query

// Retrieving result.
http.get:x:@.url
   convert:true

// Sanity checking result of above invocation.
if
   not
      and
         mte:x:@http.get
            .:int:200
         lt:x:@http.get
            .:int:300
   .lambda

      // Oops ...!!
      lambda2hyper:x:../*
      log.info:x:-
      throw:Something went wrong while invoking SERP API

// Iterating through result, making sure we return the result to caller.
for-each:x:@http.get/*/content/*/news_results/*
   unwrap:x:+/*/*/*
   add:x:../*/return-nodes/*/result
      .
         .
            title:x:@.dp/#/*/title
            link:x:@.dp/#/*/link
            snippet:x:@.dp/#/*/snippet
            thumbnail:x:@.dp/#/*/thumbnail
            date:x:@.dp/#/*/date
            source:x:@.dp/#/*/source

// Returning result to caller.
unwrap:x:+/*
return-nodes
   result
