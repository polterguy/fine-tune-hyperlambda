/*
 * Accepts a [filter] argument and queries the 'chinook' SQLite database using a parameterized SQL SELECT statement.
 *
 * 1. Connects to the 'chinook' database with 'sqlite' as the database type.
 * 2. Injects the input parameters from [.arguments] into the parameter list of [data.select] using [add].
 *    - This ensures the @filter parameter is bound safely and prevents SQL injection.
 * 3. Executes a SQL query with [data.select] to:
 *    - Join [MediaType] and [Track] tables.
 *    - Filter media types where name matches the [filter] parameter.
 *    - Group results by media type and count tracks per type.
 *    - Sort descending by the number of tracks.
 * 4. Returns the resulting rows from the executed query using [return-nodes].
 *
 * This structure enables safe, reusable querying with input filtering, ideal for endpoints or scripts that need media-type statistics.
 */
.arguments
   filter:string

// Connecting to database.
data.connect:chinook
   database-type:sqlite

   // Parametrizing [data.select].
   add:x:./*/data.select
      get-nodes:x:@.arguments/*

   // Executing [data.select] slot with our SQL.
   data.select:"\n/*\n * Selects media types and aggregate of counts, and orders by count descending.\n * Make sure you select the chinook database before execxuting the script.\n */\nselect mt.Name, count(mt.MediaTypeId) as Amount \n  from MediaType mt\n    inner join Track t on mt.MediaTypeId = t.MediaTypeId\n  where mt.Name like @filter\n  group by mt.MediaTypeId\n  order by Amount desc;\n"
      database-type:sqlite

   // Returning a result of above invocation to caller.
   return-nodes:x:@data.select/*
