
/*
 * Defines a CRUD HTTP endpoint that deletes a single record from the 'Artist' table
 * in the 'chinook' SQLite database. Only users with the 'partner' or 'client' role are allowed to invoke it.
 *
 * ## Input Arguments
 * - [ArtistId]: Required long value that uniquely identifies the artist to be deleted.
 *
 * ## Authorization
 * - [auth.ticket.verify] ensures that only authenticated users with the 'partner' or 'client' roles
 *   can access the endpoint.
 *
 * ## Validation
 * - [validators.mandatory] ensures the [ArtistId] argument is provided before continuing.
 *
 * ## Database Logic
 * - [data.connect] opens a connection to the 'chinook' SQLite database.
 * - [add] injects the [ArtistId] argument into the [and] node of the [data.delete] operation.
 * - [data.delete] performs the deletion of the specified artist record from the [Artist] table.
 *
 * ## Response
 * - [unwrap] ensures [affacted]'s expression is evaluated, returning a value and NOT an expression.
 * - [return] includes the number of rows affected in the [affected] key to confirm the operation.
 *
 * ## Use Case
 * - Useful for data management features exposed to integration partners or clients,
 *   enabling them to remove artist records from the system securely and with proper access control.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   ArtistId:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:partner, client

validators.mandatory:x:@.arguments/*/ArtistId

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:Artist
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
