
/*
 * CRUD Hyperlambda endpoint that deletes one record from the [menus] table
 * in the [cms] database. Execution is restricted to users with [root] or [admin] roles.
 *
 * 1. [.arguments]
 *    * Accepts a single argument:
 *    * - [id]: Primary key used to identify the record to be deleted (mandatory).
 *
 * 2. [auth.ticket.verify]
 *    * Ensures that only users with the [root] or [admin] role can execute the deletion.
 *    * Provides access control for critical data operations.
 *
 * 3. [validators.mandatory]
 *    * Validates that the [id] argument is present before continuing.
 *
 * 4. [data.connect]
 *    * Connects to the [cms] SQLite database using the [generic] connection string.
 *    * The database type is implicitly [sqlite] since it's omitted.
 *
 * 5. [add]
 *    * Injects the [id] value into the [where and] clause of the [data.delete] operation.
 *    * Ensures that only the matching record is targeted for deletion.
 *
 * 6. [data.delete]
 *    * Executes the delete statement on the [menus] table, using the WHERE clause for filtering.
 *
 * 7. [yield]
 *    * Returns the number of records deleted under the [affected] node to the caller.
 *    * This is typically 1 if the deletion was successful or 0 if no matching record was found.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin
validators.mandatory:x:@.arguments/*/id

// Opening up our database connection with default database type (SQLite).
data.connect:[generic|cms]

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database using default database type being SQLite.
   data.delete
      table:menus
      where
         and

   // Returning result of above invocation to caller.
   yield
      affected:x:@data.delete
