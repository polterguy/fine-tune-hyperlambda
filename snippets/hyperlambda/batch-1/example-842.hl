
/*
 * This Hyperlambda endpoint scans a log file and extracts all email addresses using regex pattern matching.
 *
 * 1. [.arguments]
 *    - Declared empty to indicate that this endpoint does not accept any parameters.
 *
 * 2. [if]
 *    - Checks if the log file exists at the path '/var/logs/server.log' using [io.file.exists].
 *
 * 3. [io.file.load]
 *    - Loads the entire content of the log file as a text string.
 *
 * 4. [strings.matches]
 *    - Uses a regular expression to extract all substrings that match standard email address formats.
 *    - The regex used is `[a-zA-Z0-9._%+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z]{2,6}`, which covers most typical email patterns.
 *    - This returns a list of matches under [match] nodes.
 *
 * 5. [.emails]
 *    - A container node to accumulate the extracted email addresses.
 *
 * 6. [for-each]
 *    - Iterates over each matched email address node.
 *
 * 7. [unwrap]
 *    - Ensures the correct value from each match is available during iteration.
 *
 * 8. [add]
 *    - Appends each extracted email to the [.emails] list for final output.
 *
 * 9. [yield]
 *    - Returns the list of extracted email addresses to the client under the [emails] node.
 *
 * 10. [else]
 *    - Logs an error using [log.error] if the file does not exist.
 */
.arguments

// Read the log file
if
   io.file.exists:/var/logs/server.log
   .lambda

      // Reading file's content as text.
      io.file.load:/var/logs/server.log

      // A temporary place to hold the extracted emails
      .emails

      // Extracting email addresses using regex
      strings.matches:x:@io.file.load
         .:"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z]{2,6}"

      // Loop through the matches and add them to the list
      for-each:x:@strings.matches/*/match
         unwrap:x:+/*/*
         add:x:@.emails
            .
               .:x:@.dp/#

      // Returning the result to caller.
      yield
         emails:x:@.emails/*

else
   log.error:Log file not found
