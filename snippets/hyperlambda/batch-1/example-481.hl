
/*
 * Appends multiple key-value pairs into the [result] node using [add].
 *
 * 1. [.result]
 *    * Declares a parent node named [result] that will receive new child nodes.
 *
 * 2. [add]
 *    * Appends one or more child nodes into the node specified by its expression.
 *
 * 3. [x:@.result]
 *    * The `@` is the named iterator that resolves the first [result] node upward in the tree from the [add] node.
 *    * The [x:] prefix ensures the value is treated as a lambda expression.
 *
 * 4. [.]
 *    * Declares an anonymous node block whose children [keyA], [keyB], and [keyC] are inserted into [result].
 *
 * 5. [keyA], [keyB], [keyC]
 *    * These are the keys added as new child nodes of [result] with their respective values.
 *
 * After execution, the [result] node will contain three new children named [keyA], [keyB], and [keyC].
 */
.result
add:x:@.result
   .
      keyA:valA
      keyB:valB
      keyC:valC
