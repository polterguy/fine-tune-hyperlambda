
/*
 * CRUD Hyperlambda endpoint that creates a new record in the [media] table of the [cms] SQLite database.
 *
 * ### Arguments
 * - [.arguments] contains input parameters required to populate the record:
 *   - [post_id]: The ID of the associated post.
 *   - [file_path]: The path to the uploaded media file.
 *   - [file_type]: The type of media (e.g., image, video).
 *   - [created_at]: The creation timestamp of the media record.
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures only users with "root" or "admin" roles can access this endpoint.
 *
 * ### Database Operation
 * - [data.connect] connects to the [cms] SQLite database.
 * - [add] injects all argument nodes into the [values] block of [data.create].
 * - [data.create] inserts the new record into the [media] table.
 *
 * ### Response Handling
 * - [response.status.set] sets the HTTP response status to "201 Created".
 * - [yield] returns the newly created record's ID to the caller as [id].
 *
 * This endpoint illustrates how to securely and dynamically insert data into a database
 * using structured CRUD logic and role-based access control in Hyperlambda.
 */
.arguments

   // post_id column value
   post_id:long

   // file_path column value
   file_path:string

   // file_type column value
   file_type:string

   // created_at column value
   created_at:date

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      database-type:sqlite
      table:media
      values

   // Returning the correct status code.
   response.status.set:201

   // Returning result of above invocation to caller.
   yield
      id:x:@data.create
