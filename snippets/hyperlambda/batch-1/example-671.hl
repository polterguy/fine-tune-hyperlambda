
/*
 * This snippet uses structured exception handling to gracefully manage HTTP request failures.
 * The combination of [try], [.catch], and [.finally] ensures robust control flow for error-prone operations.
 *
 * 1. [try]
 *    - Encapsulates a block of code where exceptions might occur.
 *    - If an exception is thrown within this block, execution jumps to [.catch].

 * 2. [.catch]
 *    - Executes only if an exception is thrown inside the preceding [try] block.
 *    - The exception context is passed via the [.arguments] node, including properties like [message], [status], and [type].
 *    - This snippet logs the [message] attribute of the exception using [log.error].

 * 3. [.finally]
 *    - Always executes, regardless of whether an exception was thrown or not.
 *    - Useful for cleanup logic, logging, or any action that must happen after the [try]/[.catch] block completes.
 *    - Here it logs that the HTTP request attempt is finished using [log.info].
 */
try

   // Performing HTTP request
   http.get:"https://invalid-url.com"
      convert:true
.catch

   // Logging the error
   log.error:x:@.arguments/*/message
.finally

   // Logging completion
   log.info:HTTP request attempt finished
