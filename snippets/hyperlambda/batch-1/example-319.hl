
/*
 * CRUD read endpoint that retrieves records from the 'questionnaires' table in the 'magic' SQLite database.
 * The endpoint supports paging, sorting, and filtering. Access is restricted to users with the 'root' role.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [limit]: Max number of records to return.
 *   - [offset]: Number of records to skip.
 *   - [order]: Column to order results by.
 *   - [direction]: Order direction, either 'asc' or 'desc'.
 *   - [questionnaires.name.like]: Pattern-based filtering on 'name'.
 *   - [questionnaires.name.eq]: Exact match filtering on 'name'.
 *   - [questionnaires.type.like]: Pattern-based filtering on 'type'.
 *   - [questionnaires.type.eq]: Exact match filtering on 'type'.
 *
 * ### Authorization
 * - [auth.ticket.verify] ensures only users with the 'root' role can access the endpoint.
 *
 * ### Database Operation
 * - [data.connect] opens a connection to the 'magic' SQLite database using the 'generic' connection string.
 * - [add] dynamically injects [limit], [offset], [order], and [direction] into the [data.read] slot.
 * - [remove-nodes] removes these nodes from the [.arguments] node before adding filters.
 * - [add] adds all remaining filters into the [and] node, the child of [where].
 * - [data.read] queries the 'questionnaires' table and returns:
 *   - [name], [type], and [action] columns.
 *
 * ### Response
 * - [return-nodes] returns the matched records to the caller.
 *
 * This endpoint demonstrates a flexible read operation using structured argument mapping,
 * role-based access control, and dynamic SQL filtering in Hyperlambda.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   questionnaires.name.like:string
   questionnaires.name.eq:string
   questionnaires.type.like:string
   questionnaires.type.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:questionnaires
      columns
         questionnaires.name
         questionnaires.type
         questionnaires.action
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
