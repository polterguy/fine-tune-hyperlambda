
/*
 * This Hyperlambda snippet demonstrates conditional branching using [if], [else-if], and [else]
 * to evaluate an integer value and set a corresponding message.
 *
 * 1. [.src]
 *    - Declares an integer variable with a value of 3.
 *    - This is the input that drives the branching logic.
 *
 * 2. [.dest]
 *    - A placeholder node that will be assigned a string value based on the outcome of the conditions.
 *
 * 3. [if]
 *    - First condition: checks if [.src] equals 1 using [eq].
 *    - If true, sets [.dest] to "yup!".
 *
 * 4. [else-if]
 *    - Second condition: checks if [.src] equals 2.
 *    - If true, sets [.dest] to "yup2.0!".
 *
 * 5. [else]
 *    - Fallback branch executed if none of the above conditions match.
 *    - Sets [.dest] to "nope", which happens here because [.src] is 3.
 */
.src:int:3
.dest
if
   eq
      get-value:x:@.src
      .:int:1
   .lambda

      set-value:x:@.dest
         .:yup!

else-if
   eq
      get-value:x:@.src
      .:int:2
   .lambda

      set-value:x:@.dest
         .:yup2.0!

else

   set-value:x:@.dest
      .:nope