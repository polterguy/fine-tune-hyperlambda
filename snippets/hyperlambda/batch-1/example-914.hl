
/*
 * This Hyperlambda example demonstrates how to restrict slot execution using the [whitelist] slot.
 * Only explicitly listed slots in [vocabulary] can be executed inside the [.lambda] block.
 *
 * 1. [.result]
 *    - A placeholder node to store the result of the [set-value] operation.
 *
 * 2. [whitelist]
 *    - Defines a secure execution context where only approved slots can be used.
 *
 * 3. [vocabulary]
 *    - Lists the only legal slot names allowed inside the [.lambda] block:
 *      - [set-value]: To assign a value.
 *      - [return]: To send results back from the lambda.
 *
 * 4. [.lambda]
 *    - Contains the actual logic to execute, constrained by the [whitelist] vocabulary.
 *
 * 5. [set-value]
 *    - Legal: This slot is explicitly allowed and sets the value of [.result] to 'foo'.
 *
 * 6. [.add]
 *    - Illegal: This slot is not whitelisted.
 *    - If the dot prefix is removed (`add:x:@.result`), it will raise a runtime exception due to being disallowed by [whitelist].
 *    - The prefixed form [.add] avoids execution and instead simply creates a node named ".add".
 *
 * 7. [return]
 *    - Legal: This slot is allowed and returns a success result.
 */
.result
whitelist
   vocabulary
      set-value
      return
   .lambda

      // Inside of this [.lambda] object, we can only invoke [set-value], and no other slots!
      set-value:x:@.result
         .:foo

      // Notice, the next line will throw an exception if you remove its "." character,

      // because [add] is not whitelisted in our above [vocabulary] declaration!
      .add:x:@.result
         .
            foo:bar
      return
         result:success
