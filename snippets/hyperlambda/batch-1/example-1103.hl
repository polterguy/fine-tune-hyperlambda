
/*
 * This Hyperlambda endpoint returns customer information from the [Chinook] SQLite database.
 * It selects distinct customers who listen to rock music or any genre matching a given [filter].
 *
 * 1. [.arguments]
 *    * Accepts one input argument:
 *    * - [filter]: A string used in the SQL LIKE clause to filter genre names (e.g., '%Rock%').
 *
 * 2. [data.connect]
 *    * Connects to the [Chinook] SQLite database using the [generic] connection string.
 *    * Specifies the [database-type] explicitly as [sqlite].
 *
 * 3. [add]
 *    * Injects all argument nodes (in this case, [filter]) into the structure of the upcoming [data.select] call.
 *    * Allows for safe and dynamic SQL parameter substitution.
 *
 * 4. [data.select]
 *    * Executes a raw SQL query to retrieve:
 *      - [Email], [FirstName], and [LastName] from the [Customer] table.
 *      - [Genre name] from the [Genre] table via multiple joins.
 *    * Filters the results using the provided [filter] argument via a LIKE clause on [Genre.Name].
 *    * Ensures only unique combinations are returned using [distinct].
 *    * Orders results by [Email].
 *
 * 5. [return-nodes]
 *    * Returns the result of the SQL query back to the client using the lambda path [@data.select/*].
 */
.arguments
   filter:string

// Connecting to database.
data.connect:chinook
   database-type:sqlite

   // Parametrizing [data.select].
   add:x:./*/data.select
      get-nodes:x:@.arguments/*

   // Executing [data.select] slot with our SQL.
   data.select:"\n/*\n * Selects details from all customers that are listening to rock.\n * Make sure you select the chinook database before execxuting the script.\n */\nselect distinct c.Email, c.FirstName, c.LastName, g.name\n  from Customer c\n    inner join Invoice i on c.CustomerId = i.CustomerId\n    inner join InvoiceLine ii on i.InvoiceId = ii.InvoiceId\n    inner join Track t ON ii.TrackId = t.TrackId\n    inner join Genre g ON t.GenreId = g.GenreId\n  where g.Name like @filter\n  order by c.Email\n"
      database-type:sqlite

   // Returning a result of above invocation to caller.
   return-nodes:x:@data.select/*
