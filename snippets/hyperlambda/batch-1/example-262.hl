
/*
 * Hyperlambda endpoint that returns a specified training data PDF file to the client.
 *
 * ### Arguments
 * - [.arguments] includes:
 *   - [file]: The name of the file to be returned (required).
 *
 * ### Validation
 * - [validators.mandatory] ensures the [file] argument is provided.
 *
 * ### Path Construction
 * - [strings.concat] builds the full path to the file by prepending the base directory:
 *   - `/etc/system/openai/pdf/` + the [file] value.
 *
 * ### HTTP Headers
 * - [strings.concat] constructs the [Content-Disposition] header for a file download with the original filename.
 * - [response.headers.set] sets:
 *   - [Content-Type] to `application/pdf`.
 *   - [Content-Disposition] to indicate the file should be downloaded.
 *   - [Access-Control-Expose-Headers] to allow [Content-Disposition] to be visible in CORS contexts.
 *
 * ### File Streaming
 * - [io.stream.open-file] opens the file from the constructed path.
 * - [return] streams the file contents to the client.
 *
 * This endpoint enables secure delivery of static training data files through a REST interface
 * while properly setting headers for file downloads and enforcing input validation.
 */
.arguments
   file:string

// Ensuring [file] was specified
validators.mandatory:x:@.arguments/*/file

// Figuringout full path of file.
strings.concat
   .:/etc/system/openai/pdf/
   get-value:x:@.arguments/*/file

// Getting our response HTTP headers sorted out.
strings.concat
   .:"attachment; filename=\""
   get-value:x:@.arguments/*/file
   .:"\""
response.headers.set
   Content-Type:application/pdf
   Content-Disposition:x:@strings.concat
   Access-Control-Expose-Headers:Content-Disposition

// Returning file to caller.
io.stream.open-file:x:@strings.concat/@strings.concat
return:x:-
