
/*
 * Hyperlambda endpoint to delete a record from the [roles] table in the [cms] SQLite database.
 * Access is granted only to users belonging to the [guest] role.
 *
 * 1. [.arguments]
 *    * Accepts one mandatory argument:
 *    * - [id]: The primary key of the [roles] record to delete.
 *
 * 2. [auth.ticket.verify:guest]
 *    * Verifies that the caller belongs to the [guest] role before allowing access to the endpoint.
 *
 * 3. [validators.mandatory]
 *    * Ensures that the [id] argument is provided by the caller to prevent accidental deletions.
 *
 * 4. [data.connect]
 *    * Opens a connection to the [cms] SQLite database using the [generic] connection string.
 *    * Specifies [database-type] as [sqlite].
 *
 * 5. [add]
 *    * Adds the [id] argument dynamically into the [where and] clause of the [data.delete] operation.
 *    * Ensures only the matching record is targeted for deletion.
 *
 * 6. [data.delete]
 *    * Executes the DELETE statement on the [roles] table.
 *    * Uses the previously constructed WHERE clause to filter the record.
 *
 * 7. [unwrap]
 *    * Ensures the result of the [data.delete] operation is available at the root level.
 *
 * 8. [return]
 *    * Returns the number of deleted records under the [affected] node to confirm the result of the operation.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   id:long

// Verifying user belongs to 'guest' role.
auth.ticket.verify:guest

validators.mandatory:x:@.arguments/*/id

// Opening up our database connection.
data.connect:[generic|cms]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:roles
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
