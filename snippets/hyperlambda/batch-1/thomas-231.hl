/*
 * How does [data.read] work?
 */

// [data.connect] MUST be executed before [data.read], and [data.read] **MUST** be indented into [data.connect]'s scope
data.connect:db_name_here

   // [data.read] is our CRUD slot for the "Read" verb, and it allows for semantically building your SQL such as follows.
   data.read

      // The next node is mandatory and declares the name of the table you want to read data from
      table:table_name_here

      // The next is optional, and if not given the default value for columns becomes '*' in SQL.
      columns

         // List of columns here as the node's **NAME** and not value!
         col1
         col2

      /*
       * This becomes the name of the column we want to sort by.
       *
       * This is optional
       */
      order:COLUMN_TO_ORDER_BY

      /*
       * This becomes the sorting direction and can be either 'asc' or 'desc'.
       */
      direction:asc

      // This becomes our 'WHERE' SQL equivalent, and what it transpiles to during execution.
      where

         /*
          * This becomes the logical operator and transpiles to within SQL to 'AND'
          * Optionally we could have used [or] instead, at which point we'd end up with SQL 'OR'
          * in between our two conditions below.
          */
         and

            /*
             * [xyz.eq] below when transpiled to SQL becomes "xyz = 'SOME_VALUE'"
             * Think of it like 'eq' implies 'equals' and becomes the operator.
             */
            xyz.eq:SOME_VALUE

            /*
             * [qwe.neq] below implies "qwe != 'SOME_OTHER_VALUE'"
             * Think that 'neq' implies 'not equal to'
             */
            qwe.neq:SOME_OTHER_VALUE

/*
 * The above will return something such as follows as children of [data.read].
 */
.
   col1:val1
   col2:val2
.
   col1:val_row_2_col1
   col1:val_row_2_col2
.
   col1:val_row_3_col1
   col1:val_row_3_col2
