
/*
 * Defines a secure Hyperlambda HTTP endpoint that streams a specified PDF training file
 * to the client as a downloadable attachment.
 *
 * ## Input Arguments
 * - [file]: Required string representing the name of the PDF file to be retrieved (e.g., 'training-guide.pdf').
 *
 * ## Validation
 * - [validators.mandatory] ensures that the [file] argument is provided before continuing.
 *
 * ## File Path Construction
 * - [strings.concat] dynamically builds the full file path by prepending the fixed base directory:
 *   '/etc/system/openai/pdf/' to the user-provided filename.
 *
 * ## HTTP Headers Setup
 * - Another [strings.concat] builds the [Content-Disposition] header to force a download with the correct filename.
 * - [response.headers.set] sets the HTTP response headers:
 *   - [Content-Type] ensures the browser treats the content as a PDF.
 *   - [Content-Disposition] instructs the browser to download the file with the original name.
 *   - [Access-Control-Expose-Headers] allows clients to access the [Content-Disposition] header.
 *
 * ## File Streaming
 * - [io.stream.open-file] opens the specified file for streaming.
 * - [return] sends the file stream directly to the client.
 *
 * ## Use Case
 * - Ideal for secure and flexible PDF document delivery in training systems or content portals,
 *   where users can request specific files via a filename argument.
 */
.arguments
   file:string

// Making sure file argument was given
validators.mandatory:x:@.arguments/*/file

// Figuringout full path of file.
strings.concat
   .:/etc/system/openai/pdf/
   get-value:x:@.arguments/*/file

// Getting our response HTTP headers sorted out.
strings.concat
   .:"attachment; filename=\""
   get-value:x:@.arguments/*/file
   .:"\""
response.headers.set
   Content-Type:application/pdf
   Content-Disposition:x:@strings.concat
   Access-Control-Expose-Headers:Content-Disposition

// Returning file to caller.
io.stream.open-file:x:@strings.concat/@strings.concat
return:x:-
