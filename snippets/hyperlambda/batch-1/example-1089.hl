
/*
 * Endpoint to update an existing item in the [clusters] table of the [hub] database.
 * Access is restricted to users with the [root] role.
 *
 * 1. [.arguments]
 *    * Accepts the following parameters:
 *    * - [id]: Primary key of the record to update (mandatory).
 *    * - [country], [name], [enabled]: Fields to be updated.
 *
 * 2. [auth.ticket.verify]
 *    * Ensures only users with the [root] role can execute this endpoint.
 *
 * 3. [validators.mandatory]
 *    * Verifies that the [id] parameter is provided before attempting the update.
 *
 * 4. [data.connect]
 *    * Opens a connection to the [hub] SQLite database using the [generic] connection string.
 *
 * 5. [add] (where clause)
 *    * Injects the [id] (and optionally [country]) into the [where] clause of the [data.update] block.
 *    * Ensures the correct record is targeted for updating.
 *
 * 6. [add] (values clause)
 *    * Injects the updateable fields ([country], [name], [enabled]) into the [values] clause.
 *
 * 7. [data.update]
 *    * Executes the SQL UPDATE statement against the [clusters] table.
 *    * Applies the values to the filtered record.
 *
 * 8. [if]
 *    * Checks if any record was affected by the update.
 *    * If none were updated (e.g., record not found), responds with HTTP 404 and a message.
 *
 * 9. [response.status.set]
 *    * Sets the HTTP response status to 202 (Accepted) if the update succeeded.
 *
 * 10. [yield]
 *    * Returns the number of records affected in a node named [affected].
 */
.arguments
   id:string
   country:string
   name:string
   enabled:bool

// Only root users can execute endpoint
auth.ticket.verify:root

// Verifying user is authorized to access endpoint.
validators.mandatory:x:@.arguments/*/id

// Opening up our database connection.
data.connect:[generic|hub]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]

   // Invoking our update slot.
   data.update
      table:clusters
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning success to caller.
   response.status.set:202
   yield
      affected:x:@data.update
