
/*
 * This snippet conditionally evaluates a block of logic based on two numeric comparisons.
 * If both conditions are true, it updates [.result] to true. Otherwise, it sets it to false.
 *
 * 1. [.result]
 *    - A node intended to store the result of the conditional logic.
 *
 * 2. [.value1] and [.value2]
 *    - These nodes define two integer variables used as operands in the conditional expressions.
 *
 * 3. [if]
 *    - Starts a conditional branch. If the condition inside evaluates to true, the [.lambda] block is executed.
 *
 * 4. [and]
 *    - Logical operator that returns true only if all its child conditions are true.
 *    - Used here to combine two numeric comparisons.
 *
 * 5. [lt]
 *    - Short for “less than”.
 *    - Evaluates to true if [.value1] is less than 4.
 *
 * 6. [mt]
 *    - Short for “more than”.
 *    - Evaluates to true if [.value2] is greater than 9.
 *
 * 7. [.lambda]
 *    - Defines a block of Hyperlambda code to execute if the [and] condition evaluates to true.
 *    - In this case, it sets [.result] to true.
 *
 * 8. [set-value]
 *    - Assigns a new value to [.result] depending on the outcome of the [if] condition.
 *    - Executed either inside [.lambda] or [else].
 *
 * 9. [else]
 *    - Defines the fallback branch to be executed when the [if] condition evaluates to false.
 *    - Here, it sets [.result] to false.
 */
.result
.value1:int:3
.value2:int:10
if
   and

      // [lt] implies "less than"
      lt:x:@.value1
         .:int:4

      // [mt] implies "more than"
      mt:x:@.value2
         .:int:9
   .lambda

      // Changing the value of [.result] to true
      set-value:x:@.result
         .:bool:true
else

   // Changing the value of [.result] to false
   set-value:x:@.result
      .:bool:false
