
/*
 * This snippet demonstrates how to perform basic string manipulation by iterating 
 * through a collection of strings and transforming each to only UPPER characters and adding an exclamation mark `!`,
 * for then to add the result into the [.transformed] node.
 *
 * ### Data Structure
 * - [.strings] holds multiple string values:
 *   - [string1]: Hello World
 *   - [string2]: Hyperlambda is fun
 *   - [string3]: Magic Cloud
 *
 * ### Transformation Logic
 * - [for-each] loops through each child of [.strings].
 * - [.current-value] is assigned the current string's value from [.dp/#].
 * - [unwrap] evaluates the expression in [.current-value] and stores the string value as the value of [.current-value].
 * - [strings.to-upper] transforms the string to uppercase.
 * - [strings.concat] appends an exclamation mark to the result.
 * - [add] stores the final transformed string inside [.transformed] under a node named [transformed-string].
 *
 * ### Output
 * - [log.info] logs that the transformation has completed.
 *
 * This is a practical example of string mapping and transformation in Hyperlambda,
 * using iteration, expression unwrapping, and dynamic value manipulation.
 */
.strings
   string1:Hello World
   string2:Hyperlambda is fun
   string3:Magic Cloud
   
// Create a destination node to store our results
.transformed

// Iterate through each string and transform it
for-each:x:@.strings/*
   
   // Get the current string value
   .current-value:x:@.dp/#

   // Unwrapping above expression.
   unwrap:x:-
   
   // Transform the string (uppercase + add exclamation)
   strings.to-upper:x:@.current-value
   strings.concat
      get-value:x:@strings.to-upper
      .:!
   
   // Add the transformed string to our results
   unwrap:x:+/*/*
   add:x:@.transformed
      .
         transformed-string:x:@strings.concat

// Log our results
log.info:Transformation complete
