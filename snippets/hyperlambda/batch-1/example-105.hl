/*
 * Creates a new record in the 'questionnaires' table after verifying authorization and validating input.
 *
 * 1. Accepts input arguments [name], [type], and [action] through [.arguments].
 * 2. Uses [auth.ticket.verify] to ensure the requester has 'root' access before proceeding.
 * 3. Validates the [name] input using [validators.regex] to enforce it matches /^[a-z0-9_-]{2,20}$/ for naming rules.
 * 4. Establishes a connection to the 'magic' database via the '[generic]' connection string using [data.connect], with 'sqlite' as the database type.
 * 5. Injects all [.arguments] as values for the [data.create] invocation using [add], binding them to the appropriate parameter structure.
 * 6. Executes [data.create] to insert a new record into the [questionnaires] table.
 * 7. Returns a '201 Created' HTTP status using [response.status.set].
 * 8. Sends back a static success result via [return], confirming the operation completed as expected.
 *
 * This is a secure and modular pattern for CRUD Create operations exposed through an HTTP endpoint.
 */
.arguments
   name:string
   type:string
   action:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking name.
validators.regex:x:@.arguments/*/name
   regex:^[a-z0-9_-]{2,20}$

// Opening up database connection.
data.connect:[generic|magic]
   database-type:sqlite

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      database-type:sqlite
      table:questionnaires
      values

   // Returning the correct status code.
   response.status.set:201

   // Returning result of above invocation to caller.
   return
      result:success
