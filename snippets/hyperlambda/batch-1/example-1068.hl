
/*
 * Returns a bar chart image to the caller.
 * Designed to be used as an HTTP endpoint that dynamically builds a chart
 * from arbitrary key-value arguments.
 *
 * 1. [.arguments] with `*`
 *    * Accepts any number of dynamic arguments.
 *    * Each argument represents a bar in the chart (key = label, value = height).
 *
 * 2. [.bars] + [for-each]
 *    * Iterates through all arguments to prepare bar nodes for charting.
 *
 * 3. [unwrap] and [set-name]
 *    * Reconstructs bar definitions dynamically:
 *    * - [unwrap] ensures that expressions are evaluated replacing expression with static values.
 *    * - [set-name] assigns the bar label using the argument's key.
 *    * - [add] appends the reconstructed bar to [.bars].
 *
 * 4. [add]
 *    * Injects the generated [.bars] into the [image.chart] node structure
 *    * to be used when rendering the chart.
 *
 * 5. [image.chart]
 *    * Renders the bar chart image using a width of 800 and height of 500 pixels.
 *    * The bars are populated from the values generated above.
 *
 * 6. [response.headers.set]
 *    * Sets the HTTP header to "Content-Type: image/png" so the client treats the response as an image.
 *
 * 7. [return]
 *    * Returns the final rendered chart image back to the HTTP caller.
 */
.arguments:*

// Creating our individual bars.
.bars
for-each:x:@.arguments/*

   // Adding primary node for bar.
   unwrap:x:+/+/*/*
   set-name:x:+/*/*
      get-name:x:@.dp/#
   add:x:@.bars
      .
         .:x:@.dp/#

// Parametrizing [image.chart] invocation.
add:x:../*/image.chart/*/bars
   get-nodes:x:@.bars/*
image.chart:bars
   width:800
   height:500
   bars

// Applying correct HTTP header.
response.headers.set
   Content-Type:image/png

// Returning chart to caller.
return:x:@image.chart
