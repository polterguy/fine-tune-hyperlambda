
/*
 * Demonstrates dynamic execution using [eval] and structured exception handling.
 *
 * ## Execution Flow
 * - An [.eval] node defines a lambda structure that will throw an exception using [throw]:foo.
 * - [eval]:x:@.eval dynamically evaluates the [.eval] node by reference, effectively executing the [throw] inside it.
 * - The [try] block catches any thrown exceptions, and execution jumps to the [.catch] handler.
 *
 * ## Error Handling
 * - [.catch] sets [.src] to 'OK' as a signal that the exception was successfully caught and handled.
 *
 * ## Use Case
 * - This pattern is useful for evaluating dynamic or user-generated code fragments while maintaining strict error boundaries.
 * - It allows safe testing or execution of untrusted logic with fallback behavior.
 */
.src
try
   .eval
      throw:foo
   eval:x:@.eval
.catch
   set-value:x:@.src
      .:OK
