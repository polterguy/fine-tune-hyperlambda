
/*
 * This Hyperlambda endpoint counts the number of records in the 'cloudlets' table
 * in the 'hub' database, applying optional filters from the request arguments
 * and enforcing access control for users with the 'root' role.
 *
 * 1. [auth.ticket.verify]
 *    - Ensures only users with the 'root' role can access this endpoint.
 *    - Provides role-based access control using JWT tokens.

 * 2. [data.connect]
 *    - Opens a connection to the 'hub' SQLite database using the 'generic' connection string.
 *    - All database interactions such as [data.read] must be enclosed within this slot.

 * 3. [add]
 *    - Dynamically injects user-provided filtering conditions from [.arguments]
 *      into the [where] clause of the upcoming [data.read] operation.
 *    - Its expression targets the [and] clause inside [data.read].

 * 4. [get-nodes]
 *    - Retrieves all child nodes under [.arguments], representing filtering parameters.
 *    - This enables flexible and dynamic query construction based on client input.

 * 5. [data.read]
 *    - Executes a SQL SELECT statement on the 'cloudlets' table.
 *    - The [columns] section includes [count(*)] to return the total number of matching records.
 *    - The [where]/[and] structure ensures only filtered records are counted.
 *    - [limit] ensures performance optimization by restricting the result to a single row.

 * 6. [return-nodes]
 *    - Extracts and returns the count result from the output of [data.read] to the caller.
 */
.arguments

   // Optional filtering arguments.
   cloudlets.id.eq:long
   cloudlets.created.eq:date
   cloudlets.name.like:string
   cloudlets.name.eq:string
   cloudlets.plan.like:string
   cloudlets.plan.eq:string
   cloudlets.cluster.like:string
   cloudlets.cluster.eq:string
   cloudlets.user.like:string
   cloudlets.user.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|hub]

   // Parametrising our read invocation.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:cloudlets
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
