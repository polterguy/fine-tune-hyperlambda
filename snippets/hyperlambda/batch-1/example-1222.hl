
/*
 * This Hyperlambda snippet demonstrates the use of [else-if] to evaluate multiple conditions sequentially.
 * It executes the first matching condition and skips the rest.
 *
 * 1. [.result]
 *    * Declares a placeholder node that will store the outcome based on the condition that matches.
 *
 * 2. [if]
 *    * Starts the conditional logic.
 *    * Checks if the condition is false (it is).
 *    * Since this block doesn't match, its [.lambda] block is skipped.
 *
 * 3. [else-if]
 *    * Evaluates the next condition.
 *    * In this case, it evaluates to true.
 *    * Executes its [.lambda] block, setting [.result] to "OK".
 *
 * 4. [set-value]
 *    * Updates [.result] to "OK" because the [else-if] condition matched.
 *
 * Result:
 * * The value of [.result] will be "OK" since the first condition failed but the [else-if] condition passed.
 */
.result
if
   .:bool:false
   .lambda
      set-value:x:../*/.result
         .:failure
else-if
   .:bool:true
   .lambda
      set-value:x:../*/.result
         .:OK
