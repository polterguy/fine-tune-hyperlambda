
/*
 * Defines a secure CRUD endpoint for deleting a single record from the "users_extra" table in the "magic" database,
 * based on the provided input arguments, with full authentication and authorization for "root" users.
 * 
 * The [.arguments] section defines required parameters:
 * - [type]: A string representing the type classification of the user.
 * - [user]: A string representing the user ID or username.
 * 
 * Access to the endpoint is secured using [auth.ticket.verify],
 * ensuring that only users with "root" privileges can perform the delete operation.
 * 
 * Input validation is performed using [validators.mandatory] to guarantee that both [type] and [user] arguments are supplied.
 * 
 * A database connection is established to the "magic" database using the 'generic' connection string.
 * 
 * The [add] slot dynamically injects argument nodes into the [data.delete]'s [where]/[and] clause
 * using [get-nodes], enabling a parameterized and secure delete filter.
 * 
 * The [data.delete] slot performs the deletion, applying the criteria built from the user input,
 * and the result is unwrapped and returned to the caller using [unwrap] and [return].
 * The [affected] field indicates how many records were deleted.
 */
.arguments
   type:string
   user:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/user

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      table:users_extra
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
