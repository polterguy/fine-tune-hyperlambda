
/*
 * This Hyperlambda snippet checks if the role of a user is 'superuser' and sets access accordingly.
 *
 * 1. [.user]
 *    * A node representing the user, with two child nodes:
 *      - [name]: The username (e.g., "admin").
 *      - [role]: The user's role (e.g., "superuser").
 *
 * 2. [.result]
 *    * A placeholder node where the outcome ("Access granted") will be stored if the condition is met.
 *
 * 3. [if]
 *    * Begins a conditional logic block.
 *
 * 4. [eq]
 *    * Performs a value comparison.
 *    * Left-hand side: [x:@.user/*/role]
 *       - [@]: The named iterator walks up the tree to find the first [.user] node.
 *       - [*]: Selects all direct children of [.user].
 *       - [role]: Selects the child node named [role] from each of those.
 *       - Effectively retrieves the value of [.user/role].
 *    * Right-hand side: The literal string "superuser".
 *
 * 5. [.lambda]
 *    * Executes the inner block if the [eq] condition is true.
 *    * [set-value:x:@.result]: Sets the value of [.result] to "Access granted".
 *
 * Result:
 * If the user's role is "superuser", then [.result] will be set to "Access granted".
 */
.user
   name:admin
   role:superuser
.result
if
   eq:x:@.user/*/role
      .:superuser
   .lambda
      set-value:x:@.result
         .:Access granted
