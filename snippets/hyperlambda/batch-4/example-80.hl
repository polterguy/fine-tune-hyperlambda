
/*
 * Example of how to implement structured error handling using a [try] and [.catch] block in Hyperlambda.
 *
 * 1. [try]
 *    * This node wraps the code you want to execute.
 *    * If any error occurs (e.g., [throw]), the execution will jump to the [.catch] block.
 *
 * 2. [throw:Foo bar]
 *    * Simulates an error being thrown, which triggers the [.catch] handler below.

 * 3. [.catch]
 *    * Executed when an exception occurs inside the [try] block.
 *    * The framework injects the following arguments into [.arguments] for the catch handler:
 *      - [message]: The error message from the exception.
 *      - [type]: .NET Core exception type, typically 'magic.node.extensions.HyperlambdaException' for Hyperlambda exceptions.
 *      - [status]: The HTTP status code associated with the exception (e.g., 400, 500).
 *      - [public]: A boolean indicating whether the exception message is safe to expose to the client.
 *      - [field]: If it's a validation exception, the name of the invalid argument.

 * 4. [log.error]
 *    * Captures and logs all relevant details about the exception using the injected values.
 *    * Useful for diagnosing and monitoring errors while keeping client-facing output clean and secure.

 * Use cases:
 * * Securely catch, handle, and log server-side errors.
 * * Gracefully degrade behavior without exposing sensitive implementation details.
 */
try
   throw:Foo bar
.catch

   /*
    * This lambda object will be executed if an exception is thrown,
    * and it will be given [message], [type], [status], [public], and [field] arguments.
    *
    * The type is the .Net Core type of exception that was thrown.
    * For a Hyperlambda exception it will always be 'magic.node.extensions.HyperlambdaException'.
    *
    * Status is the HTTP status code the exception will return to the client,
    * if the exception is allowed to propagate.
    *
    * Public is a boolean indicating if we should allow the exception message propagate.
    *
    * Field is the name of an argument if this is a validation exception
    * that was raised because of some argument not being valid.
    */
   log.error:x:@.arguments/*/message
      type:x:@.arguments/*/type
      status:x:@.arguments/*/status
      public:x:@.arguments/*/public
      field:x:@.arguments/*/field
