/*
 * Cancels all active Stripe subscriptions for the authenticated user, removes their roles (except 'guest' and 'root'),
 * retrieves basic profile info, and re-authenticates them with updated roles.
 *
 * Uses [auth.ticket.get] to identify the current user, then searches for subscriptions via
 * [stripe-subscription-search] and deletes each using [stripe-subscription-delete].
 *
 * Connects to the 'magic' database with [data.connect] to clean up user roles via [data.delete] and read user
 * metadata from [users_extra]. Builds an [.extra] object by dynamically naming and assigning fields based on type.
 *
 * Re-authenticates the user without requiring a password using [magic.auth.authenticate] and returns a new JWT
 * token and collected extra info using [yield].
 */
.arguments

// Buffer for user's extra information.
.extra

// Retrieving username.
auth.ticket.get

/*
 * Searches for subscriptions belonging to user.
 *
 * Returns all subscriptions belonging to the specified user.
 */
execute:magic.workflows.actions.execute
   name:stripe-subscription-search
   filename:/modules/stripe/workflows/actions/stripe-subscription-search.hl
   arguments
      username:x:@auth.ticket.get

// Looping through all subscriptions belonging to user and canceling these.
for-each:x:@execute/*

   /*
    * Deletes the existing Stripe subscription for the given [subscription_id].
    *
    * Will use your Stripe API token found from your settings as it's interacting
    * with the Stripe API.
    */
   try
      execute:magic.workflows.actions.execute
         name:stripe-subscription-delete
         filename:/modules/stripe/workflows/actions/stripe-subscription-delete.hl
         arguments
            subscription_id:x:@.dp/#/*/id
   .catch
      log.error:x:@.arguments/*/message

// Opening up database connection.
data.connect:magic

   // Deleting all roles user belongs to except root and guest.
   data.delete
      table:users_roles
      where
         and
            user.eq:x:@auth.ticket.get
            role.neq:guest
            role.neq:root

   // Retrieving extra information.
   data.connect:magic
      data.read
         table:users_extra
         where
            and
               user.eq:x:@auth.ticket.get
               or
                  type.eq:name
                  type.eq:email
      for-each:x:@data.read/*
         set-name:x:./*/add/*/*
            get-value:x:@.dp/#/*/type
         set-value:x:./*/add/*/*
            get-value:x:@.dp/#/*/value
         add:x:@.extra
            .
               .

// Authenticating user again creating a new JWT token since roles have been updated.
execute:magic.auth.authenticate
   username:x:@auth.ticket.get
   password-check:bool:false

// Returning token and extra information to caller.
yield
   ticket:x:@execute/*/ticket
   extra:x:@.extra/*
