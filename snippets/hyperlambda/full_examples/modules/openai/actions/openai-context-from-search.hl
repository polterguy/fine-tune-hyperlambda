/*
 * Retrieves external context based on a search [query], constrained by a [max_tokens] limit.
 *
 * Validates required arguments using [validators.mandatory] and applies default values via [validators.default].
 * Executes [magic.http.duckduckgo-and-scrape] to fetch relevant web snippets.
 *
 * Iteratively builds a [.context] node from snippet prompts and completions,
 * pruning content until the token limit is reached using [openai.tokenize].
 *
 * Trims and returns the final context using [yield].
 */
.arguments
   query:string
   max_tokens:int

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/query

// Applying default values for optional arguments.
validators.default:x:@.arguments
   max_tokens:int:4000

// Retrieving context.
execute:magic.http.duckduckgo-and-scrape
   query:x:@.arguments/*/query
   max:int:10

// Building our context return value.
.context:
while
   and
      exists:x:@execute/0/*/snippets/0
      lt
         openai.tokenize:x:@.context
         convert:x:@.arguments/*/max_tokens
            type:int
   .lambda

      // Temporary value.
      .tmp
      set-value:x:@.tmp
         strings.concat
            get-value:x:@.context
            .:"\n\n"
            get-value:x:@execute/0/*/snippets/0/*/prompt
            .:"\n\n"
            get-value:x:@execute/0/*/snippets/0/*/completion
      if
         lt
            openai.tokenize:x:@.tmp
            convert:x:@.arguments/*/max_tokens
               type:int
         .lambda

            // Still below [max_tokes].
            set-value:x:@.context
               get-value:x:@.tmp

      // Removing top snippet.
      remove-nodes:x:@execute/0/*/snippets/0
      if
         not-exists:x:@execute/0/*/snippets/0
         .lambda

            // TODO: Add reference URL here.

            // Removing currently iterated URL.
            remove-nodes:x:@execute/0

// Trimming result.
set-value:x:@.context
   strings.trim:x:@.context

// Returning result to caller.
yield
   context:x:@.context
