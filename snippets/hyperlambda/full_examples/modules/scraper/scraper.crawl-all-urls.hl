
/*
 * Creates a slot named [scraper.crawl-all-urls] that scrapes and vectorizes all URLs
 * listed in the [spice_urls] and [crawl_urls] tables from the 'scraper' database.
 *
 * ## Structure
 * - [spice_urls]: Used to scrape single pages via [magic.ai.url.scrape].
 * - [crawl_urls]: Used to crawl entire domains via [magic.ai.crawl-site-on-thread].
 *
 * ## Behavior
 * 1. Connects to the 'scraper' database.
 * 2. Retrieves all URLs and types from [spice_urls] and [crawl_urls].
 * 3. For each record in [spice_urls]:
 *    - Executes [magic.ai.url.scrape] with the given [url] and [type].
 *    - Immediately vectorizes the data using [magic.ai.vectorise].
 * 4. For each record in [crawl_urls]:
 *    - Executes a threaded site crawl via [magic.ai.crawl-site-on-thread].
 *    - Crawls are delayed and support scraping images, lists, code, etc.
 *    - After crawl, invokes [magic.ai.vectorise] for the given [type].
 *
 * ## Slots & Parameters
 * - [magic.ai.url.scrape] performs lightweight URL scraping.
 * - [magic.ai.crawl-site-on-thread] performs deep site crawling in a non-blocking fashion.
 * - [magic.ai.vectorise] builds vector embeddings of the scraped data.
 *
 * ## Safety Notes
 * - Each crawl includes [threshold], [summarize], and [max] limits to prevent over-fetching.
 * - Adds a [delay] between crawl steps for throttling.
 */
slots.create:scraper.crawl-all-urls

   // Buffer for spice URLs.
   .spice

   // Buffer for crawl URLs.
   .crawl

   // Connecting to database.
   data.connect:[generic|scraper]

      // Reading all spice URLs.
      add:x:@.spice
         data.read
            table:spice_urls
            columns
               url
               type

      // Reading all crawl URLs.
      add:x:@.crawl
         data.read
            table:crawl_urls
            columns
               url
               type

   // Looping through all records returned in above invocation.
   for-each:x:@.spice/*

      // Invoking slot responsible for spicing specified type by scraping URL.
      execute:magic.ai.url.scrape
         url:x:@.dp/#/*/url
         type:x:@.dp/#/*/type
         threshold:int:150
         summarize:bool:true

      // Vectorizing model.
      execute:magic.ai.vectorise
         type:x:@.dp/#/*/type

   // Looping through all records returned in above invocation.
   for-each:x:@.crawl/*

      // Invoking slot responsible for spicing specified type by scraping URL.
      execute:magic.ai.crawl-site-on-thread
         url:x:@.dp/#/*/url
         type:x:@.dp/#/*/type
         threshold:int:150
         summarize:bool:true
         delay:int:1000
         images:bool:true
         lists:bool:true
         code:bool:true
         max:int:5000

      // Vectorizing model.
      execute:magic.ai.vectorise
         type:x:@.dp/#/*/type
