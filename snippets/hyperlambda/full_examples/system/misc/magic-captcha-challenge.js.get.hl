
/*
 * Returns the Magic CAPTCHA JavaScript library with runtime-generated public key and server URL embedded.
 *
 * This HTTP endpoint serves the Magic CAPTCHA client-side JavaScript library to the requesting client,
 * dynamically injecting security-sensitive metadata such as a unique public key (derived from the server’s
 * auth secret) and the correct server URL. This allows the CAPTCHA challenge to securely bind to the
 * server instance and avoid replay or injection attacks.
 *
 * ### Arguments:
 * - `v` (string, optional): Versioning or cache busting hint (currently unused, but may influence future caching logic).
 *
 * ### Behavior:
 * 1. **Server-Specific Key Generation**:
 *    - Retrieves the configured authentication secret from the config (`magic:auth:secret`).
 *    - Applies **double SHA256 hashing** to generate a public, non-reversible fingerprint of the server identity.
 *    - This key is injected into the JavaScript file using the placeholder `[[public-key]]`.
 *
 * 2. **Dynamic URL Construction**:
 *    - Detects the scheme (`http` or `https`) based on the request's host.
 *    - Builds the full base URL and replaces all `[[url]]` placeholders inside the JavaScript.
 *    - Ensures that the CAPTCHA JavaScript always points to the correct backend for challenge resolution.
 *
 * 3. **JavaScript Source Loading**:
 *    - Attempts to serve a minified version of the file if available:
 *    - `/system/misc/magic-captcha-challenge.min.js`
 *    - Falls back to unminified source:
 *    - `/system/misc/magic-captcha-challenge.js`
 *
 * 4. **Header Configuration**:
 *    - Sets `Content-Type` to `text/javascript` for correct client-side execution and caching.
 *
 * 5. **Response**:
 *    - Returns the transformed JavaScript file as the HTTP response body.
 *
 * ### Example Placeholders Replaced:
 * - `[[public-key]]` → Server-specific hashed fingerprint.
 * - `[[url]]` → Base URL such as `https://my-cloudlet.ainiro.io`.
 *
 * ### Use Cases:
 * - Client-side CAPTCHA generation and token hashing logic.
 * - CAPTCHA binding to specific backend, preventing misuse or cloning.
 * - Plug-and-play JavaScript loader for forms requiring spam protection.
 *
 * ### Notes:
 * - This is part of the Magic CAPTCHA proof-of-work system.
 * - The script is served fully customized to the backend instance issuing it.
 * - Avoid caching this script statically on external CDNs unless you explicitly handle dynamic key and URL substitution.
 */
.arguments
   v:string

// Getting server auth secret.
config.get:"magic:auth:secret"

// Double hashing auth secret using SHA256 to avoid predictable hash values.
crypto.hash.sha256:x:@config.get
crypto.hash.sha256:x:-

// Loading JavaScript file.
.file
if
   io.file.exists:/system/misc/magic-captcha-challenge.min.js
   .lambda

      // We have a minified file.
      set-value:x:@.file
         load-file:/system/misc/magic-captcha-challenge.min.js
else

   // We don't have a minified file.
   set-value:x:@.file
      load-file:/system/misc/magic-captcha-challenge.js

/*
 * Dynamically substituting public key in file with public key that was generated
 * specifically for current server.
 */
set-value:x:@.file
   strings.replace:x:@.file
      .:[[public-key]]
      get-value:x:@crypto.hash.sha256

// Figuring out API URL.
.scheme
request.host
if
   strings.contains:x:@request.host
      .:localhost
   .lambda
      set-value:x:@.scheme
         .:"http"
else
   set-value:x:@.scheme
      .:"https"
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.scheme
      .:"://"
      request.host
set-value:x:@.file
   strings.replace:x:@.file
      .:[[url]]
      get-value:x:@.url

// Applying correct HTTP headers.
response.headers.set
   Content-Type:text/javascript

// Returning result to caller.
return:x:@.file
