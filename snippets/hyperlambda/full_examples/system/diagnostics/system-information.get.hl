
/*
 * Returns detailed system-level KPI information for the Magic backend.
 *
 * This Hyperlambda endpoint is used to inspect and monitor key performance indicators (KPIs),
 * logs, module statistics, cache state, and other system-level metrics from the backend.
 * It dynamically executes all registered plugins that match the naming convention
 * [magic.system-information.*], allowing modules to inject their own KPIs into the system's dashboard.
 *
 * To improve performance, the full result is cached on the server for 300 seconds (5 minutes)
 * using [cache.try-get], and HTTP clients are instructed to cache responses using the
 * `Cache-Control` response header. This is important since calculating KPIs can be an expensive operation.
 *
 * ### Access Control:
 * - Only users with the `root` role may invoke this endpoint. This is enforced via [auth.ticket.verify:root].
 *
 * ### Arguments:
 * - This endpoint takes **no arguments**.
 *
 * ### Behavior:
 * 1. Checks whether the system has been properly initialized by inspecting the JWT secret.
 *    If the secret is equal to the default placeholder (`THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT`),
 *    the endpoint short-circuits and returns nothing (no KPIs).
 * 2. If properly configured:
 *    - Sets HTTP cache headers for client-side caching.
 *    - Caches the result of the KPI analysis internally for 300 seconds using [cache.try-get].
 *    - Executes all slots starting with [magic.system-information.] and merges their results into the response.
 *    - Adds core system information including:
 *       - Magic platform version
 *       - Persisted tasks count
 *       - Log entry counts (including log timeshifts: logins, access denials, OpenAI usage, leads, etc.)
 *       - Endpoint count
 *       - Slot and dynamic slot counts
 *       - Cache item count
 *       - Default DB adapter and timezone
 *       - Last 10 log entries
 *       - Module-specific metrics (files and lines of code per module)
 *    - If the log provider supports it, timeshift data for key activity types is also included.
 *
 * ### Returns:
 * - A large KPI object structure containing the following fields:
 *   - `version` (string)
 *   - `persisted_tasks` (int)
 *   - `log_items` (int)
 *   - `endpoints`, `slots`, `dynamic_slots` (int)
 *   - `cache_items` (int)
 *   - `default_db` (string)
 *   - `default_timezone` (string)
 *   - `last_log_items` (array of recent log entries)
 *   - `modules` (object): Each module's file and LOC count
 *   - `timeshifts` (optional): Grouped log data for specific activities over time
 *
 * Example (partial) response:
 * ```
 * {
 *    "version": "11.4.2",
 *    "persisted_tasks": 14,
 *    "log_items": 3499,
 *    "endpoints": 42,
 *    "modules": {
 *       "users": {
 *          "loc": 782,
 *          "files": 13
 *       }
 *    },
 *    "timeshifts": {
 *       "logins": {
 *          "items": [...]
 *       }
 *    }
 * }
 * ```
 *
 * This endpoint powers administrative dashboards and health monitors for Magic Cloudlets,
 * and supports plugin-based extensibility for dynamic KPI injection.
 */
.arguments

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Verifying system has been setup.
config.get:"magic:auth:secret"
if
   neq:x:@config.get
      .:THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT
   .lambda

      // Making sure we aggressively cache the HTTP response object on the client side.
      response.headers.set
         Cache-Control:public, max-age=300

      // Retrieving data from cache, and/or creating our cache entry.
      cache.try-get:system-information
         expiration:300
         .lambda

            // Retrieving version of Magic we're currently running.
            version

            // Retrieving number of persisted tasks.
            tasks.count

            /*
             * Retrieving plugin information associated with endpoint.
             * Notice, this logic will invoke all slots starting
             * with [magic.system-information.] and return whatever these
             * slots are returning back to caller.
             */
            slots.vocabulary:magic.system-information.
            for-each:x:-/*
               signal:x:@.dp/#
               add:x:+/*
                  get-nodes:x:@signal/*
               add:x:././*/lambda2hyper
                  .

            // Counting total number of log items.
            log.count

            /*
             * Retrieving capabilities of log implementation, and verifying implementation
             * supports timeshifts before we invoke timeshifts.
             */
            log.capabilities
            if:x:@log.capabilities/*/can-timeshift

               // Adding root nodes for timeshifts.
               add:x:@.lambda/*/lambda2hyper
                  .
                     timeshifts
                        logins
                           name:Logins
                           description:Successfully authenticated users
                           items
                        access_denied
                           name:Access denied
                           description:Access denied requests
                           items
                        openai_success
                           name:OpenAI success
                           description:Successful OpenAI API requests
                           items
                        openai_failure
                           name:OpenAI failure
                           description:Failed OpenAI API requests
                           items
                        lead_generated
                           name:Lead
                           description:Lead generated
                           items

               // Retrieving count of log items grouped by day for root logins.
               add:x:@.lambda/*/lambda2hyper/*/timeshifts/*/logins/*/items
                  log.timeshift:User successfully authenticated

               // Retrieving access denied invocations.
               add:x:@.lambda/*/lambda2hyper/*/timeshifts/*/access_denied/*/items
                  log.timeshift:Access denied

               // Retrieving successful OpenAI API requests
               add:x:@.lambda/*/lambda2hyper/*/timeshifts/*/openai_success/*/items
                  log.timeshift:Invoking OpenAI was a success

               // Retrieving failed OpenAI API requests
               add:x:@.lambda/*/lambda2hyper/*/timeshifts/*/openai_failure/*/items
                  log.timeshift:Something went wrong while invoking OpenAI

               // Retrieving leads
               add:x:@.lambda/*/lambda2hyper/*/timeshifts/*/lead_generated/*/items
                  log.timeshift:Lead was generated

            // Retrieving endpoints.
            endpoints.list
            .no-endpoints
            set-value:x:-
               get-count:x:@endpoints.list/*

            // Retrieving last 10 log items.
            add:x:@.lambda/*/lambda2hyper/*/last_log_items
               log.query
                  max:10

            // Retrieving slots.
            vocabulary
            .no-slots
            set-value:x:-
               get-count:x:@vocabulary/*

            // Retrieving dynamic slots.
            slots.vocabulary
            .no-dynamic-slots
            set-value:x:-
               get-count:x:@slots.vocabulary/*

            // Retrieving default database adapter.
            .default-db
            set-value:x:-
               config.get:"magic:databases:default"

            // Retrieving default timezone.
            .default-timezone
            set-value:x:-
               config.get:"magic:culture:defaultTimeZone"

            // Counting cache items.
            cache.count

            // Verifying scheduler is turned on.
            .has-scheduler:bool:true
            if
               eq
                  config.get:"magic:tasks:scheduler"
                  .
               .lambda
                  set-value:x:@.has-scheduler
                     .:bool:false
                     
            // Iterating through each module, counting LOC, and files.
            io.folder.list:/modules/
            for-each:x:@io.folder.list/*
            
               // Finding module name.
               strings.split:x:@.dp/#
                  .:/
                  
               // Loading all files in module recursively.
               unwrap:x:+/*
               signal:magic.io.file.load-recursively
                  .:x:@.dp/#
                  
               // Looping through each file in module folder.
               .loc:int:0
               .files:int:0
               for-each:x:@signal/*
                  if
                     strings.ends-with:x:@.dp/#
                        .:.hl
                     .lambda
                        hyper2lambda:x:@.dp/#/0
                        math.increment:x:@.loc
                           get-count:x:@hyper2lambda/**
                        math.increment:x:@.files

               // Adding result to return value.
               unwrap:x:+/+/*/*/*
               set-name:x:+/*/*
                  get-value:x:@strings.split/0/-
               add:x:@.lambda/*/lambda2hyper/*/modules
                  .
                     foo
                        loc:x:@.loc
                        files:x:@.files


            // Returning result to caller.
            unwrap:x:+/*
            lambda2hyper
               version:x:@version
               persisted_tasks:x:@tasks.count
               has_sockets:x:@.has-sockets
               has_scheduler:x:@.has-scheduler
               log_items:x:@log.count
               cache_items:x:@cache.count
               endpoints:x:@.no-endpoints
               slots:x:@.no-slots
               dynamic_slots:x:@.no-dynamic-slots
               default_db:x:@.default-db
               default_timezone:x:@.default-timezone
               last_log_items
               modules
            return:x:@lambda2hyper

      // Returning result of cache invocation to caller.
      hyper2lambda:x:@cache.try-get
      return-nodes:x:@hyper2lambda/*
