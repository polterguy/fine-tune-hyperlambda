
/*
 * Performs initial system setup by generating a secure JWT secret, creating the Magic database,
 * and inserting or updating the root user account.
 *
 * This endpoint is intended to be executed once after deploying a new instance of Magic.
 * It sets a new secure JWT secret in `appsettings.json`, ensures the Magic database exists,
 * and provisions or updates a root user. Once the system has been setup, it cannot be configured again
 * unless the JWT secret is manually reset to a value shorter than 50 characters.
 *
 * ### Access Control:
 * - Only authenticated users with the `root` role may invoke this endpoint.
 *   This is enforced using [auth.ticket.verify:root].
 *
 * ### Arguments:
 * - `username` (string): Optional. Defaults to `"root"`. Username of the system administrator.
 * - `password` (string): Required. Password for the root user. Can be plain text or a hashed value.
 * - `is_hashed` (bool): Optional. Defaults to `false`. Set to `true` if the password is already hashed.
 * - `name` (string): Optional. Will be stored as additional metadata for the root user.
 * - `email` (string): Optional. Will be stored as additional metadata for the root user.
 *
 * ### Behavior:
 * 1. Checks if a JWT secret already exists and is at least 50 characters long.
 *    - If so, the system has already been configured and a `401 Unauthorized` exception is thrown.
 * 2. If not yet configured:
 *    - Loads the current configuration from `appsettings.json`.
 *    - Generates a new cryptographically secure JWT secret (100â€“200 characters long).
 *    - Persists the new configuration using [config.save].
 *    - Sleeps for 2 seconds to allow the updated configuration to propagate in thread-local caches.
 * 3. Ensures that the Magic database is created by invoking `/system/ensure-magic-database.hl`.
 * 4. Checks if the root user exists:
 *    - If the user exists, their password is updated using [magic.auth.change-password].
 *    - If not, a new root user is created via [magic.auth.create-user], including roles and extra metadata.
 * 5. Issues a new JWT token for the root user and returns it to the client.
 *
 * ### Returns:
 * - `ticket` (string): A freshly issued JWT token for the root user after successful setup.
 *
 * ### Notes:
 * - To **reconfigure or reset** the system, manually edit `appsettings.json` and reduce the JWT secret length to below 50 characters.
 *   This re-enables setup mode and allows password reset via this endpoint or via root/root credentials.
 * - This endpoint should be executed only once per deployment and must be secured from unauthorized access.
 *
 * ### Example Response:
 * ```
 * ticket:eyJhbGciOiJIUzI1NiIsInR5cCI6...
 * ```
 */
.arguments
   username:string
   password:string
   is_hashed:bool
   name:string
   email:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Defaulting [is_hashed] to false and [username] to root.
validators.default:x:@.arguments
   is_hashed:bool:false
   username:root

/*
 * Checking if JWT secret has been changed, and if is has, we throw an exception, to prevent the
 * system from being setup again, overriding the default setup configuration.
 */
config.get:"magic:auth:secret"
if
   and
      not-null:x:@config.get
      mte
         strings.length:x:@config.get
         .:int:50
   .lambda

      // System has been setup before
      throw:Your system has already been setup
         status:401
         public:true

// Loading our appsettings.json file now.
config.load
json2lambda:x:@config.load

// Updating auth secret to some relatively CSRNG safe value.
set-value:x:@json2lambda/*/magic/*/auth/*/secret
   crypto.random
      min:100
      max:200

// Saving changed configuration now.
lambda2json:x:@json2lambda/*
config.save:x:-

/*
 * Sleeping for 2 seconds to allow configuration to kick
 * in on thread pools threads.
 *
 * Notice, even though this is bananas, it is necessary since we're using the appsettings
 * connection string to connect to database further down in this file and the configuration
 * object is stale unless we sleep the thread for a couple of seconds.
 */
sleep:2000

// Ensuring our magic database is correctly created.
io.file.execute:/system/ensure-magic-database.hl

/*
 * We can start the setup process, inserting a root user, etc ...
 *
 * We only insert a new root user if no root user exists in users table though.
 * If root user already exists, we change its password instead.
 *
 * This allows users to "reset" their Magic backend by changing the JWT
 * secret to anything less than 50 characters in length, and such re-configure
 * their backend with a new root password.
 */
data.connect:[generic|magic]
   data.read
      table:users
      where
         and
            username.eq:x:@.arguments/*/username

   // Checking if root user already exists.
   if
      exists:x:@data.read/*/*
      .lambda

         // Root user already exists, hence simply changing its password.
         execute:magic.auth.change-password
            password:x:@.arguments/*/password
            is_hashed:x:@.arguments/*/is_hashed

   else

      // Inserting root user.
      execute:magic.auth.create-user
         username:x:@.arguments/*/username
         password:x:@.arguments/*/password
         is_hashed:x:@.arguments/*/is_hashed
         roles
            .:root
         extra
            email:x:@.arguments/*/email
            name:x:@.arguments/*/name

   // Authenticating user and returning new JWT token to client.
   auth.ticket.create
      username:x:@.arguments/*/username
      roles
         .:root
   yield
      ticket:x:@auth.ticket.create
