
/*
 * Returns the number of log entries stored in the system, optionally filtered by a search query.
 *
 * This Hyperlambda endpoint allows root users to query the log database and return the total count
 * of matching entries. It is useful for dashboards, monitoring tools, or analytics panels where
 * log volume is a relevant metric.
 *
 * ### Access Control:
 * - Only users with the `root` role may invoke this endpoint.
 *   Enforced using [auth.ticket.verify:root].
 *
 * ### Arguments:
 * - `query` (string): Optional. A text query to filter log entries.
 *   - If provided, it narrows the search to log messages matching the query text.
 *   - If omitted, all log entries are counted.
 *
 * ### Behavior:
 * 1. Verifies that the caller has root privileges.
 * 2. Calls [log.count] with the optional query string to determine the total number of log entries.
 * 3. Returns the result as a simple `count` value.
 *
 * ### Returns:
 * - A single node indicating the number of matching log entries.
 *
 * Example response:
 * ```
 * count:2458
 * ```
 *
 * ### Example Use Cases:
 * - `query: "Access denied"` → returns count of all failed access attempts.
 * - `query: "OpenAI"` → returns count of all OpenAI-related logs.
 * - `query: ""` or omitted → returns total number of all logs in the system.
 *
 * This endpoint is lightweight and ideal for health dashboards or to assess system activity volume.
 */
.arguments
   query:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Invoking slot responsible for returning count.
log.count:x:@.arguments/*/query

// Returning result of above invocation to caller.
unwrap:x:+/*
return
   count:x:@log.count
