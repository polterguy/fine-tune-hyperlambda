
/*
 * Dynamically evaluates arbitrary Hyperlambda code and returns the result, with exception handling.
 *
 * This endpoint allows administrative users to evaluate Hyperlambda code at runtime. It accepts
 * serialized Hyperlambda as a string via the [hyperlambda] argument and optional named arguments under [args].
 * The endpoint returns the result of the execution, or a structured public exception if an error occurs.
 *
 * ### Access Control:
 * - Only users with the `root` role are allowed to execute this endpoint.
 *   This is enforced via [auth.ticket.verify:root] to prevent unauthorized code execution.
 *
 * ### Arguments:
 * - `hyperlambda` (string): The Hyperlambda source code to be evaluated. It must be a properly
 *   formatted string representation of Hyperlambda code using the correct node structure and indentation.
 * - `args` (object): Optional. Named arguments passed into the Hyperlambda execution context.
 *   These arguments will be injected under the `.arguments` node of the Hyperlambda root scope.
 *
 * ### Behavior:
 * 1. Wraps execution in a [try] block to catch any runtime exceptions.
 * 2. Uses [hyper2lambda] to deserialize the stringified Hyperlambda into a lambda object.
 * 3. Removes any internal `.arguments` declarations from the source code to avoid conflicts.
 * 4. Injects the provided [args] as new `.arguments` under the evaluation root.
 * 5. To isolate the execution context, it binds the resulting lambda tree to a new artificial root node (`.x`)
 *    preventing user code from interfering with the file's own logic.
 * 6. Executes the final lambda using [eval], and serializes the result using [lambda2hyper].
 * 7. Returns the evaluation result under a `result` node.
 * 8. If an exception occurs, it is rethrown with the original message and marked as public,
 *    using HTTP status `400 Bad Request`.
 *
 * ### Returns:
 * - On success:
 *   ```
 *   result:<evaluation-output>
 *   ```
 * - On failure:
 *   A public exception with the same error message returned as a structured 400 error.
 *
 * ### Example Request:
 * ```json
 * {
 *   "hyperlambda": ".arguments\n  name:string\nstrings.concat\n  .:\"Hello \"\n  get-value:x:@.arguments/*/name",
 *   "args": {
 *     "name": "Thomas"
 *   }
 * }
 * ```
 *
 * ### Example Response:
 * ```
 * result: Hello Thomas
 * ```
 *
 * ### Notes:
 * - Because this endpoint executes arbitrary code, access **must** be restricted to trusted users.
 * - The wrapping technique used ensures safe root isolation during execution, which prevents
 *   malicious or poorly structured Hyperlambda from contaminating or accessing the host file structure.
 */
.arguments
   hyperlambda:string

   // This implies no type checking will be done on this argument, or its descendants
   args:*

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

/*
 * To be able to return intelligent error messages to caller,
 * we catch all exceptions, and returns the exception message
 * publicly back to caller.
 */
try

   /*
    * Transforms the specified [hyperlambda] to a lambda object,
    * making sure we correctly set the root node for the execution
    * in the process. This looks a bit cheezy, but to make sure
    * the root node for the execution object is the node containing
    * the Hyperlambda as children, it is necessary.
    * 
    * It basically "unties" the execution object from the rest of this
    * particular file, preventing caller to interfer with the file itself,
    * as a consequence of his Hyperlambda.
    */
   .x:node:""
   hyper2lambda:x:@.arguments/*/hyperlambda
   remove-nodes:x:@hyper2lambda/*/.arguments/*
   add:x:@hyper2lambda/*/.arguments
      get-nodes:x:@.arguments/*/args/*
   add:x:@.x/#
      get-nodes:x:@hyper2lambda/*

   // Evaluating Hyperlambda, now with the correct root node.
   eval:x:@.x/#

   // Returning the results of the evaluation to caller.
   lambda2hyper:x:@.x/#/*
   unwrap:x:+/*
   return-nodes
      result:x:@lambda2hyper
.catch

   /*
    * Throwing a new exception, wrapping message,
    * this time as a publicly visible exception.
    */
   throw:x:@.arguments/*/message
      status:400
      public:true
