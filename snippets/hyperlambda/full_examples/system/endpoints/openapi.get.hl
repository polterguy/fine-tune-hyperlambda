
/*
 * Returns an OpenAPI 3.1.0 specification describing all public (or optionally internal) endpoints in the system.
 *
 * This Hyperlambda endpoint dynamically generates a full OpenAPI (Swagger) document by inspecting all registered HTTP
 * endpoints in the system, applying filters to include only public (non-internal) routes unless explicitly told to include internal/system endpoints.
 * This allows clients and developers to programmatically explore and interact with your Magic Cloudlet backend.
 *
 * ### Access Control:
 * - No explicit role-based access control is enforced, but endpoint visibility is restricted to public
 *   endpoints unless [system=true] is provided.
 *
 * ### Arguments:
 * - `system` (bool): Optional. If `true`, includes internal/system endpoints (those under `magic/modules/*`).
 *                    Defaults to `false`.
 * - `filter` (string): Optional. A case-insensitive substring to filter endpoint paths. Only paths that contain
 *                      this string will be included in the result.
 *
 * ### Behavior:
 * 1. Retrieves the Magic version and current HTTP scheme and host to construct the base server URL.
 * 2. Initializes a standard OpenAPI response structure with:
 *    - `openapi: "3.1.0"`
 *    - `info` (title, description, version)
 *    - `servers` array with `url` pointing to the backend host
 *    - `paths` placeholder for discovered endpoints
 * 3. Iterates through each endpoint returned by [endpoints.list]:
 *    - Skips endpoints with `type=internal` unless [system=true] is set or path matches `magic/modules/*`
 *    - Applies optional `filter` if provided
 *    - For each qualifying endpoint:
 *      - Extracts metadata: verb, path, input arguments, description, etc.
 *      - Organizes arguments into OpenAPI `parameters` (for GET/DELETE) or `requestBody` (for POST/PUT/PATCH)
 *      - Generates a unique `operationId` for each verb-path combo
 *      - Adds the endpoint structure into the `paths` object
 * 4. Deduplicates endpoints to avoid multiple entries for the same path
 * 5. Removes the `paths` node if no valid endpoints were found
 *
 * ### Returns:
 * - A fully formed OpenAPI 3.1.0 JSON document describing the public API of your backend.
 *
 * Example structure:
 * ```
 * {
 *   "openapi": "3.1.0",
 *   "info": {
 *     "title": "AINIRO.IO Magic Cloud Cloudlet",
 *     "description": "Interact with your cloudlet",
 *     "version": "11.4.0"
 *   },
 *   "servers": [
 *     {
 *       "url": "https://cloudlet.ainiro.io"
 *     }
 *   ],
 *   "paths": {
 *     "/user/login": {
 *       "post": {
 *         "operationId": "post_user_login",
 *         "description": "Authenticates the user and returns a token",
 *         "requestBody": { ... }
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * This endpoint is ideal for dynamic documentation portals, API explorers, code generators, and
 * clients such as Swagger UI or Postman.
 */
.arguments
   system:bool
   filter:string

// Defaulting system endpoints to false.
validators.default:x:@.arguments
   system:bool:false

// Retrieving Magic backend version.
version

// Retrieving host and scheme for request.
.scheme
request.host
if
   strings.starts-with:x:@request.host
      .:"localhost:5000"
   .lambda
      set-value:x:@.scheme
         .:http
else
   set-value:x:@.scheme
      .:https
.base-url
set-value:x:@.base-url
   strings.concat
      get-value:x:@.scheme
      .:"://"
      request.host

// Unwrapping expressions in [.result].
unwrap:x:./*/.result/**

// Buffer for return value.
.result
   openapi:3.1.0
   info
      title:AINIRO.IO Magic Cloud Cloudlet
      description:Interact with your cloudlet
      version:x:@version
   servers
      .
         url:x:@.base-url
   paths

// Retrieves all endpoints in the system.
endpoints.list

// Iterating through each public endpoint and adding to above [paths].
for-each:x:@endpoints.list/*

   // Verifying endpoint is public, or user provided [system] as true.
   if
      and
         neq:x:@.dp/#/*/type
            .:internal
         or
            eq:x:@.arguments/*/system
               .:bool:true
            strings.starts-with:x:@.dp/#/*/path
               .:magic/modules/
         or
            not-exists:x:@.arguments/*/filter
            null:x:@.arguments/*/filter
            strings.contains:x:@.dp/#/*/path
               get-value:x:@.arguments/*/filter
      .lambda

         // Checking if we've already added URL to [.result].
         .exists:bool:false
         for-each:x:@.result/*/paths/*
            if
               eq
                  get-name:x:@.dp/#
                  strings.concat
                     .:/
                     get-value:x:@for-each/@.dp/#/*/path
               .lambda

                  // Endpoint URL has already been added.
                  set-value:x:@.exists
                     .:bool:true

         /*
          * Endpoint URL has not been added before, making sure
          * we add it with its correct URL and additional information.
          */
         .buffer
            url
               verb
                  operationId
                  description

         // Setting description, making sure we don't exceed 300 characters.
         if
            and
               exists:x:@.dp/#/*/description
               mt
                  strings.length:x:@.dp/#/*/description
                  .:int:300
            .lambda
               set-value:x:@.dp/#/*/description
                  strings.substring:x:@.dp/#/*/description
                     .:int:0
                     .:int:300
         set-value:x:@.buffer/*/url/*/verb/*/description
            get-value:x:@.dp/#/*/description

         // Setting verb.
         set-name:x:@.buffer/*/url/*/verb
            get-value:x:@.dp/#/*/verb

         // Setting consumes
         switch:x:@.dp/#/*/verb
            case:post
            case:put
            case:patch
               unwrap:x:+/*/*/*
               insert-after:x:@.buffer/*/*/*/operationId
                  .
                     consumes
                        .:x:@.dp/#/*/consumes
                     produces
                        .:application/json

         // Setting URL.
         set-name:x:@.buffer/*/url
            strings.concat
               .:/
               get-value:x:@.dp/#/*/path

         // Setting operationId.
         strings.split:x:@.dp/#/*/path
            .:/
         set-value:x:@.buffer/*/*/*/operationId
            strings.concat
               get-value:x:@.dp/#/*/verb
               .:_
               get-value:x:@strings.split/0/-/-
               .:_
               get-value:x:@strings.split/0/-

         /*
          * Checking if this is a GET or DELETE endpoint,
          * at which point parameters are always QUERY parameters.
          *
          * If POST, PUT or PATCH however, we use schema level example instead.
          */
         if
            or
               eq:x:@.dp/#/*/verb
                  .:get
               eq:x:@.dp/#/*/verb
                  .:delete
            .lambda

               // Adding [parameters].
               add:x:@.buffer/*/*
                  .
                     parameters

               // Iterating through each argument endpoint can handle.
               for-each:x:@.dp/#/*/input/*

                  // Verifying this is not a wildcard argument.
                  if
                     neq:x:@.dp/#/*/type
                        .:*
                     .lambda

                        // Buffer for parameter.
                        .arg
                           name
                           in:query
                           schema
                              type

                        // Setting name.
                        set-value:x:@.arg/*/name
                           get-value:x:@.dp/#/*/name

                        // Setting type.
                        switch:x:@.dp/#/*/type
                           case:short
                           case:ushort
                           case:int
                           case:uint
                           case:long
                           case:ulong
                              set-value:x:@.arg/*/schema/*/type
                                 .:integer
                           case:float
                           case:double
                           case:decimal
                              set-value:x:@.arg/*/schema/*/type
                                 .:number
                           case:bool
                              set-value:x:@.arg/*/schema/*/type
                                 .:boolean
                           default
                              set-value:x:@.arg/*/schema/*/type
                                 .:string

                        // Checking if we've got a description, and if so, adding it.
                        if
                           exists:x:@.dp/#/*/description
                           .lambda
                              unwrap:x:+/*/*
                              insert-after:x:@.arg/*/name
                                 .
                                    description:x:@.dp/#/*/description

                        // Adding currently iterated argument to parameters collection.
                        add:x:+/*/*
                           get-nodes:x:@.arg/*
                        add:x:@.buffer/*/*/*/parameters
                           .
                              .

         else

            .body
               requestBody
                  content
                     application/json
                        schema
                           type:object
                           properties

            // Iterating through each argument endpoint can handle.
            for-each:x:@.dp/#/*/input/*

               // Adding currently iterated argument to parameters collection, making sure it's not already existing.
               if
                  not-exists:x:@.body/*/requestBody/*/content/*/*/schema/*/properties/*/{@.dp/#/*/name}
                  .lambda

                     // Field does not exist from before, adding field into [properties] lambda.
                     .prop
                        name
                           type

                     // Type
                     set-value:x:@.prop/*/*/type
                        get-value:x:@.dp/#/*/type

                     // Name
                     set-name:x:@.prop/*
                        get-value:x:@.dp/#/*/name

                     // Checking if we've got a description, and if so, adding it.
                     if
                        exists:x:@.dp/#/*/description
                        .lambda
                           unwrap:x:+/*/*
                           add:x:@.prop/*
                              .
                                 description:x:@.dp/#/*/description

                     // Adding field to [properties].
                     add:x:@.body/*/requestBody/*/content/*/*/schema/*/properties
                        get-nodes:x:@.prop/*

            // Adding currently iterated argument to parameters collection if we've got an example.
            if
               exists:x:@.body/*/requestBody/*/content/*/*/schema/*/properties
               .lambda

                  // We've got an example payload.
                  add:x:+/*
                     get-nodes:x:@.body/*
                  add:x:@.buffer/*/*
                     .


         // Removing [parameters] unless we actually have parameters.
         if
            not-exists:x:@.buffer/*/*/*/parameters/*
            .lambda
               remove-nodes:x:@.buffer/*/*/*/parameters

         /*
          * Checking if endpoint URL has already been added, and if so,
          * we add another verb instead of a new URL reference.
          */
         if:x:@.exists

            // Endpoint URL already exists, adding new verb instead.
            strings.concat
               .:/
               get-value:x:@.dp/#/*/path
            add:x:@.result/*/paths/*/{@strings.concat}
               get-nodes:x:@.buffer/*/*

         else

            // Adding [.buffer] to [.result].
            add:x:+/*
               get-nodes:x:@.buffer/*
            add:x:@.result/*/paths
               .

// Verifying we have any endpoints at all, and if not, simply removing paths.
if
   not-exists:x:@.result/*/paths/*
   .lambda
      remove-nodes:x:@.result/*/paths

// Returning result to caller.
return-nodes:x:@.result/*
