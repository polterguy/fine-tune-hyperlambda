
/*
 * Verifies an OpenID Connect (OIDC) JWT token and issues a local application-specific JWT token.
 *
 * This Hyperlambda web API endpoint performs token verification against a third-party OpenID Connect (OIDC) provider.
 * It extracts and verifies the OIDC JWT [token] provided by the caller, checks if the issuer is registered and trusted,
 * and issues a local application-specific JWT token in return. It also gathers and returns extra user profile details,
 * such as name and email, based on existing or newly created records.
 *
 * ### Token Verification & Security:
 * - The [auth.token.verify] slot validates the JWT signature and decodes claims from the OIDC token.
 * - The [nonce] stored in cache is checked against the issuer to prevent replay attacks.
 * - If verification fails, appropriate HTTP exceptions are thrown with public visibility (status: 400).
 * - The [issuer] of the token is matched against known providers registered in the system, using the
 *   [/system/auth/openid-providers.get.hl] endpoint. Unregistered issuers result in a hard failure.
 *
 * ### User Flow:
 * 1. If the token is valid and the issuer is recognized:
 *    - Checks if a local user with the token's [email] already exists:
 *      - If yes, issues a new application JWT using [magic.auth.authenticate].
 *      - If not, provisions a new user account automatically:
 *        - Username is set to the OIDC email.
 *        - Password is hardcoded to `"openid-connect"` (not used for login).
 *        - Default role is set to `"guest"`.
 *        - Userâ€™s email and name (if provided) are stored in the [users_extra] table.
 *    - Extra profile data (email, name) is returned to the client.
 *
 * ### Arguments:
 * - `token` (string): A valid OpenID Connect JWT token from a trusted provider such as Google, Microsoft, etc.
 *
 * ### Returns:
 * - `ticket` (string): A newly created application-specific JWT token issued for the user.
 * - `extra` (object): A dictionary containing metadata about the user such as `email` and `name`.
 *
 * Example response:
 * ```
 * ticket:eyJhbGciOi...
 * extra:
 *    email:user@example.com
 *    name:John Doe
 * ```
 *
 * ### Prerequisites:
 * - Only tokens from OIDC providers registered in the system will be accepted.
 *   See the file `openid-providers.get.hl` for how to register a new provider.
 *
 * This endpoint enables seamless third-party identity federation using OpenID Connect and simplifies first-time
 * login experiences by auto-provisioning new accounts securely. It supports single sign-on (SSO) via external identity providers.
 */
.arguments
   token:string

/*
 * Verifying token.
 *
 * Notice, this will throw an exception if token is not valid.
 */
auth.token.verify
   token:x:@.arguments/*/token

/*
 * Verifying nonce from token to avoid replay attacks.
 */
cache.get:x:@auth.token.verify/*/nonce
if
   neq:x:@cache.get
      get-value:x:@auth.token.verify/*/issuer
   .lambda

      // Oops ...!!
      throw:Nonce is not valid!
         status:int:400
         public:bool:true

// Removing nonce from cache to avoid replay attacks.
cache.set:x:@auth.token.verify/*/nonce

// Verifying issuer is active.
.active:bool:false
execute-file:/system/auth/openid-providers.get.hl
   createNonce:bool:false
for-each:x:@execute-file/*
   if
      eq:x:@.dp/#/*/issuer
         get-value:x:@auth.token.verify/*/issuer
      .lambda
         set-value:x:@.active
            .:bool:true
if
   eq:x:@.issuer
      .:bool:false
   .lambda

      // Oops ...!
      throw:Not a recognized OpenID provider
         status:400
         public:bool:true

// Buffer for extra information.
.extra

// External OpenID provider has been verified, now we need to check to see if user exists in local database.
data.connect:magic

   // Checking if user exists.
   data.read
      table:users
      where
         and
            username.eq:x:@auth.token.verify/*/email
   if
      exists:x:@data.read/*
      .lambda

         /*
          * User has been previously created.
          *
          * Invoking [magic.auth.authenticate] that does the heavy lifting, and creates our JWT token,
          * making sure we return that token to caller.
          *
          * Notice, we ignore the password!
          */
         execute:magic.auth.authenticate
            password-check:bool:false
            username:x:@auth.token.verify/*/email

         // Retrieving extra information.
         data.connect:magic
            data.read
               table:users_extra
               where
                  and
                     user.eq:x:@auth.token.verify/*/email
                     or
                        type.eq:name
                        type.eq:email
            for-each:x:@data.read/*
               set-name:x:./*/add/*/*
                  get-value:x:@.dp/#/*/type
               set-value:x:./*/add/*/*
                  get-value:x:@.dp/#/*/value
               add:x:@.extra
                  .
                     .

         // Returns the authentication JWT ticket created above to caller.
         yield
            ticket:x:@execute/*/ticket
            extra:x:@.extra/*

   // First time login, creating a new user with username being email address.
   data.create
      table:users
      values
         username:x:@auth.token.verify/*/email
         password:openid-connect

   // Associating user with "guest" role.
   data.create
      table:users_roles
      values
         user:x:@auth.token.verify/*/email
         role:guest

   // Storing email as extra field.
   data.create
      table:users_extra
      values
         user:x:@auth.token.verify/*/email
         type:email
         value:x:@auth.token.verify/*/email

   // Checking to see if we've got a name value, and if we do we associate it with the user we create.
   if
      exists:x:@auth.token.verify/*/name
      .lambda

         // We've got name, storing it.
         data.create
            table:users_extra
            values
               user:x:@auth.token.verify/*/email
               type:name
               value:x:@auth.token.verify/*/name

   // Retrieving extra information.
   data.connect:magic
      data.read
         table:users_extra
         where
            and
               user.eq:x:@auth.token.verify/*/email
               or
                  type.eq:name
                  type.eq:email
      for-each:x:@data.read/*
         set-name:x:./*/add/*/*
            get-value:x:@.dp/#/*/type
         set-value:x:./*/add/*/*
            get-value:x:@.dp/#/*/value
         add:x:@.extra
            .
               .

/*
 * Invoking [magic.auth.authenticate] that does the heavy lifting, and creates our JWT token,
 * making sure we return that token to caller.
 */
execute:magic.auth.authenticate
   username:x:@auth.token.verify/*/email
   password-check:bool:false

// Returns the authentication JWT ticket created above to caller.
yield
   ticket:x:@execute/*/ticket
   extra:x:@.extra/*
