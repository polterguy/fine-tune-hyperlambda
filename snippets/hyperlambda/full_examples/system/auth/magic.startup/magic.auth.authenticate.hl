
/*
 * Authenticates a user and returns a JWT token if successful.
 *
 * This Hyperlambda slot named [magic.auth.authenticate] performs a full authentication cycle by:
 * - Accepting a [username], [password], and [expires] timestamp as input.
 * - Checking whether the [username] exists in the `users` database table.
 * - Verifying the supplied [password] using a bcrypt hash comparison with the stored password hash.
 * - If verification is successful, it retrieves the user's roles from the `users_roles` table.
 * - Uses the collected roles to generate a JWT token via [auth.ticket.create].
 * - Logs successful authentication and returns the JWT ticket to the client.
 *
 * If the user doesn't exist or the password is incorrect, the slot throws an HTTP 401 "Access denied" exception,
 * and sets [public] to true, making the error message publicly visible.
 *
 * ### Arguments:
 * - `username` (string): The username of the user trying to authenticate. Mandatory.
 * - `password` (string): The plaintext password to verify against the stored hash. Mandatory.
 * - `password-check` (bool): A helper argument that must be `true` to proceed with password validation. Mandatory.
 * - `expires` (date): The expiration timestamp for the JWT ticket to be created. Optional, depending on the configuration.
 *
 * ### Returns:
 * - On success: Yields a structure containing a [ticket] node with the generated JWT token.
 *   Example:
 *   ```
 *   ticket:eyJhbGciOi...
 *   ```
 * - On failure: Throws a `401 Unauthorized` error with a public message "Access denied".
 */
slots.create:magic.auth.authenticate

   // Opens up our database connection.
   data.connect:magic

      // Selects password from our users table belonging to specified [username].
      data.read
         table:users
         columns
            password
         where
            and
               username.eq:x:@.arguments/*/username

      // Checking if user with specified [username] exists.
      if
         not-exists:x:@data.read/*
         .lambda

            // No such user.
            throw:Access denied
               status:int:401
               public:bool:true

      // Verifying that the password is a match.
      if
         or
            eq:x:@.arguments/*/password-check
               .:bool:false
            crypto.password.verify:x:@.arguments/*/password
               hash:x:@data.read/*/*/password
         .lambda

            // Logging the fact that user successfully logged in.
            log.info:User successfully authenticated
               username:x:@.arguments/*/username

            // Now we need to select all roles user belongs to.
            data.read
               table:users_roles
               columns
                  role
               where
                  and
                     user.eq:x:@.arguments/*/username

            // Parametrizing [auth.ticket.create] with roles user belongs to.
            add:x:./*/auth.ticket.create/*/roles
               get-nodes:x:@data.read/*/*

            // Now we can create our JWT token/ticket.
            auth.ticket.create
               username:x:@.arguments/*/username
               expires:x:@.arguments/*/expires
               roles

            // Returning JWT token to caller.
            yield
               ticket:x:@auth.ticket.create

      // Hash version of password didn't match.
      throw:Access denied
         status:int:401
         public:bool:true
