
/*
 * Returns the OpenID Connect (OIDC) provider configuration for Google.
 *
 * This Hyperlambda slot is named [magic.openid.providers.google] and is automatically invoked
 * by the framework when the system needs to discover supported OpenID providers.
 * The naming convention [magic.openid.providers.XYZ] is used to register new providers,
 * allowing dynamic extensibility with custom or third-party OIDC configurations.
 *
 * This slot returns metadata required to initiate an OIDC "id_token" based login flow with Google,
 * including parameters such as issuer, client ID, and optionally a generated [nonce] for enhanced security.
 *
 * ### Important Notes:
 * - Only providers using the "id_token" flow are currently supported by the system.
 * - A unique [nonce] is generated and cached for 60 minutes to prevent replay attacks, but only
 *   if the caller requests it via the [createNonce] argument.
 * - The [issuer] is cached alongside the [nonce], enabling later verification that the returned token
 *   was issued by Google.
 *
 * ### Arguments:
 * - `createNonce` (bool): Mandatory. If true, the slot generates and stores a unique [nonce] used
 *   for validating the authenticity of the returned ID token.
 *
 * ### Returns:
 * - A dictionary structure with the following information:
 *   - `name` (string): Human-friendly name of the provider, e.g., `"Google"`.
 *   - `issuer` (string): The issuer URL for Google's OIDC endpoint, i.e., `"https://accounts.google.com"`.
 *   - (Optional) If `createNonce = true`, it also includes:
 *     - `nonce` (string): A randomly generated secure token used to bind the authentication request.
 *     - `url` (string): The Google OIDC authorization endpoint.
 *     - `client_id` (string): The configured Google client ID retrieved from system config.
 *     - `response_type` (string): Always set to `"id_token"`.
 *     - `scope` (string): Predefined scopes such as `"openid email profile"` to include in the request.
 *
 * This information can be used by frontend clients to initiate a secure OpenID Connect login with Google.
 */
slots.create:magic.openid.providers.google

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/createNonce

   // Getting client ID for Google from configuration.
   .client-id
   set-value:x:@.client-id
      config.get:"magic:oidc:google:client-id"

   // Checking to see if we've got Google provider configured.
   if
      not-null:x:@.client-id
      .lambda

         // Buffer for nonce.
         .nonce

         // Checking if caller wants us to generate a nonce.
         if
            eq:x:@.arguments/*/createNonce
               .:bool:true
            .lambda

               // Creating a unique nonce.
               set-value:x:@.nonce
                  crypto.random
                     min:20
                     max:30

               /*
                * Storing nonce to avoid replay attacks.
                *
                * Notice, nonce is only stored for 60 minutes, implying the configuration
                * returned below can only be used within 60 minutes of having been generated.
                *
                * And we store the issuer value in cache such that we can verify later that the id_token
                * was created by the correct issuer.
                */
               cache.set:x:@.nonce
                  value:"https://accounts.google.com"
                  expiration:3600

               // Making sure we return nonce to caller.
               add:x:@.lambda/@.lambda/*/add/*/*
                  .
                     nonce:x:@.nonce
                     url:"https://accounts.google.com/o/oauth2/v2/auth"
                     client_id:x:@.client-id
                     response_type:id_token
                     scope:openid email profile

         // Returning providers to caller.
         unwrap:x:+/*/*/*
         add:x:../*/return
            .
               .
                  name:Google
                  issuer:"https://accounts.google.com"

   // Returning result to caller.
   return
