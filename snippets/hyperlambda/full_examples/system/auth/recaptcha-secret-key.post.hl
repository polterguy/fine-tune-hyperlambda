
/*
 * Updates the reCAPTCHA key and secret used for client-side verification.
 *
 * This Hyperlambda HTTP endpoint allows a user with the `root` role to update the
 * system's reCAPTCHA public [key] and private [secret]. These values are used to configure
 * client-side CAPTCHA validation flows (e.g., during login or registration forms).
 *
 * ### Access Control:
 * - Only authenticated users with the `root` role are allowed to invoke this endpoint.
 *   The check is enforced using [auth.ticket.verify:root].
 *
 * ### Arguments:
 * - `key` (string): The public reCAPTCHA site key to be used by frontend clients. Required.
 * - `secret` (string): The private reCAPTCHA secret used for backend validation. Required.
 *
 * ### Behavior:
 * 1. Validates that both the `key` and `secret` arguments are provided.
 * 2. Loads the current configuration using [config.load].
 * 3. Removes any existing reCAPTCHA configuration from the `magic.auth.recaptcha` section.
 * 4. Adds a new reCAPTCHA configuration under the same section with the provided key and secret.
 * 5. Saves the updated configuration using [config.save].
 *
 * ### Returns:
 * - A static response indicating the operation was successful:
 *   ```
 *   result:success
 *   ```
 *
 * This endpoint is typically used in administrative panels or deployment tools
 * to configure or rotate reCAPTCHA credentials without editing configuration files manually.
 */
.arguments
   key:string
   secret:string

// Making sure user is allowed to invoke endpoint
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/key
validators.mandatory:x:@.arguments/*/secret

// Updating settings.
config.load
json2lambda:x:-
remove-nodes:x:@json2lambda/*/magic/*/auth/*/recaptcha
unwrap:x:+/*/*/*
add:x:@json2lambda/*/magic/*/auth
   .
      recaptcha
         key:x:@.arguments/*/key
         secret:x:@.arguments/*/secret

// Saving updated settings.
lambda2json:x:@json2lambda/*
config.save:x:-

// Retrieving key configuration setting and returning to caller.
return-nodes
   result:success
