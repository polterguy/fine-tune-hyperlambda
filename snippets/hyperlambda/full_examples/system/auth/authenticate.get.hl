
/*
 * Authenticates a user and returns a JWT token, with optional fallback for initial setup mode.
 *
 * This Hyperlambda endpoint takes a username and password, verifies them, and returns a JWT token
 * if authentication succeeds. It also includes additional user information from the [users_extra]
 * database table, such as name and email, if available.
 *
 * ### Initial Setup Mode
 * If the JWT secret (config value "magic:auth:secret") is not configured or is shorter than 50 characters,
 * the system is assumed to be in "setup mode". In this case, the credentials [root/root] are accepted
 * as valid and return a special JWT token with the [root] role, allowing the user to perform initial setup
 * of their cloudlet. This is a bootstrapping mechanism for newly installed instances.
 *
 * ### Standard Authentication
 * Outside setup mode, the endpoint delegates the authentication process to the slot [magic.auth.authenticate],
 * which verifies credentials, fetches roles, and issues a JWT token if valid. If authentication fails,
 * a 401 Unauthorized error is thrown by the underlying slot.
 *
 * After successful authentication, the endpoint also queries the [users_extra] table for user-specific
 * metadata, such as their name or email, and returns it along with the JWT ticket.
 *
 * ### Arguments:
 * - `username` (string): The user's login name. Mandatory.
 * - `password` (string): The user's login password. Mandatory.
 *
 * ### Returns:
 * - `ticket` (string): A JWT token containing user identity and associated roles.
 * - `extra` (object): A dictionary of key-value pairs retrieved from [users_extra],
 *   where `type` fields like "name" or "email" are used as keys, and their corresponding values are returned.
 *
 * Example response:
 * ```
 * ticket:eyJhbGciOiJIUzI1NiIsInR5cCI6...
 * extra:
 *    name:John Doe
 *    email:john@example.com
 * ```
 *
 * This endpoint is essential for secure login flows and cloudlet initialization logic.
 */
.arguments
   username:string
   password:string

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/password

/*
 * Checking if JWT secret has been changed, and if not, simply checking if username/password is
 * root/root, and if so returning a valid token allowing the user to setup his or her cloudlet.
 *
 * This is necessary to allow for configuring a new cloudlet where the user haven't selected a root
 * password yet.
 */
config.get:"magic:auth:secret"
if
   or
      null:x:@config.get
      lt
         strings.length:x:@config.get
         .:int:50
   .lambda

      // System has not been setup.
      if
         and
            eq
               get-value:x:@.arguments/*/username
               .:root
            eq
               get-value:x:@.arguments/*/password
               .:root
         .lambda

            // Success!
            auth.ticket.create
               username:root
               roles
                  .:root
            yield
               ticket:x:@auth.ticket.create

/*
 * Invokes [magic.auth.authenticate] that does the heavy lifting, and creates our JWT token,
 * making sure we return that token to caller.
 */
execute:magic.auth.authenticate
   username:x:@.arguments/*/username
   password:x:@.arguments/*/password

// Buffer for extra information.
.extra
data.connect:magic
   data.read
      table:users_extra
      where
         and
            user.eq:x:@.arguments/*/username
            or
               type.eq:name
               type.eq:email
   for-each:x:@data.read/*
      set-name:x:./*/add/*/*
         get-value:x:@.dp/#/*/type
      set-value:x:./*/add/*/*
         get-value:x:@.dp/#/*/value
      add:x:@.extra
         .
            .

// Returns the authentication JWT ticket created above to caller.
yield
   ticket:x:@execute/*/ticket
   extra:x:@.extra/*
