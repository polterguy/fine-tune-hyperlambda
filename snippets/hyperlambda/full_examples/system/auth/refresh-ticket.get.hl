
/*
 * Refreshes the currently authenticated user's JWT token.
 *
 * This Hyperlambda HTTP endpoint allows a logged-in user to refresh their authentication token,
 * issuing a new JWT token with a renewed expiration timestamp. This is typically used to maintain
 * session continuity without requiring the user to re-authenticate.
 *
 * ### Arguments:
 * - This endpoint takes **no arguments**.
 *
 * ### Access Control:
 * - The caller must already be authenticated. Access is enforced using [auth.ticket.verify],
 *   which ensures the request includes a valid existing token.
 *
 * ### Behavior:
 * 1. Validates the caller's existing token via [auth.ticket.verify].
 * 2. Uses [auth.ticket.refresh] to generate a new token for the same user, preserving roles and claims.
 * 3. Returns the new token in the response.
 *
 * ### Returns:
 * - `ticket` (string): A new JWT token with updated expiration and the same user claims as the original.
 *
 * Example response:
 * ```
 * ticket:eyJhbGciOi...
 * ```
 *
 * This endpoint is ideal for use in token renewal flows, such as background refresh mechanisms in SPAs,
 * where the frontend wants to keep the user logged in without a full re-login process.
 */

// Endpoint takes no arguments!
.arguments

// Ensures user is authorized to access endpoint.
auth.ticket.verify

/*
 * Invokes [auth.ticket.refresh] that does the heavy lifting, and creates our JWT token,
 * making sure we return that token to caller.
 */
auth.ticket.refresh

// Returns the authentication JWT ticket created above to caller.
yield
   ticket:x:@auth.ticket.refresh
