/*
 * Dynamically discovers and executes all registered OpenID Connect provider slots
 * in the system using [slots.vocabulary], allowing modular, extensible integration
 * with multiple identity providers.
 *
 * It first queries for all slots whose names begin with 'magic.openid.providers.',
 * then iteratively invokes each one, optionally generating a nonce if 'createNonce'
 * is set to 'true'.
 *
 * After each slot execution, it validates that the returned provider configuration
 * includes both 'issuer' and 'name'. If not, it throws an exception to avoid including
 * incomplete or misconfigured providers.
 *
 * Additionally, it ensures that each OpenID provider is only included once, even if
 * multiple modules register the same provider. This is done by checking whether the
 * provider's 'issuer' already exists in the return set.
 *
 * Finally, all unique and valid OpenID provider definitions are returned to the caller.
 */
.arguments
   createNonce:bool

// Finding all slots declaring OpenID Providers.
slots.vocabulary:magic.openid.providers.

// Looping through each slot returned above and executing it.
for-each:x:@slots.vocabulary/*

   // Changing slot invocation name.
   set-value:x:./*/execute
      get-value:x:@.dp/#

   /*
    * Executing slot to retrieve supported providers.
    *
    * Notice, name of slot (value of node) is dynamically created above.
    */
   execute
      createNonce:x:@.arguments/*/createNonce

   // Looping through all providers returned above to return them to client.
   for-each:x:@execute/*

      // Sanity checking OpenID provider.
      if
         or
            not-exists:x:@.dp/#/*/issuer
            not-exists:x:@.dp/#/*/name
         .lambda

            // Oops, bogus provider ...!!
            throw:Bogus OpenID provider
               status:int:500
               public:bool:true

      /*
       * Checking that this particular provider was not registered
       * by some other slot invocation perviously.
       *
       * This prevents having two different slots in two different modules
       * registering the same OpenID Connect provider twice.
       */
      .exists:bool:false
      for-each:x:../*/return/*
         if
            eq:x:@.dp/#/*/issuer
               get-value:x:@for-each/@.dp/#/*/issuer
            .lambda

               // OpenID provider already exists.
               set-value:x:@.exists
                  .:bool:true

      // Adding provider unless it was registered by another slot invoction.
      if
         eq:x:@.exists
            .:bool:false
         .lambda

            // Adding currently iterated provider to [return] invocation below.
            add:x:../*/return
               get-nodes:x:@.dp/#

// Returning providers to client.
return
