
/*
 * Updates a single record in the [questionnaires] table of the "magic" database using [name] as the unique identifier.
 *
 * This secured endpoint allows root users to update metadata associated with a questionnaire,
 * such as its [type] and optional [action], which may define dynamic slot behavior.
 *
 * INPUT PARAMETERS:
 * - [name:string]: Required. The unique name of the questionnaire to update (acts as the primary key).
 * - [type:string]: Optional. The type/category of the questionnaire (e.g., onboarding, profiling).
 * - [action:string]: Optional. A slot name under the `magic.questionnaires.action.` namespace that is triggered upon submission.
 *
 * EXECUTION FLOW:
 *
 * 1. **Validation**:
 *    - Ensures the [name] parameter is provided using [validators.mandatory].
 *
 * 2. **Authorization**:
 *    - Restricts access to root-level users using [auth.ticket.verify:root].
 *
 * 3. **Database Connection**:
 *    - Connects to the "magic" database using SQLite via [data.connect].
 *
 * 4. **Update Statement Preparation**:
 *    - Populates the [values] section with fields to be updated ([type], [action]).
 *    - Applies the [name] as a filter in the [where] clause to locate the correct record.
 *
 * 5. **Update Execution**:
 *    - Executes the update using [data.update] on the [questionnaires] table.
 *    - If no records were affected (i.e., [name] not found), returns a 404 response with a clear error message.
 *
 * 6. **Response**:
 *    - On success, returns HTTP status 202 (Accepted) along with the number of rows affected.
 *
 * This endpoint is useful for maintaining the structure and behavior of AI-powered questionnaires
 * that guide user onboarding, lead qualification, personalization flows, or data collection processes.
 */

.arguments
   name:string
   type:string
   action:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/name

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:questionnaires
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
