
/*
 * Deletes multiple records from the `ml_training_snippets` table based on filter criteria, and performs associated cleanup.
 *
 * This Hyperlambda HTTP `DELETE` endpoint allows root users to perform bulk deletions on the `ml_training_snippets` table.
 * It supports advanced filtering via query arguments, cleans up any referenced files on disk, and synchronizes deletion
 * with the related `vss_ml_training_snippets` shadow table.
 *
 * ### Access Control:
 * - Only users with the `root` role may invoke this endpoint.
 *   Enforced via [auth.ticket.verify:root].
 *
 * ### Arguments:
 * The endpoint accepts flexible filters to target which records to delete:
 * - `ml_training_snippets.prompt.like` (string): Optional. Deletes records where the prompt matches a LIKE expression.
 * - `ml_training_snippets.completion.like` (string): Optional. Deletes records where the completion matches a LIKE expression.
 * - `ml_training_snippets.uri.like` (string): Optional. Deletes records where the URI matches a LIKE expression.
 * - `ml_training_snippets.type.eq` (string): Optional. Deletes records where the type matches exactly.
 *
 * ### Behavior:
 * 1. Authenticates the user and validates root access.
 * 2. Dynamically builds a parameterized filter query using provided arguments.
 *    - Filters using an `OR` condition for prompt, completion, and URI matches.
 *    - Filters using an `AND` condition for the rest (e.g., type).
 * 3. Reads matching entries from the database and deletes associated files on disk (if the `filename` column exists and points to a real file).
 * 4. Prepares and executes a deletion statement for the shadow table (`vss_ml_training_snippets`) by generating a SQL query from the filtered result set.
 * 5. Deletes the filtered records from the `ml_training_snippets` main table.
 *
 * ### Returns:
 * - A response node indicating how many records were deleted:
 * ```
 * affected:<number-of-rows-deleted>
 * ```
 *
 * ### Example Use Case:
 * Delete all snippets of type `blog`, where the URI contains `"draft"`:
 * ```
 * {
 *   "ml_training_snippets.uri.like": "%draft%",
 *   "ml_training_snippets.type.eq": "blog"
 * }
 * ```
 *
 * ### Notes:
 * - Automatically deletes associated files found in the `filename` column, if they exist on disk.
 * - Ensures consistency between the primary table and its vector search shadow table.
 * - Filters are optional but must match at least one record for deletions to occur.
 */
.arguments
   ml_training_snippets.prompt.like:string
   ml_training_snippets.completion.like:string
   ml_training_snippets.uri.like:string
   ml_training_snippets.type.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our delete and read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/*/or
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
      get-nodes:x:@.arguments/*/ml_training_snippets.completion.like
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   add:x:./*/data.delete/*/where/*/*/or
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
      get-nodes:x:@.arguments/*/ml_training_snippets.completion.like
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.completion.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*
   add:x:./*/data.delete/*/where/*
      get-nodes:x:@.arguments/*

   // Removing [or] parts unless we've got something to actually or.
   if
      not-exists:x:@data.connect/*/data.read/*/where/*/and/*/or/*
      .lambda
         remove-nodes:x:@data.connect/*/data.read/*/where/*/and/*/or
         remove-nodes:x:@data.connect/*/data.delete/*/where/*/and/*/or

   // Reading items from database such that we can delete files associated with items.
   data.read
      table:ml_training_snippets
      columns
         filename
      where
         and
            filename.neq
            or
      limit:-1
   for-each:x:@data.read/*
      if
         and
            not-null:x:@.dp/#/*/filename
            io.file.exists:x:@.dp/#/*/filename
         .lambda
            io.file.delete:x:@.dp/#/*/filename

   /*
    * Generating select statement for records we're deleting since we need
    * to use it as input to deletion from vss shadow table.
    */
   data.read
      generate:true
      table:ml_training_snippets
      columns
         id
            as:rowid
      where
         and
            or
      limit:-1
   .sql

   // Deleting records from vss shadow table.
   set-value:x:@.sql
      strings.concat
         .:delete from vss_ml_training_snippets where rowid in(
         get-value:x:@data.read
         .:)
   add:x:./*/data.execute
      get-nodes:x:@data.read/*
   data.execute:x:@.sql

   // Finally, deleting ml_training_snippets item from database.
   data.delete
      table:ml_training_snippets
      where
         and
            or

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
