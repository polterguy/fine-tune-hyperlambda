
/*
 * Upserts (deletes and reinserts) questions for a given questionnaire based on Markdown-formatted input.
 *
 * This endpoint allows root users to redefine the questions in a questionnaire by submitting a string of Markdown content.
 * Each list item in the Markdown represents a new question to be inserted. Meta fields can also be embedded in the Markdown.
 *
 * INPUT PARAMETERS:
 * - [name:string]: The unique identifier of the questionnaire these questions belong to.
 * - [questions:string]: A Markdown string where each list item represents a question.
 *   - Example format:
 *     - What is your name?
 *     - What is your email? => type=email, required=true
 *
 * EXECUTION FLOW:
 *
 * 1. **Authorization & Validation**:
 *    - Ensures root-level access using [auth.ticket.verify:root].
 *    - Validates that both [name] and [questions] arguments are provided using [validators.mandatory].
 *
 * 2. **Clear Existing Questions**:
 *    - Deletes all previously stored questions associated with the specified [name] in the [questions] table.
 *    - Ensures a full replace/upsert behavior.
 *
 * 3. **Markdown Processing**:
 *    - Converts the [questions] Markdown string into HTML using [markdown2html].
 *    - Parses the resulting HTML into a lambda structure with [html2lambda].
 *    - Iterates over all `<li>` list items (representing questions).
 *
 * 4. **Question Extraction**:
 *    - Splits each `<li>` element using the delimiter `=>` to separate the question from optional metadata.
 *    - The question text is extracted, trimmed, and stored.
 *    - If metadata is present:
 *       - It is further split by commas and parsed into key-value pairs.
 *       - These meta fields are added to the database entry as dynamic fields.
 *
 * 5. **Insertion into Database**:
 *    - Each question (and optional metadata) is inserted into the [questions] table,
 *      along with its associated [questionnaire] name.
 *
 * 6. **Response**:
 *    - Returns `{ result: success }` to confirm the upsert was completed.
 *
 * This endpoint is ideal for backend-driven or markdown-powered CMS interfaces where admins
 * define questionnaire content using a user-friendly syntax, enabling bulk updates with structured data.
 */

.arguments
   name:string
   questions:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/name
validators.mandatory:x:@.arguments/*/questions

// Connecting to database.
data.connect:[generic|magic]

   // Deleting all old questions.
   data.delete
      table:questions
      where
         and
            questionnaire.eq:x:@.arguments/*/name

   /*
    * Turning questions string into individual questions by transforming
    * to HTML and then semantically traversing.
    */
   markdown2html:x:@.arguments/*/questions
   html2lambda:x:-

   // Iterating all li elements in HTML.
   for-each:x:@html2lambda/**/li

      // Semantically parsing question.
      strings.split:x:@.dp/#/*/\#text
         .:=>
      .question
      set-value:x:@.question
         strings.trim:x:@strings.split/0

      // Checking if question contains meta information.
      if
         mt
            get-count:x:@strings.split/*
            .:int:1
         .lambda

            // Question contain meta information.
            strings.trim:x:@strings.split/1
            strings.split:x:-
               .:,
            for-each:x:@strings.split/*
               strings.split:x:@.dp/#
                  .:=
               set-value:x:./*/add/*/*/name
                  strings.trim:x:@strings.split/1
               set-name:x:./*/add/*/*/name
                  strings.trim:x:@strings.split/0
               add:x:@for-each/@for-each/*/data.create/*/values
                  .
                     name:value

      // Inserting currently iterated question and associating it with specified questionnaire.
      data.create
         table:questions
         values
            questionnaire:x:@.arguments/*/name
            question:x:@.question

   // Returning success to caller.
   return
      result:success
   