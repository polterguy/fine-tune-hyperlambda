
/*
 * Reads training snippets from the `ml_training_snippets` table with support for paging, sorting, advanced filtering, and token analysis.
 *
 * This Hyperlambda HTTP `GET` endpoint allows root users to retrieve records from the `ml_training_snippets` table,
 * with full support for pagination, sorting, and flexible filtering across multiple fields. It also adds metadata such
 * as token count and indicates whether an embedding exists, which is useful for AI dataset management and annotation UIs.
 *
 * ### Access Control:
 * - Only users with the `root` role may invoke this endpoint.
 *   Enforced via [auth.ticket.verify:root].
 *
 * ### Arguments:
 * #### Paging:
 * - `limit` (long): Optional. Maximum number of records to return.
 * - `offset` (long): Optional. Number of records to skip (for pagination).
 *
 * #### Sorting:
 * - `order` (string): Optional. Column to sort by.
 *   - Special value: `tokens` orders by the combined length of `prompt || completion`.
 * - `direction` (string): Optional. `asc` or `desc`.
 *
 * #### Filtering (all fields are optional):
 * - `ml_training_snippets.id.eq`, `.lt`, `.mt`: Filters on ID.
 * - `ml_training_snippets.type.like`, `.eq`: Filters by type.
 * - `ml_training_snippets.pushed.eq`: Filters by push state (0 or 1).
 * - `ml_training_snippets.uri.like`, `.eq`: Filters by URI.
 * - `ml_training_snippets.prompt.like`, `.eq`: Filters by prompt text.
 * - `ml_training_snippets.completion.like`, `.eq`: Filters by completion text.
 *
 * ### Behavior:
 * 1. Validates and enforces root-only access.
 * 2. If `order` is set to `"tokens"`, dynamically transforms it to SQL: `length(prompt || completion)`.
 * 3. Constructs a [data.read] query with:
 *    - Pagination (`limit`, `offset`)
 *    - Ordering (`order`, `direction`)
 *    - Flexible filtering using `OR` logic for matching on textual fields, and `AND` logic for exact filters.
 * 4. Queries the database and returns the following fields:
 *    - `id`, `created`, `type`, `pushed`, `uri`, `prompt`, `completion`, `embedding` (as `embedding_vss`), `cached`, `meta`
 * 5. For each record:
 *    - Converts the `embedding_vss` field to a boolean (`true`/`false`) to minimize payload size.
 *    - Concatenates `prompt + completion` and uses `openai.tokenize` to compute token count, which is appended to the response.
 *
 * ### Returns:
 * - An array of matching training snippet records, each with the additional `tokens` and `embedding_vss` fields.
 *
 * ### Example Response:
 * ```json
 * [
 *   {
 *     "id": 42,
 *     "type": "faq",
 *     "prompt": "What is Magic?",
 *     "completion": "Magic is a low-code backend platform...",
 *     "embedding_vss": true,
 *     "tokens": 38
 *   }
 * ]
 * ```
 *
 * ### Notes:
 * - This endpoint is ideal for AI dataset review interfaces, moderation dashboards, or tooling that requires
 *   exploration and filtering of fine-tuning samples or training snippets.
 * - The `tokens` field allows for easy estimation of completion cost or dataset size.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   ml_training_snippets.id.eq:long
   ml_training_snippets.id.mt:long
   ml_training_snippets.id.lt:long
   ml_training_snippets.type.like:string
   ml_training_snippets.type.eq:string
   ml_training_snippets.pushed.eq:long
   ml_training_snippets.uri.like:string
   ml_training_snippets.uri.eq:string
   ml_training_snippets.prompt.like:string
   ml_training_snippets.prompt.eq:string
   ml_training_snippets.completion.like:string
   ml_training_snippets.completion.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Checking if order exists and if it is 'tokens', at which point we order by length of prompt + completion.
   if
      and
         exists:x:@.arguments/*/order
         eq:x:@.arguments/*/order
            .:tokens
      .lambda

         set-value:x:@.arguments/*/order
            .:length(prompt || completion)

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/*/or
      get-nodes:x:@.arguments/*/ml_training_snippets.completion.like
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.like
      get-nodes:x:@.arguments/*/ml_training_snippets.completion.eq
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.eq
      get-nodes:x:@.arguments/*/ml_training_snippets.id.eq
      get-nodes:x:@.arguments/*/ml_training_snippets.id.lt
      get-nodes:x:@.arguments/*/ml_training_snippets.id.mt
   remove-nodes:x:@.arguments/*/ml_training_snippets.completion.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.completion.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.id.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.id.lt
   remove-nodes:x:@.arguments/*/ml_training_snippets.id.mt
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Removing [or] parts unless we've got something to actually or.
   if
      not-exists:x:@data.connect/*/data.read/*/where/*/and/*/or/*
      .lambda
         remove-nodes:x:@data.connect/*/data.read/*/where/*/and/*/or

   // Reading data from database.
   data.read
      table:ml_training_snippets
      columns
         ml_training_snippets.id
         ml_training_snippets.created
         ml_training_snippets.type
         ml_training_snippets.pushed
         ml_training_snippets.uri
         ml_training_snippets.prompt
         ml_training_snippets.completion
         ml_training_snippets.embedding
            as:embedding_vss
         ml_training_snippets.cached
         ml_training_snippets.meta
      where
         and
            or

   // Changing embedding to a boolean value to preserve bandwidth, and returning token count.
   for-each:x:@data.read/*

      // Changing embedding to boolean to preserve bandwidth.
      if
         not-null:x:@.dp/#/*/embedding_vss
         .lambda
            set-value:x:@.dp/#/*/embedding_vss
               .:bool:true
      else
         set-value:x:@.dp/#/*/embedding_vss
            .:bool:false

      // Adding token count for each snippet.
      strings.concat
         get-value:x:@.dp/#/*/prompt
         .:"\r\n\r\n"
         get-value:x:@.dp/#/*/completion
      openai.tokenize:x:@strings.concat
      unwrap:x:+/*/*
      add:x:@.dp/#
         .
            tokens:x:@openai.tokenize

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*