
/*
 * Reads and returns records from the `ml_requests` table with full support for filtering, paging, and sorting.
 *
 * This Hyperlambda CRUD HTTP `GET` endpoint allows root users to query the `ml_requests` table
 * using a combination of pagination, sorting, and conditional filters across multiple fields.
 * It is intended for administrative and diagnostic use, enabling deep insight into training request logs.
 *
 * ### Access Control:
 * - Only users with the `root` role are allowed to invoke this endpoint.
 *   This is enforced via [auth.ticket.verify:root].
 *
 * ### Arguments:
 * #### Pagination:
 * - `limit` (long): Optional. Limits the number of records returned.
 * - `offset` (long): Optional. Skips a number of records for pagination purposes.
 *
 * #### Sorting:
 * - `order` (string): Optional. The name of the column to sort by.
 * - `direction` (string): Optional. Sort direction: `asc` or `desc`.
 *
 * #### Quick Text Search:
 * - `filter` (string): Optional. Applies a broad match (`LIKE %%`) across `prompt`, `completion`, and `user_id`.
 *
 * #### Column-specific Filters:
 * - `ml_requests.id.eq` / `mt` / `lt`: Filters based on ID (exact, greater than, less than).
 * - `ml_requests.created.eq`: Filters by exact creation date.
 * - `ml_requests.type.like` / `eq`: Filters by request type.
 * - `ml_requests.prompt.like` / `eq`: Filters by prompt text.
 * - `ml_requests.completion.like` / `eq`: Filters by response text.
 * - `ml_requests.finish_reason.like` / `eq`: Filters by reason the request was marked complete.
 *
 * ### Behavior:
 * 1. Validates that the caller has root access.
 * 2. Constructs the database read query by:
 *    - Injecting sort and paging parameters if provided.
 *    - Applying a broad `OR` search for `prompt`, `completion`, and `user_id` if `filter` is provided.
 *    - Adding all other provided filter arguments to the `WHERE` clause via structured bindings.
 * 3. Reads from the `ml_requests` table and selects the following fields:
 *    - `id`, `created`, `type`, `prompt`, `completion`, `finish_reason`, `cached`, `questionnaire`, `session`, `user_id`, `referrer`
 * 4. Returns the resulting records to the caller as a list of nodes.
 *
 * ### Returns:
 * - An array of matching `ml_requests` records with selected fields.
 *
 * ### Example Response:
 * ```json
 * [
 *   {
 *     "id": 1234,
 *     "created": "2024-12-01T12:34:56Z",
 *     "type": "training",
 *     "prompt": "What is a lambda function?",
 *     "completion": "A lambda function is a small anonymous function...",
 *     "finish_reason": "success",
 *     "cached": false,
 *     "questionnaire": 0,
 *     "session": "abc123",
 *     "user_id": "user-789",
 *     "referrer": "dashboard"
 *   }
 * ]
 * ```
 *
 * ### Use Cases:
 * - Building administrative UIs for monitoring request activity.
 * - Exporting filtered request logs for analytics.
 * - Debugging training workflows using advanced filters.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   filter:string
   ml_requests.id.eq:long
   ml_requests.id.mt:long
   ml_requests.id.lt:long
   ml_requests.created.eq:date
   ml_requests.type.like:string
   ml_requests.type.eq:string
   ml_requests.prompt.like:string
   ml_requests.prompt.eq:string
   ml_requests.completion.like:string
   ml_requests.completion.eq:string
   ml_requests.finish_reason.like:string
   ml_requests.finish_reason.eq:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Checking if user provided a [filter]
   if
      exists:x:@.arguments/*/filter
      .lambda

         // Adding filter and removing it from arguments collection.
         strings.concat
            .:%
            get-value:x:@.arguments/*/filter
            .:%
         unwrap:x:+/*/*/*
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               or
                  ml_requests.prompt.like:x:@strings.concat
                  ml_requests.completion.like:x:@strings.concat
                  ml_requests.user_id.eq:x:@.arguments/*/filter
         remove-nodes:x:@.arguments/*/filter

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      table:ml_requests
      columns
         ml_requests.id
         ml_requests.created
         ml_requests.type
         ml_requests.prompt
         ml_requests.completion
         ml_requests.finish_reason
         ml_requests.cached
         ml_requests.questionnaire
         ml_requests.session
         ml_requests.user_id
         ml_requests.referrer
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
