
/*
 * Counts records in the `ml_training_snippets` table based on optional filters.
 *
 * This Hyperlambda HTTP endpoint allows root users to retrieve the total number of records
 * in the `ml_training_snippets` table that match specified filter conditions.
 * It's designed for dashboards, analytics, or pre-query operations like pagination.
 *
 * ### Access Control:
 * - Only users with the `root` role may invoke this endpoint.
 *   Enforced via [auth.ticket.verify:root].
 *
 * ### Arguments:
 * All arguments are optional and used to filter which rows are included in the count:
 * - `ml_training_snippets.type.eq` (string): Matches exact type.
 * - `ml_training_snippets.pushed.eq` (long): Matches pushed state (`0` or `1`).
 * - `ml_training_snippets.uri.like` / `eq` (string): Filters by URI (pattern or exact match).
 * - `ml_training_snippets.prompt.like` / `eq` (string): Filters by prompt (pattern or exact match).
 * - `ml_training_snippets.completion.like` / `eq` (string): Filters by completion text (pattern or exact match).
 * - `not_embedded` (bool): If `true`, restricts results to rows where `embedding` is null or not present.
 *
 * ### Behavior:
 * 1. Authenticates the caller and ensures root access.
 * 2. If `not_embedded` is `true`, adds a filter to match rows where `embedding` is `null` (i.e., not yet embedded).
 * 3. Constructs dynamic `WHERE` conditions based on supplied arguments:
 *    - `prompt`, `completion`, and `uri` filters are grouped using an `OR` clause.
 *    - All other filters are added with `AND` logic.
 * 4. Uses [data.read] to select a single row with `count(*)` as `count`.
 * 5. Returns the result to the caller as:
 *    ```
 *    count: <number-of-matching-rows>
 *    ```
 *
 * ### Example Request:
 * ```json
 * {
 *   "ml_training_snippets.prompt.like": "%chatbot%",
 *   "ml_training_snippets.type.eq": "faq",
 *   "not_embedded": true
 * }
 * ```
 *
 * ### Example Response:
 * ```
 * count: 124
 * ```
 *
 * ### Notes:
 * - This endpoint is optimized for flexible queries and works well with frontends that
 *   support filtering/search and need accurate result counts for pagination or reports.
 * - Unused filters are safely ignored.
 */
.arguments
   ml_training_snippets.type.eq:string
   ml_training_snippets.pushed.eq:long
   ml_training_snippets.uri.like:string
   ml_training_snippets.uri.eq:string
   ml_training_snippets.prompt.like:string
   ml_training_snippets.prompt.eq:string
   ml_training_snippets.completion.like:string
   ml_training_snippets.completion.eq:string
   not_embedded:bool

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Checking if caller only wants to count records without embeddings.
   if
      and
         exists:x:@.arguments/*/not_embedded
         get-value:x:@.arguments/*/not_embedded
      .lambda
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               embedding.eq
         remove-nodes:x:@.arguments/*/not_embedded

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/*/or
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
      get-nodes:x:@.arguments/*/ml_training_snippets.completion.like
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.like
      get-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq
      get-nodes:x:@.arguments/*/ml_training_snippets.completion.eq
      get-nodes:x:@.arguments/*/ml_training_snippets.uri.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.completion.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.like
   remove-nodes:x:@.arguments/*/ml_training_snippets.prompt.eq
   remove-nodes:x:@.arguments/*/ml_training_snippets.uri.eq
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Removing [or] parts unless we've got something to actually or.
   if
      not-exists:x:@data.connect/*/data.read/*/where/*/and/*/or/*
      .lambda
         remove-nodes:x:@data.connect/*/data.read/*/where/*/and/*/or

   // Reading data from database.
   data.read
      table:ml_training_snippets
      columns
         count(*)
            as:count
      where
         and
            or
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
