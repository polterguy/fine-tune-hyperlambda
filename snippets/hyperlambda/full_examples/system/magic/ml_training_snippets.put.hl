/*
 * Updates a single record in the [ml_training_snippets] table of the "magic" database.
 *
 * This authenticated, root-protected endpoint allows administrators to update existing training snippets
 * by specifying the [id] of the record and modifying fields such as [prompt], [completion], and [uri].
 *
 * INPUT PARAMETERS:
 * - [id:long]: Required. The unique identifier of the snippet to update.
 * - [uri:string]: Optional. Updated URI reference for the training snippet.
 * - [prompt:string]: Optional. Updated prompt content.
 * - [completion:string]: Optional. Updated completion text.
 * - [meta:string]: Optional. Additional metadata about the snippet (e.g., filename or notes).
 * - [type:string]: Optional. Type/category this snippet belongs to.
 * - [pushed:long]: Optional. Indicates if the snippet has been pushed to OpenAI.
 * - [cached:int]: Optional. Cache status indicator.
 *
 * EXECUTION FLOW:
 *
 * 1. **Validation**:
 *    - Verifies the presence of [id] using [validators.mandatory], as it's required to identify the record to update.
 *
 * 2. **Authorization**:
 *    - Restricts access to root users using [auth.ticket.verify:root].
 *
 * 3. **Database Connection**:
 *    - Opens a connection to the "magic" database using [data.connect:[generic|magic]].
 *
 * 4. **Update Construction**:
 *    - Uses the [id] as the filter condition to locate the target record.
 *    - Gathers all remaining arguments to be updated into the [values] clause.
 *
 * 5. **Record Update Execution**:
 *    - Calls [data.update] to apply changes to the target row.
 *    - If no records were affected (i.e., [id] not found), returns HTTP status 404 with a not-found message.
 *
 * 6. **Response**:
 *    - Returns HTTP status 202 (Accepted) on success.
 *    - Responds with the number of records affected using [affected:x:@data.update].
 *
 * This endpoint is useful for maintaining and correcting fine-tuning data, especially in workflows that
 * involve human review or iterative refinement of prompt-completion pairs.
 */

.arguments
   id:long
   uri:string
   prompt:string
   completion:string
   meta:string
   type:string
   pushed:long
   cached:int

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|magic]

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      table:ml_training_snippets
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
