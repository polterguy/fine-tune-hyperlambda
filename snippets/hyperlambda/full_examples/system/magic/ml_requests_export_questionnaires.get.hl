
/*
 * Exports all questionnaire-based training data for the specified type as a downloadable CSV file.
 *
 * This Hyperlambda endpoint allows root users to extract all completed questionnaire entries from
 * training requests for a given `type`, along with the associated conversation history per user.
 * The result is compiled into a CSV file and returned as a downloadable attachment.
 *
 * ### Access Control:
 * - Only users with the `root` role may invoke this endpoint.
 *   Enforced using [auth.ticket.verify:root].
 *
 * ### Arguments:
 * - `type` (string): Required. Filters the questionnaire entries based on the specified training type.
 *
 * ### Behavior:
 * 1. Validates that the caller is authorized and that a `type` is provided.
 * 2. Retrieves all distinct `user_id` values from `ml_requests` where:
 *    - `type` matches the given value
 *    - `questionnaire = 1` (indicating questionnaire submissions)
 * 3. For each user:
 *    - Retrieves all questionnaire answers (`prompt`, `completion`) with `finish_reason = 'questionnaire'`
 *    - Builds a row with prompts as column headers and corresponding completions as values.
 *    - Retrieves conversation history (non-questionnaire requests) for that user.
 *    - Concatenates prompt and completion entries into a full conversation string and adds it to the row.
 * 4. The resulting dataset is compiled into CSV format using [lambda2csv].
 * 5. Returns the CSV file as a downloadable attachment named `questionnaires.csv`.
 *
 * ### Returns:
 * - If records are found:
 *   - A CSV file with one row per user, where each column represents a questionnaire prompt and the full conversation is appended as a `conversation` column.
 * - If no questionnaire data is found:
 *   - HTTP 404 with a message:
 *     ```
 *     result: No questionnaires found
 *     ```
 *
 * ### Example CSV Output:
 * ```
 * How satisfied are you?, What could be improved?, conversation
 * "Very satisfied", "More examples", "Prompt 1...\n\nCompletion 1...\n\n..."
 * ```
 *
 * ### Notes:
 * - The endpoint excludes any training requests where `questionnaire = 0`.
 * - The full conversation is grouped per user and stored in the final column (`conversation`).
 * - This export is ideal for feedback analysis, survey reviews, or user research based on AI feedback flows.
 */
.arguments
   type:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type

// Opening up our database connection.
data.connect:[generic|magic]

   // Selecting data.
   data.select:select distinct(user_id) from ml_requests where type = @type and questionnaire = 1
      @type:x:@.arguments/*/type

   // Buffer for data
   .data

   // Iterating through above result to create our CSV file.
   for-each:x:@data.select/*

      // Adding record for user to above [.data] buffer.
      add:x:@.data
         .
            .

      // Selecting questionnaire data for each above user_id.
      data.select:"select prompt, completion from ml_requests where user_id = @user_id and questionnaire = 1 and finish_reason = 'questionnaire'"
         @user_id:x:@.dp/#/*/user_id

      // Iterating through above result and adding to [.data].
      for-each:x:@data.select/*
         set-name:x:./*/add/[0,1]/*/*
            get-value:x:@.dp/#/*/prompt
         unwrap:x:+/*/*
         add:x:@.data/0/-
            .
               foo:x:@.dp/#/*/completion

      // Selecting conversation for user and adding to above [.data].
      .conv:
      data.select:"select prompt, completion from ml_requests where user_id = @user_id and questionnaire = 0"
         @user_id:x:@.dp/#/*/user_id
      for-each:x:@data.select/*

         // Concatenating prompt/completion to above [.conv].
         set-value:x:@.conv
            strings.concat
               get-value:x:@.conv
               get-value:x:@.dp/#/*/prompt
               .:"\n"
               .:"\n"
               get-value:x:@.dp/#/*/completion
               .:"\n"
               .:"\n"

      // Adding conversation to above [.data].
      set-value:x:@.conv
         strings.trim:x:@.conv
      unwrap:x:+/*/*
      add:x:@.data/0/-
         .
            conversation:x:@.conv

   // Sanity checking that we've got any data at all.
   if
      not-exists:x:@.data/*
      .lambda

         // Nothing here ...
         response.status.set:404
         return
            result:No questionnaires found

   // Converting result to CSV.
   lambda2csv:x:@.data/*

   // Applying correct HTTP header.
   response.headers.set
      Content-Type:text/csv
      Access-Control-Expose-Headers:Content-Disposition
      Content-Disposition:"attachment; filename=\"questionnaires.csv\""

   // Returning content to caller.
   return:x:@lambda2csv
