
/*
 * Inserts a new record into the `ml_requests` table.
 *
 * This Hyperlambda HTTP `POST` endpoint allows root users to create a new entry in the `ml_requests` table,
 * specifying fields such as `type`, `prompt`, `completion`, and `finish_reason`. It also supports a `cached` flag
 * to indicate whether the request was cached. This endpoint is typically used for administrative imports,
 * manual training data additions, or programmatic logging of completed interactions.
 *
 * ### Access Control:
 * - Only users with the `root` role are allowed to invoke this endpoint.
 *   Enforced using [auth.ticket.verify:root].
 *
 * ### Arguments:
 * - `type` (string): Required. Describes the type of training request (e.g., `training`, `questionnaire`, `lead`, etc.).
 * - `prompt` (string): Required. The original question, message, or input from the user.
 * - `completion` (string): Required. The response or answer generated by the system.
 * - `finish_reason` (string): Required. Describes how the request finished (e.g., `stop`, `lead`, `questionnaire`).
 * - `cached` (int): Optional. Indicates whether the response was retrieved from cache (`1`) or generated live (`0`).
 *
 * ### Behavior:
 * 1. Verifies that the caller is authenticated and belongs to the `root` role.
 * 2. Establishes a database connection to the `magic` database.
 * 3. Binds the input arguments to a new row in the `ml_requests` table via [data.create].
 * 4. Returns an HTTP `201 Created` status to indicate successful creation.
 * 5. Yields the auto-generated `id` of the newly inserted record.
 *
 * ### Returns:
 * - An object containing the `id` of the newly inserted record:
 *   ```
 *   id: <auto-incremented-id>
 *   ```
 *
 * ### Example:
 * Request:
 * ```json
 * {
 *   "type": "training",
 *   "prompt": "Explain Hyperlambda.",
 *   "completion": "Hyperlambda is a tree-based declarative programming language...",
 *   "finish_reason": "stop",
 *   "cached": 0
 * }
 * ```
 * Response:
 * ```json
 * {
 *   "id": 3049
 * }
 * ```
 *
 * This endpoint is ideal for manually injecting curated examples, re-importing training logs, or capturing feedback interactions.
 */
.arguments
   type:string
   prompt:string
   completion:string
   finish_reason:string
   cached:int

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up database connection.
data.connect:[generic|magic]

   // Parametrising our create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Creating our record.
   data.create
      table:ml_requests
      values

   // Returning the correct status code.
   response.status.set:201

   // Returning result of above invocation to caller.
   yield
      id:x:@data.create
