
/*
 * Uploads a ZIP file and overwrites the contents of the specified folder with its extracted contents.
 *
 * This Hyperlambda endpoint allows root users to perform a full folder replacement by uploading a ZIP archive.
 * It deletes all existing files and subfolders inside the specified folder, then extracts the uploaded ZIP
 * to that location. This is useful for updating frontend resources, themes, static content, or any other
 * deployable content set via a file upload.
 *
 * ### Access Control:
 * - Only users with the `root` role may invoke this endpoint.
 *   Enforced via [auth.ticket.verify:root].
 *
 * ### Content-Type:
 * - This endpoint requires `multipart/form-data`, declared using [.accept:multipart/form-data].
 *
 * ### Arguments:
 * - `file` (object): Required.
 *   - `name` (string): The name of the uploaded file. Must end in `.zip`.
 *   - `stream` (binary): The binary stream representing the uploaded ZIP file.
 * - `folder` (string): Required. The full path of the folder to overwrite with the ZIP contents.
 *
 * ### Behavior:
 * 1. Verifies the uploaded file has a `.zip` extension.
 * 2. Clears the target folder by:
 *    - Deleting all subfolders using [io.folder.list] + [io.folder.delete].
 *    - Deleting all files using [io.file.list] + [io.file.delete].
 * 3. Saves the uploaded ZIP file to disk inside the target folder.
 * 4. Extracts the ZIP contents using [io.file.unzip], unzipping directly into the target folder.
 * 5. Deletes the temporary ZIP file after successful extraction.
 *
 * ### Returns:
 * - A success confirmation:
 *   ```
 *   result:Success
 *   ```
 *
 * ### Example Use Case:
 * Uploading a new version of a frontend UI:
 * ```
 * POST /upload-frontend
 * Content-Type: multipart/form-data
 * file: admin-ui.zip
 * folder: /etc/www/
 * ```
 * This will:
 * - Clear `/etc/www/`
 * - Unzip `admin-ui.zip` into `/etc/www/`
 *
 * ### Security Considerations:
 * - Only root users can invoke this endpoint.
 * - No validation is performed on ZIP content. Consider scanning the ZIP before deployment if exposed to external clients.
 * - Folder paths should be controlled to prevent malicious uploads to sensitive locations.
 */
.arguments
   file:*
   folder:string

.accept:multipart/form-data

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file
validators.mandatory:x:@.arguments/*/file/*/name
validators.mandatory:x:@.arguments/*/file/*/stream
validators.mandatory:x:@.arguments/*/folder

// Making sure specified file is a ZIP file.
strings.split:x:@.arguments/*/file/*/name
   .:.
if
   not
      eq
         get-value:x:@strings.split/0/-
         .:zip
   .lambda

      // Oops, not a ZIP file ...
      throw:You can only upload ZIP files
         public:true
         status:415

// Emptying folder.
io.folder.list:x:@.arguments/*/folder
   display-hidden:true
for-each:x:-/*
   io.folder.delete:x:@.dp/#
io.file.list:x:@.arguments/*/folder
   display-hidden:true
for-each:x:-/*
   io.file.delete:x:@.dp/#

// Figuring out full path of ZIP file as it should be saved.
.filename
set-value:x:@.filename
   strings.concat
      get-value:x:@.arguments/*/folder
      get-value:x:@.arguments/*/file/*/name

// Saving stream to file.
io.stream.save-file:x:@.filename
   get-value:x:@.arguments/*/file/*/stream

// Unzipping file.
io.file.unzip:x:@.filename

// Deleting ZIP file.
io.file.delete:x:@.filename

// Returning success to caller.
return-nodes
   result:Success
