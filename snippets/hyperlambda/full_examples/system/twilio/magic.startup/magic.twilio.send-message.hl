
/*
 * Creates a dynamic Hyperlambda slot to send SMS, WhatsApp, or other text messages using the Twilio API.
 *
 * This slot is used for sending outgoing messages in applications that integrate with Twilio's communication platform,
 * such as AI chatbots or notification services. It supports basic formatting cleanup for Markdown content
 * and builds a fully compliant Twilio request.
 *
 * ### Workflow:
 *
 * 1. **Input Validation**:
 *    - Ensures all required fields are present: [to], [from], [body], [twilio_account_id], and [twilio_account_sid].
 *
 * 2. **Creates Basic Authentication Header**:
 *    - Concatenates Twilio credentials ([twilio_account_id] and [twilio_account_sid]) into a Base64-encoded Basic Auth header.
 *
 * 3. **Prepares and Sanitizes Message Content**:
 *    - Removes Markdown image syntax using regex (`!\[...\](...)`), which is not supported by Twilio.
 *    - Trims excess whitespace and line breaks to ensure clean delivery.
 *    - Converts Markdown-style hyperlinks `[text](url)` into a plain format `text (url)`.
 *
 * 4. **Constructs Twilio API URL**:
 *    - Dynamically generates the correct Twilio endpoint URL to send a message using the Twilio Account SID.
 *
 * 5. **Sends HTTP POST Request to Twilio**:
 *    - Issues a `application/x-www-form-urlencoded` HTTP request to the Twilio Messages API.
 *    - Sends [Body], [From], and [To] as the payload.
 *    - Uses the Basic Auth header for authentication.
 *
 * 6. **Handles Success and Errors**:
 *    - If the response is not in the 200-299 range, it logs an error and throws a public exception.
 *    - Otherwise, logs a successful send with the message details for audit and debugging purposes.
 *
 * ### Use Cases:
 * - Send AI-generated chatbot responses via SMS or WhatsApp.
 * - Dispatch automated alerts, confirmations, or marketing texts.
 * - Integrate natural language APIs like OpenAI with Twilio communications.
 */

slots.create:magic.twilio.send-message

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/to
   validators.mandatory:x:@.arguments/*/from
   validators.mandatory:x:@.arguments/*/body
   validators.mandatory:x:@.arguments/*/twilio_account_id
   validators.mandatory:x:@.arguments/*/twilio_account_sid

   // Creating Basic auth header.
   .auth
   set-value:x:@.auth
      strings.concat
         get-value:x:@.arguments/*/twilio_account_id
         .:":"
         get-value:x:@.arguments/*/twilio_account_sid
   set-value:x:@.auth
      convert:x:@.auth
         type:bytes
   set-value:x:@.auth
      strings.concat
         .:"Basic "
         convert:x:@.auth
            type:base64

   // Removing Markdown images since Twilio doesn't support Markdown.
   .content
   set-value:x:@.content
      strings.regex-replace:x:@.arguments/*/body
         .:"!\\[.*\\]\\(.*\\)"
         .:""
   set-value:x:@.content
      strings.trim:x:@.content
   .cont:bool:true
   while:x:@.cont
      if
         not
            strings.contains:x:@.content
               .:"\r\n\r\n\r\n"
         .lambda
            set-value:x:@.cont
               .:bool:false
      else
         set-value:x:@.content
            strings.replace:x:@.content
               .:"\r\n\r\n\r\n"
               .:"\r\n\r\n"

   // Fixing Markdown hyperlinks by removing brackets.
   set-value:x:@.content
      strings.replace:x:@.content
         .:"["
         .:
   set-value:x:@.content
      strings.replace:x:@.content
         .:"]("
         .:" ("

   // Creating our URL to invoke Twilio API.
   .url
   set-value:x:@.url
      strings.concat
         .:"https://api.twilio.com/2010-04-01/Accounts/"
         get-value:x:@.arguments/*/twilio_account_id
         .:"/Messages.json"

   // Invoking Twilio.
   http.post:x:@.url
      convert:true
      headers
         Content-Type:application/x-www-form-urlencoded
         Authorization:x:@.auth
      payload
         Body:x:@.content
         From:x:@.arguments/*/from
         To:x:@.arguments/*/to

   // Making sure above invocation succeeded.
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda

         // Something went wrong while invoking Twilio
         lambda2hyper:x:@http.post/*/content
         log.error:Something went wrong while invoking Twilio
            response:x:@lambda2hyper
         throw:Something went wrong as we invoked Twilio, check your log for details

   // Logging success.
   log.info:Successfully sent message using Twilio
      body:x:@.arguments/*/body
      to:x:@.arguments/*/to
      from:x:@.arguments/*/from
      twilio_account_id:x:@.arguments/*/twilio_account_id
