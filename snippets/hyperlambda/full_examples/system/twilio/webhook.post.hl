/*
 * Creates a dynamic Hyperlambda endpoint to act as a universal Twilio webhook callback handler for incoming messages.
 *
 * This endpoint is intended to be configured as the webhook URL inside your Twilio account,
 * allowing it to receive inbound messages over any Twilio-supported channel including:
 * WhatsApp, SMS, Facebook Messenger, and more.
 *
 * ### Workflow:
 *
 * 1. **Retrieves Message Payload from Twilio**:
 *    - Extracts the actual message content from the `Body` argument.
 *    - Retrieves the sender's number (`From`) and the recipient's number (`To`).
 *
 * 2. **Logs Incoming Message**:
 *    - Logs the basic details of the message including sender, recipient, and message body
 *      to help with debugging and traceability.
 *
 * 3. **Dynamically Constructs and Executes Configured Callback**:
 *    - Constructs a `lambda` object `.exe` that will execute a callback slot defined in system configuration.
 *    - Uses the configuration setting: `magic:twilio:callback` to determine which slot to invoke.
 *    - This makes it easy to change callback behavior without modifying this webhook endpoint.
 *    - Ensures that this configuration is mandatory.
 *
 * 4. **Passes Parameters to Callback**:
 *    - Passes the parsed `body`, `from`, `to`, and `twilio_account_id` (derived from Twilioâ€™s `AccountSid`) into the callback slot.
 *
 * 5. **Executes Callback**:
 *    - Dynamically invokes the configured slot using `invoke:x:@.exe`.
 *    - If the callback produces a return value, the webhook returns it back to Twilio.
 *
 * ### Use Cases:
 * - Allows AI or automation platforms to respond to inbound messages on WhatsApp/SMS via custom logic.
 * - Enables modular webhook logic by externalizing behavior to slots.
 * - Can integrate with slots like `magic.twilio.ai.chat`, `magic.twilio.send-message`, or any custom automation flow.
 */

.arguments

// Retrieving actual message.
.body
set-value:x:@.body
   get-value:x:@.arguments/*/Body

// Retrieving from value.
.from
set-value:x:@.from
   get-value:x:@.arguments/*/From

// Retrieving to value.
.to
set-value:x:@.to
   get-value:x:@.arguments/*/To

// Basic logging.
log.info:Webhook invoked from Twilio
   body:x:@.body
   from:x:@.from
   to:x:@.to

// Lambda object to execute with callback.
.exe

   // Signaling configured slot.
   signal:foo
   
   // Returning whatever callback returned as result of webhook invocation
   return:x:-

/*
 * Dynamically creating our lambda [.exe] callback by parametrising with [.arguments]
 * given to endpoint by Twilio. This makes sure we're using the dynamically configured
 * slot the backend has been configured to use as your webhook is being invoked.
 */
set-value:x:@.exe/*/signal
   config.get:"magic:twilio:callback"

/*
 * Sanity checking configuration.
 *
 * This will throw an exception if you have not specified a callback
 * slot in your configuration.
 */
validators.mandatory:x:@.exe/*/signal

// Further parametrising slot invocation with arguments given by Twilio.
unwrap:x:+/*/*
add:x:@.exe/0
   .
      body:x:@.body
      from:x:@.from
      to:x:@.to
      twilio_account_id:x:@.arguments/*/AccountSid

// Executing callback.
invoke:x:@.exe

// Returning result of invocation to caller, if caller provided a return value.
if
   not-null:x:@invoke
   .lambda

      // Returning result of invocation to Twilio.
      return:x:@invoke
