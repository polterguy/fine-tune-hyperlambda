
/*
 * Create an HTTP endpoint that serves a CSS stylesheet file to the client for styling search widgets.
 *
 * This endpoint attempts to load a CSS file with the name provided in the [file] argument.
 * The search path follows this priority:
 *
 * 1. First it looks in `/etc/system/openai/css/search/` for a custom stylesheet.
 * 2. If not found, it looks in `/system/openai/front.files/search/` for a default system stylesheet.
 * 3. If the file is missing in both locations, it throws a public 400 error.
 *
 * Once a valid file is located, it:
 * - Loads the content of the file.
 * - Sets the `Content-Type` header to `text/css`.
 * - Returns the CSS content as the response body.
 *
 * This endpoint allows dynamic retrieval and override of CSS files, supporting flexible and customizable
 * visual styling for embedded AI search interfaces.
 */
.arguments
   file:string

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file

// Checking if custom CSS file exists.
.result
strings.concat
   .:/etc/system/openai/css/search/
   get-value:x:@.arguments/*/file
   .:.css
if
   io.file.exists:x:@strings.concat
   .lambda

      // Custom template file.
      set-value:x:@.result
         io.file.load:x:@strings.concat

else

   //Checking if system CSS file exists.
   strings.concat
      .:/system/openai/front.files/search/
      get-value:x:@.arguments/*/file
      .:.css
   if
      io.file.exists:x:@strings.concat
      .lambda

         // Generic template file.
         set-value:x:@.result
            io.file.load:x:@strings.concat

   else

      // Oops, no such file exists.
      throw:No such AI chat template file exists
         public:bool:true
         status:400

// Making sure we return correct Content-Type to caller, and applying some cache.
response.headers.set
   Content-Type:text/css

// Returning result to caller.
return:x:@.result
