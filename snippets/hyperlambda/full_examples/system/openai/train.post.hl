/*
 * Uploads custom training data to OpenAI and initiates a fine-tuning process for a specified model.
 * This endpoint handles everything from formatting the training data to monitoring training progress
 * and updating backend references once training is complete.
 *
 * INPUT PARAMETERS:
 * - [type:string]: Identifier used to categorize training data and final model association.
 * - [model:string]: Base OpenAI model to fine-tune (e.g. "gpt-3.5-turbo").
 * - [epochs:int]: Optional. Number of training epochs.
 * - [batch_size:int]: Optional. Batch size for training.
 * - [learning_rate_multiplier:decimal]: Optional. Learning rate modifier.
 * - [prompt_loss_weight:decimal]: Optional. Relative importance of prompt loss.
 *
 * PROCESS OVERVIEW:
 *
 * 1. **Authorization and Validation**:
 *    Ensures only root users can invoke the endpoint and requires [type] and [model] as mandatory inputs.
 *
 * 2. **Data Preparation**:
 *    - Connects to the database to fetch training snippets from `ml_training_snippets` that match the given type and haven't been pushed.
 *    - Each record is transformed into OpenAI-compatible format: `"prompt ->"` and `"completion END"`.
 *    - The transformed snippets are stored in a [.snippets] buffer.
 *
 * 3. **JSONL File Creation**:
 *    - Converts [.snippets] to JSON, then transforms it into a JSONL string by replacing delimiters and trimming brackets.
 *    - Constructs a unique filename using a generated GUID.
 *
 * 4. **File Upload to OpenAI**:
 *    - Uploads the training file as multipart/form-data to OpenAI's `/v1/files` endpoint with the purpose `fine-tune`.
 *    - If upload fails (non-2xx status), logs the error and returns an HTTP 500 response.
 *
 * 5. **Fine-Tune Job Creation**:
 *    - Extracts the file ID from the upload response.
 *    - Constructs the payload for the fine-tuning job and conditionally includes any optional tuning parameters provided.
 *    - Sends a POST request to `/v1/fine-tunes` to start training.
 *    - On failure, logs the issue and responds with HTTP 500.
 *
 * 6. **Task Creation for Monitoring**:
 *    - Creates a repeating background task (every 30 seconds) to monitor training progress.
 *    - Uses the OpenAI API to fetch the current training status.
 *    - On "succeeded":
 *        - Updates the `ml_types` table with the new fine-tuned model ID.
 *        - Marks related training snippets as pushed.
 *        - Deletes the monitoring task.
 *        - Notifies root users via WebSocket signal.
 *    - On "failed":
 *        - Logs the failure, deletes the task, and sends an error signal to root users.
 *    - On API failure:
 *        - Logs the error for debugging purposes.
 *
 * 7. **Final Response**:
 *    Returns `{result: success}` immediately after scheduling the training and monitoring task,
 *    even though the full training may take several minutes to complete in the background.
 *
 * This endpoint is designed for automation pipelines where users want to feed fresh data into OpenAI,
 * fine-tune a model, and ensure that results are automatically integrated into the system when complete.
 */

.arguments
   type:string
   model:string
   epochs:int
   batch_size:int
   learning_rate_multiplier:decimal
   prompt_loss_weight:decimal

// Making sure user has access to invoked endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/model

// Connecting to database.
data.connect:[generic|magic]

   // Selecting all snippets that have not been pushed of specified type.
   data.read
      table:ml_training_snippets
      columns
         prompt
         completion
      where
         and
            type.eq:x:@.arguments/*/type
            pushed.eq:int:0
      limit:-1

   // Buffer containing all snippets we're about to send to OpenAI API.
   .snippets

   // Looping through each result from above and creating training data.
   for-each:x:@data.read/*

      // Buffer for prompt and completion.
      .prompt
      .completion

      // Getting data into correct format.
      set-value:x:@.prompt
         strings.concat
            get-value:x:@.dp/#/*/prompt
            .:" ->"
      set-value:x:@.completion
         strings.concat
            get-value:x:@.dp/#/*/completion
            .:" END"

      // Adding currently iterated snippet to above buffer.
      unwrap:x:+/*/*/*
      add:x:@.snippets
         .
            .
               prompt:x:@.prompt
               completion:x:@.completion

   // Creating our Bearer token by reading our OpenAI configuration settings.
   .token
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         config.get:"magic:openai:key"

   // File data buffer containing JSONL content.
   .file-data

   // Converting [.snippets] to JSON, for then to convert manually to JSONL.
   lambda2json:x:@.snippets/*
   set-value:x:@.file-data
      strings.replace:x:@lambda2json
         .:"},{"
         .:"}\n{"
   set-value:x:@.file-data
      strings.substring:x:@.file-data
         .:1
         math.subtract
            strings.length:x:@.file-data
            .:int:2

   // Creating a unique training data filename.
   .filename
   set-value:x:@.filename
      strings.concat
         .:"attachment; name=file; filename=\"training-file-"
         guid.new
         .:".jsonl"
         .:"\""
   
   // Uploading file to OpenAI.
   http.post:"https://api.openai.com/v1/files"
      headers
         Authorization:x:@.token
         Content-Type:multipart/form-data
      payload
         entity:application/jsonl
            headers
               Content-Disposition:x:@.filename
            content:x:@.file-data
         entity:text/plain
            headers
               Content-Disposition:"form-data; name=purpose"
            content:fine-tune
      convert:true

   // Sanity checking above invocation.
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda

         // Oops, error - Logging error and returning status 500 to caller.
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            error:x:@lambda2hyper
         response.status.set:500
         return
            message:Something went wrong as we invoked OpenAI API

   /*
    * Using uploaded file to create a fine tuning.
    * First getting the ID of the file as stored in OpenAI's servers.
    */
   .id
   set-value:x:@.id
      get-value:x:@http.post/*/content/*/id

   // Parametrising training session invocation.
   if
      and
         exists:x:@.arguments/*/epochs
         not-null:x:@.arguments/*/epochs
      .lambda
         add:x:@data.connect/*/http.post/[1,2]/*/payload
            get-nodes:x:@.arguments/*/epochs
   if
      and
         exists:x:@.arguments/*/batch_size
         not-null:x:@.arguments/*/batch_size
      .lambda
         add:x:@data.connect/*/http.post/[1,2]/*/payload
            get-nodes:x:@.arguments/*/batch_size
   if
      and
         exists:x:@.arguments/*/learning_rate_multiplier
         not-null:x:@.arguments/*/learning_rate_multiplier
      .lambda
         add:x:@data.connect/*/http.post/[1,2]/*/payload
            get-nodes:x:@.arguments/*/learning_rate_multiplier
   if
      and
         exists:x:@.arguments/*/prompt_loss_weight
         not-null:x:@.arguments/*/prompt_loss_weight
      .lambda
         add:x:@data.connect/*/http.post/[1,2]/*/payload
            get-nodes:x:@.arguments/*/prompt_loss_weight

   // Starting training session.
   http.post:"https://api.openai.com/v1/fine-tunes"
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         training_file:x:@.id
         model:x:@.arguments/*/model
         suffix:x:@.arguments/*/type
      convert:true

   // Sanity checking above invocation.
   if
      neq:x:@http.post
         .:int:200
      .lambda

         // Oops, error - Logging error and returning status 500 to caller.
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            error:x:@lambda2hyper
         response.status.set:500
         return
            message:Something went wrong as we started our training session

   // Logging that we've started training.
   get-count:x:@data.read/*
   log.info:Successfully started training of OpenAI model
      type:x:@.arguments/*/type
      snippets:x:@get-count
      base-model:x:@.arguments/*/model
      new-model-id:x:@http.post/*/content/*/id

   /*
    * Creating a task that repeats once every 30 seconds until training is completed,
    * for then to make sure we associate the new model with the specified type.
    */
   .task-id
   set-value:x:@.task-id
      strings.concat
         .:magic.openai.training-session.
         guid.new
   unwrap:x:./*/tasks.create/*/*/.task-id
   unwrap:x:./*/tasks.create/*/*/.model-id
   unwrap:x:./*/tasks.create/*/*/.type
   tasks.create:x:@.task-id
      repeats:30.seconds
      .lambda

         // Forward evaluated above.
         .task-id:x:@.lambda/@.task-id
         .model-id:x:@http.post/*/content/*/id
         .type:x:@.arguments/*/type

         // Checking model status using OpenAI API, making sure we parametrise Authorization header with token
         .token
         set-value:x:@.token
            strings.concat
               .:"Bearer "
               config.get:"magic:openai:key"
         strings.concat
            .:"https://api.openai.com/v1/fine-tunes/"
            get-value:x:@.model-id
         http.get:x:@strings.concat
            headers
               Authorization:x:@.token
            convert:true
         if
            and
               mte:x:@http.get
                  .:int:200
               lt:x:@http.get
                  .:int:300
            .lambda

               // Checking if job succeeded.
               if
                  eq:x:@http.get/*/content/*/status
                     .:succeeded
                  .lambda

                     // Training is done, updating type declaration with new model.
                     log.info:Training of OpenAI model completed successfully

                     // Updating type.
                     data.connect:[generic|magic]
                     
                        // Updating type to use newly created model.
                        data.update
                           table:ml_types
                           values
                              model:x:@http.get/*/content/*/fine_tuned_model
                           where
                              and
                                 type.eq:x:@.type

                        // Marking all snippets we've sent as "pushed".
                        data.update
                           table:ml_training_snippets
                           values
                              pushed:int:1
                           where
                              and
                                 type.eq:x:@.type

                     // Deleting task
                     tasks.delete:x:@.task-id

                     // Signaling root users in the frontend
                     sockets.signal:magic.backend.message
                        roles:root
                        args
                           message:Training of your OpenAI model succeeded!
                           type:success


               else-if
                  eq:x:@http.get/*/content/*/status
                     .:failed
                  .lambda

                     // Training is done, and it FAILED!
                     log.error:Training of OpenAI model FAILED!!

                     // Deleting task
                     tasks.delete:x:@.task-id

                     // Signaling root users in the frontend
                     sockets.signal:magic.backend.message
                        roles:root
                        args
                           message:Training of your OpenAI model FAILED!
                           type:error

         else

            // Invocation failed
            lambda2hyper:x:@http.get
            log.error:Retrieving training session status from OpenAI failed
               result:x:@lambda2hyper


// Returning success to caller.
return
   result:success
