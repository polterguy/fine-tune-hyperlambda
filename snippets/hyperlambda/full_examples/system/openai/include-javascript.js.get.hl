
/*
 * Create an HTTP endpoint that dynamically generates and returns a customizable JavaScript file
 * for embedding a ChatGPT-powered chatbot widget on external websites.
 *
 * This endpoint supports a wide array of visual, behavioral, and functional customization options,
 * including feature toggles such as [chat], [search], [markdown], [speech], [stream], and button control.
 *
 * - Uses dynamic template substitution on predefined placeholders like [[type]], [[greeting]], [[recaptcha]], etc.
 * - Falls back to default or system JavaScript files if a custom file is not provided.
 * - Optionally caches the fully generated JavaScript file based on a hash of the argument signature to improve performance.
 * - Retrieves additional model-specific metadata such as the greeting message from the database to embed within the script.
 * - Enforces [type] as a mandatory parameter to ensure chatbot identity.
 *
 * The endpoint supports additional embedding parameters such as [header], [button], [parent_node],
 * and [extra] to be passed into each chatbot session.
 *
 * Returns a full JavaScript payload with correct `Content-Type`, ready to be used via `<script>` tag embedding.
 */
.arguments
   css:string
   file:string
   type:string
   header:string
   button:string
   render_button:bool
   parent_node:string
   search:bool
   chat:bool
   markdown:bool
   speech:bool
   rtl:bool
   submit_button:bool
   stream:bool

   // Extra parameter passed into each invocation towards chat endpoint
   extra:string

   // Not used, but allows embedders to do a hard refresh to reload JavaScript.
   v:string

   // Legacy parameter, ignore, no longer in use.
   gpt:bool

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type

// Applying default values if not specified.
validators.default:x:@.arguments
   render_button:bool:true
   file:default
   css:default
   chat:bool:true
   search:bool:false
   markdown:bool:true
   speech:bool:false
   rtl:bool:false
   submit_button:bool:false
   stream:bool:false
   parent_node:
   extra:

// Checking if we've got a cached JavaScript file.
strings.join:x:@.arguments/*
   .:,
.cached-file
set-value:x:-
   strings.concat
      .:/etc/cache/
      crypto.hash.sha256:x:@strings.join
      .:.js
if
   io.file.exists:x:@.cached-file
   .lambda

      // Cached transformed file exists, returning it immediately, applying correct HTTP headers.
      response.headers.set
         Content-Type:application/javascript; charset=utf-8
      io.stream.open-file:x:@.cached-file
      return:x:-

// Checking if custom JavaScript file exists.
.result
strings.concat
   .:/etc/system/openai/
   get-value:x:@.arguments/*/file
   .:.js
if
   io.file.exists:x:@strings.concat
   .lambda

      // We need to load a custom JavaScript file.
      set-value:x:@.result
         io.file.load:x:@strings.concat

else

   // We need to load a system JavaScript file, making sure it exists.
   strings.concat
      .:/system/openai/front.files/chat/
      get-value:x:@.arguments/*/file
      .:.js
   if
      io.file.exists:x:@strings.concat
      .lambda

         // System JavaScript file exists, making sure we use it.
         set-value:x:@.result
            io.file.load:x:@strings.concat

   else

      // Oops, no such file exists.
      throw:No such AI chat template file exists
         public:bool:true
         status:400

// Figuring out API URL.
.scheme
request.host
if
   strings.contains:x:@request.host
      .:localhost
   .lambda
      set-value:x:@.scheme
         .:"http"
else
   set-value:x:@.scheme
      .:"https"
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.scheme
      .:"://"
      request.host

// Retrieving reCAPTCHA key.
.captcha
set-value:x:@.captcha
   config.get:"magic:auth:recaptcha:key"
      .:

// Dynamically exchanging template fields in JavaScript file.
set-value:x:@.result
   strings.replace:x:@.result
      .:[[url]]
      get-value:x:@.url
set-value:x:@.result
   strings.replace:x:@.result
      .:[[ainiro_watermark]]
      get-first-value
         config.get:"magic:watermark"
         .:"Powered by <a href=\"https://ainiro.io\" target=\"_blank\">AINIRO.IO</a>"
set-value:x:@.result
   strings.replace:x:@.result
      .:[[ainiro_version]]
      version
set-value:x:@.result
   strings.replace:x:@.result
      .:[[recaptcha]]
      get-value:x:@.captcha
set-value:x:@.result
   strings.replace:x:@.result
      .:[[type]]
      get-value:x:@.arguments/*/type
set-value:x:@.result
   strings.replace:x:@.result
      .:[[parent_node]]
      get-value:x:@.arguments/*/parent_node
set-value:x:@.result
   strings.replace:x:@.result
      .:[[header]]
      get-first-value
         get-value:x:@.arguments/*/header
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[button]]
      get-first-value
         get-value:x:@.arguments/*/button
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[css]]
      get-first-value
         get-value:x:@.arguments/*/css
         get-value:x:@.arguments/*/file
         .:
set-value:x:@.result
   strings.replace:x:@.result
      .:[[extra]]
      get-value:x:@.arguments/*/extra
set-value:x:@.result
   strings.replace:x:@.result
      .:[[render_button]]
      get-value:x:@.arguments/*/render_button
if:x:@.arguments/*/search
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[search]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[search]]
         .:false
if:x:@.arguments/*/chat
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[chat]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[chat]]
         .:false
if:x:@.arguments/*/markdown
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[markdown]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[markdown]]
         .:false
if:x:@.arguments/*/speech
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[speech]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[speech]]
         .:false
if:x:@.arguments/*/rtl
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[rtl]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[rtl]]
         .:false
if:x:@.arguments/*/submit_button
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[submit_button]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[submit_button]]
         .:false
if:x:@.arguments/*/stream
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[stream]]
         .:true
else
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[stream]]
         .:false

// Fetching greeting for model.
data.connect:[generic|magic]
   data.read
      table:ml_types
      columns
         greeting
      where
         and
            type.eq:x:@.arguments/*/type
   .greeting
   set-value:x:@.greeting
      get-first-value
         get-value:x:@data.read/*/*/greeting
         .:Hello there! How may I help you today?
   set-value:x:@.greeting
      strings.replace:x:@.greeting
         .:"\n"
         .:"\\n"
   set-value:x:@.greeting
      strings.replace:x:@.greeting
         .:"\r"
         .:"\\r"
   set-value:x:@.greeting
      strings.replace:x:@.greeting
         .:"'"
         .:"\\'"
   set-value:x:@.result
      strings.replace:x:@.result
         .:[[greeting]]
         get-value:x:@.greeting

// Checking if cache folder exists.
if
   not
      io.folder.exists:/etc/cache/
   .lambda
   
      // Creating cache folder.
      io.folder.create:/etc/cache/

// Making sure we cache file.
io.file.save:x:@.cached-file
   get-value:x:@.result

// Making sure we return correct Content-Type to caller, and applying some cache.
response.headers.set
   Content-Type:application/javascript; charset=utf-8

// Returning result to caller.
return:x:@.result
