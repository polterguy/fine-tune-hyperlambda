/*
 * Performs a semantic vector similarity search against ML training snippets for a specific [type].
 *
 * This slot is used to retrieve training data that is semantically similar to a provided [prompt]
 * using vector embeddings and SQLite's VSS (vector similarity search) extension. It returns the top
 * matches ranked by relevance (dot product) and includes metadata like their URI and prompt content.
 *
 * ### Parameters:
 * - **[type]**: *(required)* The training snippet category to search within.
 * - **[prompt]**: *(required)* The user-provided semantic query or natural language search text.
 * - **[threshold]**: *(required)* Cosine distance threshold for vector similarity (e.g., 0.7).
 * - **[max]**: *(required)* Maximum number of matching results to return.
 * - **[vector_model]**: *(required)* OpenAI embeddings model used for encoding the prompt (e.g. `text-embedding-3-small`).
 * - **[prefix-url]**: *(optional)* If specified, restricts search to snippets where the URI starts with this prefix.
 *
 * ### Behavior:
 * 1. **Validates input parameters** to ensure required fields are present and properly formatted.
 * 2. **Retrieves an embedding vector** for the given [prompt] by calling OpenAI's embedding API using the provided [vector_model].
 * 3. **Handles OpenAI errors** gracefully by logging and returning a meaningful error message and status code if the API call fails.
 * 4. **Constructs an SQL query** using SQLite's `vss_search()` syntax, applying:
 *    - Semantic vector matching using dot product.
 *    - Threshold filtering using cosine distance.
 *    - Optional URI prefix filtering if [prefix-url] is provided.
 *    - Grouping by URI to avoid duplicate results.
 *    - Ordering by similarity (distance).
 * 5. **Limits results** to the specified [max] number of matches.
 * 6. **Returns matched snippets** (each with `prompt`, `uri`, and `distance`) along with `db_time` to indicate execution duration.
 *
 * ### Output:
 * ```json
 * {
 *   "snippets": [
 *     {
 *       "prompt": "...",
 *       "uri": "...",
 *       "distance": 0.12
 *     },
 *     ...
 *   ],
 *   "db_time": "00.153"
 * }
 * ```
 *
 * ### Use Cases:
 * - Finding semantically similar training examples.
 * - Enabling AI assistants to look up relevant facts using semantic search.
 * - Implementing context-aware chat retrieval pipelines.
 *
 * ### Notes:
 * - Uses SQLite VSS, which requires prior vectorization of the training data.
 * - Compatible with OpenAI's latest embedding models like `text-embedding-3-small`.
 * - Optimized for speed with support for `limit` and `prefix-url` filtering.
 */


slots.create:magic.ai.search

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/type
   validators.mandatory:x:@.arguments/*/prompt
   validators.mandatory:x:@.arguments/*/threshold
   validators.mandatory:x:@.arguments/*/max
   validators.mandatory:x:@.arguments/*/vector_model
   validators.string:x:@.arguments/*/prompt
      min:1

   // Converting threshold in case we're given the wrong type.
   set-value:x:@.arguments/*/threshold
      convert:x:@.arguments/*/threshold
         type:double

   // Retrieving OpenAI token required to invoke ChatGPT.
   .token
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         config.get:"magic:openai:key"

   // Retrieving embedding for prompt.
   http.post:"https://api.openai.com/v1/embeddings"
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         input:x:@.arguments/*/prompt
         model:x:@.arguments/*/vector_model
      convert:true

   // Sanity checking above invocation.
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda

         // Oops, error - Logging error and returning OpenAI's HTTP status code to caller.
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            message:x:@http.post/*/content/*/error/*/message
            error:x:@lambda2hyper
         throw:x:@http.post/*/content/*/error/*/message
            public:bool:true
            status:x:@http.post

   // Connects to database to retrieve matching snippets
   data.connect:[generic|magic]

      // Checking if we've got a prefix-url argument, defaulting to NOT NULL.
      .prefix-url:"ts.uri is not null and "
      if
         and
            exists:x:@.arguments/*/prefix-url
            not-null:x:@.arguments/*/prefix-url
            neq:x:@.arguments/*/prefix-url
               .:
         .lambda

            // Restricting search according to [prefix-url] argument.
            set-value:x:@.prefix-url
               .:"ts.uri like @prefix and "
            add:x:@data.connect/*/data.select
               .
                  @prefix:x:@.arguments/*/prefix-url

      // Fetching relevant snippets, making sure we profile the time it takes.
      .begin
      set-value:x:@.begin
         date.now

      // Converting embeddings to a byte array of floats, since this is how we store embeddings in SQLite.
      floatArray2bytes:x:@http.post/*/content/*/data/0/*/embedding/*
      math.subtract
         .:float:1
         get-value:x:@.arguments/*/threshold
      strings.concat
         .:@"
select vss.distance, ts.prompt, ts.uri
	from vss_ml_training_snippets as vss
    	inner join ml_training_snippets ts on ts.id = vss.rowid
   where
      ts.type = @type and "
         get-value:x:@.prefix-url
         .:@"vss_search(vss.embedding_vss, @embedding) and
       vss.distance < @threshold
group by ts.uri
order by vss.distance
limit @limit"
      data.select:x:@strings.concat
         @embedding:x:@floatArray2bytes
         @type:x:@.arguments/*/type
         @threshold:x:@math.subtract
         @limit:x:@.arguments/*/max

      // Measuring how much time we spent looping through snippets.
      .end
      set-value:x:@.end
         date.now
      .time
      set-value:x:@.time
         math.subtract
            get-value:x:@.end
            get-value:x:@.begin
      set-value:x:@.time
         time.format:x:@.time
            format:"ss\\.fff"

      // Making sure we don't return [snippets] unless we actually have snippets.
      if
         not-exists:x:@data.select/*
         .lambda
            remove-nodes:x:../*/return/*/snippets
      else
         add:x:@data.connect/*/return/*/snippets
            get-nodes:x:@data.select/*

      // Returning result to caller.
      unwrap:x:./*/return/*
      return
         db_time:x:@.time
         snippets
