/*
 * Intercepts incoming chat requests to prevent abuse by enforcing IP bans and request quotas per user.
 *
 * This dynamic slot is executed automatically by the AI chatbot platform before processing every incoming chat message.
 * It acts as a security gatekeeper by enforcing daily usage limits per user and permanently blocking abusive IP addresses
 * if those limits are exceeded or if abuse is detected.
 *
 * CONFIGURATION:
 * - [magic:openai:max-daily-requests]: Optional configuration key. If present, limits how many messages
 *   a single user ID may send within a 24-hour window.
 *
 * BEHAVIOR:
 *
 * 1. **Retrieve IP Address**:
 *    - Uses the [cf-connecting-ip] header to identify the user's original IP address.
 *    - Continues only if a valid IP address is present.
 *
 * 2. **Check If IP Is Already Blocked**:
 *    - Queries the [ml_blocked_ips] table to check if the IP is permanently blocked.
 *    - If blocked, logs the request headers for traceability and throws an HTTP 401 error to deny access.
 *
 * 3. **Enforce Daily Usage Quota**:
 *    - Checks if the [magic:openai:max-daily-requests] configuration is set.
 *    - If enabled:
 *       - Retrieves the max allowed requests per day.
 *       - Counts how many times the current [user_id] has sent requests in the past 24 hours.
 *       - If the user has exceeded their quota, sets a flag to block them.
 *
 * 4. **Block Offending User and IP**:
 *    - If abuse is detected or quota exceeded:
 *       - Permanently inserts the IP address and user ID into the [ml_blocked_ips] table.
 *       - Logs the incident, including request headers.
 *       - Throws a public HTTP 401 error with a clear message.
 *
 * SECURITY & ABUSE PREVENTION:
 * - This slot provides critical protection against spam, bot abuse, or accidental overuse of the chatbot interface.
 * - Ensures users can't circumvent limits by creating too many requests in a short period of time.
 * - Blocks both by user ID and IP address for maximum coverage.
 *
 * NOTES:
 * - Logs are generated for each abuse case, providing full visibility into blocked attempts.
 * - Admins can unblock users by removing them manually from the [ml_blocked_ips] table.
 * - For non-SaaS installations, IP-based blocking is especially helpful in the absence of per-user tracking.
 */

slots.create:magic.openai.chat-interceptor.avoid-abuse

   // Getting original IP address of request.
   request.headers.get:cf-connecting-ip

   // Verifying we've actually got an IP address.
   if
      and
         not-null:x:@request.headers.get
         neq:x:@request.headers.get
            .:
      .lambda

         // Connecting to magic database.
         data.connect:magic

            // Checking if IP address has been blocked previously.
            data.read
               table:ml_blocked_ips
               where
                  and
                     ip_address.eq:x:@request.headers.get
            if
               exists:x:@data.read/*
               .lambda

                  // IP address has been blocked.
                  request.headers.list
                  add:x:./*/log.info
                     get-nodes:x:@request.headers.list/*
                  log.info:Potential abuse, user has been permanently blocked
                  throw:Sorry, you have been permanently blocked from accessing this AI chatbot because of abuse. Send an email to team@ainiro.io if you think this is not correct.
                     public:bool:true
                     status:int:401

            // True if we should block IP address.
            .block:bool:false

            // Checking if cloudlet is configured for maximum number of requests per day per user.
            config.get:"magic:openai:max-daily-requests"
            if
               and
                  not-null:x:@config.get
                  neq:x:@config.get
                     .:
               .lambda

                  // Cloudlet is configured to only answer the same user n times per day.
                  .no
                  set-value:x:@.no
                     convert:x:@config.get
                        type:int

                  // Counting questions user has asked today.
                  data.scalar:"select count(*) from ml_requests where user_id = @user and created >= date('now', '-1 day')"
                     @user:x:@.arguments/*/user_id

                  // Checking if user has exhausted his daily requests.
                  if
                     mt
                        convert:x:@data.scalar
                           type:int
                        get-value:x:@.no
                     .lambda

                        // Blocking user.
                        set-value:x:@.block
                           .:bool:true

            // Checking if we should block user.
            if:x:@.block

               // Blocking IP address.
               data.create
                  table:ml_blocked_ips
                  values
                     ip_address:x:@request.headers.get
                     user_id:x:@.arguments/*/user_id

               // Writing it into our log.
               add:x:./*/log.info
                  request.headers.list
               log.info:IP address was permanently blocked
               throw:Sorry, you have been permanently blocked from accessing this AI chatbot because of abuse. Send an email to team@ainiro.io if you think this is not correct.
                  public:bool:true
                  status:int:401

