/*
 * Sends a lead email containing the full chatbot session if SMTP settings are properly configured.
 *
 * This slot is designed to forward qualified chatbot conversations to a configured lead generation inbox.
 * It compiles all messages exchanged during the session and emails them in an HTML-formatted thread,
 * along with a contact prompt from the user. It also logs the submission and stores it in the [ml_requests] table.
 *
 * ARGUMENTS:
 * - [type:string] (required): The machine learning model type used in the conversation.
 * - [prompt:string] (required): The last prompt entered by the user, typically a contact or lead form message.
 * - [session:string] (required): Unique session ID for the conversation, used to fetch historical context.
 * - [user_id:string] (required): Identifier for the user initiating the request.
 * - [lead_email:string] (required): One or more comma-separated email addresses to send the lead to.
 * - [contact_us:string] (required): The message or response representing the final contact information or user intent.
 *
 * EXECUTION FLOW:
 *
 * 1. **Validation**:
 *    - Validates all required arguments including [lead_email] and [contact_us].
 *    - Verifies that SMTP settings are configured via [config.get:"magic:smtp:host"].
 *
 * 2. **Email Extraction**:
 *    - Attempts to extract a reply-to email address from the user's prompt using basic heuristics and email validation.
 *
 * 3. **Conversation History Compilation**:
 *    - Connects to the database and retrieves all [ml_requests] entries from the same session.
 *    - Assembles a threaded HTML conversation, with each prompt rendered as a bold block followed by its completion.
 *    - Appends the final contact message from the user as the conclusion to the conversation.
 *
 * 4. **Email Dispatch**:
 *    - Parses [lead_email] into a list of trimmed email addresses.
 *    - Sends an HTML email using [mail.smtp.send], setting the userâ€™s email (if detected) as [reply-to].
 *    - Subject line: "Chatbot lead".
 *
 * 5. **Audit Trail**:
 *    - Inserts the lead as a new row in [ml_requests] with [finish_reason] set to "lead".
 *    - Logs the fact that a lead was successfully submitted.
 *
 * 6. **Error Handling**:
 *    - If no SMTP settings are present or an exception occurs, logs a warning and returns `false`.
 *    - Fails gracefully while alerting the system administrator via logs.
 *
 * USAGE SCENARIOS:
 * - Website lead generation through AI chatbots.
 * - Contact capture and CRM integration workflows.
 * - Forwarding qualified user interest to a sales or support team.
 *
 * NOTE:
 * - This slot assumes the AI is embedded in a lead-generation or support workflow.
 * - Proper SMTP setup is required for this feature to function. If SMTP is not configured,
 *   the operation returns `false` without raising an exception.
 */

slots.create:magic.ai.send-lead-email

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/type
   validators.mandatory:x:@.arguments/*/prompt
   validators.mandatory:x:@.arguments/*/session
   validators.mandatory:x:@.arguments/*/user_id
   validators.mandatory:x:@.arguments/*/lead_email
   validators.mandatory:x:@.arguments/*/contact_us

   try

      // Verifying user has configured SMTP settings.
      config.get:"magic:smtp:host"
      if
         and
            not-null:x:@config.get
            neq:x:@config.get
               .:
         .lambda

            // Verifying that user provided a valid email address.
            .email
            strings.split:x:@.arguments/*/prompt
               .:@
            strings.split:x:@strings.split/0
               .:" "
            strings.split:x:@strings.split/@strings.split/1
               .:" "
            set-value:x:@.email
               strings.concat
                  get-value:x:@strings.split/@strings.split/0/-
                  .:@
                  get-value:x:@strings.split/0
            set-value:x:@.email
               strings.trim:x:@.email
                  .:".,-"
            validators.email:x:@.email

            /*
             * Connecting to database and reading all requests from current session
             * such that we can add them to lead generation email, allowing users to
             * continue conversation where chatbot left it.
             */
            .body:
            data.connect:[generic|magic]

               // Retrieving all requests belonging to session
               data.read
                  table:ml_requests
                  columns
                     prompt
                     completion
                  where
                     and
                        session.eq:x:@.arguments/*/session

               // Creating email.
               for-each:x:@data.read/*
                  set-value:x:@.body
                     strings.concat
                        get-value:x:@.body
                        .:"<strong>"
                        get-value:x:@.dp/#/*/prompt
                        .:"</strong>"
                        .:"<br>"
                        .:"<div>"
                        get-value:x:@.dp/#/*/completion
                        .:"</div>"
                        .:"<br>"

               // Adding last prompt.
               set-value:x:@.body
                  strings.concat
                     get-value:x:@.body
                     .:"<strong>"
                     get-value:x:@.arguments/*/prompt
                     .:"</strong>"
                     .:"<br>"
                     .:"<div>"
                     get-value:x:@.arguments/*/contact_us
                     .:"</div>"

               // Sending email.
               strings.split:x:@.arguments/*/lead_email
                  .:,
               for-each:x:@strings.split/*
                  strings.trim:x:@.dp/#
                     .:" "
                  unwrap:x:+/*/*/*
                  add:x:../**/mail.smtp.send/*/message/*/to
                     .
                        .
                           name:AINIRO Lead Inbox
                           email:x:@strings.trim

               // Storing response to ml_requests to keep history.
               data.create
                  table:ml_requests
                  values
                     type:x:@.arguments/*/type
                     prompt:x:@.arguments/*/prompt
                     completion:x:@.arguments/*/contact_us
                     finish_reason:lead
                     session:x:@.arguments/*/session
                     user_id:x:@.arguments/*/user_id

            // Sending email.
            unwrap:x:+/**/content
            mail.smtp.send
               message
                  to
                  reply-to
                     .
                        name:Lead
                        email:x:@.email
                  subject:Chatbot lead
                  entity:text/html
                     content:x:@.body

            // Logging the fact that a lead was generated.
            log.info:Lead was generated

            // Returning success to caller.
            return:bool:true

      else
      
         // No SMTP configuration found, returning false to caller.
         return:bool:false

   .catch

      // Oops ...
      log.error:SMTP settings not valid
         message:x:@.arguments/*/message
         extra:To use lead generation with AINIRO, please apply a valid SMTP configuration.

      // Returning failure to caller.
      return:bool:false
