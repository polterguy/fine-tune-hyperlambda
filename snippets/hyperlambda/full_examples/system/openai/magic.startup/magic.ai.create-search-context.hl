
/*
 * Searches DuckDuckGo using the specified [query], scrapes results,
 * and returns a Markdown context suitable for OpenAI prompting.
 *
 * This slot performs a full-text web search using DuckDuckGo and retrieves up to 5 results.
 * Each result is scraped for semantic snippets and converted into Markdown. It ensures
 * the total result does not exceed the specified [max_tokens] token limit using OpenAI's tokenizer.
 *
 * ---
 * ### Arguments:
 * - `query` (string, mandatory): The search query to submit to DuckDuckGo.
 * - `max_tokens` (int, mandatory): Maximum number of OpenAI tokens allowed in result (min 250, max 15,000).
 * - `session` (optional): A WebSocket session ID to emit progress events to a frontend user.
 *
 * ---
 * ### Output:
 * Returns a Markdown document containing structured context, including:
 * - A concatenated list of prompts and completions extracted from the top search result.
 * - A reference URL as a Markdown link appended at the end, provided it does not exceed token limit.
 *
 * ---
 * ### Use Case:
 * This slot can be used to construct grounding context for RAG workflows or
 * on-the-fly knowledge injection prior to querying LLMs.
 *
 * ---
 * ### Example:
 * Input:
 * ```json
 * {
 *   "query": "What is the latest on GPT-5?",
 *   "max_tokens": 1500
 * }
 * ```
 * Output:
 * Returns a markdown snippet like:
 * ```
 * ### What is GPT-5?
 * GPT-5 is the next generation language model by OpenAI ...
 *
 * Source: [OpenAI Blog](https://openai.com/blog/gpt-5)
 * ```
 */
slots.create:magic.ai.create-search-context

   // Sanity checking invocation
   validators.mandatory:x:@.arguments/*/query
   validators.mandatory:x:@.arguments/*/max_tokens
   validators.integer:x:@.arguments/*/max_tokens
      min:250
      max:15000

   // Invoking slot responsible for searching DuckDuckGo and scraping results.
   add:x:./*/signal
      get-nodes:x:@.arguments/*/session
   unwrap:x:+/*/query
   signal:magic.http.duckduckgo-and-scrape
      query:x:@.arguments/*/query
      max:int:5

   // Buffer used to hold resulting Markdown.
   .markdown:

   // Buffer used to hold how many tokens we've seen so far.
   .tokens:int:0

   // Looping as long as we have not used up tokens.
   .cont:bool:true
   while:x:@.cont

      // Iterating through each [snippet] in first result returned from above invocation.
      for-each:x:@signal/0/*/snippets/*
      
         // Concatenating existing Markdown with currently iterated snippet
         strings.concat
            get-value:x:@.markdown
            get-value:x:@.dp/#/*/prompt
            .:"\r\n"
            get-value:x:@.dp/#/*/completion
            .:"\r\n"
            .:"\r\n"

         // Verifying we don't ovwerflow [max_tokens] by adding currently iterated snippet.
         if
            lt
               openai.tokenize:x:@strings.concat
               get-value:x:@.arguments/*/max_tokens
            .lambda

               // We still have more room for context.
               set-value:x:@.markdown
                  get-value:x:@strings.concat

      // Used to hold reference Markdown URL for where information was fetched.
      .reference
      set-value:x:@.reference
         strings.concat
            .:"Source: "
            .:[
            get-value:x:@signal/0/*/title
            .:](
            get-value:x:@signal/0/*/url
            .:)

      // Verifying we don't overflow [max_tokens] by adding source of information.
      strings.concat
         get-value:x:@.markdown
         get-value:x:@.reference
         .:"\r\n"
         .:"\r\n"
      if
         lt
            openai.tokenize:x:@strings.concat
            get-value:x:@.arguments/*/max_tokens
         .lambda

            // Room for source of data.
            set-value:x:@.markdown
               get-value:x:@strings.concat

      // Removing top item from [signal] invocation.
      remove-nodes:x:@signal/0

      // Verifying we have more items.
      if
         not-exists:x:@signal/0
         .lambda

            // We used everything from above invocation to DuckDuckGo scraping slot.
            set-value:x:@.cont
               .:bool:false

   // Cleaning up Markdown.
   set-value:x:@.markdown
      strings.trim:x:@.markdown
         .:"\r\n \t"

   // Returning Markdown to caller.
   return:x:@.markdown
