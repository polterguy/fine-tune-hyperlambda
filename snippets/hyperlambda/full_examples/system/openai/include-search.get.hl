
/*
 * Create an HTTP endpoint that returns a JavaScript file for embedding a search interface
 * associated with a specific machine learning model.
 *
 * The script is a template located at `/system/openai/front.files/search/search.js`,
 * and the endpoint dynamically replaces placeholder fields in the script with values from the caller’s arguments.
 *
 * Placeholders that are substituted include:
 * - [[url]]           – Base API URL derived from the current request.
 * - [[recaptcha]]     – Server-configured reCAPTCHA key, if available.
 * - [[max]]           – Maximum number of results to return.
 * - [[placeholder]]   – Placeholder text for the search input field.
 * - [[button]]        – Label text for the search button.
 * - [[type]]          – The ML model type used for executing the search.
 * - [[css]]           – Custom CSS class or identifier for styling the widget.
 *
 * This endpoint ensures all required arguments are validated before substitution,
 * sets the correct `Content-Type` header for JavaScript, and serves the fully rendered script to the client.
 *
 * Intended for use when embedding a search-focused chatbot or knowledge retrieval interface on websites.
 */
.arguments
   placeholder:string
   button:string
   type:string
   css:string
   max:int

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/placeholder
validators.mandatory:x:@.arguments/*/button
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/css
validators.mandatory:x:@.arguments/*/max

// Figuring out API URL.
.scheme
request.host
if
   strings.contains:x:@request.host
      .:localhost
   .lambda
      set-value:x:@.scheme
         .:"http"
else
   set-value:x:@.scheme
      .:"https"
.url
set-value:x:@.url
   strings.concat
      get-value:x:@.scheme
      .:"://"
      request.host

// Loading search JavaScript file.
.result
set-value:x:@.result
   io.file.load:/system/openai/front.files/search/search.js

// Retrieving reCAPTCHA key.
.captcha
set-value:x:@.captcha
   config.get:"magic:auth:recaptcha:key"
      .:

// Dynamically exchanging template fields in JavaScript file.
set-value:x:@.result
   strings.replace:x:@.result
      .:[[url]]
      get-value:x:@.url
set-value:x:@.result
   strings.replace:x:@.result
      .:[[recaptcha]]
      get-value:x:@.captcha
set-value:x:@.result
   strings.replace:x:@.result
      .:[[max]]
      get-value:x:@.arguments/*/max
set-value:x:@.result
   strings.replace:x:@.result
      .:[[placeholder]]
      get-value:x:@.arguments/*/placeholder
set-value:x:@.result
   strings.replace:x:@.result
      .:[[button]]
      get-value:x:@.arguments/*/button
set-value:x:@.result
   strings.replace:x:@.result
      .:[[type]]
      get-value:x:@.arguments/*/type
set-value:x:@.result
   strings.replace:x:@.result
      .:[[css]]
      get-first-value
         get-value:x:@.arguments/*/css
         get-value:x:@.arguments/*/file
         .:

// Making sure we return correct Content-Type to caller, and applying some cache.
response.headers.set
   Content-Type:application/javascript

// Returning result to caller.
return:x:@.result
