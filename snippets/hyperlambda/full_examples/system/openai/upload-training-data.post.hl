

/*
 * Uploads a file and extracts training data for a specific machine learning model type.
 *
 * This endpoint supports a wide range of file types—including CSV, XML, JSON, YAML, PDF, TXT, and ZIP—and converts their content
 * into prompt-completion training snippets. It supports advanced options like massaging completions using OpenAI,
 * auto-generating prompts, and managing file overwrites and formatting modes.
 *
 * INPUT PARAMETERS:
 * - [file:*]: Multipart file to be uploaded. Required subfields: [name] and [stream].
 * - [type:string]: Logical category used to associate the training data with a specific model type.
 * - [prompt:string] (optional): Name of the column or field to use as prompt (defaults to "prompt").
 * - [completion:string] (optional): Name of the column or field to use as completion (defaults to "completion").
 * - [massage:string] (optional): Identifier for post-processing logic (e.g., summarization or chunking).
 * - [massagePrompt:string] (optional): System prompt used to reformat content using the OpenAI API.
 * - [preservePages:bool]: Relevant for PDFs—if true, keeps each page as its own snippet (default: false).
 * - [overwrite:bool]: If false, prevents overwriting existing files (default: false).
 * - [forceAsText:bool]: If true, forces `.csv` or `.txt` files to be processed as plain text (default: false).
 *
 * SUPPORTED FILE FORMATS & HANDLING:
 * 1. **ZIP**: Signals [magic.ai.import-zip-file] for custom decompression and processing.
 * 2. **CSV**: Converts using [csv2lambda] unless [forceAsText] is true.
 * 3. **XML**: Converts using [xml2lambda] and maps configured prompt and completion fields.
 * 4. **JSON/YAML**: Converts using [json2lambda] or [yaml2lambda] respectively.
 * 5. **PDF**:
 *    - Stored under `/etc/system/openai/pdf/`.
 *    - Extracts text using [pdf2text].
 *    - Supports optional page-wise snippet creation ([preservePages]) or transformation via [magic.ai.massage].
 *    - If [massagePrompt] is provided, uses OpenAI's Chat API to auto-generate improved prompts for each snippet.
 *    - Adds downloadable hyperlink references for traceability.
 * 6. **TXT/MD**:
 *    - Stored as plain text and processed using [magic.ai.massage].
 *    - Supports [massagePrompt]-based prompt enhancement like the PDF handler.
 *
 * POST-PROCESSING LOGIC:
 * - Snippets are optionally enhanced using the [massagePrompt] via OpenAI’s `chat/completions` endpoint.
 * - Ensures valid snippet format by checking for presence of both prompt and completion fields.
 * - Standardizes snippet field names by mapping them to [prompt] and [completion].
 *
 * FINAL STORAGE:
 * - Adds training snippets to the system by invoking [magic.ai.import-snippets].
 * - Adds file-specific metadata like [uri] and [filename] for traceability.
 * - Returns a success status along with the count of successfully created training snippets.
 *
 * This endpoint is designed for maximum flexibility, allowing teams to upload large or complex datasets in various formats
 * and convert them into structured training material for fine-tuning OpenAI models.
 */
```
.arguments
   file:*
   type:string
   prompt:string
   completion:string
   massage:string
   massagePrompt:string
   preservePages:bool
   overwrite:bool
   forceAsText:bool

.accept:multipart/form-data

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/file
validators.mandatory:x:@.arguments/*/file/*/name
validators.mandatory:x:@.arguments/*/file/*/stream
validators.default:x:@.arguments
   preservePages:bool:false
   overwrite:bool:false

// Defaulting prompt and completion arguments to prompt and completion.
if
   not-exists:x:@.arguments/*/prompt
   .lambda
      add:x:@.arguments
         .
            prompt:prompt
if
   not-exists:x:@.arguments/*/completion
   .lambda
      add:x:@.arguments
         .
            completion:completion

// Buffer for file data.
.file-data

// Figuring out type of file.
strings.split:x:@.arguments/*/file/*/name
   .:.
strings.to-lower:x:@strings.split/0/-

// If true, file will be imported as text even if the file is a CSV file.
.text:bool:false

// Converting file to lambda object according to its extension.
switch:x:@strings.to-lower

   // ZIP file.
   case:zip

      // Invoking slot responsible for unzipping and importing ZIP file, and returning result of invocation.
      add:x:./*/signal
         get-nodes:x:@.arguments/*
      signal:magic.ai.import-zip-file
      return:x:-/*

   // CSV file type.
   case:csv

      // Checking if caller wants to force file as text.
      if
         eq:x:@.arguments/*/forceAsText
            .:bool:true
         .lambda
            set-value:x:@.text
               .:bool:true

      else

         // Reading file data from stream.
         io.stream.read:x:@.arguments/*/file/*/stream

         // Parsing CSV from stream's content.
         add:x:@.file-data
            csv2lambda:x:@io.stream.read

   // XML file type.
   case:xml

      // Reading file data from stream.
      io.stream.read:x:@.arguments/*/file/*/stream

      // Parsing XML from stream's content.
      xml2lambda:x:@io.stream.read
      for-each:x:@xml2lambda/*/*
         unwrap:x:./*/add/*/*/*
         set-name:x:./*/add/*/*/*/prompt
            get-value:x:@.arguments/*/prompt
         set-name:x:./*/add/*/*/*/completion
            get-value:x:@.arguments/*/completion
         add:x:@.file-data
            .
               .
                  prompt:x:@.dp/#/*/{@.arguments/*/prompt}/*/\#text
                  completion:x:@.dp/#/*/{@.arguments/*/completion}/*/\#text

   // JSON file type.
   case:json

      // Reading file data from stream.
      io.stream.read:x:@.arguments/*/file/*/stream

      // Parsing JSON from stream's content
      add:x:@.file-data
         json2lambda:x:@io.stream.read

   // YAML file type.
   case:yaml

      // Reading file data from stream.
      io.stream.read:x:@.arguments/*/file/*/stream

      // Parsing YAML from stream's content.
      add:x:@.file-data
         yaml2lambda:x:@io.stream.read

   // PDF file type.
   case:pdf

      // Creating our filename.
      .filename
      set-value:x:@.filename
         get-value:x:@.arguments/*/file/*/name
      .filepath
      set-value:x:@.filepath
         strings.concat
            .:/etc/system/openai/pdf/
            get-value:x:@.filename

      /*
       * Checking if file exists from before, and if it does, we throw an exception unless
       * caller provided [overwrite] argument as true.
       */
      if
         and
            eq:x:@.arguments/*/overwrite
               .:bool:false
            io.file.exists:x:@.filepath
         .lambda

            // Oops, file already exists!
            throw:File already exists
               status:int:400
               public:bool:true

      // Saving file.
      io.stream.save-file:x:@.filepath
         get-value:x:@.arguments/*/file/*/stream

      // Converting PDF file to snippet(s).
      .tmp-snippets
      pdf2text:x:@.filepath
         preserve-pages:x:@.arguments/*/preservePages

      // Checking if caller wants to preserve pages as is.
      if
         eq:x:@.arguments/*/preservePages
            .:bool:true
         .lambda

            // Use to track page number.
            .no:int:1

            // Caller wants to preserve pages as is.
            for-each:x:@pdf2text/*

               // Creating temporary prompt.
               .prompt
               set-value:x:@.prompt
                  strings.concat
                     get-value:x:@.arguments/*/file/*/name
                     .:" - Page "
                     get-value:x:@.no
               unwrap:x:+/*/*/*
               add:x:@.tmp-snippets
                  .
                     .
                        prompt:x:@.prompt
                        completion:x:@.dp/#
               math.increment:x:@.no

      else

         // Caller does not want to preserve pages.
         unwrap:x:+/*
         signal:magic.ai.massage
            content:x:@pdf2text
            massage:x:@.arguments/*/massage
            prompt:x:@.arguments/*/file/*/name
            type:x:@.arguments/*/type
         add:x:@.tmp-snippets
            get-nodes:x:@signal/*

      // Creating our Hyperlink URI to allow for downloading the PDF file.
      .uri
      set-value:x:@.uri
         strings.concat
            request.scheme
            .:"://"
            request.host
            .:"/magic/system/openai/download-pdf?file="
            strings.url-encode:x:@.filename

      // Checking if caller wants to massage file.
      if
         and
            not-null:x:@.arguments/*/massagePrompt
            neq:x:@.arguments/*/massagePrompt
               .:
         .lambda

            // Retrieving token.
            .token
            set-value:x:@.token
               strings.concat
                  .:"Bearer "
                  config.get:"magic:openai:key"

            // Looping through all training snippets created as we invoked our massage slot.
            for-each:x:@.tmp-snippets/*

               // Structuring TXT content by invoking OpenAI to create a perfect RAG/VSS one liner to improve RAG quality.
               http.post:"https://api.openai.com/v1/chat/completions"
                  convert:bool:true
                  headers
                     Authorization:x:@.token
                     Content-Type:application/json
                     Accept:text/event-stream
                  payload
                     model:gpt-3.5-turbo
                     max_tokens:int:1000
                     temperature:decimal:0.3
                     messages
                        .
                           role:system
                           content:x:@.arguments/*/massagePrompt
                        .
                           role:user
                           content:x:@.dp/#/*/completion

               // Sanity checking above invocation.
               if
                  not
                     and
                        mte:x:@http.post
                           .:int:200
                        lt:x:@http.post
                           .:int:300
                  .lambda

                     // Oops, error - Logging error and returning status 500 to caller.
                     lambda2hyper:x:@http.post
                     log.error:Something went wrong while invoking OpenAI
                        message:x:@http.post/*/content/*/error/*/message
                        status:x:@http.post
                        error:x:@lambda2hyper

               else

                  // Updating our [.prompt].
                  set-value:x:@.dp/#/*/prompt
                     get-value:x:@http.post/*/content/*/choices/0/*/message/*/content

      /*
       * Creating training snippets from PDF file's content.
       *
       * Notice, this might produce one training snippet or multiple training
       * snippets, depending upon the size of the PDF document.
       */
      unwrap:x:+/*/*
      add:x:@.tmp-snippets/*
         .
            uri:x:@.uri
            filename:x:@.filepath
      add:x:@.file-data
         get-nodes:x:@.tmp-snippets/*

   // TXT file type.
   case:md
   case:txt

      // Making sure we import file as text.
      set-value:x:@.text
         .:bool:true

if
   eq:x:@.text
      .:bool:true
   .lambda

      // Figuring out filename.
      .filename
      set-value:x:@.filename
         get-value:x:@.arguments/*/file/*/name
      .filepath
      set-value:x:@.filepath
         strings.concat
            .:/etc/system/openai/pdf/
            get-value:x:@.filename

      // Saving file.
      io.stream.save-file:x:@.filepath
         get-value:x:@.arguments/*/file/*/stream

      // Loading content of text file.
      io.file.load:x:@.filepath

      // Creating our Hyperlink URI to allow for downloading the text file.
      .uri
      set-value:x:@.uri
         strings.concat
            request.scheme
            .:"://"
            request.host
            .:"/magic/system/openai/download-txt?file="
            strings.url-encode:x:@.filename

      // Massaging or chopping up file into chunks of training snippets, not exceeding max_context_tokens.
      unwrap:x:+/*
      signal:magic.ai.massage
         content:x:@io.file.load
         prompt:x:@.arguments/*/file/*/name
         type:x:@.arguments/*/type

      // Creating our Hyperlink URI to allow for downloading the PDF file.
      .uri
      set-value:x:@.uri
         strings.concat
            request.scheme
            .:"://"
            request.host
            .:"/magic/system/openai/download-txt?file="
            strings.url-encode:x:@.filename

      // Checking if caller wants to massage file.
      if
         and
            not-null:x:@.arguments/*/massagePrompt
            neq:x:@.arguments/*/massagePrompt
               .:
         .lambda

            // Retrieving token.
            .token
            set-value:x:@.token
               strings.concat
                  .:"Bearer "
                  config.get:"magic:openai:key"

            // Looping through all training snippets created as we invoked our massage slot.
            for-each:x:@signal/*

               // Structuring TXT content by invoking OpenAI to create a perfect RAG/VSS one liner to improve RAG quality.
               http.post:"https://api.openai.com/v1/chat/completions"
                  convert:bool:true
                  headers
                     Authorization:x:@.token
                     Content-Type:application/json
                     Accept:text/event-stream
                  payload
                     model:gpt-3.5-turbo
                     max_tokens:int:1000
                     temperature:decimal:0.3
                     messages
                        .
                           role:system
                           content:x:@.arguments/*/massagePrompt
                        .
                           role:user
                           content:x:@.dp/#/*/completion

               // Sanity checking above invocation.
               if
                  not
                     and
                        mte:x:@http.post
                           .:int:200
                        lt:x:@http.post
                           .:int:300
                  .lambda

                     // Oops, error - Logging error and returning status 500 to caller.
                     lambda2hyper:x:@http.post
                     log.error:Something went wrong while invoking OpenAI
                        message:x:@http.post/*/content/*/error/*/message
                        status:x:@http.post
                        error:x:@lambda2hyper

               else

                  // Updating our [.prompt].
                  set-value:x:@.dp/#/*/prompt
                     get-value:x:@http.post/*/content/*/choices/0/*/message/*/content

      /*
       * Creating training snippets from text file's content.
       *
       * Notice, this might produce one training snippet or multiple training
       * snippets, depending upon the size of the PDF document.
       */
      unwrap:x:+/*/*
      add:x:@signal/*
         .
            uri:x:@.uri
            filename:x:@.filepath
      add:x:@.file-data
         get-nodes:x:@signal/*

// Sanity checking file.
if
   or
      not-exists:x:@.file-data/0/*/{@.arguments/*/prompt}
      not-exists:x:@.file-data/0/*/{@.arguments/*/completion}
   .lambda

      // Returning error to caller.
      response.status.set:400
      return
         message:"Your file needs to have at the very least prompt and completion fields, or you need to correctly apply the right fields to use as substitutes"

// Making sure we get name of prompt and completion correctly applied.
for-each:x:@.file-data/*
   set-name:x:@.dp/#/*/{@.arguments/*/prompt}
      .:prompt
   set-name:x:@.dp/#/*/{@.arguments/*/completion}
      .:completion

// Invoking slot that does the heavy work.
add:x:+/+
   get-nodes:x:@.arguments/*/type
add:x:+/*/snippets
   get-nodes:x:@.file-data/*
signal:magic.ai.import-snippets
   snippets

// Returning success to caller.
get-count:x:@.file-data/*
unwrap:x:+/*
return
   result:success
   count:x:@get-count
