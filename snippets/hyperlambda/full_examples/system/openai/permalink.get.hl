
/*
 * Generates a permanent URL (permalink) for the current chat conversation session.
 *
 * This endpoint is used to preserve and share the content of a chat session in a readable and searchable format.
 * It stores the conversation along with a generated SEO-friendly title and description,
 * ensuring consistent access via a unique URL that can be embedded or linked from anywhere.
 *
 * INPUT PARAMETERS:
 * - [session:string]: The WebSocket session ID used to reference the in-memory chat conversation.
 *
 * EXECUTION FLOW:
 *
 * 1. **Authorization & Validation**:
 *    - Verifies the user is authenticated using [auth.ticket.verify].
 *    - Ensures the required [session] argument is provided using [validators.mandatory].
 *
 * 2. **Session Retrieval from Cache**:
 *    - Attempts to retrieve the conversation messages from the cache using the provided [session] ID.
 *    - If the cache has expired or is empty, throws a 500 public error indicating session data is no longer available.
 *
 * 3. **Check for Existing Permalink**:
 *    - Queries the database (`ml_permalinks` table) to check if a permalink already exists for the exact same chat content.
 *    - If found, returns the existing [id] as the permalink URL to avoid duplicate storage.
 *
 * 4. **OpenAI Integration (Title & Description Generation)**:
 *    - Uses OpenAI’s `chat/completions` endpoint (model: `o3-mini`) to:
 *        - Generate a concise, SEO-optimized **title** based on the chat content.
 *        - Generate a short, SEO-friendly **description** suitable for use in HTML `<meta>` tags.
 *    - Trims and sanitizes the AI-generated outputs to remove extraneous characters like quotes or line breaks.
 *    - If any OpenAI call fails, logs the error and throws an exception to halt the process.
 *
 * 5. **Persisting the Permalink**:
 *    - Generates a 20-character random string to serve as a unique permalink ID.
 *    - Stores the conversation messages, generated title, and description into the `ml_permalinks` table.
 *
 * 6. **Response**:
 *    - Returns the newly created or previously found permalink ID as a response, which can be used to construct a full public URL.
 *
 * This endpoint allows users to capture the outcome of an AI interaction in a format that can be
 * shared externally, indexed by search engines, or stored for future reference—ideal for knowledge base generation,
 * documentation workflows, or collaborative Q&A use cases.
 */

.arguments
   session:string

// Making sure user has access to invoked endpoint.
auth.ticket.verify

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/session

// Retrieving session items.
cache.get:x:@.arguments/*/session

// Checking that cache didn't expire.
if
   or
      null:x:@cache.get
      eq:x:@cache.get
         .:
   .lambda

      // Cache expired!
      throw:Cache expired, items no longer available
         status:int:500
         public:bool:true

// Creating a unique URL.
crypto.random
   min:20
   max:20

// Storing items in database.
data.connect:[generic|magic]

   // Verifying we didn't already create a permalink for this previously.
   data.select:select id from ml_permalinks where messages = @messages limit 1
      @messages:x:@cache.get
   if
      exists:x:@data.select/*
      .lambda

         // Permalink exists from before.
         yield
            url:x:@data.select/*/*/id

   // Creating a title for the article by asking OpenAI to summarize conversation.
   .token
   set-value:x:@.token
      strings.concat
         .:"Bearer "
         get-first-value
            get-value:x:@.arguments/*/api_key
            config.get:"magic:openai:key"
   http.post:"https://api.openai.com/v1/chat/completions"
      convert:bool:true
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         model:o3-mini
         max_completion_tokens:int:1000
         messages
            .
               role:system
               content:Create an SEO optimised summary of the following content intended to serve as a title
            .
               role:user
               content:x:@cache.get

   // Sanity checking above invocation.
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda

         // Oops, error - Logging error and throwing exception.
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            message:x:@http.post/*/content/*/error/*/message
            status:x:@http.post
            error:x:@lambda2hyper

   // Saving title temporary
   .title2
   set-value:x:@.title2
      get-first-value
         get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
         .:
   set-value:x:@.title2
      strings.trim:x:@.title2
         .:"\"\r\n\t "
   set-value:x:@.title2
      strings.replace:x:@.title2
         .:"\""
         .:"'"

   // Creating a description for the article by asking OpenAI to summarize conversation.
   http.post:"https://api.openai.com/v1/chat/completions"
      convert:bool:true
      headers
         Authorization:x:@.token
         Content-Type:application/json
      payload
         model:o3-mini
         max_completion_tokens:int:1000
         messages
            .
               role:system
               content:Create a short and SEO optimised one sentence description of the following content intended to serve as a description for an HTML page with its content
            .
               role:user
               content:x:@cache.get

   // Sanity checking above invocation.
   if
      not
         and
            mte:x:@http.post
               .:int:200
            lt:x:@http.post
               .:int:300
      .lambda

         // Oops, error - Logging error and returning HTTP status code to caller.
         lambda2hyper:x:@http.post
         log.error:Something went wrong while invoking OpenAI
            message:x:@http.post/*/content/*/error/*/message
            status:x:@http.post
            error:x:@lambda2hyper

   // Saving title temporary
   .description2
   set-value:x:@.description2
      get-first-value
         get-value:x:@http.post/*/content/*/choices/0/*/message/*/content
         .:
   set-value:x:@.description2
      strings.trim:x:@.description2
         .:"\"\r\n\t "
   set-value:x:@.description2
      strings.replace:x:@.description2
         .:"\""
         .:"'"

   // Inserting item.
   data.create
      table:ml_permalinks
      values
         id:x:@crypto.random
         messages:x:@cache.get
         title:x:@.title2
         description:x:@.description2

// Returning success to caller.
yield
   url:x:@crypto.random
