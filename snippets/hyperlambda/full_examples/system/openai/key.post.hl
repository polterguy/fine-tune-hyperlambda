/*
 * Updates the system configuration to set a new OpenAI API key.
 *
 * First, access is secured by requiring the user to have the 'root' role using [auth.ticket.verify].
 * Then the script validates the [key] argument to ensure it's a non-empty string of reasonable length (20â€“500 chars).
 *
 * The configuration file is loaded with [config.load], then transformed into a Hyperlambda node tree using [json2lambda].
 * Any existing [openai.key] entries under [magic] are removed to avoid duplicates or conflicts.
 *
 * The new API key is injected under the [magic.openai.key] path, replacing any previous value.
 * The updated configuration is then converted back to JSON using [lambda2json] and saved using [config.save].
 *
 * Finally, a success message is returned to the caller, confirming the new key was saved properly.
 */
.arguments
   key:string

// Making sure user has access to invoked endpoint.
auth.ticket.verify:root

// Sanity checking invocation
validators.mandatory:x:@.arguments/*/key
validators.string:x:@.arguments/*/key
   min:20
   max:500

// Loading configuration.
config.load
json2lambda:x:@config.load

// Removing existing API key.
remove-nodes:x:@json2lambda/*/magic/*/openai

// Adding specified key to configuration.
unwrap:x:+/*/*/*
add:x:@json2lambda/*/magic
   .
      openai
         key:x:@.arguments/*/key

// Transforming to JSON and saving configuration.
lambda2json:x:@json2lambda/*
config.save:x:@lambda2json

// Returning success to caller.
return
   result:success
