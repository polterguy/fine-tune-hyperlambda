
/*
 * HTTP endpoint allowing a user to submit a single answer to a questionnaire question.
 *
 * ### Parameters:
 * - **[type]** *(required)*: The machine learning type (model) this questionnaire belongs to.
 * - **[session]** *(required)*: Session ID for grouping answers under the same questionnaire session.
 * - **[user_id]** *(optional but used for deduplication)*: Unique identifier of the user submitting the answer.
 * - **[question]** *(required)*: The specific question being answered.
 * - **[answer]** *(required)*: The user's answer to the question.
 * - **[context]** *(optional)*: Integer flag indicating context relevance or group logic (can be used for filtering).
 * - **[recaptcha_response]** *(conditionally required)*: A reCAPTCHA token if the ML type is configured with a threshold.
 *
 * ### reCAPTCHA Flow:
 * - Checks if the specified [type] requires reCAPTCHA validation.
 * - If yes, verifies server-side reCAPTCHA config.
 * - Validates the [recaptcha_response] against the configured threshold using either:
 *    - External Google reCAPTCHA verification (preferred).
 *    - Internal fallback CAPTCHA verification using `magic.auth.captcha-verify`.
 *
 * ### Deduplication Logic:
 * - Deletes any previously submitted answer by the same user for the same question in the same type,
 *   ensuring one answer per user-question combination.
 *
 * ### Data Insertion:
 * - Inserts a new row into the `ml_requests` table to record the user's answer.
 * - Marks the record with:
 *    - `finish_reason = "questionnaire"`
 *    - `questionnaire = 1` to distinguish questionnaire answers from normal chat prompts.
 *
 * ### Use Cases:
 * - Used by embedded widgets or admin forms to collect structured questionnaire answers.
 * - Enables AI onboarding forms, contextual interview workflows, and knowledge profiling.
 *
 * ### Output:
 * - Always returns `{"result":"success"}` on valid submissions.
 *
 * ### Security:
 * - reCAPTCHA or custom CAPTCHA validation protects the endpoint from spam/bots.
 * - User identity and session grouping ensure clean, deduplicated datasets.
 */


.arguments
   type:string
   session:string
   user_id:string
   question:string
   answer:string
   context:int
   recaptcha_response:string

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/session
validators.mandatory:x:@.arguments/*/question
validators.mandatory:x:@.arguments/*/answer

// Opening up database connection.
data.connect:[generic|magic]

   // Reading reCAPTCHA value from type.
   data.read
      table:ml_types
      columns
         recaptcha
      where
         and
            type.eq:x:@.arguments/*/type

   // Checking if type is configured to demand reCAPTCHA validation.
   if
      and
         not-null:x:@data.read/*/*/recaptcha
         neq:x:@data.read/*/*/recaptcha
            .:
      .lambda

         // Type is configured with reCAPTCHA value.
         convert:x:@data.read/*/*/recaptcha
            type:decimal

         // Checking if reCAPTCHA value on type is not 0.
         if
            mt:x:@convert
               .:decimal:0
            .lambda

               // Retrieving reCAPTCHA values from configuration.
               .key
               set-value:x:@.key
                  config.get:"magic:auth:recaptcha:key"
               .secret
               set-value:x:@.secret
                  config.get:"magic:auth:recaptcha:secret"

               // Making sure reCAPTCHA is configured on the server level.
               if
                  and
                     not-null:x:@.key
                     neq:x:@.key
                        .:
                     not-null:x:@.secret
                     neq:x:@.secret
                        .:
                  .lambda

                     // Verifying reCAPTCHA argument is above threshold, valid, and exists.
                     validators.mandatory:x:@.arguments/*/recaptcha_response
                     validators.recaptcha:x:@.arguments/*/recaptcha_response
                        min:x:@convert
                        site-key:x:@.key
                        secret:x:@.secret

         else

            // Using built-in CAPTCHA.
            execute:magic.auth.captcha-verify
               token:x:@.arguments/*/recaptcha_response

   // Input is OK, now deleting similar questionnaire answer submitted previously, if any.
   data.delete
      table:ml_requests
      where
         and
            type.eq:x:@.arguments/*/type
            user_id.eq:x:@.arguments/*/user_id
            prompt.eq:x:@.arguments/*/question
            questionnaire.eq:int:1
            finish_reason.eq:questionnaire

   // Creating new answer.
   data.create
      table:ml_requests
      values
         type:x:@.arguments/*/type
         prompt:x:@.arguments/*/question
         completion:x:@.arguments/*/answer
         finish_reason:questionnaire
         questionnaire:int:1
         user_id:x:@.arguments/*/user_id
         session:x:@.arguments/*/session
         context:x:@.arguments/*/context

// Returning success to caller.
return
   result:success