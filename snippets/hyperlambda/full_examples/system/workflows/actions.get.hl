/*
 * Creates a secured endpoint that returns a list of all available workflow actions within the system.
 *
 * ### Purpose:
 * This endpoint enumerates all installed Hyperlambda-based workflow actions, collects metadata from them,
 * and returns a structured list of available actions including their filenames, display names, and optional metadata
 * such as descriptions and icons.
 *
 * ### Access Control:
 * - Restricted to users with `root` privileges to ensure only authorized administrators can enumerate backend workflows.
 *
 * ### Behavior:
 * 1. **Initial System and Custom Action Discovery**:
 *    - Uses `io.file.list-recursively` to collect all `.hl` files from:
 *      - System default directory: `/misc/workflows/actions/`
 *      - Custom override directory: `/etc/workflows/actions/` (if exists)
 *
 * 2. **Module-Level Discovery**:
 *    - Iterates through all subfolders under `/modules/` and checks for the existence of `workflows/actions/`.
 *    - If found, adds all `.hl` files within these module action directories to the result set.
 *
 * 3. **Filtering and Metadata Extraction**:
 *    - Iterates over all collected file paths and filters only those ending with `.hl`.
 *    - For each valid action file:
 *      - Loads its contents using `load-file`.
 *      - Parses the file using `hyper2lambda` with `comments:true` to extract metadata.
 *      - If the file includes a file-level comment (`..`), this is added to the `description` metadata.
 *      - If an `.icon` node is present in the Hyperlambda, it is included in the result.
 *      - Derives the action's name by stripping path and extension from the filename.
 *
 * 4. **Output Structure**:
 *    - Each returned action includes:
 *      - `name` – The human-readable action name derived from filename.
 *      - `filename` – Full path to the Hyperlambda file representing the action.
 *      - Optional metadata: `description` and `icon` (if provided within the file).
 *
 * ### Returns:
 * - A collection of action descriptors representing all discoverable workflow actions available in the system,
 *   with relevant metadata to support UI presentation or internal reference.
 */

.arguments

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Buffer for all actions in the system.
.result

// Retrieving all system actions.
add:x:@.result
   io.file.list-recursively:/misc/workflows/actions/

// Retrieving all custom actions.
if
   io.folder.exists:/etc/workflows/actions/
   .lambda
      add:x:@.result
         io.file.list-recursively:/etc/workflows/actions/

// Then iterating through each installed module, and retrieving all module actions.
io.folder.list:/modules/
for-each:x:@io.folder.list/*
   strings.concat
      get-value:x:@.dp/#
      .:workflows/actions/
   if
      io.folder.exists:x:@strings.concat
      .lambda

         // Module has custom actions.
         insert-before:x:@.result/0
            io.file.list-recursively:x:@strings.concat

// Filtering out everything not ending with '.hl'.
for-each:x:@.result/*
   if
      strings.ends-with:x:@.dp/#
         .:.hl
      .lambda

         // Loading file to add meta data.
         load-file:x:@.dp/#
         hyper2lambda:x:-
            comments:true
         if
            eq
               get-name:x:@hyper2lambda/0
               .:..
            .lambda
               unwrap:x:+/*/*
               add:x:@.lambda/@.lambda/0/-/*/*
                  .
                     description:x:@hyper2lambda/0

         // Decorating return value.
         unwrap:x:+/*/*
         add:x:@.lambda/0/-/*/*
            .
               icon:x:@hyper2lambda/*/.icon

         // Creating a name for action by using filename.
         strings.split:x:@.dp/#
            .:/
         strings.split:x:-/0/-
            .:.
         remove-nodes:x:@strings.split/0/-
         strings.join:x:@strings.split/0
            .:.

         // Returning result to caller.
         unwrap:x:+/*/*/*
         add:x:../*/return
            .
               .
                  name:x:@strings.join
                  filename:x:@.dp/#

// Returning result to caller.
return
