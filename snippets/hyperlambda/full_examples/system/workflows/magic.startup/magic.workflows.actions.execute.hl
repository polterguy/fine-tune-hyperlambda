/*
 * Defines a dynamic slot that executes a single workflow action and optionally provides detailed debugging information to root users.
 *
 * ### Purpose:
 * This slot is designed to invoke a workflow action represented by a Hyperlambda file and return the result. It also offers real-time
 * visibility for administrators by emitting socket signals before and after execution.
 *
 * ### Behavior:
 * 1. **Validation**:
 *    - Ensures that both the [name] (action name) and [filename] (Hyperlambda file path) arguments are provided.
 *
 * 2. **Debug Input Signal (Root Only)**:
 *    - If the caller is authenticated as a root user:
 *      - Emits a socket signal (`magic.workflows.action`) with the action type `action`.
 *      - Includes the input arguments passed to the workflow for transparency.
 *      - Captures the execution start time.
 *
 * 3. **Action Execution**:
 *    - Dynamically adds the provided [arguments] as input to the target file.
 *    - Executes the Hyperlambda file specified by [filename].
 *
 * 4. **Debug Output Signal (Root Only)**:
 *    - If the user is root:
 *      - Emits a socket signal (`magic.workflows.action`) with the action type `result`.
 *      - Includes the output of the action and the time elapsed in milliseconds.
 *
 * 5. **Result Handling**:
 *    - Decorates the output with the [name] of the action.
 *    - Merges the result of the executed file into the return structure.
 *    - Returns the composed result to the caller.
 *
 * 6. **Error Handling**:
 *    - If an exception is thrown during execution:
 *      - Sends a socket signal (`magic.workflows.action`) with type `error` and the error message (root users only).
 *      - Rethrows the exception with the original message, status, and visibility flags.
 *
 * ### Use Case:
 * Enables dynamic execution of reusable workflow actions with built-in tracing and diagnostics for root users,
 * ideal for both production and development observability.
 */

slots.create:magic.workflows.actions.execute

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/name
   validators.mandatory:x:@.arguments/*/filename

   /*
    * Checking if we're authenticated as root user, and if so,
    * publishing a socket message as "debug info" back to caller.
    */
   .time
   if
      auth.ticket.in-role:root
      .lambda

         // Publishing socket debug message to client.
         add:x:./*/sockets.signal/*/args/*/input
            get-nodes:x:@.arguments/*/arguments/*
         unwrap:x:+/**
         sockets.signal:magic.workflows.action
            roles:root
            args
               type:action
               name:x:@.arguments/*/name
               input
         set-value:x:@.time
            date.now

   // Making sure we're able to catch exceptions.
   try

      // Parametrising [execute-file].
      add:x:./*/execute-file
         get-nodes:x:@.arguments/*/arguments/*

      // Executing action.
      execute-file:x:@.arguments/*/filename

      /*
       * Checking if we're authenticated as root user, and if so,
       * publishing a socket message as "debug info" back to caller.
       */
      if
         auth.ticket.in-role:root
         .lambda

            // Publishing socket debug message to client.
            add:x:./*/sockets.signal/*/args/*/output
               get-nodes:x:@execute-file/*
            math.subtract
               date.now
               get-value:x:@.time
            unwrap:x:+/**
            sockets.signal:magic.workflows.action
               roles:root
               args
                  type:result
                  time:x:@math.subtract
                  output

      // Decorating [result] node.
      set-value:x:./*/return
         get-value:x:@.arguments/*/name
      add:x:./*/return
         get-nodes:x:@execute-file/*

      // Returning result of invocation to caller.
      return

   .catch

      /*
       * Checking if we're authenticated as root user, and if so,
       * publishing a socket message as "debug info" back to caller.
       */
      if
         auth.ticket.in-role:root
         .lambda

            // Publishing socket debug message to client.
            unwrap:x:+/**
            sockets.signal:magic.workflows.action
               roles:root
               args
                  type:error
                  message:x:@.arguments/*/message

      // Rethrowing exception
      throw:x:@.arguments/*/message
         status:x:@.arguments/*/status
         public:x:@.arguments/*/public
