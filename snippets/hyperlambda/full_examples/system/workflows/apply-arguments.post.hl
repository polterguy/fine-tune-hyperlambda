
/*
 * Creates an HTTP endpoint that updates a Hyperlambda code snippet by injecting arguments and a file-level description.
 *
 * ### Purpose:
 * This endpoint allows programmatic enhancement of a raw Hyperlambda file, enabling users to:
 * - Add or replace the `.arguments` section.
 * - Insert or update a file-level comment (`..`) as the description.
 * - Apply metadata indicating that the file is public (`.type:public`).
 *
 * ### Access Control:
 * - Only users with `root` privileges are authorized to invoke this endpoint.
 *
 * ### Workflow:
 * 1. **Conversion of Input**:
 *    - Converts the provided `hyperlambda` string into a structured lambda object using `hyper2lambda`.
 *    - Enables comment parsing to preserve or modify file-level comments.
 *
 * 2. **Cleanup**:
 *    - Removes any existing file-level comment (`..`) and `.arguments` section to ensure a clean overwrite.
 *    - Adds a temporary `.support` node at the end to avoid structural issues during node insertion.
 *
 * 3. **Argument Injection**:
 *    - If new arguments (`args`) are supplied, inserts them under a new `.arguments` node at the beginning.
 *    - If no arguments are given:
 *      - Adds an empty `.arguments` node after the description if present.
 *      - Otherwise, adds it as the first node in the file.
 *
 * 4. **Metadata**:
 *    - Inserts a `.type:public` node after the `.arguments` block to label the file as publicly accessible.
 *
 * 5. **Description Handling**:
 *    - If a `description` string is provided:
 *      - Normalizes line endings to `\r\n`.
 *      - Adds the content as a new file-level comment (`..`) at the top of the file.
 *
 * 6. **Finalization**:
 *    - Removes the temporary `.support` node.
 *    - Converts the modified lambda object back into Hyperlambda format using `lambda2hyper`.
 *
 * ### Returns:
 * - A `result` node containing the newly constructed Hyperlambda string.
 */


.arguments
   hyperlambda:string
   description:string
   args:*

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Converting input Hyperlambda to lambda object.
hyper2lambda:x:@.arguments/*/hyperlambda
   comments:true

// Removing old file comment description.
remove-nodes:x:@hyper2lambda/0/\..

// Removing old [.arguments] collection.
remove-nodes:x:@hyper2lambda/0/.arguments

// Creating supporting node at the end of lambda object.
add:x:@hyper2lambda
   .
      .support

// Checking if caller provided an [.arguments] collection for Hyperlambda.
if
   exists:x:@.arguments/*/args
   .lambda

      // Inserting arguments at top of lambda object.
      add:x:+/*/*
         get-nodes:x:@.arguments/*/args/*
      insert-before:x:@hyper2lambda/0
         .
            .arguments

else

   // Checking if we've got a file level comment.
   if
      eq
         get-name:x:@hyper2lambda/0
         .:..
      .lambda

         // We have a file level comment, hence applying [.arguments] node after it.
         insert-after:x:@hyper2lambda/0
            .
               .arguments

   else

      // We don't have a file level comment, applying [.arguments] as the first node in the file.
      insert-before:x:@hyper2lambda/0
         .
            .arguments

// Defaulting file [.type] to public.
insert-after:x:@hyper2lambda/*/.arguments
   .
      .type:public

// Checking if caller provided a [description] for Hyperlambda.
if
   and
      exists:x:@.arguments/*/description
      not-null:x:@.arguments/*/description
   .lambda

      // Normalising [description] CR/LF characters.
      strings.replace:x:@.arguments/*/description
         .:"\r\n"
         .:"\n"
      strings.replace:x:@strings.replace
         .:"\n"
         .:"\r\n"

      // Inserting file comment / description at top of lambda object.
      unwrap:x:+/*/*
      insert-before:x:@hyper2lambda/0
         .
            ..:x:@strings.replace

// Removing supporting node.
remove-nodes:x:@hyper2lambda/0/-/.support

// Converting lambda to Hyperlambda again.
lambda2hyper:x:@hyper2lambda/*
   comments:true

// Returning updated Hyperlambda to caller.
yield
   result:x:@lambda2hyper
