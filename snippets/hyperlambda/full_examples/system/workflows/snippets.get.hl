
/*
 * HTTP endpoint that returns all available workflow snippets to the caller.
 *
 * ## Overview
 * This endpoint aggregates all workflow snippets across the system, including:
 * - Core system snippets under `/misc/workflows/snippets/`.
 * - User-defined/custom snippets under `/etc/workflows/snippets/`.
 * - Snippets bundled inside installed modules under `/modules/*/workflows/snippets/`.
 *
 * ## Access Control
 * - Restricted to users with `root` access via `[auth.ticket.verify:root]`.
 *
 * ## Functionality
 * 1. **Scans the filesystem recursively** for `.hl` (Hyperlambda) files within the above folders.
 * 2. **Loads each `.hl` snippet** and transforms it to a lambda structure using `[hyper2lambda]`.
 *    - If the file starts with a file-level comment (`..`), it's interpreted as a `description` and extracted.
 *    - The raw Hyperlambda content is also attached to the return structure as `content`.
 * 3. **Generates a readable snippet name** from the filename, excluding the file extension.
 * 4. **Constructs a structured response** for each snippet, including:
 *    - `name`: A normalized identifier based on the file path.
 *    - `filename`: The full system path to the snippet.
 *    - `description` (optional): Extracted comment block describing the snippet.
 *    - `content`: The actual Hyperlambda string for the snippet (for preview or editor use).
 *
 * ## Output
 * - Returns a list of all discovered workflow snippets with metadata suitable for UI listing or dynamic loading.
 *
 * ## Example Use Case
 * - Backend for a visual workflow editor listing available reusable snippet templates.
 */

.arguments

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Buffer for all snippets in the system.
.result

// Retrieving all system snippets.
add:x:@.result
   io.file.list-recursively:/misc/workflows/snippets/

// Retrieving all custom snippets.
if
   io.folder.exists:/etc/workflows/snippets/
   .lambda
      add:x:@.result
         io.file.list-recursively:/etc/workflows/snippets/

// Then iterating through each installed module, and retrieving all module snippets.
io.folder.list:/modules/
for-each:x:@io.folder.list/*
   strings.concat
      get-value:x:@.dp/#
      .:workflows/snippets/
   if
      io.folder.exists:x:@strings.concat
      .lambda

         // Module has custom snippets.
         insert-before:x:@.result/0
            io.file.list-recursively:x:@strings.concat

// Filtering out everything not ending with '.hl'.
for-each:x:@.result/*
   if
      strings.ends-with:x:@.dp/#
         .:.hl
      .lambda

         // Loading file to add meta data.
         load-file:x:@.dp/#
         hyper2lambda:x:-
            comments:true
         if
            eq
               get-name:x:@hyper2lambda/0
               .:..
            .lambda
               unwrap:x:+/*/*
               add:x:@.lambda/@.lambda/0/-/*/*
                  .
                     description:x:@hyper2lambda/0
                     content:x:@load-file

         // Creating a name for snippet by using filename.
         strings.split:x:@.dp/#
            .:/
         strings.split:x:-/0/-
            .:.
         remove-nodes:x:@strings.split/0/-
         strings.join:x:@strings.split/0
            .:.

         // Returning result to caller.
         unwrap:x:+/*/*/*
         add:x:../*/return
            .
               .
                  name:x:@strings.join
                  filename:x:@.dp/#

// Returning result to caller.
return
