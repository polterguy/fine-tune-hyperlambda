/*
 * Creates an HTTP endpoint that returns Hyperlambda required to invoke an action or snippet file.
 *
 * ## Overview
 * This endpoint dynamically generates a ready-to-execute Hyperlambda block based on the given
 * action or snippet file and its expected arguments. It is capable of handling:
 * - Workflow action files stored under `/workflows/actions/` by wrapping them in an `execute` invocation.
 * - Plain Hyperlambda files (e.g. preconfigured code snippets) by returning them as-is.
 *
 * ## Input Arguments
 * - **[filename]** *(string)*: The path to the Hyperlambda file (either an action or snippet).
 * - **[args]** *(map)*: A dictionary of argument names and values to apply to the file invocation.
 *   - If the file is a workflow action, it requires an additional [action_name] key to name the invocation.
 *
 * ## Logic Breakdown
 * 1. Loads the Hyperlambda file using `[load-file]`.
 * 2. If the file is recognized as an action template (i.e. path contains `/workflows/actions/`):
 *    - It creates a wrapper using `execute:magic.workflows.actions.execute`, injecting [name], [filename], and [arguments].
 *    - File-level comment (`..`) is preserved and prepended to the generated Hyperlambda.
 *    - Argument types are auto-converted according to their type declarations in `.arguments`.
 *    - Supports complex argument types, including `hyperlambda`, which are converted to structured lambda.
 * 3. If the file is not an action, it is assumed to be a reusable snippet and returned as-is.
 *
 * ## Output
 * - Returns fully-assembled Hyperlambda ready to execute, optionally with inline comments and proper formatting.
 *
 * ## Use Case
 * This endpoint is primarily used by UI components such as visual workflow editors or API explorers
 * that let users preview or invoke Hyperlambda logic dynamically based on selected action templates or modules.
 */

.arguments
   filename:string
   args:*

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Loading action/snippet Hyperlambda file and transforming to lambda object.
load-file:x:@.arguments/*/filename

// Checking if this is a action template.
if
   strings.contains:x:@.arguments/*/filename
      .:/workflows/actions/
   .lambda

      /*
       * This is an action template type of snippet.
       * Parametrizing accordingly.
       */
      .action
      add:x:@.action
         hyper2lambda:x:@load-file
            comments:true

      // Creating our action invocation.
      .invocation
         execute:magic.workflows.actions.execute
            name
            filename
            arguments
      set-value:x:@.invocation/*/execute/*/name
         get-value:x:@.arguments/*/args/*/action_name
      remove-nodes:x:@.arguments/*/args/*/action_name
      set-value:x:@.invocation/*/execute/*/filename
         get-value:x:@.arguments/*/filename

      // Creating our action comment.
      if
         eq
            get-name:x:@.action/0
            .:..
         .lambda
            unwrap:x:+/*/*
            insert-before:x:@.invocation/0
               .
                  ..:x:@.action/0

      // Making sure we correctly convert arguments according to type declaration.
      for-each:x:@.arguments/*/args/**
         if
            strings.starts-with:x:@.dp/#
               .:":x:"
            .lambda
               strings.substring:x:@.dp/#
                  .:int:3
               set-x:x:@.dp/#
                  convert:x:@strings.substring
                     type:x
         else
            get-name:x:@.dp/#
            switch:x:@.action/*/.arguments/*/{@get-name}/*/type
               case:long
               case:decimal
               case:int
               case:float
               case:double
                  set-value:x:@.dp/#
                     convert:x:@.dp/#
                        type:x:@.action/*/.arguments/*/{@get-name}/*/type
               case:hyperlambda
                  add:x:@.dp/#
                     hyper2lambda:x:@.dp/#
                        comments:true
                  set-value:x:@.dp/#

      // Decorating action arguments according to [.arguments]/[args].
      add:x:@.invocation/*/execute/*/arguments
         get-nodes:x:@.arguments/*/args/*

      // Returning result to caller as Hyperlambda.
      lambda2hyper:x:@.invocation/*
         comments:true
      yield
         result:x:@lambda2hyper

else

   // This is a template snippet, returning as is.
   unwrap:x:+/*
   return
      result:x:@load-file
