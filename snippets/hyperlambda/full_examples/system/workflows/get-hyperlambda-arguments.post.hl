/*
 * Creates an HTTP endpoint that analyzes a Hyperlambda file or string to extract its accepted arguments.
 *
 * ## Overview
 * This endpoint returns the `.arguments` node of a Hyperlambda snippet or file, including argument names and types,
 * and optionally the file-level description if provided. It's especially useful for introspection in dynamic environments
 * like a workflow engine or an action designer.
 *
 * ## Input Arguments
 * - **[hyperlambda]** *(string)*: A raw Hyperlambda code block (optional if [path] is provided).
 * - **[path]** *(string)*: File path to the Hyperlambda file to load and analyze.
 *
 * ## Processing Logic
 * - If `path` is provided (and `hyperlambda` is not), the endpoint loads the file from disk.
 * - Parses the Hyperlambda code into an AST (`lambda`) format using `[hyper2lambda]`.
 * - Checks whether the file contains a `.arguments` node to determine if it's executable as a function.
 * - Removes framework-managed arguments (`_session`, `_user-id`, `_type`) to avoid clutter.
 * - Loops through the `.arguments` node (up to 100 items) and extracts:
 *   - Argument name
 *   - Argument type
 *   - Description (if present via file-level `..` comment)
 *
 * ## Return Value
 * - **[function]** *(bool)*: Whether the file has a `.arguments` collection (i.e., is a valid function).
 * - **[args]** *(collection)*: List of input arguments with name and type.
 * - **[description]** *(optional string)*: The file-level comment if available, used as human-readable description.
 *
 * ## Example Use Case
 * This is useful for form builders, action designers, or developer tools where you need to inspect and visualize
 * the expected parameters a Hyperlambda file supports.
 */

.arguments
   hyperlambda:string
   path:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Checking if caller provided a [path] argument instead of a [hyperlambda] argument.
if
   and
      not-exists:x:@.arguments/*/hyperlambda
      exists:x:@.arguments/*/path
      not-null:x:@.arguments/*/path
   .lambda

      // Loading file.
      load-file:x:@.arguments/*/path
      unwrap:x:+/*/*
      add:x:@.arguments
         .
            hyperlambda:x:@load-file

// Converting Hyperlambda to lambda.
hyper2lambda:x:@.arguments/*/hyperlambda
   comments:true

// Verifying that file is possible to invoke, as in the file has an [.arguments] collection.
if
   and
      exists:x:@.arguments/*/path
      exists:x:@hyper2lambda/*/.arguments
   .lambda

      // Signaling to frontend that file has an [.arguments] collection.
      add:x:../*/return-nodes
         .
            function:bool:true

      /*
       * Removing [session], [user-id] and [type], since these are
       * dynamically added to the function invocation by the framework.
       */
      if
         exists:x:@.arguments/*/path
         .lambda
            remove-nodes:x:@hyper2lambda/*/.arguments/*/_session
            remove-nodes:x:@hyper2lambda/*/.arguments/*/_user-id
            remove-nodes:x:@hyper2lambda/*/.arguments/*/_type

else

   // Signaling to frontend that file does not have an [.arguments] collection.
   add:x:../*/return-nodes
      .
         function:bool:false

/*
 * Iterating through each argument Hyperlambda can handle.
 *
 * Notice, we ONLY return the first 100 arguments to avoid context overflow.
 */
for-each:x:@hyper2lambda/*/.arguments/*/[0,100]
   if
      neq
         get-name:x:@.dp/#
         .:..
      .lambda

         // Checking if user provided a [path], at which point we return more data.
         if
            exists:x:@.arguments/*/path
            .lambda

               // User provided a [path].
               set-value:x:+/+/*/*/*/name
                  get-name:x:@.dp/#
               set-value:x:+/*/*/*/type
                  get-value:x:@.dp/#
               add:x:../*/return-nodes/*/args
                  .
                     .
                        name
                        type

               // Checking if we've got an argument description / comment.
               if
                  eq
                     get-name:x:@.dp/#/-
                     .:..
                  .lambda
                     unwrap:x:+/*/*
                     add:x:../*/return-nodes/*/args/0/-
                        .
                           description:x:@.dp/#/-

         else

            // User provided [hyperlambda] argument.
            set-name:x:+/+/*/*
               get-name:x:@.dp/#
            unwrap:x:+/*/*
            add:x:../*/return-nodes/*/args
               .
                  name:x:@.dp/#

// Fetching description if existing.
.desc
if
   eq
      get-name:x:@hyper2lambda/0
      .:..
   .lambda
      set-value:x:@.desc
         get-value:x:@hyper2lambda/0

// Returning arguments to caller, together with their type information.
unwrap:x:+/*
return-nodes
   args
   description:x:@.desc
