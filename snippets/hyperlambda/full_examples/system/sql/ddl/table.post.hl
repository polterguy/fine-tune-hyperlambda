
/*
 * Creates a new table in the specified database using [data.execute] to run a dynamic DDL SQL [create table] statement.
 *
 * - [databaseType] is required and must be one of: 'mysql', 'sqlite', 'pgsql', or 'mssql'.
 * - [connectionString] is the connection string for the target database.
 * - [databaseName] is the name of the database where the table should be created.
 * - [tableName] is the name of the table to create.
 * - [pkName], [pkType], [pkLength], and [pkDefault] specify the primary key details:
 *     - [pkType] must be either 'auto_increment' or 'varchar'.
 *     - [pkLength] sets the length for string-based keys.
 *     - [pkDefault] optionally defines a default value.
 *
 * The SQL is dynamically generated depending on the [databaseType], ensuring the appropriate syntax is used for different RDBMS systems.
 *
 * If [generate] is set to true, the slot returns the SQL DDL instead of executing it.
 * Otherwise, it connects to the database, executes the SQL, flushes the schema cache, and returns 'success'.
 */
.arguments
   databaseType:string
   connectionString:string
   databaseName:string
   tableName:string
   pkName:string
   pkType:string
   pkLength:int
   pkDefault:string
   generate:bool

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseName
validators.mandatory:x:@.arguments/*/tableName
validators.mandatory:x:@.arguments/*/pkName
validators.mandatory:x:@.arguments/*/pkType
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:sqlite
   .:pgsql
   .:mssql
validators.enum:x:@.arguments/*/pkType
   .:auto_increment
   .:varchar

// SQL that executes to modify DDL.
.sql

// Creating our correct SQL according to [databaseType].
switch:x:@.arguments/*/databaseType

   case:sqlite

      .type
      if
         eq:x:@.arguments/*/pkType
            .:auto_increment
         .lambda
            set-value:x:@.type
               strings.concat
                  .:integer not null primary key autoincrement
      else
         set-value:x:@.type
            strings.concat
               get-value:x:@.arguments/*/pkType
               .:(
               get-value:x:@.arguments/*/pkLength
               .:") not null primary key"
      set-value:x:@.sql
         strings.concat
            .:"create table "
            get-value:x:@.arguments/*/tableName
            .:"("
            get-value:x:@.arguments/*/pkName
            .:" "
            get-value:x:@.type
      if
         and
            exists:x:@.arguments/*/pkDefault
            neq:x:@.arguments/*/pkDefault
               .
            neq:x:@.arguments/*/pkDefault
               .:
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" default "
                  get-value:x:@.arguments/*/pkDefault
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:");"

   case:mysql

      .type
      if
         eq:x:@.arguments/*/pkType
            .:auto_increment
         .lambda
            set-value:x:@.type
               strings.concat
                  .:int not null auto_increment primary key
      else
         set-value:x:@.type
            strings.concat
               get-value:x:@.arguments/*/pkType
               .:(
               get-value:x:@.arguments/*/pkLength
               .:") not null primary key"
      set-value:x:@.sql
         strings.concat
            .:"create table "
            get-value:x:@.arguments/*/tableName
            .:"("
            get-value:x:@.arguments/*/pkName
            .:" "
            get-value:x:@.type
      if
         and
            exists:x:@.arguments/*/pkDefault
            neq:x:@.arguments/*/pkDefault
               .
            neq:x:@.arguments/*/pkDefault
               .:
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" default "
                  get-value:x:@.arguments/*/pkDefault
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:");"

   case:pgsql

      .type
      if
         eq:x:@.arguments/*/pkType
            .:auto_increment
         .lambda
            set-value:x:@.type
               strings.concat
                  get-value:x:@.arguments/*/pkName
                  .:" serial primary key"
      else
         set-value:x:@.type
            strings.concat
               get-value:x:@.arguments/*/pkName
               .:" "
               get-value:x:@.arguments/*/pkType
               .:(
               get-value:x:@.arguments/*/pkLength
               .:") primary key"
      set-value:x:@.sql
         strings.concat
            .:"create table "
            get-value:x:@.arguments/*/tableName
            .:"("
            get-value:x:@.type
      if
         and
            exists:x:@.arguments/*/pkDefault
            neq:x:@.arguments/*/pkDefault
               .
            neq:x:@.arguments/*/pkDefault
               .:
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" default "
                  get-value:x:@.arguments/*/pkDefault
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:");"

   case:mssql

      .type
      if
         eq:x:@.arguments/*/pkType
            .:auto_increment
         .lambda
            set-value:x:@.type
               strings.concat
                  get-value:x:@.arguments/*/pkName
                  .:" integer"
                  .:" not null identity(1,1) primary key"
      else
         set-value:x:@.type
            strings.concat
               get-value:x:@.arguments/*/pkName
               .:" "
               get-value:x:@.arguments/*/pkType
               .:(
               get-value:x:@.arguments/*/pkLength
               .:") not null primary key"
      set-value:x:@.sql
         strings.concat
            .:"create table "
            get-value:x:@.arguments/*/tableName
            .:"("
            get-value:x:@.type
      if
         and
            exists:x:@.arguments/*/pkDefault
            neq:x:@.arguments/*/pkDefault
               .
            neq:x:@.arguments/*/pkDefault
               .:
         .lambda
            set-value:x:@.sql
               strings.concat
                  get-value:x:@.sql
                  .:" default "
                  get-value:x:@.arguments/*/pkDefault
      set-value:x:@.sql
         strings.concat
            get-value:x:@.sql
            .:");"

// Checking if caller only wants to generate SQL statement.
if:x:@.arguments/*/generate
   unwrap:x:+/*
   return
      sql:x:@.sql

// Creating our database connection.
strings.concat
   .:[
   get-value:x:@.arguments/*/connectionString
   .:|
   get-value:x:@.arguments/*/databaseName
   .:]
data.connect:x:-
   database-type:x:@.arguments/*/databaseType
   data.execute:x:@.sql
      database-type:x:@.arguments/*/databaseType

// Flushing database cache.
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
cache.set:x:-

// Returning result to caller.
unwrap:x:+/*
return
   result:success
   sql:x:@.sql

