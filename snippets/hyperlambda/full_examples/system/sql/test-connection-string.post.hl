/*
 * Write an HTTP endpoint that tests the validity of a database connection string.
 *
 * - Accepts [databaseType] (must be one of: mysql, pgsql, mssql) and [connectionString].
 * - Ensures the [connectionString] includes the placeholder "{database}" for dynamic substitution.
 * - Substitutes the placeholder with a known system database name (e.g., "master" or "postgres") for testing.
 * - Attempts to connect and execute a basic query.
 * - Returns [result:success] if the connection and query succeed.
 * - Returns [result:failure] and the error message if the connection fails.
 */

.arguments
   databaseType:string
   connectionString:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/connectionString
validators.mandatory:x:@.arguments/*/databaseType
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:pgsql
   .:mssql

// Sanity checking that connection string contains {database} allowing for dynamic substitutions.
if
   not
      strings.contains:x:@.arguments/*/connectionString
         .:{database}
   .lambda

      // Oops!
      return
         result:failure
         message:Connection string does not contain {database}

// Doing the try catch thing, to return failure if connection string is invalid.
try
   switch:x:@.arguments/*/databaseType

      case:mssql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:master
         mssql.connect:x:@strings.replace
            mssql.select:select name from master.dbo.sysdatabases

      case:mysql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:information_schema
         mysql.connect:x:@strings.replace
            mysql.select:show databases

      case:pgsql
         strings.replace:x:@.arguments/*/connectionString
            .:{database}
            .:postgres
         pgsql.connect:x:@strings.replace
            pgsql.select:select datname from pg_database

   // Success, connetion string is valid.
   return
      result:success

.catch

   // Oops, failure ...
   unwrap:x:+/*
   return
      result:failure
      message:x:@.arguments/*/message
