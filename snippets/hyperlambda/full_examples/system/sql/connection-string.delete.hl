/*
 * Deletes a specified database connection string from the system configuration.
 *
 * ### Arguments:
 * - **[databaseType]** *(required)*: The database type, must be one of `mysql`, `pgsql`, or `mssql`.
 * - **[name]** *(required)*: The name of the connection string to delete.
 *
 * ### Authorization:
 * - Requires the user to be authenticated as `root`.
 *
 * ### Behavior:
 * - Validates input types and required fields.
 * - Loads the existing configuration using `config.load`.
 * - Converts the JSON config to lambda using `json2lambda`.
 * - Removes the connection string node using dynamic lambda pathing from:
 *   `magic:databases:{databaseType}:{name}`
 * - Converts the lambda object back to JSON and saves the updated config using `config.save`.
 *
 * ### Output:
 * - Always returns `{ "result": "success" }` if deletion completes without error.
 *
 * ### Use Case:
 * - Enables administrators to remove obsolete or unused database connections via API.
 * - Ensures safe, validated removal of deeply nested config nodes.
 */

.arguments
   databaseType:string
   name:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/databaseType
validators.mandatory:x:@.arguments/*/name
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:pgsql
   .:mssql


// Loading config file such that we can delete connection string from current configuration.
config.load
json2lambda:x:-

// Deleting actual connection string from section.
remove-nodes:x:@json2lambda/*/magic/*/databases/*/{@.arguments/*/databaseType}/*/{@.arguments/*/name}
lambda2json:x:@json2lambda/*
config.save:x:-

// Success, connetion string deleted.
return
   result:success
