
/*
 * This dynamic slot [magic.db.mysql.columns] returns standardized metadata for each column in a given MySQL table.
 *
 * 1. [.arguments]
 *    * Accepts the following parameters:
 *      - [connection-string]: Optional. If omitted, the slot defaults to [generic] connection.
 *      - [database]: Required. The target MySQL database name.
 *      - [table]: Required. The name of the table whose column structure you want to retrieve.
 *
 * 2. [validators.mandatory]
 *    * Ensures that [database] and [table] are specified.
 *
 * 3. [.connection]
 *    * Composes the full connection string from [connection-string] and [database], falling back to [generic] if not provided.
 *
 * 4. [mysql.connect]
 *    * Establishes a connection to the MySQL database using the assembled connection string.
 *
 * 5. [mysql.select:"describe `table`"]
 *    * Executes a DESCRIBE query to fetch column metadata such as type, nullability, default values, etc.
 *
 * 6. [for-each:x:@mysql.select/*]
 *    * Iterates over each column returned by the DESCRIBE query.
 *
 * 7. [.tmp]
 *    * Holds metadata for a single column including:
 *      - [name]: Name of the column.
 *      - [db]: The database type string (e.g., 'varchar(255)', 'tinyint(1)', etc.).
 *      - [nullable]: Boolean indicating if the column is nullable.
 *      - [primary]: Boolean indicating if the column is part of the primary key.
 *      - [automatic]: Boolean indicating if the column has a default or is auto-incremented.
 *
 * 8. [.type] and [switch]
 *    * Cleans and maps the [db] column type into a Hyperlambda type:
 *      - MySQL types are normalized by removing precision (e.g., 'varchar(255)' -> 'varchar').
 *      - Types are mapped into: [string], [long], [bool], [decimal], [date] based on matching cases.
 *
 * 9. [unwrap] and [add]
 *    * Composes the full column metadata structure for output by attaching the resolved [hl] Hyperlambda type.
 *
 * 10. [return-nodes]
 *     * Returns the complete list of structured column metadata to the caller.
 *
 * **Use cases:**
 * * Great for introspecting MySQL table schemas in dynamic environments.
 * * Useful in admin panels or automation tools to generate forms and APIs.
 * * Assists machine learning pipelines by exposing column structures for model input mapping.
 */
slots.create:magic.db.mysql.columns

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/database
   validators.mandatory:x:@.arguments/*/table

   // Opens up our connection
   .connection:[information_schema]
   if
      and
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .
         not
            eq
               get-value:x:@.arguments/*/connection-string
               .:
      .lambda
         set-value:x:@.connection
            strings.concat
               .:[
               get-value:x:@.arguments/*/connection-string
               .:|
               get-value:x:@.arguments/*/database
               .:]
   else
      set-value:x:@.connection
         strings.concat
            .:[generic|
            get-value:x:@.arguments/*/database
            .:]
   mysql.connect:x:@.connection

      // Making sure we support table names with special characters.
      strings.concat
         .:"describe "
         .:`
         get-value:x:@.arguments/*/table
         .:`
      mysql.select:x:@strings.concat

      /*
       * Creating our return value, by projecting it into
       * a generic form, that does not rely upon MySQL's syntactic
       * details.
       */
      for-each:x:@mysql.select/*
         unwrap:x:+/*/*
         .tmp
            ""
               name:x:@.dp/#/*/Field
               db:x:@.dp/#/*/Type

         // Checking if column is nullable.
         if
            eq
               get-value:x:@.dp/#/*/Null
               .:NO
            .lambda
               add:x:@.tmp/*
                  .
                     nullable:bool:false
         else
            add:x:@.tmp/*
               .
                  nullable:bool:true

         // Checking if column is a part of the primary key.
         if
            eq
               get-value:x:@.dp/#/*/Key
               .:PRI
            .lambda
               add:x:@.tmp/*
                  .
                     primary:bool:true
         else
            add:x:@.tmp/*
               .
                  primary:bool:false

         // Checking if column has a default value.
         if
            or
               and
                  not
                     eq
                        get-value:x:@.dp/#/*/Default
                        .:
                  not
                     eq
                        get-value:x:@.dp/#/*/Default
                        .
               eq
                  get-value:x:@.dp/#/*/Extra
                  .:auto_increment
               eq
                  get-value:x:@.dp/#/*/Extra
                  .:DEFAULT_GENERATED
            .lambda
               add:x:@.tmp/*
                  .
                     automatic:bool:true
         else
            add:x:@.tmp/*
               .
                  automatic:bool:false

         /*
          * Figuring our which Hyperlambda type to project
          * its database type to.
          */
         .type

         // Checking for boolean types.
         if
            or
               eq
                  get-value:x:@.dp/#/*/Type
                  .:tinyint(1)
               eq
                  get-value:x:@.dp/#/*/Type
                  .:bool
               eq
                  get-value:x:@.dp/#/*/Type
                  .:boolean
            .lambda

               // This is some sort of boolean type.
               set-value:x:@.type
                  .:bool
         else

            // Anything BUT booleans.
            strings.regex-replace:x:@.dp/#/*/Type
               .:"\\([0-9,]+\\)"
               .:
            strings.replace:x:@strings.regex-replace
               .:" unsigned"
               .:
            switch:x:@strings.replace

               // Everything transformed into date values.
               case:date
               case:datetime
               case:timestamp
                  set-value:x:@.type
                     .:date

               // Everything transformed into decimal values.
               case:float
               case:double
               case:double precision
               case:decimal
               case:dec
                  set-value:x:@.type
                     .:decimal

               // Everything transformed into integer long values.
               case:bit
               case:tinyint
               case:bool
               case:boolean
               case:smallint
               case:mediumint
               case:integer
               case:bigint
               case:int
               case:int unsigned
                  set-value:x:@.type
                     .:long

               // Everything transformed into string values.
               case:char
               case:varchar
               case:binary
               case:varbinary
               case:tinyblob
               case:tinytext
               case:text
               case:blob
               case:mediumtext
               case:mediumblob
               case:longtext
               case:longblob
               case:enum
               case:set
                  set-value:x:@.type
                     .:string

               // Everything transformed into boolean.
               case:tinyint
                  set-value:x:@.type
                     .:bool

               // Default/special cases.
               default
                  if
                     strings.starts-with:x:@strings.replace
                        .:enum
                     .lambda

                        // Enum type
                        set-value:x:@.type
                           .:string
                  else

                     // Defaulting to string type.
                     set-value:x:@.type
                        .:string

         // Adding Hyperlambda type to [.tmp] above.
         unwrap:x:+/*/*
         add:x:@.tmp/*
            .
               hl:x:@.type

         // Adding [.tmp] to [return-nodes] below.
         add:x:../*/mysql.connect/*/return-nodes
            get-nodes:x:@.tmp/*

      // Returning results to caller.
      return-nodes
