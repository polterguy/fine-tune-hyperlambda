
/*
 * Performs a DuckDuckGo search and returns a list of structured results.
 *
 * This dynamic slot, `magic.http.duckduckgo-search`, sends a query to DuckDuckGo using its HTML interface,
 * scrapes the returned page for result links, and extracts URLs, titles, and descriptions.
 * It optionally limits the number of returned results and can notify a WebSocket client session
 * with progress updates during execution.
 *
 * ### Arguments:
 * - `query` (string, required): The search term to use when querying DuckDuckGo.
 * - `max` (int, optional): The maximum number of result entries to return. Must be at least 1.
 * - `session` (string, optional): WebSocket session ID. If provided, server will emit status updates via `sockets.signal`.
 *
 * ### Behavior:
 * 1. **Validation**:
 *    - Ensures that the `query` is present and that `max` is a valid positive integer if provided.
 * 2. **Search Request**:
 *    - Constructs a DuckDuckGo search URL: `https://html.duckduckgo.com/html/?q=[query]`
 *    - Optionally emits a WebSocket signal to the user indicating that a search has begun.
 *    - Sends an HTTP GET request using [signal:magic.http.get-with-cache] for efficient reuse of results.
 * 3. **HTML Parsing**:
 *    - Converts HTML to lambda format using [html2lambda].
 *    - Iterates over all anchor (`<a>`) tags with class `result__a`, which represent search result links.
 * 4. **URL Extraction & Decoding**:
 *    - Parses and extracts the `uddg` query parameter, which contains the actual external link.
 *    - URL-decodes the value and discards any invalid or incomplete links.
 * 5. **Result Compilation**:
 *    - Assembles a list of search results with:
 *      - `url`: The target URL of the result.
 *      - `title`: The clickable headline.
 *      - `description`: Text snippet or preview, if available.
 *    - Stops once [max] results are collected.
 * 6. **Returns**:
 *    - A list of DuckDuckGo search results, wrapped in a `result` node.
 *    - Includes a `reference` node containing the full DuckDuckGo search URL for traceability.
 *
 * ### Returns:
 * ```json
 * {
 *   "reference": "https://html.duckduckgo.com/html/?q=hyperlambda",
 *   "result": [
 *     {
 *       "url": "https://example.com/what-is-hyperlambda",
 *       "title": "What is Hyperlambda?",
 *       "description": "Hyperlambda is a tree-based declarative programming language used in Magic Cloud..."
 *     },
 *     ...
 *   ]
 * }
 * ```
 *
 * ### Use Cases:
 * - Semantic research and automated knowledge scraping.
 * - Feeding URLs into downstream processing tools (e.g., scrapers, summarizers).
 * - Lightweight search UI without needing DuckDuckGo's official API.
 *
 * ### Notes:
 * - This implementation parses HTML output from DuckDuckGo's web UI. It may break if DuckDuckGo changes its markup.
 * - For large queries, consider throttling or caching results to avoid rate-limiting or IP blocks.
 */
slots.create:magic.http.duckduckgo-search

   // Result we return to caller.
   .result
      result

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/query
   validators.integer:x:@.arguments/*/max
      min:1

   // Creating our search URL.
   .url
   set-value:x:@.url
      strings.concat
         .:"https://html.duckduckgo.com/html/?q="
         strings.url-encode:x:@.arguments/*/query

   // Checking if caller provided a session argument, and if so, signaling client using web sockets.
   if
      exists:x:@.arguments/*/session
      .lambda
         strings.concat
            .:"Invoking DuckDuckGo at: "
            get-value:x:@.url
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/session
            args
               message:x:@strings.concat
               type:system

   // Invoking slot responsible for retrieving search results.
   unwrap:x:+/*
   signal:magic.http.get-with-cache
      url:x:@.url

   // Making sure we return refernce to caller.
   unwrap:x:+/*/*
   insert-before:x:@.result/0
      .
         reference:x:@.url

   // Semantically traversing HTML for result.
   html2lambda:x:@signal
   for-each:x:@html2lambda/*/html/*/body/**/a/*/\@class/=result__a/.

      // Making sure we're not past any specified [max] argument.
      if
         or
            not-exists:x:@.arguments/*/max
            mt:x:@.arguments/*/max
               .:int:0
         .lambda

            // Not beyond [max] argument.
            .cur
            set-value:x:@.cur
               strings.concat
                  .:"http:"
                  get-value:x:@.dp/#/*/\@href

            // Retrieving raw URL from QUERY parameters returned from DuckDuckGo.
            strings.split:x:@.cur
               .:?
            if
               mt
                  get-count:x:@strings.split/*
                  .:int:1
               .lambda

                  // URL has query parameters, splitting all query parameters.
                  strings.split:x:@strings.split/1
                     .:&

                  // Used to track if we find query parameter.
                  .found:bool:false

                  // Finding the correct query parameter.
                  for-each:x:@strings.split/*

                     // Checking if currently iterated query parameter is the correct query parameter.
                     if
                        strings.starts-with:x:@.dp/#
                           strings.concat
                              .:uddg
                              .:=
                        .lambda

                           // This is our query parameter.
                           set-value:x:@.found
                              .:bool:true
                           strings.split:x:@.dp/#
                              .:=
                           set-value:x:@.cur
                              strings.url-decode:x:@strings.split/1

                  /*
                   * Verifying we found query parameter in URL, and if not,
                   * ignoring currently iterated link.
                   */
                  if
                     not
                        get-value:x:@.found
                     .lambda

                        // Query parameter wasn't found.
                        set-value:x:@.url

            else

               // No query parameters in URL at all.
               set-value:x:@.url

            // Decrementing [max] argument.
            math.decrement:x:@.arguments/*/max

            // Adding currently iterated URL to [.result].
            strings.join:x:@.dp/#/././**/a/*/\@class/=result__snippet/./**/\#text
               .:
            unwrap:x:+/*/*/*
            add:x:@.result/*/result
               .
                  .
                     url:x:@.cur
                     title:x:@.dp/#/*/\#text
                     description:x:@strings.join

   // Returing result to caller.
   return-nodes:x:@.result/*