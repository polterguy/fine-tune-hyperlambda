
/*
 * Verifies a Magic CAPTCHA token based on Proof of Work using either time-based or challenge-based verification.
 *
 * This dynamic slot, `magic.auth.captcha-verify`, ensures the client has performed enough work to generate a valid
 * CAPTCHA token. It supports two modes of verification:
 *
 * - **Time-based tokens**: Uses the client's UNIX timestamp to validate token freshness.
 * - **Challenge-based tokens**: Matches tokens to a previously issued challenge stored in cache.
 *
 * Both rely on a SHA256 hash with a configurable number of trailing zeros (the "workload").
 * The server uses a double-hashed secret as part of its HMAC-style verification to validate authenticity.
 *
 * ### Arguments:
 * - `token` (string): Required. A colon-separated token string in the format `hash:timestamp|challenge:seed`.
 * - `workload` (int): Optional. Number of trailing zeros required in the hash. Default: `3`.
 * - `age` (int): Optional. Maximum allowed age (in milliseconds) for time-based tokens. Default: `10000` (10 seconds).
 *
 * ### Token Structure:
 * The token must have exactly 3 parts:
 * ```
 * [hash]:[timestamp or challenge]:[seed]
 * ```
 * - `hash`: The SHA256 hash that ends in `[workload]` trailing zeros.
 * - `timestamp`: A UNIX timestamp (milliseconds) representing when the token was generated (for time-based mode).
 * - `challenge`: A key previously stored in cache by a challenge-generating endpoint (for challenge-based mode).
 * - `seed`: A numeric value that was brute-forced to produce a hash ending with the required zeros.
 *
 * ### Behavior:
 * 1. **Sanity Checks**:
 *    - Ensures the token has exactly 3 parts.
 *    - Applies default values to `workload` and `age`.
 * 2. **Token Type Detection**:
 *    - If the second part starts with `c_`, it's treated as a challenge-based token:
 *      - Ensures a valid challenge exists in cache and deletes it after use.
 *    - Otherwise, it's treated as a time-based token:
 *      - Verifies that the timestamp is not too old or from the future.
 * 3. **Hash Validation**:
 *    - Ensures the token hash ends in the correct number of zeros based on the `workload`.
 *    - Reconstructs the expected hash using server-side secret and compares it to the submitted hash.
 * 4. **Returns**:
 *    - `true` if the CAPTCHA token is valid.
 *    - Otherwise, throws a descriptive, publicly visible error with HTTP `400`.
 *
 * ### Security:
 * - Uses double SHA256 hashing (like HMAC) of the server-side secret to prevent predictable hash generation.
 * - Challenge-based tokens expire automatically after use (one-time).
 *
 * ### Example Use Case:
 * - Protecting public endpoints (e.g., user registration, contact forms) without requiring user accounts.
 * - Bot protection via client-side proof of work using JavaScript (e.g., `magic-captcha.js` or `magic-captcha-challenge.js`).
 *
 * ### Failure Scenarios:
 * - Token structure is incorrect.
 * - Token expired (for time-based mode).
 * - Challenge not found or reused (for challenge-based mode).
 * - Workload not met (hash lacks enough trailing zeros).
 * - Token not verifiable against the serverâ€™s secret.
 */
slots.create:magic.auth.captcha-verify

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/token
   validators.integer:x:@.arguments/*/workload
   validators.integer:x:@.arguments/*/age
   validators.default:x:@.arguments
      workload:int:3
      age:int:10000

   /*
    * Splitting token string into entities,
    * being hash + Unix timestamp when generated + seed value leading to enough trailing zeros.
    */
   .token
   .time-challenge
   .seed
   strings.split:x:@.arguments/*/token
      .:;
   if
      neq
         get-count:x:@strings.split/*
         .:int:3
      .lambda

         // Token does not contain 3 parts.
         throw:"Invalid CAPTCHA token, token did not have 3 parts. A valid Magic CAPTCHA token requires 3 parts; actual token, UNIX time and seed value used to generate token."
            status:int:400
            public:bool:true

   set-value:x:@.token
      strings.to-lower:x:@strings.split/0
   set-value:x:@.time-challenge
      get-value:x:@strings.split/1
   set-value:x:@.seed
      convert:x:@strings.split/2
         type:long

   // Checking what type of token we've got, options are age-based and challenge based.
   if
      strings.starts-with:x:@.time-challenge
         .:c_
      .lambda

         // Challenge-based token, making sure challenge exists in cache.
         if
            neq
               cache.get:x:@.time-challenge
               .:valid
            .lambda

               // Challenge for token was not valid
               throw:"Invalid CAPTCHA token. Challenge for token was not valid."
                  status:int:400
                  public:bool:true

         // Removing challenge from cache to avoid user using it twice.
         cache.set:x:@.time-challenge

   else

      // Verifying token was generated on client less than [age] seconds ago.
      set-value:x:@.time-challenge
         convert:x:@.time-challenge
            type:long
      if
         or
            lt
               math.add
                  get-value:x:@.time-challenge
                  get-value:x:@.arguments/*/age
               date.unix
            mt
               get-value:x:@.time-challenge
               date.unix
         .lambda

            // Token is either older than [age] seconds or created in "the future".
            throw:"Invalid CAPTCHA token. Please check your computer's BIOS time if you suspect this is a mistake."
               status:int:400
               public:bool:true

   // Verifying CAPTCHA token ends with enough trailing zeros.
   .endswith:
   while
      lt
         strings.length:x:@.endswith
         get-value:x:@.arguments/*/workload
      .lambda
         set-value:x:@.endswith
            strings.concat
               get-value:x:@.endswith
               .:0
   if
      not
         strings.ends-with:x:@.token
            get-value:x:@.endswith
      .lambda

         // Token does not have enough trailing zeros to be considered valid.
         throw:"Invalid CAPTCHA token. Workload requirements of endpoint was not met."
            status:int:400
            public:bool:true

   /*
    * Verifying token was generated by server.
    *
    * Notice, to avoid predictable hash values, we double hash, which kind of
    * creates an HMAC token for us making it impossible to guess a valid hash.
    */
   config.get:"magic:auth:secret"
   crypto.hash.sha256:x:@config.get
   crypto.hash.sha256:x:-

   /*
    * Concatenating server's auth secret with timestamp for when token was created,
    * in addition to seed used to generate valid token with enough trailing zeros.
    */
   strings.concat
      get-value:x:@crypto.hash.sha256
      .:;
      get-value:x:@.time-challenge
      .:;
      get-value:x:@.seed

   // Verifying hash is valid.
   if
      neq
         crypto.hash.sha256:x:@strings.concat
         get-value:x:@.token
      .lambda

         // Token is not valid.
         throw:"Invalid CAPTCHA token. Please verify that public key was generated by server token was submitted to."
            status:int:400
            public:bool:true

   // If we come this far, the token was valid, and we can allow the client to continue.
   return:bool:true

