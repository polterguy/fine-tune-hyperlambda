
/*
 * Sends an HTTP POST request to a specified URL using all other input arguments as the JSON payload.
 *
 * This dynamic slot, `magic.http.post`, allows dynamic invocation of any HTTP endpoint via POST.
 * It uses the provided [url] argument as the destination and includes all other arguments in the payload body.
 * It logs success or failure events based on the HTTP status code, and captures error responses for debugging.
 *
 * ### Arguments:
 * - `url` (string, required): The URL of the HTTP endpoint to invoke. Must be a valid absolute URL.
 * - All other arguments provided are included as the POST request body (in JSON format).
 *
 * ### Behavior:
 * 1. Validates the presence and format of the `url` argument.
 * 2. Extracts the `url` and removes it from the payload so it isnâ€™t sent as part of the request body.
 * 3. Constructs an [http.post] invocation dynamically:
 *    - Includes all remaining arguments as the payload.
 * 4. Sends the request to the specified URL.
 * 5. Evaluates the HTTP status:
 *    - If the status is between 200 and 299:
 *      - Logs a success event using [log.info], including the URL and payload.
 *    - Otherwise:
 *      - Logs an error using [log.error].
 *      - Transforms the response body using [lambda2hyper] for better debugging visibility.
 *
 * ### Example Request:
 * ```json
 * {
 *   "url": "https://api.example.com/submit",
 *   "name": "John",
 *   "email": "john@example.com",
 *   "message": "Hello there!"
 * }
 * ```
 *
 * ### Example Payload Sent:
 * ```json
 * {
 *   "name": "John",
 *   "email": "john@example.com",
 *   "message": "Hello there!"
 * }
 * ```
 *
 * ### Example Success Log:
 * ```
 * Webhook successfully invoked
 * url: https://api.example.com/submit
 * ```
 *
 * ### Example Error Log:
 * ```
 * Webhook failed
 * url: https://api.example.com/submit
 * content: { "error": "Invalid token" }
 * ```
 *
 * ### Use Cases:
 * - Sending webhooks or push notifications.
 * - Integrating with external APIs or internal service endpoints.
 * - Server-to-server communication in workflows or background jobs.
 *
 * ### Notes:
 * - Only arguments other than `url` are passed to the HTTP POST body.
 * - The payload is sent as `application/json` by default (implicit by [http.post]).
 * - This slot is designed for flexibility and reusability in dynamic automation flows.
 */
slots.create:magic.http.post

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/url
   validators.url:x:@.arguments/*/url

   // Retrieving URL.
   .url:x:@.arguments/*/url
   unwrap:x:@.url
   remove-nodes:x:@.arguments/*/url

   // Decorating invocation.
   unwrap:x:./*/http.post
   add:x:./*/http.post/*/payload
      get-nodes:x:@.arguments/*

   // Invoking endpoint.
   http.post:x:@.url
      payload

   // Verifying invocation was a success.
   if
      and
         mte:x:@http.post
            .:int:200
         lt:x:@http.post
            .:int:300
      .lambda

         // Success!
         add:x:./*/log.info
            get-nodes:x:@.arguments/*
         log.info:Webhook successfull invoked
            url:x:@.url

   else

      // Failure!
      add:x:./*/log.info
         get-nodes:x:@.arguments/*
      lambda2hyper:x:@http.post/*/content
      log.error:Webhook failed
         url:x:@.url
         content:x:@lambda2hyper
