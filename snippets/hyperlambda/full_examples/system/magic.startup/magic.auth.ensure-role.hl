
/*
 * Ensures the existence of a specific role in the `roles` table, creating it if it does not already exist.
 *
 * This dynamic slot, `magic.auth.ensure-role`, verifies whether the specified role is already present
 * in the `roles` table of the Magic database. If it is not found, the slot inserts a new role entry.
 * This is useful for system initialization, plugin setup, or conditional role creation during runtime.
 *
 * ### Arguments:
 * - `role` (string): **Required**. The name of the role to ensure exists.
 * - `description` (string): **Required**. A textual description of the role.
 *
 * ### Behavior:
 * 1. **Validation**:
 *    - Ensures that both `role` and `description` arguments are provided.
 * 2. **Database Connection**:
 *    - Connects to the `magic` database using a generic connection adapter.
 * 3. **Role Check**:
 *    - Executes a [data.read] query against the `roles` table to check if a role with the specified name exists.
 * 4. **Role Creation (if missing)**:
 *    - If the role does not exist, it inserts a new record into the `roles` table with the given `name` and `description`.
 * 5. **Error Handling**:
 *    - The entire logic is wrapped in a [try] block.
 *    - If the system hasn't been fully initialized (e.g., database schema not set up yet), errors are silently caught to prevent application crashes.
 *
 * ### Use Cases:
 * - Used in deployment automation scripts to bootstrap required roles.
 * - Safeguards against duplicate inserts by checking existence first.
 * - Allows plugins or modules to ensure their required roles exist without modifying schema manually.
 *
 * ### Notes:
 * - If the system is not fully configured (e.g., `roles` table missing), this slot will fail silently.
 * - It does **not** update an existing role's descriptionâ€”only inserts it if not present.
 *
 * ### Example Usage:
 * ```json
 * {
 *   "role": "editor",
 *   "description": "Can edit content"
 * }
 * ```
 */
slots.create:magic.auth.ensure-role

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/role
   validators.mandatory:x:@.arguments/*/description

   /*
    * Ensures the [role] role exists.
    * 
    * Notice, in case system hasn't been setup yet, we'll need to silently
    * catch all exceptions.
    */
   try

      // Connecting to Magic database.
      data.connect:[generic|magic]

         // Checking to see if [role] role exists.
         data.read
            table:roles
            where
               and
                  name.eq:x:@.arguments/*/role

         // Checking result of above invocation.
         if
            not
               exists:x:@data.read/*/*
            .lambda

               // We need to insert [role] role into Magic database.
               data.create
                  table:roles
                  values
                     name:x:@.arguments/*/role
                     description:x:@.arguments/*/description
   .catch

      /*
       * Silently catching here, to avoid application crash
       * if system hasn't been setup yet.
       */
      .silent
