
/*
 * Scrapes all hyperlinks from a given URL and returns them as a Markdown-formatted list.
 *
 * This dynamic slot, `magic.http.html2markdown-links`, fetches a webpage and extracts anchor (`<a>`) elements,
 * converting them into a Markdown list of links (`* [title](url)`). The slot supports several optional
 * filters to refine which links are included, such as max result count, URL prefix filtering,
 * class-based filtering, and query parameter extraction (e.g., for unmasking redirect URLs).
 *
 * ### Arguments:
 * - `url` (string, required): The URL of the HTML document to scrape.
 * - `max` (int, optional): The maximum number of links to include in the result. Range: 1–200.
 * - `starts_with` (string, optional): Only includes links whose href begins with this prefix.
 * - `class` (string, optional): Only includes links whose anchor tag contains this class name.
 * - `query` (string, optional): The name of a query parameter to extract from masked/redirect URLs.
 *   - If specified, the slot looks for this parameter in each link and replaces the visible URL with its decoded value.
 *
 * ### Behavior:
 * 1. Validates the input parameters.
 * 2. Computes the base URL from the input for resolving relative paths.
 * 3. Fetches the target page using [signal:magic.http.get-with-cache].
 * 4. Parses the HTML with [html2lambda] and iterates over all anchor tags.
 * 5. For each link:
 *    - Converts it into an absolute URL.
 *    - Applies optional filters:
 *      - `starts_with` and/or `class`
 *      - Skips links with empty or hash-only URLs
 *    - Extracts query-based redirect URLs if `query` is provided.
 *    - Builds a Markdown entry for each valid anchor using the format:
 *      ```
 *      * [anchor text](https://absolute-url.com)
 *      ```
 *    - Stops when the optional `max` threshold is reached.
 * 6. Returns the Markdown string to the caller, trimmed and newline-separated.
 *
 * ### Example Output:
 * ```markdown
 * * [OpenAI](https://www.openai.com)
 * * [Hyperlambda Reference](https://docs.ainiro.io/hyperlambda/)
 * ```
 *
 * ### Use Cases:
 * - Building link summaries of articles, websites, or directories.
 * - Extracting educational or reference links for further crawling.
 * - Preprocessing content for LLM training or knowledge ingestion pipelines.
 *
 * ### Notes:
 * - All URLs are normalized into absolute form using the provided page’s base URL.
 * - This implementation handles common edge cases like `//`, `/`, and relative paths.
 * - If a `query` argument is specified (e.g., `uddg` from DuckDuckGo), links are "unmasked" for accurate output.
 */
slots.create:magic.http.html2markdown-links

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/url
   validators.url:x:@.arguments/*/url
   validators.integer:x:@.arguments/*/max
      min:1
      max:200
   validators.url:x:@.arguments/*/starts_with

   // Converting [max] to integer if existing.
   if
      and
         exists:x:@.arguments/*/max
         not-null:x:@.arguments/*/max
      .lambda
         set-value:x:@.arguments/*/max
            convert:x:@.arguments/*/max
               type:int

   // Figuring out base URL of document, defaulting to primary URL we're getting.
   .base
   strings.split:x:@.arguments/*/url
      .:"://"
   strings.split:x:@strings.split/1
      .:/
   set-value:x:@.base
      strings.concat
         get-value:x:@strings.split/@strings.split/0
         .:"://"
         get-value:x:@strings.split/0


   // Fetching raw HTML.
   add:x:./*/signal
      get-nodes:x:@.arguments/*/url
   signal:magic.http.get-with-cache

   // Transforming HTML to lambda object and finds all hyperlinks in document.
   .markdown:
   html2lambda:x:@signal
   for-each:x:@html2lambda/*/html/*/body/**/a

      // Making sure we're not past any specified [max] argument.
      if
         or
            not-exists:x:@.arguments/*/max
            mt:x:@.arguments/*/max
               .:int:0
         .lambda

            // Figuring out URL.
            .url
            set-value:x:@.url
               get-value:x:@.dp/#/*/\@href

            // Making sure we turn URL into an absolute URL.
            if
               strings.starts-with:x:@.url
                  .://
               .lambda

                  // URL starts with "//", and we only need to add scheme to it.
                  strings.split:x:@.base
                     .:"://"
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@strings.split/0
                        .:":"
                        get-value:x:@.url
            else-if
               strings.starts-with:x:@.url
                  .:/
               .lambda

                  // URL starts with only one "/" and we need to prefix it with base URL.
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.base
                        get-value:x:@.url
            else-if
               and
                  not
                     strings.starts-with:x:@.url
                        .:"https://"
                  not
                     strings.starts-with:x:@.url
                        .:"http://"
               .lambda

                  // URL does not start with scheme or "/", hence adding scheme and slash to it.
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.base
                        .:/
                        get-value:x:@.dp/#/*/\@href

            // [else] ==> URL is absolute URL.

            /*
             * Checking if caller provided a [starts_with] or [class] filter,
             * and if so, verify we've got a match for currently iterated URL.
             */
            if
               and
                  or
                     not-exists:x:@.arguments/*/starts_with
                     strings.starts-with:x:@.url
                        get-value:x:@.arguments/*/starts_with
                  or
                     not-exists:x:@.arguments/*/class
                     strings.contains:x:@.dp/#/*/\@class
                        get-value:x:@.arguments/*/class
               .lambda

                  // Figuring out anchor text.
                  .anchor:
                  for-each:x:@.dp/#/**/\#text
                     set-value:x:@.anchor
                        strings.concat
                           get-value:x:@.anchor
                           .:" "
                           get-value:x:@.dp/#

                  // Trimming anchor and removing redundant spacing characters.
                  set-value:x:@.anchor
                     strings.trim:x:@.anchor
                        .:" \t\r\n"
                  set-value:x:@.anchor
                     strings.replace:x:@.anchor
                        .:"  "
                        .:" "
                  set-value:x:@.anchor
                     strings.replace:x:@.anchor
                        .:"\r"
                        .:" "
                  set-value:x:@.anchor
                     strings.replace:x:@.anchor
                        .:"\n"
                        .:" "

                  /*
                   * Now we know both anchor text and URL,
                   * however before we can proceed we verify that
                   * anchor text actually exists.
                   */
                  if
                     and
                        not-null:x:@.anchor
                        neq:x:@.anchor
                           .:
                        not
                           strings.contains:x:@.url
                              .:#
                     .lambda

                        /*
                         * Now checking if caller provided a [query] parameter, at which point
                         * we assume the URL we're looking for is masked inside that query parameter,
                         * and not being the URL itself.
                         *
                         * This might be true for DuckDuckGo for instance, that directs you to a redirect
                         * service, instead of giving you the direct link.
                         */
                        if
                           exists:x:@.arguments/*/query
                           .lambda
                           
                              // Caller provided [query] argument.
                              strings.split:x:@.url
                                 .:?
                              if
                                 mt
                                    get-count:x:@strings.split/*
                                    .:int:1
                                 .lambda

                                    // URL has query parameters, splitting all query parameters.
                                    strings.split:x:@strings.split/1
                                       .:&

                                    // Used to track if we find query parameter.
                                    .found:bool:false

                                    // Finding the correct query parameter.
                                    for-each:x:@strings.split/*

                                       // Checking if currently iterated query parameter is the correct query parameter.
                                       if
                                          strings.starts-with:x:@.dp/#
                                             strings.concat
                                                get-value:x:@.arguments/*/query
                                                .:=
                                          .lambda

                                             // This is our query parameter.
                                             set-value:x:@.found
                                                .:bool:true
                                             strings.split:x:@.dp/#
                                                .:=
                                             set-value:x:@.url
                                                strings.url-decode:x:@strings.split/1

                                    /*
                                     * Verifying we found query parameter in URL, and if not,
                                     * ignoring currently iterated link.
                                     */
                                    if
                                       not
                                          get-value:x:@.found
                                       .lambda

                                          // Query parameter wasn't found.
                                          set-value:x:@.url

                              else

                                 // No query parameters in URL at all.
                                 set-value:x:@.url

                        // Adding currently iterated URL to [.markdown] if we have a valid URL.
                        if
                           not-null:x:@.url
                           .lambda

                              // Decrementing [max] to prevent overflow.
                              math.decrement:x:@.arguments/*/max
                              
                              // Concatenating currently iterated URL to Markdown result.
                              set-value:x:@.markdown
                                 strings.concat
                                    get-value:x:@.markdown
                                    .:"* ["
                                    get-value:x:@.anchor
                                    .:](
                                    get-value:x:@.url
                                    .:)
                                    .:"\r\n"

   // Done, returning Markdown to caller.
   strings.trim:x:@.markdown
      .:"\r\n\t "
   return:x:-
