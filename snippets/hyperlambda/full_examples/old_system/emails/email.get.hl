/*
 * Ensures that only users with the 'root' role can access this endpoint,
 * by verifying the JWT token of the currently authenticated user.
 * This enforces strict role-based access control for high-privilege operations.
 *
 * Retrieves the server's public key using [signal:magic.crypto.get-server-public-key],
 * then queries the 'crypto_keys' table to find the key declaration matching
 * the fingerprint of this public key. From the resulting row, extracts and returns
 * the associated 'email' and 'subject' fields to the caller, which are stored only during
 * the initial system setup phase. This makes the public key the indirect identifier
 * for accessing these setup details.
 */
.arguments

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

/*
 * Notice, the only place we actually store the email address is when the
 * user sets up the system, and generates a server key pair. Hence, we need
 * to retrieve the public key for the server, then retrieve the key declaration
 * matching that from our public keys in the database, and return that email
 * address to the caller.
 */
signal:magic.crypto.get-server-public-key

// Opening up our database connection.
data.connect:[generic|magic]

   /*
    * Reading email address from crypto_keys matching fingerprint of public key
    * retrieved above.
    */
   data.read
      table:crypto_keys
      columns
         email
         subject
      where
         and
            fingerprint.eq:x:@signal/*/fingerprint

   // Returning result to caller.
   unwrap:x:+/*
   return
      email:x:@data.read/*/*/email
      name:x:@data.read/*/*/subject
