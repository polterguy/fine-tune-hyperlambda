
/*
 * This example creates and persists a new HTTP assumption into the specified file.
 *
 * ## Authorization
 * - [auth.ticket.verify] ensures only authorized users with 'root' access can invoke the endpoint.
 *
 * ## Required Arguments
 * - [filename]: Target file path to persist the assumption.
 * - [verb], [url], [status]: Basic metadata of the HTTP interaction to record.
 * - Optional: [description], [payload], [response], [produces] for documenting request/response behavior.
 *
 * ## Workflow
 * 1. Required fields are validated using [validators.mandatory].
 * 2. [lambda2hyper] converts the assumption object (excluding the [filename]) into a Hyperlambda structure.
 * 3. [io.file.save] persists the serialized assumption into the provided file path.
 *
 * ## Notes
 * - [unwrap:x:../*/io.file.save] ensures the save operation happens after [lambda2hyper] is populated.
 * - This pattern is useful for building test scaffolding or saving API specifications dynamically.
 */
.arguments
   filename:string
   verb:string
   url:string
   status:int
   description:string
   payload:string
   response:string
   produces:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/filename
validators.mandatory:x:@.arguments/*/verb
validators.mandatory:x:@.arguments/*/url
validators.mandatory:x:@.arguments/*/status

// Creating and saving test.
unwrap:x:../*/io.file.save
remove-nodes:x:@.arguments/*/filename
lambda2hyper:x:@.arguments/*
io.file.save:x:@.arguments/*/filename
   get-value:x:@lambda2hyper

// Returns success to caller.
return
   result:success
