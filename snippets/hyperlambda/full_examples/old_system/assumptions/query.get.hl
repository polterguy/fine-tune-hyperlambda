
/*
 * Returns all assumption tests in the system for a specific HTTP [endpoint] and [verb].
 *
 * 1. [auth.ticket.verify]
 *    * Restricts access to only users with the 'root' role.
 *
 * 2. [validators.mandatory]
 *    * Ensures both [endpoint] and [verb] arguments are present.
 *
 * 3. [io.file.load-recursively]
 *    * Loads all assumption test files recursively from both [/misc/tests/] and [/etc/tests/].
 *
 * 4. [for-each]
 *    * Iterates over every file found to locate only Hyperlambda (.hl) files.
 *
 * 5. [hyper2lambda]
 *    * Converts each Hyperlambda test file into a lambda object to inspect its structure.
 *
 * 6. [strings.split], [eq]
 *    * Filters tests based on exact match between file's [url] and [verb] and those supplied by the caller.
 *
 * 7. [add:x:../*/return-nodes]
 *    * Gathers all matched assumption test files into the final result set, returning their filenames.
 *
 * Use cases:
 * * Allows system administrators to identify all assumption tests defined for a particular API endpoint.
 * * Supports documentation, audit, or regression testing flows by enumerating test coverage across the backend.
 */
.arguments
   endpoint:string
   verb:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/endpoint
validators.mandatory:x:@.arguments/*/verb

// Listing all files in assumption test folder(s).
io.file.load-recursively:/misc/tests/
io.file.load-recursively:/etc/tests/

/*
 * Iterates through result from above invocation and returns only resulting files
 * that are for specified endpoint.
 */
for-each:x:../*/io.file.load-recursively/*

   // Verifying currently iterated file is a Hyperlambda file.
   if
      strings.ends-with:x:@.dp/#/*/name
         .:.hl
      .lambda

         // File is Hyperlambda, loading it and checking if URL and verb is a match.
         hyper2lambda:x:@.dp/#/*/content

         /*
          * Verifying this is an automatically generated assumption, before checking
          * if it matches specified endpoint.
          */
         if
            exists:x:@hyper2lambda/*/url
            .lambda

               // Automatically generated assumption, checking if it's for currently requested endpoint.
               strings.split:x:@hyper2lambda/*/url
                  .:?
               if
                  and
                     eq
                        get-value:x:@strings.split/0
                        get-value:x:@.arguments/*/endpoint
                     eq
                        get-value:x:@hyper2lambda/*/verb
                        get-value:x:@.arguments/*/verb
                  .lambda

                     // Adding assumptions for endpoint to returned value.
                     unwrap:x:./*/add/[1,2]/*/*/*
                     add:x:./*/add/[1,2]/*/*
                        get-nodes:x:@hyper2lambda/*/description
                     add:x:../*/return-nodes
                        .
                           .
                              file:x:@.dp/#/*/name

// Returns result to caller.
return-nodes
