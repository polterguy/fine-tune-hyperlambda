/*
 * Filters and returns assumption test files that match a specified [endpoint] and HTTP [verb].
 *
 * Requires root access using [auth.ticket.verify] and enforces required arguments with [validators.mandatory].
 * Recursively loads all files from [/misc/tests/] and [/etc/tests/] using [io.file.load-recursively].
 *
 * For each `.hl` file found, it parses the file with [hyper2lambda] and checks for an auto-generated test
 * by verifying the existence of a [url] node. Then it compares the [url] and [verb] values against the caller's
 * input arguments to find matches.
 *
 * If a match is found, adds the test file and its [description] to the output using [return-nodes].
 */
.arguments
   endpoint:string
   verb:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/endpoint
validators.mandatory:x:@.arguments/*/verb

// Listing all files in assumption test folder(s).
io.file.load-recursively:/misc/tests/
io.file.load-recursively:/etc/tests/

/*
 * Iterates through result from above invocation and returns only resulting files
 * that are for specified endpoint.
 */
for-each:x:../*/io.file.load-recursively/*

   // Verifying currently iterated file is a Hyperlambda file.
   if
      strings.ends-with:x:@.dp/#/*/name
         .:.hl
      .lambda

         // File is Hyperlambda, loading it and checking if URL and verb is a match.
         hyper2lambda:x:@.dp/#/*/content

         /*
          * Verifying this is an automatically generated assumption, before checking
          * if it matches specified endpoint.
          */
         if
            exists:x:@hyper2lambda/*/url
            .lambda

               // Automatically generated assumption, checking if it's for currently requested endpoint.
               strings.split:x:@hyper2lambda/*/url
                  .:?
               if
                  and
                     eq
                        get-value:x:@strings.split/0
                        get-value:x:@.arguments/*/endpoint
                     eq
                        get-value:x:@hyper2lambda/*/verb
                        get-value:x:@.arguments/*/verb
                  .lambda

                     // Adding assumptions for endpoint to returned value.
                     unwrap:x:./*/add/[1,2]/*/*/*
                     add:x:./*/add/[1,2]/*/*
                        get-nodes:x:@hyper2lambda/*/description
                     add:x:../*/return-nodes
                        .
                           .
                              file:x:@.dp/#/*/name

// Returns result to caller.
return-nodes
