
/*
 * This endpoint associates a specific cryptographic key (identified by [keyId]) with a user (identified by [username]).
 *
 * 1. [.arguments]
 *    - Accepts [keyId] (the unique identifier of the key) and [username] (the system user to associate with the key).
 *
 * 2. [auth.ticket.verify]
 *    - Restricts access to only users with [root] privileges.
 *
 * 3. [validators.mandatory]
 *    - Ensures both [keyId] and [username] are provided before continuing execution.
 *
 * 4. [data.connect]
 *    - Connects to the [magic] database to handle key-to-user associations.
 *
 * 5. [data.delete]
 *    - Removes any existing association where either the user or the key already exists in [users_crypto_keys],
 *      ensuring a clean state before creating a new association.
 *
 * 6. [data.create]
 *    - Inserts a new row into the [users_crypto_keys] table linking the specified [keyId] with the [username].
 *
 * 7. [return]
 *    - Returns a simple [result:success] object to confirm successful completion.
 *
 * This endpoint is typically used for administrative tasks such as manually assigning or reassigning public keys to users,
 * ensuring each user is linked to the correct authentication identity.
 */
.arguments
   keyId:long
   username:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/keyId
validators.mandatory:x:@.arguments/*/username

// Opening our database connection.
data.connect:magic

   // Deleting any old associations.
   data.delete
      table:users_crypto_keys
      where
         or
            username.eq:x:@.arguments/*/username
            key_id.eq:x:@.arguments/*/keyId

   // Creating our new association.
   data.create
      table:users_crypto_keys
      values
         username:x:@.arguments/*/username
         key_id:x:@.arguments/*/keyId

// Returning success to caller.
return
   result:success
