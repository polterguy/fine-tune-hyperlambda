/*
 * Associates a cryptographic key with a user by updating the [users_crypto_keys] table.
 *
 * Requires root access via [auth.ticket.verify], and validates that both [keyId] and [username] are provided using [validators.mandatory].
 *
 * Opens a connection to the 'magic' database with [data.connect]. First removes any existing associations for the specified
 * [username] or [keyId] using [data.delete] to ensure uniqueness.
 *
 * Then creates a new link between the user and the key using [data.create], and returns a success response to the caller.
 */
.arguments
   keyId:long
   username:string

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/keyId
validators.mandatory:x:@.arguments/*/username

// Opening our database connection.
data.connect:magic

   // Deleting any old associations.
   data.delete
      table:users_crypto_keys
      where
         or
            username.eq:x:@.arguments/*/username
            key_id.eq:x:@.arguments/*/keyId

   // Creating our new association.
   data.create
      table:users_crypto_keys
      values
         username:x:@.arguments/*/username
         key_id:x:@.arguments/*/keyId

// Returning success to caller.
return
   result:success
