
/*
 * This snippet imports a public cryptographic key into the system using the [magic.crypto.import-key] slot.
 *
 * 1. [.arguments]
 *    * Accepts and validates the following inputs:
 *      - [subject]: A human-readable name or identifier for the key owner (required).
 *      - [email]: Email address of the key owner (required and validated).
 *      - [domain]: Domain associated with the key (required and must be a valid URL).
 *      - [content]: The actual public key material (required).
 *
 * 2. [validators.mandatory]
 *    * Ensures that required fields are present in the request.
 *
 * 3. [validators.url] and [validators.email]
 *    * Ensures 'domain' and 'email' fields are formatted correctly as a URL and email, respectively.
 *
 * 4. [signal:magic.crypto.import-key]
 *    * Uses the validated input to store the public key in the system database.
 *    * Prevents duplication by checking existing fingerprints.
 *
 * 5. [return]
 *    * Returns a success object to the caller after successful import.
 *
 * Use Cases:
 * * Adding trusted signing keys to the platform.
 * * Onboarding new users or services with public/private key pairs.
 * * Supporting secure cryptographic verification through pre-imported keys.
 */
.arguments
   subject:string
   email:string
   domain:string
   content:string

/*
 * Sanity checking invocation.
 * Subject, email and content is mandatory.
 * URL is optional.
 */
validators.mandatory:x:@.arguments/*/subject
validators.mandatory:x:@.arguments/*/email
validators.mandatory:x:@.arguments/*/domain
validators.mandatory:x:@.arguments/*/content
validators.url:x:@.arguments/*/domain
validators.email:x:@.arguments/*/email

// Importing key.
add:x:+
   get-nodes:x:@.arguments/*
signal:magic.crypto.import-key

// Returning success to caller.
return
   result:success
