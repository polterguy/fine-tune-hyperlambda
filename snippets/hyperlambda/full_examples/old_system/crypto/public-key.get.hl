
/*
 * This endpoint returns the public RSA key of the server with associated metadata.
 *
 * 1. [.arguments]
 *    * Declaring an empty arguments node makes the endpoint reject any incoming parameters,
 *      enforcing strict contract adherence for this API.
 *
 * 2. [io.file.exists]
 *    * Checks whether the server's public RSA key file exists at `/etc/system/crypto/keys/public.key`.
 *    * If it does not exist, the endpoint immediately returns a failure response with [result:FAILURE].
 *
 * 3. [io.file.load]
 *    * Loads the content of the public key file if it exists.
 *
 * 4. [crypto.fingerprint]
 *    * Computes a fingerprint of the public key using a SHA-256 digest.
 *    * This is useful for validating key integrity and identifying the key uniquely.
 *
 * 5. [return]
 *    * Returns a response object including:
 *      - [fingerprint]: The SHA-256 hash fingerprint of the public key.
 *      - [publicKey]: The raw base64-encoded DER key content.
 *      - [keyFormat]: The format used to encode the key (`base64/DER`).
 *      - [fingerprintFormat]: The fingerprint digest algorithm (`SHA256-fingerprint`).
 *      - [keyType]: Indicates that this is an RSA key.
 *
 * Use Cases:
 * * Allows client systems to securely retrieve and verify the serverâ€™s public key.
 * * Enables cryptographic communication setup and digital signature validation.
 */
.arguments

/*
 * Loads the file containing the public key, if existing,
 * and returns its content to caller.
 */
if
   io.file.exists:/etc/system/crypto/keys/public.key
   .lambda
else
   return
      result:FAILURE

// Key exists, returning it to caller, in addition to its fingerprint.
io.file.load:/etc/system/crypto/keys/public.key
crypto.fingerprint:x:@io.file.load
unwrap:x:+/*
return
   fingerprint:x:@crypto.fingerprint
   publicKey:x:@io.file.load
   keyFormat:base64/DER
   fingerprintFormat:SHA256-fingerprint
   keyType:RSA
