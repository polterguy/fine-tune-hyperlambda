/*
 * Authenticates a user using a cryptographic [challenge] that has been signed with their public key.
 *
 * Retrieves the key fingerprint from the [challenge] via [crypto.get-key] and logs the request with [log.info].
 * Connects to the 'magic' database using [data.connect] to fetch the corresponding public key if it is enabled.
 *
 * Validates the challenge's signature using [crypto.verify] against the retrieved public key. Verifies the result
 * exists in cache and equals "VALID" using [cache.get]; otherwise, throws a 401 [Access denied].
 *
 * Finds the [username] associated with the key from [users_crypto_keys], and generates a JWT via [signal:magic.auth.authenticate]
 * with [check-password] disabled.
 *
 * Clears the used challenge from cache using [cache.set] to prevent replay attacks, and returns the generated JWT token.
 */
.arguments
   challenge:string

// Retrieving public key used to sign challenge payload.
crypto.get-key:x:@.arguments/*/challenge

// Logging
log.info:Cryptography challenge for authenticating submitted
   key:x:@crypto.get-key

// Opening up database connection.
data.connect:magic

   // Retrieving public key's used to cryptographically sign payload.
   data.read
      table:crypto_keys
      columns
         content
         id
      where
         and
            fingerprint.eq:x:@crypto.get-key
            enabled:bool:true

   /*
    * Verifying challenge was correctly signed with the key retrieved above.
    * 
    * This part will throw an exception unless the signature is good.
    */
   crypto.verify:x:@.arguments/*/challenge
      public-key:x:@data.read/*/*/content

   /*
    * Ensuring the payload that was cryptographically signed still exists
    * in memory cache.
    */
   cache.get:x:@crypto.verify
   if
      not
         eq
            get-value:x:@cache.get
            .:VALID
      .lambda

         // Challenge has expired.
         throw:Access denied
            public:true
            status:401

   // Looking up user associated with public key.
   data.read
      table:users_crypto_keys
      columns
         username
      where
         and
            key_id.eq:x:@data.read/@data.read/*/*/id

   // Creating a JWT token for the above user.
   unwrap:x:+/*/username
   signal:magic.auth.authenticate
      check-password:bool:false
      username:x:@data.read/*/*/username

   // Clearing challenge out of memory cache to avoid replay attacks.
   cache.set:x:@crypto.verify

   // Returning JWT token to caller.
   unwrap:x:+/*
   return
      result:x:@signal/*/ticket
