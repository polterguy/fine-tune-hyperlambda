
/*
 * Persists a cryptographic invocation event into the [crypto_invocations] database table.
 *
 * 1. [slots.create:magic.crypto.http.persist-invocation]
 *    - Defines a dynamic slot for recording cryptographic requests and their metadata into persistent storage.
 *
 * 2. [convert]
 *    - Converts the [request-id] argument into a string to ensure consistent storage format.
 *    - Prevents issues that could arise if the value was passed as a non-string (e.g. a GUID or number).
 *
 * 3. [data.connect:magic]
 *    - Establishes a connection to the [magic] database schema.
 *
 * 4. [data.execute]
 *    - Executes an SQL [INSERT] statement into the [crypto_invocations] table.
 *    - Stores:
 *        - [crypto_key]: The ID or fingerprint of the key used.
 *        - [request_id]: The invocationâ€™s unique identifier.
 *        - [request]: A serialized or structured version of the invocation request.
 *        - [request_raw]: The raw form of the original request data.
 *        - [response]: The resulting response from the invocation process.
 *
 * This slot is useful for auditing, logging, or debugging cryptographic operations and provides
 * complete visibility into both request and response phases of crypto-related interactions.
 */
slots.create:magic.crypto.http.persist-invocation

   /*
    * Making sure we transform [request-id] argument to a string, in
    * case caller specified it as for instance a guid or something similar.
    */
   convert:x:@.arguments/*/request-id
      type:string

   // Inserting arguments to invocation into crypto_keys database table.
   data.connect:magic
      data.execute:insert into crypto_invocations (crypto_key, request_id, request, request_raw, response) values (@crypto_key, @request_id, @request, @request_raw, @response)
         @crypto_key:x:@.arguments/*/crypto-key
         @request_id:x:@convert
         @request:x:@.arguments/*/request
         @request_raw:x:@.arguments/*/request-raw
         @response:x:@.arguments/*/response
