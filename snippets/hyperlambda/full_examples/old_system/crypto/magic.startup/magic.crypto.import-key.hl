/*
 * Declares the [magic.crypto.import-key] slot to import a new RSA public key into the system's database.
 *
 * Generates a fingerprint from the provided [content] using [crypto.fingerprint]. If an [enabled] flag is provided,
 * it overrides the default value of false.
 *
 * Connects to the 'magic' database using [data.connect] and checks for existing keys with the same fingerprint using [data.read].
 * If a match is found, aborts with a [throw].
 *
 * If the key is new, it inserts metadata and the key itself into the [crypto_keys] table via [data.create],
 * along with a default [vocabulary] used for future slot logic.
 *
 * If a [username] is supplied, creates an association between the user and the new key using the [users_crypto_keys] table.
 */
slots.create:magic.crypto.import-key

   // Figuring out key's fingerprint.
   crypto.fingerprint:x:@.arguments/*/content

   /*
    * Checking if caller supplied en enabled argument,
    * at which point we use it, instead of defaulting its
    * value to false.
    */
   .enabled:bool:false
   if
      exists:x:@.arguments/*/enabled
      .lambda
         set-value:x:@.enabled
            get-value:x:@.arguments/*/enabled

   // Importing key into database.
   data.connect:magic

      // Checking if key exists in database from before.
      data.read
         table:crypto_keys
         where
            and
               fingerprint.eq:x:@crypto.fingerprint
      if
         exists:x:@data.read/*/*
         .lambda

            // Oops, key already exists in database.
            throw:Key has already been imported
               public:true
               status:400

      // Inserting key into database.
      data.create
         table:crypto_keys
         values
            subject:x:@.arguments/*/subject
            email:x:@.arguments/*/email
            domain:x:@.arguments/*/domain
            type:RSA
            fingerprint:x:@crypto.fingerprint
            content:x:@.arguments/*/content
            enabled:x:@.enabled
            vocabulary:@"add
return
get-nodes
vocabulary
slots.vocabulary
"

      // Checking if caller provided a username, and if, creating association.
      if
         exists:x:@.arguments/*/username
         .lambda

            // Creating association between user and key.
            data.create
               table:users_crypto_keys
               values
                  username:x:@.arguments/*/username
                  key_id:x:@data.create/@data.create
