
/*
 * The slot [magic.crypto.get-server-public-key] loads and returns the server's public RSA key and its fingerprint.
 * It implements in-memory caching for efficiency, avoiding unnecessary file access and computation on repeated requests.
 *
 * 1. [cache.try-get:magic.crypto.get-server-public-key]
 *    * Attempts to retrieve the public key and fingerprint from cache using the key 'magic.crypto.get-server-public-key'.
 *    * If not found, executes the enclosed [.lambda] to fetch and cache the result.
 *    * The result is cached for 300 seconds (5 minutes).
 *
 * 2. [io.file.load:/etc/system/crypto/keys/public.key]
 *    * Loads the server's public RSA key from the filesystem.
 *    * Used to authenticate or verify cryptographically signed content from the server.
 *
 * 3. [crypto.fingerprint]
 *    * Calculates the fingerprint of the loaded public key.
 *    * Ensures a unique identifier for the key pair.
 *
 * 4. [lambda2hyper]
 *    * Combines the public key and fingerprint into a structured Hyperlambda format suitable for caching.
 *
 * 5. [hyper2lambda]
 *    * Converts the cached (serialized) result back into a lambda object.
 *    * Allows downstream slots to interact with the content in standard lambda node tree format.
 *
 * 6. [add]
 *    * Injects the result from [hyper2lambda] into the current graph, making its nodes available.
 *
 * 7. [return]
 *    * Finalizes the endpoint by returning the public key and fingerprint to the caller.
 *
 * Use Cases:
 * * Verifying digital signatures.
 * * Sending the public key to third parties for secure communications.
 * * Displaying key fingerprint as part of security audits or administrative interfaces.
 */
slots.create:magic.crypto.get-server-public-key

   // Caching the results for minor optimisations.
   cache.try-get:magic.crypto.get-server-public-key
      expiration:300
      .lambda
         io.file.load:/etc/system/crypto/keys/public.key
         crypto.fingerprint:x:@io.file.load
         unwrap:x:+/*
         lambda2hyper
            key:x:@io.file.load
            fingerprint:x:@crypto.fingerprint
         return:x:@lambda2hyper
   hyper2lambda:x:@cache.try-get
   add:x:+
      get-nodes:x:@hyper2lambda/*
   return
