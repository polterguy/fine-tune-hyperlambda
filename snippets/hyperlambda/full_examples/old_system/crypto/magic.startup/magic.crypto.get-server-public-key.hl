/*
 * Declares the [magic.crypto.get-server-public-key] slot to return the server's public cryptographic key along with its fingerprint.
 *
 * Uses [cache.try-get] to cache the result for 300 seconds to improve performance on repeated invocations.
 * If the cache is empty, loads the public key from [/etc/system/crypto/keys/public.key] using [io.file.load],
 * generates a fingerprint with [crypto.fingerprint], and serializes the key and fingerprint into Hyperlambda format via [lambda2hyper].
 *
 * Converts the cached Hyperlambda back to lambda using [hyper2lambda], then appends and returns the key structure.
 */
slots.create:magic.crypto.get-server-public-key

   // Caching the results for minor optimisations.
   cache.try-get:magic.crypto.get-server-public-key
      expiration:300
      .lambda
         io.file.load:/etc/system/crypto/keys/public.key
         crypto.fingerprint:x:@io.file.load
         unwrap:x:+/*
         lambda2hyper
            key:x:@io.file.load
            fingerprint:x:@crypto.fingerprint
         return:x:@lambda2hyper
   hyper2lambda:x:@cache.try-get
   add:x:+
      get-nodes:x:@hyper2lambda/*
   return
