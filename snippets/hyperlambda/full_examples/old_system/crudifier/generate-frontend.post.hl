
/*
 * This Hyperlambda endpoint generates a frontend project using a specified template and deployment parameters.
 *
 * 1. [auth.ticket.verify]
 *    * Limits execution to users with the 'root' role.
 *
 * 2. [validators.mandatory] and [validators.url]
 *    * Ensures [apiUrl] is both present and a valid URL.
 *
 * 3. [log.info]
 *    * Logs input metadata including template name, API URL, app name, copyright,
 *      and whether deployment is local or a ZIP download.
 *
 * 4. [strings.concat] + [io.file.execute]
 *    * Resolves the dynamic path to the template's generator file and invokes it,
 *      forwarding additional arguments like [endpoints] and [args] as required.
 *
 * 5. [for-each] + [math.increment]
 *    * Iterates over each generated file and splits its content by newline,
 *      then counts the lines to calculate total lines of code (LOC).
 *
 * 6. [io.content.zip-stream]
 *    * Compresses the generated project into a ZIP file for return or storage.
 *
 * 7. [response.headers.set]
 *    * Sets correct HTTP headers if the caller requests the ZIP file as download.
 *
 * 8. Local deployment branch
 *    * If [deployLocally] is true:
 *       - Deletes and recreates `/etc/frontend/` to ensure a clean state.
 *       - Saves and unzips the project there.
 *       - Moves extracted folder to `/etc/frontend/src` for predictable pathing.
 *
 * Use cases:
 * * Automating CRUD frontend scaffolding based on dynamic API definitions.
 * * Providing developer tooling to generate UI clients on demand.
 * * Streamlining deployment of UI projects either locally or via downloadable bundles.
 */
.arguments
   templateName:string
   apiUrl:string
   name:string
   copyright:string
   endpoints:*
   deployLocally:bool
   args:*

// Ensures user is authorized to access endpoint.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/apiUrl
validators.url:x:@.arguments/*/apiUrl

// Doing some basic logging.
log.info:Generating CRUD frontend
   template:x:@.arguments/*/templateName
   apiUrl:x:@.arguments/*/apiUrl
   name:x:@.arguments/*/name
   copyright:x:@.arguments/*/copyright
   deployLocally:x:@.arguments/*/deployLocally

// Figuring out which template/generator to use, and invoking it.
strings.concat
   .:/misc/templates/
   .:x:@.arguments/*/templateName
   .:/generate.hl
add:x:+/+/+
   get-nodes:x:@.arguments/*/endpoints
add:x:+/+
   get-nodes:x:@.arguments/*/args
unwrap:x:+/*
io.file.execute:x:@strings.concat
   apiUrl:x:@.arguments/*/apiUrl
   name:x:@.arguments/*/name
   copyright:x:@.arguments/*/copyright

// Creating a log entry with LOC that was generated.
.no:int:0
for-each:x:@io.file.execute/*
   strings.split:x:@.dp/#/*
      .:"\n"
   math.increment:x:@.no
      get-count:x:@strings.split/*
log.info:LOC generated
   loc:x:@.no
   name:x:@.arguments/*/name

/*
 * Creating a ZIP stream from return value of above [io.file.execute]
 * and returning it to client.
 */
add:x:../*/io.content.zip-stream
   get-nodes:x:@io.file.execute/*
io.content.zip-stream
if
   not
      get-value:x:@.arguments/*/deployLocally
   .lambda

      /*
       * Caller wants a ZIP file returned, making sure we get HTTP headers correctly applied.
       */
      strings.concat
         .:"attachment; filename=\""
         get-value:x:@.arguments/*/name
         .:".zip\""
      response.headers.set
         Content-Type:application/zip
         Content-Disposition:x:@strings.concat
         Access-Control-Expose-Headers:Content-Disposition
      return-value:x:@io.content.zip-stream

/*
 * Caller wants to deploy frontend locally on server.
 * First deleting folder entirely and re-creating it for simplicity, to
 * make sure folder is empty.
 */
if
   io.folder.exists:/etc/frontend/
   .lambda

      // Deleteing "frontend" folder.
      io.folder.delete:/etc/frontend/

io.folder.create:/etc/frontend/

// Then figuring out full path for file.
strings.concat
   .:/etc/frontend/
   get-value:x:@.arguments/*/name
   .:.zip

// Saving ZIP stream.
io.stream.save-file:x:@strings.concat
   get-value:x:@io.content.zip-stream

// Unzipping file in its current folder and deleting it afterwards.
io.file.unzip:x:@strings.concat
io.file.delete:x:@strings.concat

// Renaming folder to "src" to have a predictive path.
io.folder.list:/etc/frontend/
io.folder.move:x:-/0
   .:/etc/frontend/src

// Returning success to caller.
return
   result:success
