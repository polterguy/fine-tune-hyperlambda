/*
 * Logs in a registered user using 'YOUR_AUTH_DATABASE' database and 'YOUR_AUTH_TABLE' table.
 *
 * If the username and password matches the record in the database it returns a valid JWT token,
 * otherwise it throws an exception.
 *
 * Assumes username is stored as 'username' and password as 'password', and that password has been 
 * stored in the database hashed using blowfish hashing.
 */
.arguments
   username:string
   password:string

// Username and password are both mandatory arguments
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/password

// Read user details from the database
data.connect:YOUR_AUTH_DATABASE
   data.read
      table:YOUR_AUTH_TABLE
      where
         and
            username.eq:x:@.arguments/*/username

   // If no hash value found throw exception
   if
      not-exists:x:@data.read/*
      .lambda
         throw:Invalid credentials
            status:403
            public:true

   // Verify the password if hash value found
   crypto.password.verify:x:@.arguments/*/password
      hash:x:@data.read/*/*/password
   if
      get-value:x:@crypto.password.verify
      .lambda

         // Password is correct, creating and returning a new JWT token to the client.
         auth.ticket.create
            username:x:@.arguments/*/username
            roles
               .:guest
         yield
            token:x:@auth.ticket.create

   else

      // Throw exception if password is incorrect
      throw:Invalid credentials
         status:403
         public:true
