/*
 * Generates a password reset token and sends an email allowing users to change their passwords without knowing their existing password.
 *
 * Assumes you've got a database named 'YOUR_AUTH_DATABASE' with two tables named 'YOUR_AUTH_TABLE' where you store your
 * usernames and passwords (the usernames is the email address of the user), and another table called
 * 'YOUR_AUTH_TABLE_RESET_TOKENS' where you store reset tokens. 
 *
 * This function will create a record and store into its reset tokens table,
 * for then to send a token in an email to the user's email address, allowing the user to click the link in the email,
 * for then to change his or her password at a URL which must capture the token and new password and pass it into the endpoint
 * that actually changes the password.
 */
.arguments
   email:string

// Validate email exists
data.connect:YOUR_AUTH_DATABASE
   data.read
      table:YOUR_AUTH_TABLE
      where
         and
            email.eq:x:@.arguments/*/email

   // Check if user exists
   if
      exists:x:@data.read/*
      .lambda

         // Generate a secure random token, and making sure token doesn't contain / character
         crypto.random
            length:48
         .token
         set-value:x:@.token
            strings.replace:x:@crypto.random
               .:/
               .:-

         // Calculate expiration (1 hour from now)
         math.add
            date.now
            time
               hours:1

         // Store token in dedicated table
         data.connect:YOUR_AUTH_DATABASE
            data.create
               table:YOUR_AUTH_TABLE_RESET_TOKENS
               values
                  token:x:@.token
                  email:x:@.arguments/*/email
                  expires:x:@math.add

         // Construct reset link
         .url
         set-value:x:@.url
            strings.concat
               .:"https://URL_OF_PAGE_WHERE_USERS_CAN_CHANGE_THEIR_PASSWORDS"
               .:"?token="
               get-value:x:@.token

         // Add the link to the text
         strings.concat
            .:@"Please click the following link to reset your password. This link will expire in 1 hour.

"
            get-value:x:@.url

         // Send email with reset link
         unwrap:x:+/**
         mail.smtp.send
            message
               to
                  .
                     email:x:@.arguments/*/email
               subject:Password Reset Request
               entity:text/plain
                  content:x:@strings.concat

         // Return success response
         return
            result:Password reset link sent

   else

      // User not found
      throw:Email not found in system
         status:404
         public:true
         field:email
