
/*
 * This Hyperlambda HTTP endpoint streams a PDF file to the client for download, based on the provided filename.
 *
 * ## Slot Documentation
 *
 * - [validators.mandatory]
 *   Ensures that the [file] argument is provided by the caller. This prevents unnecessary processing without input.
 *
 * - [strings.concat]
 *   Combines the static path '/srv/lms/materials/' with the [file] name to build the full file path to the PDF.
 *   A second usage builds the [Content-Disposition] header to inform the browser to treat the content as a file download.
 *
 * - [set-value]
 *   Stores the computed file path in [.filename-and-path], which is later used for file access.
 *
 * - [response.headers.set]
 *   Sets response headers to:
 *     - [Content-Type] as 'application/pdf'
 *     - [Content-Disposition] to force a download with the original filename
 *     - [Access-Control-Expose-Headers] to ensure the [Content-Disposition] header is visible to browsers (CORS requirement)
 *
 * - [io.stream.open-file]
 *   Opens the target file as a stream, which allows the system to serve the file in a memory-efficient way.
 *
 * - [return]
 *   Streams the PDF file back to the client directly as the HTTP response payload.
 *
 * ## Summary
 * This endpoint provides secure, validated file delivery for PDF course materials, supports CORS, and handles large files efficiently via streaming.
 */
.arguments
   file:string

validators.mandatory:x:@.arguments/*/file

// Building the full file path
.filename-and-path
set-value:x:-
   strings.concat
      .:"/srv/lms/materials/"
      get-value:x:@.arguments/*/file

// Constructing file name for download header
strings.concat
   .:"attachment; filename=\""
   get-value:x:@.arguments/*/file
   .:"\""
response.headers.set
   Content-Type:application/pdf
   Content-Disposition:x:@strings.concat
   Access-Control-Expose-Headers:Content-Disposition

// Streaming the PDF to the client
io.stream.open-file:x:@.filename-and-path

// Returns stream raw back to coller on socket.
return:x:-
