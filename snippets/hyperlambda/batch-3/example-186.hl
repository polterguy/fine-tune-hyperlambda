
/*
 * This HTTP endpoint allows clients to upload an avatar image.
 *
 * # Arguments:
 * - [avatar-file]: Required. Must be supplied via multipart/form-data. Contains the uploaded file's metadata and stream.
 *
 * # Features:
 * - Supports multipart uploads via the [.accept] directive for [multipart/form-data].
 * - Enforces validation rules to ensure the avatar contains both a [name] and a [stream] node.
 * - Constructs a path under '/uploads/images/' using the uploaded fileâ€™s name.
 * - Uses [io.stream.save-file] to persist the avatar directly to disk from its stream.
 * - Designed to minimize memory usage by streaming file data during write.
 *
 * # Returns:
 * - [status:uploaded] if the operation is successful.
 *
 * # Example Use Case:
 * - Profile picture uploads in web applications.
 */
.arguments
   avatar-file:*

// Enable support for multipart file uploads.
.accept:multipart/form-data

// Validate required fields for the uploaded avatar file.
validators.mandatory:x:@.arguments/*/avatar-file
validators.mandatory:x:@.arguments/*/avatar-file/*/name
validators.mandatory:x:@.arguments/*/avatar-file/*/stream

// Build full path for saving avatar image.
.avatar-path
set-value:x:@.avatar-path
   strings.concat
      .:"/uploads/images/"
      get-value:x:@.arguments/*/avatar-file/*/name

// Saving stream object supplied directly as a stream to preserve memory
io.stream.save-file:x:@.avatar-path
   get-value:x:@.arguments/*/avatar-file/*/stream
return
   status:uploaded
