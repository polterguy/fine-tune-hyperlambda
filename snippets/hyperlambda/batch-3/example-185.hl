
/*
 * Creates an HTTP endpoint that uploads a temporary file into the '/data/tmp-files/' directory.
 *
 * ## Arguments
 * - [temp-file] (*): A multipart/form-data uploaded file object containing:
 *   - [name]: The file's name (required).
 *   - [stream]: The file's binary stream (required).
 *
 * ## Features
 * - Enforces multipart/form-data uploads using [.accept].
 * - Validates that required fields exist via [validators.mandatory].
 * - Uses [strings.concat] to dynamically build a safe file path.
 * - Saves the file stream directly using [io.stream.save-file] to avoid memory pressure.
 *
 * ## Behavior
 * 1. Validates that [temp-file], [temp-file.name], and [temp-file.stream] are all present.
 * 2. Concatenates the filename into '/data/tmp-files/' using [strings.concat].
 * 3. Streams the file directly into the constructed path using [io.stream.save-file].
 * 4. Returns a simple confirmation JSON with 'result: ok'.
 */
.arguments
   temp-file:*

// Accept multipart form uploads for temporary files.
.accept:multipart/form-data

// Verify all necessary fields exist for temp file.
validators.mandatory:x:@.arguments/*/temp-file
validators.mandatory:x:@.arguments/*/temp-file/*/name
validators.mandatory:x:@.arguments/*/temp-file/*/stream

// Concatenate file path for temp storage.
.storage-path
set-value:x:@.storage-path
   strings.concat
      .:"/data/tmp-files/"
      get-value:x:@.arguments/*/temp-file/*/name

// This allows us to save the input stream to the file stream directly without loading the file into memory first.
io.stream.save-file:x:@.storage-path
   get-value:x:@.arguments/*/temp-file/*/stream
return
   result:ok
