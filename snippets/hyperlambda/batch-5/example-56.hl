/*
 * Removes a subset of items from the [.inventory] node using a **numeric subtree iterator**.
 *
 * ## Slot Documentation
 *
 * - [.inventory]
 *   A static list of inventory items. Each child node under [.inventory] represents an individual product record,
 *   containing:
 *   - [product]: The name of the product.
 *   - [category]: The category the product belongs to.
 *   - [stock]: The number of units in stock.
 *   The list includes four example items across categories like Electronics, Furniture, and Stationery.
 *
 * - [remove-nodes]
 *   This slot deletes a **range of nodes** from the [.inventory] collection based on a numeric index expression.
 *
 *   The lambda expression works as follows:
 *   - `@.inventory`: Finds the [.inventory] node by name.
 *   - `*`: Selects all child product records.
 *   - `[0,1]`: A **numeric iterator** that selects a **subrange** of child nodes,
 *     starting from index `0` (the first item) and retrieving `1` additional item,
 *     for a total of **1 item**: being the first item in the list.
 *
 *   These selected nodes are then removed by [remove-nodes], permanently deleting them from the tree.
 *
 * ## Summary
 * This example demonstrates how to surgically remove a block of items from a node collection
 * using the numeric range syntax `[start,count]`. It is especially useful when you need to delete
 * a specific slice of records from a list-like structure, and can help facilitate pagination, trimming,
 * or pre-processing of static data in Hyperlambda.
 */
.inventory
   .
      product:Laptop
      category:Electronics
      stock:10
   .
      product:Desk
      category:Furniture
      stock:5
   .
      product:Mouse
      category:Electronics
      stock:8
   .
      product:Notebook
      category:Stationery
      stock:15
remove-nodes:x:@.inventory/*/[0,1]
