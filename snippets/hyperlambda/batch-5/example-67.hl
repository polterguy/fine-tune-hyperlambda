/*
 * Removes the [price] field from every item in the [.products] list using [for-each].
 *
 * ## Slot Documentation
 *
 * - [.products]
 *   This node defines a static array of product entries. Each product includes:
 *   - [name]: The product's name.
 *   - [available]: A boolean flag indicating availability.
 *   - [price]: A decimal value representing the product's price.
 *   This structure simulates a product catalog where each item includes pricing and availability information.
 *
 * - [for-each]
 *   Iterates over all product nodes using the lambda expression `x:@.products/*`.
 *   Each iteration context is represented by [.dp], which references the current product node in the loop.
 *
 * - [remove-nodes]
 *   This slot is used to delete a specific child node from the currently iterated product.
 *   The lambda expression `x:@.dp/#/*/price` works as follows:
 *   - `@.dp` accesses the current node in the loop.
 *   - `#` accesses the node **by reference**, rather than value.
 *   - `*` accesses all children of the current product node.
 *   - `price` filters to the node named `price`.
 *   The result is that only the [price] node of each product is selected and removed.
 *
 * ## Summary
 * This snippet demonstrates how to use [for-each] and [remove-nodes] to selectively prune a specific field
 * from all items in a structured list. This is useful in scenarios where sensitive or redundant data needs
 * to be stripped before returning or persisting information.
 */
.products
   .
      name:Monitor
      available:bool:true
      price:199.99
   .
      name:Keyboard
      available:bool:true
      price:49.99
   .
      name:Headphones
      available:bool:true
      price:89.99
for-each:x:@.products/*
   remove-nodes:x:@.dp/#/*/price
