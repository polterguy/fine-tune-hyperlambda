
/*
 * Demonstrates how to extract a specific record from a collection using a numeric iterator,
 * and return individual fields using [yield] in Hyperlambda.
 *
 * ## Slot Documentation
 *
 * - [.arguments]
 *   Declares this file as a valid HTTP endpoint. Although it doesnâ€™t require external arguments for execution,
 *   this node is necessary to mark the file as a callable endpoint.
 *
 * - [.courses]
 *   Contains a hardcoded array of course records. Each child node represents a course with:
 *   - [code]: A unique course code identifier (e.g., "CS101").
 *   - [title]: A descriptive name for the course.
 *   This dataset is statically defined for illustration purposes.
 *
 * - [code] and [title] inside of [yield]
 *   These expressions use **numeric iterators** to access the **first record** in the [.courses] collection (index 0),
 *   then extract the [code] and [title] fields from that course.
 *   The `0` in the path denotes the position of the first element in the array-style node list.
 *   The use of `*` allows access to child nodes such as [code] and [title] of that first course.
 *
 * - [yield]
 *   Automatically **unwraps** all lambda expressions under it, meaning any expression beneath [yield]
 *   is evaluated before returning the result. Unlike [return], which requires [unwrap],
 *   [yield] simplifies response construction by directly evaluating lambda expressions.
 *   The result is a clean JSON object with [code] and [title] from the first course entry.
 *
 * ## Summary
 * This snippet illustrates the use of numeric node indexing to select elements from an array-like structure,
 * combined with the expressive power of [yield] to return evaluated results to the client.
 * It is a best practice to use [yield] for returning computed values because of its built-in expression evaluation.
 */
.arguments
.courses
   .
      code:CS101
      title:Introduction to Computer Science
   .
      code:MATH201
      title:Linear Algebra
yield
   code:x:@.courses/0/*/code
   title:x:@.courses/0/*/title
