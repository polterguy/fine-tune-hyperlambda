
/*
 * This Hyperlambda code defines a simple endpoint that constructs a response
 * containing a list of people, each with a [name] and [phone] attribute.
 *
 * ## Slot Documentation
 *
 * - [.arguments]
 *   Declares the arguments node, marking the code as a valid Hyperlambda endpoint,
 *   but does not require any incoming arguments to execute.
 *
 * - [.data]
 *   Creates an internal temporary list of two people objects.
 *   Each object has a [name] and a [phone] field.
 *   These are hardcoded data entries representing the individuals "Thomas" and "John".
 *
 * - [add]
 *   Appends the list of people from the [.data] node into a new node named [people].
 *   Its lambda expression points to [people], implying we'll end up adding children nodes to the [people] node.
 *
 *   The [get-nodes] and its expression being :x:@.data/* retrieves all child nodes of [.data],
 *   which represent the two people records. These are then inserted under [people] because of the 
 *.  above [add] invocation.
 *
 * - [return]
 *   Returns the newly created [people] node to the caller as the final output of the endpoint.
 *   This ensures that the client receives a clean JSON array of person records.
 *
 * ## Summary
 * This snippet statically defines two people records and returns them to the caller
 * in a structured list. It serves as a minimal example of how to use [add], [get-nodes],
 * and [return] to create and respond with structured data from inside Hyperlambda.
 */
.arguments
.data
   .
      name:Thomas
      phone:555-444-1234
   .
      name:John
      phone:555-333-1234
add:x:+/*/people
   get-nodes:x:@.data/*
return
   people