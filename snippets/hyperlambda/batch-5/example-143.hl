/*
 * This Hyperlambda snippet uses [apply] to replace expressions inside a node tree with evaluated values.
 * It demonstrates the use of placeholders like `{language}`, `{timezone}`, and `{notifications}`,
 * which are dynamically replaced with actual values passed to [apply].
 *
 * [.data] / [user]
 *   - This is a pre-defined template node that contains placeholders in its child node values.
 *   - The placeholders are wrapped in curly braces (e.g., `{language}`), and they reference node names
 *     expected to be defined inside the [apply] block.
 *   - When [apply] is invoked, these placeholders are replaced by the actual evaluated values
 *     defined in its children.
 *   - The result is that the expressions are substituted with their corresponding literal values.
 *
 * [apply]
 *   - Applies its children (language, timezone, notifications) as **named bindings**,
 *     which are substituted into any placeholder expressions found in [.data]’s structure.
 *   - It searches through [.data] and replaces any values matching `{xxx}` with the evaluated result of
 *     a node named 'xxx' inside the [apply] block.
 *   - This mechanism allows you to inject data into an existing structure without modifying the structure directly.
 *
 * [language], [timezone], [notifications]
 *   - These are values provided to the [apply] slot that match the placeholder names in [.data.user].
 *   - [language] is replaced into {language} → 'en'
 *   - [timezone] is replaced into {timezone} → 'UTC'
 *   - [notifications] is replaced into {notifications} → true
 *
 * Result:
 *   - After [apply] executes, the structure of [.data] becomes:
 *
 *     .data
 *        user
 *           lang:en
 *           zone:UTC
 *           notify:bool:true
 *
 *   - All placeholder tokens are resolved and replaced with actual values in-place.
 */
.data
   user
      lang:{language}
      zone:{timezone}
      notify:{notifications}
apply:x:@.data
   language:en
   timezone:UTC
   notifications:bool:true

