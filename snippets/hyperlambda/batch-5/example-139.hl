/*
 * This slot adjusts a user's loyalty points based on their activity type.
 *
 * [slots.create]
 *   - Declares a reusable logic unit named 'loyalty.adjust'.
 *
 * [validators.mandatory]
 *   - Ensures that the required inputs ('user_id', 'points', 'current', and 'activity') are present.
 *
 * [.new_total]
 *   - Temporary container for the calculated result.
 *
 * [data.connect]
 *   - Opens a connection to the 'customers' database, enabling subsequent database operations like [data.create].
 *
 * [if]
 *   - Checks if the value of 'activity' is equal to 'purchase'.
 *
 * [eq]
 *   - Compares two values for equalityâ€”in this case, the activity type.
 *
 * [set-value]
 *   - Assigns a computed value (from [math.add] or [math.subtract]) into [.new_total].
 *
 * [math.add]
 *   - Performs addition of current + points when activity is 'purchase'.
 *
 * [math.subtract]
 *   - Subtracts points from current when the activity is 'refund'.
 *
 * [data.create]
 *   - Inserts a new record into the 'loyalty_log' table to log the operation.
 *
 * [unwrap]
 *   - Ensures any expressions like 'x:@.new_total' are fully evaluated before returning.
 *     Without this, references would be returned instead of raw values.
 *
 * [return]
 *   - Returns the result as a resolved value to the caller.
 */
slots.create:loyalty.adjust
   validators.mandatory:x:@.arguments/user_id
   validators.mandatory:x:@.arguments/points
   validators.mandatory:x:@.arguments/current
   validators.mandatory:x:@.arguments/activity
   .new_total
   data.connect:customers
      if
         eq:x:@.arguments/*/activity
            .:purchase
         .lambda
            set-value:x:@.new_total
               math.add
                  get-value:x:@.arguments/*/current
                  get-value:x:@.arguments/*/points
            data.create
               table:loyalty_log
               values
                  user_id:x:@.arguments/*/user_id
                  type:purchase
                  value:x:@.arguments/*/points
      else-if
         eq:x:@.arguments/*/activity
            .:refund
         .lambda
            set-value:x:@.new_total
               math.subtract
                  get-value:x:@.arguments/*/current
                  get-value:x:@.arguments/*/points
            data.create
               table:loyalty_log
               values
                  user_id:x:@.arguments/*/user_id
                  type:refund
                  value:x:@.arguments/*/points
   unwrap:x:+/*
   return
      total_points:x:@.new_total
