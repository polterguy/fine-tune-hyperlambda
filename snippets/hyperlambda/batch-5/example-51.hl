/*
 * Updates the name of all cities where the country is "USA".
 *
 * ## Slot Documentation
 *
 * - [.cities]
 *   This node defines a static list of city records. Each city object contains:
 *   - [name]: The name of the city.
 *   - [country]: The country the city belongs to.
 *   In this case, four cities are hardcoded, each nested under a unique unnamed child node.
 *
 * - [set-value]
 *   This slot is used to **update the value of a node** that matches a lambda expression selector.
 *   Its expression works as follows:
 *
 *   - `@.cities` selects the first node upwards named `.cities`.
 *   - `*` selects its children nodes.
 *   - `*` selects grand children nodes.
 *   - `country` filters out everything **NOT** matching the name `country`, we've now got two nodes.
 *   - `=USA` filters the result to only those [country] nodes with the value `"USA"`.
 *   - `.` navigates to its parent node again ([.]).
 *   - `*` returns all its children again.
 *   - `name` filters out all nodes **NOT** having the name of `name`. We're now at only one node, being the one with 'New York'
 *
 *   This pattern is powerful for **locating and modifying nodes based on sibling criteria** within structured data.
 *
 * - New Value
 *   All matching [name] nodes will be updated to "New York City".
 *   In this example, only the entry for `"USA"` will be affected, and its name will be updated accordingly.
 *
 * ## Summary
 * This code demonstrates the use of advanced lambda expressions to filter and update a nested data structure.
 * It shows how to identify nodes based on sibling values and update them in-place using [set-value].
 * This is a typical pattern when transforming or normalizing structured data inside Hyperlambda.
 */
.cities
   .
      name:New York
      country:USA
   .
      name:London
      country:UK
   .
      name:Berlin
      country:Germany
   .
      name:Tokyo
      country:Japan
set-value:x:@.cities/*/*/country/=USA/./*/name
   .:New York City
