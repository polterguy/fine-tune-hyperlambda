
/*
 * This Hyperlambda endpoint demonstrates how to use a **subtree index iterator** to return a slice of a collection.
 * Specifically, it illustrates how to return a subset of elements using `[start, count]` syntax in a lambda expression.
 *
 * ## Slot Documentation
 *
 * - [.arguments]
 *   Declares this file as a valid HTTP endpoint. While it doesn't accept any external parameters,
 *   the presence of this node ensures the file can be invoked via HTTP.
 *
 * - [.employees]
 *   Statically defines a list of employee records. Each node contains:
 *   - [name]: The name of the employee.
 *   - [department]: The department they belong to.
 *   This example includes four such records for illustration.
 *
 * - [yield]
 *   Used to return the desired output back to the client. The lambda expression under [employees]
 *   uses the subtree index notation `[1,2]`.
 *   - `1` is the **starting index** (based on **zero-based indexing**, so the second element).
 *   - `2` is the **number of items** to include starting from index `1`.
 *
 *   As a result, this expression yields the **second and third employee records** from the [.employees] list.
 *   This technique is useful for creating partial or paginated responses from array-style nodes.
 *
 * ## Summary
 * This snippet illustrates how to extract a portion of an array using numeric slice notation in lambda expressions,
 * and how [yield] makes it simple to return clean structured data without requiring explicit evaluation of nodes.
 */
.arguments
.employees
   .
      name:Sara Bloom
      department:Marketing
   .
      name:Leo Turner
      department:Engineering
   .
      name:Jane
      department:Sales
   .
      name:Jenny
      department:HR
yield
   employees:x:@.employees/*/[1,2]