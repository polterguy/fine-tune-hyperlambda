/*
 * This example acts as a bridge between backend logic and API response handling,
 * especially useful in API gateways and request dispatchers.
 *
 * - It invokes a dynamic slot that returns [status] and [headers].
 * - [status] contains the HTTP status code (e.g., 200, 404).
 * - [headers] contains named children like 'Content-Type', 'X-Trace-ID', etc.
 *
 * The [response.status.set] slot sets the HTTP status code using [x:@...].
 * The [add] slot pushes all header nodes into a parent [response.headers.set],
 * followed by an explicit call to apply the headers to the outgoing HTTP response.
 */
execute:whatever.slot.returning.status.and.headers

response.status.set:x:@execute/*/status

add:x:./*/response.headers.set
   get-nodes:x:@execute/*/headers
response.headers.set
