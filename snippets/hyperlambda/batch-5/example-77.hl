/*
 * Processes tasks from [.pending-tasks] into [.completed-tasks] using a [while] loop.
 *
 * ## Slot Documentation
 *
 * - [.pending-tasks]
 *   A list of tasks, each with:
 *   - [description]: The task to be completed.
 *   - [priority]: A tag indicating urgency.
 *   Example entries simulate a basic to-do list structure.
 *
 * - [.completed-tasks]
 *   Starts as an empty container that is filled during iteration.
 *   Each task is transferred from the pending queue into this node.
 *
 * - [while]
 *   Runs until [.pending-tasks] is empty. It uses `exists:x:@.pending-tasks/0` to check if there are tasks left.
 *
 * - [add]
 *   Transfers the first task in the list from [.pending-tasks] into [.completed-tasks].
 *
 * - [remove-nodes]
 *   Deletes the transferred task from the original list to prevent duplication.
 *
 * ## Summary
 * This pattern enables safe processing of tasks, simulating task queue consumption.
 * It shows how to move items in-place and supports task management or automation flows in Hyperlambda.
 */
.pending-tasks
   .
      description:Email client
      priority:High
   .
      description:Update website footer
      priority:Medium
   .
      description:Clean whiteboard
      priority:Low
.completed-tasks
while
   exists:x:@.pending-tasks/0
   .lambda
      add:x:@.completed-tasks
         get-nodes:x:@.pending-tasks/0
      remove-nodes:x:@.pending-tasks/0
