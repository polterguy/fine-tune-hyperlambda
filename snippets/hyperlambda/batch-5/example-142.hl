
/*
 * This Hyperlambda snippet demonstrates how to rename the **values** of deeply nested nodes
 * by assigning each node's **name** as its **value** using [for-each] and [set-value].
 *
 * [.source] / [preferences]
 *   - This is the source data structure containing user preference settings as individual nodes
 *     under [.source] / [preferences]. Each child node represents a preference key (e.g., 'theme', 'notifications').
 *
 * [for-each]
 *   - Iterates over every direct child node of [.source/preferences], regardless of its name.
 *   - During each iteration:
 *     - [.dp] holds a reference to the current node.
 *     - [#] accesses the value of that node.
 *     - [.dp] by itself refers to the full node (including name and value).
 *
 * [set-value:x:@.dp/#]
 *   - Replaces the value of the current preference node.
 *   - The path [.dp/#] accesses the current node, and [set-value] will overwrite its value.
 *
 * [get-name:x:@.dp/#]
 *   - Retrieves the **name** of the current node and returns it as a string.
 *   - This is then assigned as the new value using [set-value].
 *
 * Result:
 *   - All values under [.source] / [preferences] will be overwritten with their own node names.
 *   - For example:
 *       theme → theme
 *       notifications → notifications
 *       fontSize → fontSize
 */
.source
   preferences
      theme:dark
      notifications:enabled
      fontSize:int:14
for-each:x:@.source/*/preferences/*
   set-value:x:@.dp/#
      get-name:x:@.dp/#