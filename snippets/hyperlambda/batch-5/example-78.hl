/*
 * Moves all items from [.inventory] to [.result] one-by-one using a [while] loop.
 *
 * ## Slot Documentation
 *
 * - [.inventory]
 *   This node defines a static list of inventory items, where each child represents a product with:
 *   - [name]: The product's name.
 *   - [stock]: An integer representing the number of units in stock.
 *   In this example, three items are hardcoded: USB Hub, Wireless Mouse, and Webcam.
 *
 * - [.result]
 *   This initially empty node will be populated by the loop with items taken from [.inventory].
 *   It becomes the new location for all product entries after the loop completes.
 *
 * - [while]
 *   Continues to loop **as long as the first item in [.inventory] exists**.
 *   The lambda expression `exists:x:@.inventory/0` checks if the node at index 0 is present.
 *
 * - [add]
 *   Adds the first item from [.inventory] (using `x:@.inventory/0`) to [.result].
 *   The use of [get-nodes] ensures the full structure of the product node is transferred.
 *
 * - [remove-nodes]
 *   Deletes the first item from [.inventory] after itâ€™s been added to [.result],
 *   effectively shifting the remaining items left by one index.
 *   This ensures the next iteration will always work on the new first item.
 *
 * ## Summary
 * This pattern implements a queue-like transfer mechanism: **drain one list into another** using a loop.
 * It highlights how [while], [exists], [add], and [remove-nodes] can be combined to incrementally
 * move data from one node tree to another in Hyperlambda. This is useful for batch processing,
 * reordering, or transforming datasets one item at a time.
 */
.inventory
   .
      name:USB Hub
      stock:int:5
   .
      name:Wireless Mouse
      stock:int:12
   .
      name:Webcam
      stock:int:8
.result
while
   exists:x:@.inventory/0
   .lambda
      add:x:@.result
         get-nodes:x:@.inventory/0
      remove-nodes:x:@.inventory/0