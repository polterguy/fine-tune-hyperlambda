
/*
 * Generates an Angular frontend for you wrapping the given [endpoints].
 * The frontend will contain one grid component for each CRUD method group supplied,
 * in addition to an edit/create modal dialogue, and an HTTP service endpoint
 * for each HTTP REST endpoint you supply.
 */


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/args/*/palette


/*
 * Communicating custom arguments to consumers.
 */
.custom
   palette
      .
         name:Light blue
         value:mat-light-blue
      .
         name:Red
         value:mat-red
      .
         name:Pink
         value:mat-pink
      .
         name:Purple
         value:mat-purple
      .
         name:Deep purple
         value:mat-deep-purple
      .
         name:Indigo
         value:mat-indigo
      .
         name:Blue
         value:mat-blue
      .
         name:Cyan
         value:mat-cyan
      .
         name:Teal
         value:mat-teal
      .
         name:Green
         value:mat-green
      .
         name:Light green
         value:mat-light-green
      .
         name:Lime
         value:mat-lime
      .
         name:Yellow
         value:mat-yellow
      .
         name:Amber
         value:mat-amber
      .
         name:Orange
         value:mat-orange
      .
         name:Deep orange
         value:mat-deep-orange
      .
         name:Brown
         value:mat-brown
      .
         name:Grey
         value:mat-grey
      .
         name:Blue grey
         value:mat-blue-grey
   theme
      .
         name:Light
         value:mat-light-theme
      .
         name:Dark
         value:mat-dark-theme


/*
 * Doing some logging.
 */
log.info:Generating an ngx-generator Angular frontend


/*
 * Retrieves main folder we're currently working in, to allow
 * for retrieving files relative to our current "working directory".
 */
io.path.get-folder:x:@.filename


/*
 * Transforming our CRUD methods, such that they become slightly more structured.
 *
 * This is later used to generate our components, since we create one component for each
 * CRUD type of endpoint that we were given as input.
 */
.crud-methods
add:x:+/*
   get-nodes:x:@.arguments/*
add:x:@.crud-methods
   io.file.execute:/misc/templates/common/structure-endpoints.hl


/*
 * Creating our HTTP Client service method implementations,
 * by invoking a helper file responsible for parsing arguments,
 * and creating our TypeScript HTTP client methods accordingly.
 */
.http-service-methods
add:x:+/*
   get-nodes:x:@.crud-methods/*
set-value:x:@.http-service-methods
   io.file.execute:/misc/templates/common/create-angular-service-methods.hl


/*
 * These two nodes will contain all template files.
 *
 * The [.main-files] will contain the main template files.
 * The [.component-files] will contain the "per component" files, and
 * will be duplicated once for each component that is dynamically created.
 *
 * The [.component-files] will be used as the basis for creating one component for each
 * CRUD endpoint method group specified by caller.
 */
.main-files
.component-files


/*
 * Loads all files in "main" Angular template folder recursively.
 */
unwrap:x:+/*/*/*
add:x:@.main-files
   signal:magic.io.file.load-recursively
      strings.concat
         .:x:@io.path.get-folder
         .:templates/main/
      .hidden-files:bool:true


/*
 * Loads all files in "component" Angular template folder recursively.
 */
unwrap:x:+/*/*/*
add:x:@.component-files
   signal:magic.io.file.load-recursively
      strings.concat
         .:x:@io.path.get-folder
         .:templates/component/
      .hidden-files:bool:true


/*
 * Removing "root" parts of our folder names in [.main-files], to create a
 * more friendly folder structure that we return to caller.
 */
strings.trim-start:x:@io.path.get-folder
   .:/
for-each:x:@.main-files/*
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         strings.concat
            get-value:x:@strings.trim-start
            .:templates/main
         get-value:x:@.arguments/*/name


/*
 * Replacing component filenames such that we can keep them
 * slightly more semantically correct before starting transformation process.
 *
 * This makes it easier for us to later dynamically replace the filenames
 * of our component files, according to their component name.
 */
for-each:x:@.component-files/*
   strings.replace:x:@.dp/#
      .:component.
      .:[[component-filename]].
   strings.replace:x:@strings.replace
      strings.concat
         get-value:x:@io.path.get-folder
         .:templates/component/
      .:/[[component-folder]]/
   set-value:x:@.dp/#
      get-value:x:@strings.replace


/*
 * Loading router link file, that contains the declaration for
 * our router links.
 */
.router-link-file
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/misc/router-link.html
set-value:x:@.router-link-file
   io.file.load:x:@strings.concat


/*
 * Loading import file, that contains the import declarations for components.
 */
.imports-file
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/misc/import.ts
set-value:x:@.imports-file
   io.file.load:x:@strings.concat
.imports-file-only-grid
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/misc/import-only-grid.ts
set-value:x:@.imports-file-only-grid
   io.file.load:x:@strings.concat


/*
 * Loading router declaration file.
 */
.router-declaration-file
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/misc/router-declaration.ts
set-value:x:@.router-declaration-file
   io.file.load:x:@strings.concat


/*
 * Building our CRUD components.
 */
.components
strings.concat
   get-value:x:@io.path.get-folder
   .:generator/generate-components.hl
add:x:+/+/+/*
   get-nodes:x:@.component-files
add:x:+/+/*
   get-nodes:x:@.crud-methods
unwrap:x:+/*/*
add:x:@.components
   io.file.execute:x:@strings.concat
      root-folder:x:@io.path.get-folder


/*
 * Retrieving import statements/router declarations,
 * etc, for each component we have.
 */
.imports
.imports-only-main
.routes
.module-declarations
.entry-components
.router-links
for-each:x:@.crud-methods/*


   /*
    * Verifying GET verbs exists for CRUD method.
    */
   if
      exists:x:@.dp/#/*/verbs/*/get
      .lambda


         /*
          * Import declarations.
          */
         strings.replace:x:@.imports-file
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[component-folder]]
            get-value:x:@.dp/#/*/component-folder
         strings.replace:x:-
            .:[[component-filename]]
            get-value:x:@.dp/#/*/component-filename
         strings.replace:x:-
            .:[[component-edit-name]]
            get-value:x:@.dp/#/*/component-edit-name
         strings.replace:x:-
            .:[[component-edit-filename]]
            get-value:x:@.dp/#/*/component-edit-filename
         set-value:x:@.imports
            strings.concat
               get-value:x:@.imports
               get-value:x:@strings.replace


         /*
          * Import declarations (only main component imports).
          */
         strings.replace:x:@.imports-file-only-grid
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[component-folder]]
            get-value:x:@.dp/#/*/component-folder
         strings.replace:x:-
            .:[[component-filename]]
            get-value:x:@.dp/#/*/component-filename
         set-value:x:@.imports-only-main
            strings.concat
               get-value:x:@.imports-only-main
               get-value:x:@strings.replace


         /*
          * Router declarations.
          */
         strings.replace:x:@.router-declaration-file
            .:[[component-name]]
            strings.capitalize:x:@.dp/#/*/component-name
         strings.replace:x:-
            .:[[router-url]]
            get-value:x:@.dp/#/*/component-routing-url
         set-value:x:@.routes
            strings.concat
               get-value:x:@.routes
               get-value:x:@strings.replace


         /*
          * Router links.
          */
         strings.replace:x:@.router-link-file
            .:[[url]]
            get-value:x:@.dp/#/*/component-routing-url
         strings.replace:x:@strings.replace
            .:[[endpoint-url]]
            get-value:x:@.dp/#/*/url
         strings.replace:x:@strings.replace
            .:[[name]]
            get-value:x:@.dp/#/*/component-header
         set-value:x:@.router-links
            strings.concat
               get-value:x:@.router-links
               get-value:x:@strings.replace


         /*
          * Module declarations.
          */
         set-value:x:@.module-declarations
            strings.concat
               get-value:x:@.module-declarations
               .:"    "
               get-value:x:@.dp/#/*/component-name
               .:",\r\n"
               .:"    "
               get-value:x:@.dp/#/*/component-edit-name
               .:",\r\n"


         /*
          * Adding entry components, which basically is the edit modal windows
          * for each component we have.
          */
         set-value:x:@.entry-components
            strings.concat
               get-value:x:@.entry-components
               .:"    "
               get-value:x:@.dp/#/*/component-edit-name
               .:",\r\n"


/*
 * Replacing any [[imports]], [[imports-only-main]], [[routes]],
 * etc in any of our main files.
 */
for-each:x:@.main-files/*


   /*
    * Replacing [[palette]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[palette]]
         get-value:x:@.arguments/*/args/*/palette


   /*
    * Replacing [[theme]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[theme]]
         get-value:x:@.arguments/*/args/*/theme


   /*
    * Replacing [[frontendUrl]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[frontendUrl]]
         get-value:x:@.arguments/*/frontendUrl


   /*
    * Replacing [[email]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[email]]
         get-value:x:@.arguments/*/email


   /*
    * Replacing [[router-links]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[router-links]]
         get-value:x:@.router-links


   /*
    * Replacing [[imports]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[imports]]
         get-value:x:@.imports


   /*
    * Replacing [[imports-only-main]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[imports-only-main]]
         get-value:x:@.imports-only-main


   /*
    * Replacing [[routes]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[routes]]
         get-value:x:@.routes


   /*
    * Replacing [[module-declarations]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[module-declarations]]
         get-value:x:@.module-declarations


   /*
    * Replacing [[entry-components]]
    */
   set-value:x:@.dp/#/*
      strings.replace:x:@.dp/#/*
         .:[[entry-components]]
         get-value:x:@.entry-components


/*
 * Making sure we position our components correctly inside of our zip file.
 */
for-each:x:@.components/*
   set-value:x:@.dp/#
      strings.concat
         .:/
         get-value:x:@.arguments/*/name
         .:/src/app/components
         get-value:x:@.dp/#


/*
 * Some template fields needs the name in to-lower form, without spaces.
 */
.name-lowers
set-value:x:@.name-lowers
   strings.to-lower:x:@.arguments/*/name
set-value:x:@.name-lowers
   strings.replace-not-of:x:@.name-lowers
      .:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0987654321
      .:_


/*
 * Iterating through each [.main-files] and doing substitutions
 * according to specifications and meta information.
 *
 * Notice, this is not a completely optimal approach, since according to the
 * way our template files are looking, we could further have optimised things slightly.
 *
 * However, to accommodate for future changes, such as for instance having the
 * name of the app in *any* file we wish, we do things this way, to make sure
 * we have a substitution process that is as flexible and generic as we possibly can.
 */
for-each:x:@.main-files/*/*


   /*
    * Replacing all [[name]] occurrencies.
    */
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[name]]
         get-value:x:@.arguments/*/name


   /*
    * Replacing all [[name-lowers]] occurrencies.
    */
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[name-lowers]]
         get-value:x:@.name-lowers


   /*
    * Replacing all [[apiUrl]] occurrencies.
    */
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[apiUrl]]
         get-value:x:@.arguments/*/apiUrl


   /*
    * Replacing all [[environmentDomain]] occurrencies.
    */
   strings.split:x:@.arguments/*/apiUrl
      .:"://"
   strings.split:x:-/1
      .:/
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[environmentDomain]]
         get-value:x:@strings.split/0


   /*
    * Replacing all [[http-client-service-method-implementations]] occurrencies.
    */
   set-value:x:@.dp/#
      strings.replace:x:@.dp/#
         .:[[http-client-service-method-implementations]]
         get-value:x:@.http-service-methods


/*
 * Adding all generated files to return value.
 */
add:x:../*/.return-nodes
   get-nodes:x:@.main-files/*
add:x:../*/.return-nodes
   get-nodes:x:@.components/*


/*
 * Applying copyright, if given.
 */
if
   and
      not
         eq
            get-value:x:@.arguments/*/copyright
            .:
      not
         eq
            get-value:x:@.arguments/*/copyright
            .
   .lambda


      /*
       * Copyright notice was supplied.
       */
      for-each:x:../*/.return-nodes/*
         if
            or
               strings.ends-with:x:@.dp/#
                  .:.ts
               strings.ends-with:x:@.dp/#
                  .:.js
               strings.ends-with:x:@.dp/#
                  .:.css
               strings.ends-with:x:@.dp/#
                  .:.scss
               strings.ends-with:x:@.dp/#
                  .:.sass
            .lambda


               /*
                * Currently iterated file is of a type that can tolerate
                * having a copyright header comment.
                */
               set-value:x:@.dp/#/*
                  strings.concat
                     .:"/*\r\n"
                     .:" * "
                     get-value:x:@.arguments/*/copyright
                     .:"\r\n */\r\n\r\n"
                     get-value:x:@.dp/#/*


/*
 * Iterating through each file in [.return-nodes] and making sure we only return
 * files we actually want.
 */
for-each:x:../*/.return-nodes/*
   if
      and
         not
            strings.ends-with:x:@.dp/#
               .:.DS_Store
         not
            strings.ends-with:x:@.dp/#
               .:.jpeg
         not
            strings.ends-with:x:@.dp/#
               .:.png
      .lambda
         add:x:../*/return-nodes
            get-nodes:x:@.dp/#


/*
 * Adding touch icons, first our smallest, then our larger icons.
 */
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/apple-touch-icon-iphone-60x60.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/apple-touch-icon-iphone-60x60.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/apple-touch-icon-ipad-76x76.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/apple-touch-icon-ipad-76x76.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/apple-touch-icon-iphone-retina-120x120.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/apple-touch-icon-iphone-retina-120x120.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read
strings.concat
   .:/
   get-value:x:@.arguments/*/name
   .:/src/assets/apple-touch-icon-ipad-retina-152x152.png
io.path.get-folder:x:@.filename
strings.concat
   get-value:x:@io.path.get-folder
   .:templates/main/src/assets/apple-touch-icon-ipad-retina-152x152.png
io.stream.open-file:x:@strings.concat
io.stream.read:x:@io.stream.open-file
io.stream.close:x:@io.stream.open-file
unwrap:x:+/*/**
add:x:../*/return-nodes
   .
      .:x:@strings.concat/@strings.concat
         .:x:@io.stream.read


/*
 * Returning all generated files to caller.
 */
.return-nodes
return-nodes
