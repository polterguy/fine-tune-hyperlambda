
/*
 * Returns a single aggregated value (min, max, sum, or avg) from the Sales table in the wotc database.
 *
 * Required arguments:
 * - [aggregate_function]: Specifies the aggregation operation to apply. Accepted values are: min, max, sum, or avg.
 * - [aggregate_column]: Fully qualified column to aggregate (e.g., Sales.SalePrice or CardID.Name), validated against a whitelist.
 *
 * Optional filtering is supported using:
 * - Sales fields: SaleID, CardID, SaleDate, SalePrice
 * - Joined Card fields: CardID.Name (supports exact or partial matching)
 *
 * If reCAPTCHA is configured on the backend, the [recaptcha] argument becomes mandatory and is validated before continuing.
 *
 * The query uses a LEFT JOIN to enrich Sales data with card-related information from the Cards table (aliased as CardID).
 * Authorization is enforced, allowing access only to users with roles: account_manager, admin, guest, or root.
 * Results are publicly cacheable for up to 10 minutes for better performance.
 *
 * The endpoint returns the computed aggregation result as [result].
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   recaptcha:string
   Sales.SaleID.eq:long
   Sales.CardID.eq:long
   Sales.SaleDate.eq:date
   Sales.SalePrice.eq:double
   CardID.Name.eq:string
   CardID.Name.like:string

// Meta data description for endpoint
.description:Returns minimum, maximum, average or sum from your Sales table in your wotc database

// Type of endpoint
.type:crud-aggregate

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Sales.SaleID
   .:Sales.CardID
   .:Sales.SaleDate
   .:Sales.SalePrice
   .:CardID.Name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=600

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Sales
         join:Cards
            as:CardID
            type:left
            on
               and
                  Sales.CardID:CardID.CardID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
