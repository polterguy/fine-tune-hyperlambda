
/*
 * Returns grouped aggregate values (min, max, sum, avg, or count) from the Customers table in the wotc database.
 *
 * Required arguments:
 * - [group_column]: Fully qualified column to group results by (e.g., Customers.Email). Must be on the whitelist.
 * - [aggregate_function]: The type of aggregation to perform. Accepted values are min, max, sum, avg, or count.
 * - [aggregate_column]: Fully qualified column to apply the aggregation to. Must be one of the allowed columns.
 *
 * Optional arguments:
 * - [limit]: Max number of grouped results to return (defaults to 25; -1 returns all).
 * - [offset]: Number of records to skip (used for pagination).
 * - [order]: Fully qualified column name to sort by.
 * - [direction]: Sort direction â€” 'asc' for ascending, 'desc' for descending.
 *
 * Filtering is supported using optional parameters like CustomerID, Name, and Email (exact or pattern match).
 * Ensures safe and authorized access through input validation and role-based verification.
 * Returns a list of grouped rows with the group column and corresponding aggregate result.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Customers.CustomerID.eq:long
   Customers.Name.like:string
   Customers.Name.eq:string
   Customers.Email.like:string
   Customers.Email.eq:string

// Meta data description for endpoint
.description:Returns minimum, maximum, average, sum or count from your Customers table in your wotc database grouped by a column

// Type of endpoint
.type:crud-group

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Customers.CustomerID
   .:Customers.Name
   .:Customers.Email

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Customers.CustomerID
   .:Customers.Name
   .:Customers.Email

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
