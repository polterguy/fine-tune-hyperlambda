
/*
 * Deletes a single record from the Cards table in the wotc database based on its primary key.
 *
 * Requires the following arguments:
 * - [CardID]: The primary key of the record to delete (mandatory).
 * - [recaptcha]: Mandatory if reCAPTCHA is configured; used to validate that the request comes from a human.
 *
 * The endpoint automatically checks for reCAPTCHA configuration and validates the [recaptcha] token accordingly.
 * If no reCAPTCHA settings are found, the check is skipped.
 *
 * After validation, the record is deleted using a parameterized query to ensure safe input handling.
 * Authorization is enforced, requiring the caller to have the 'root' role.
 * Returns the number of affected rows in the response.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   recaptcha:string

   // Primary key of record to delete, mandatory argument
   CardID:long

// Meta data description for endpoint
.description:Delete one record from your Cards table in your wotc database

// Type of endpoint
.type:crud-delete

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.3

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root
validators.mandatory:x:@.arguments/*/CardID

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:Cards
      where
         and

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
