
/*
 * Updates an existing record in the Sales table of the wotc database using the primary key [SaleID].
 *
 * Required argument:
 * - [SaleID]: Identifies the record to be updated. This argument is mandatory.
 *
 * Fields that can be updated:
 * - [CardID], [SaleDate], and [SalePrice]: New values to apply to the corresponding columns.
 *   The [CardID] field is linked via foreign key metadata to the Cards table for validation and frontend resolution (e.g., Card name lookup).
 *
 * If reCAPTCHA is enabled in the backend configuration, the [recaptcha] token becomes mandatory and is validated to ensure the request is human-initiated.
 *
 * Only users with the 'root' role are authorized to perform this update.
 * The update is executed using a parameterized query and checked for success. If no matching record is found, a 404 status is returned.
 *
 * On successful update, the endpoint responds with HTTP status 202 (Accepted) and returns the number of affected rows as [affected].
 */
.arguments
   recaptcha:string

   // SaleID column value being primary key of record to update, mandatory argument
   SaleID:long

   // CardID column's new value
   CardID:long

   // SaleDate column's new value
   SaleDate:date

   // SalePrice column's new value
   SalePrice:double

// Meta data description for endpoint
.description:Update one record in your Sales table in your wotc database

// Type of endpoint
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/SaleID

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root
.foreign-keys
   .
      column:CardID
      table:Cards
      foreign_column:CardID
      foreign_name:Name
      long:bool:true

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:Sales
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
