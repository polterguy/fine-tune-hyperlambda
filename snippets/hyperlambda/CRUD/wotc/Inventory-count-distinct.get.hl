
/*
 * Counts the number of unique (distinct) values from a specified column in the Inventory table of the wotc database.
 *
 * Required argument:
 * - [distinct_column]: The fully qualified column to count distinct values from (e.g., Inventory.Quantity or CardID.Name).
 *   The value is validated against an approved list of allowed columns, including joined fields from the Cards table.
 *
 * Optional filtering is supported on:
 * - Inventory fields: InventoryID, CardID, Quantity, PurchasePrice
 * - Joined Card fields: CardID.Name (exact or partial match)
 *
 * If reCAPTCHA is configured in the backend, the [recaptcha] token is required and validated for human verification.
 * Only users with roles like account_manager, admin, guest, or root are authorized to access this endpoint.
 *
 * The query joins the Cards table (aliased as CardID) using a LEFT JOIN to allow filters on related card data.
 * Results are cached publicly for 10 minutes to enhance performance on frequent queries.
 * Returns the distinct count as [count].
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string
   recaptcha:string
   Inventory.InventoryID.eq:long
   Inventory.CardID.eq:long
   Inventory.Quantity.eq:long
   Inventory.PurchasePrice.eq:double
   CardID.Name.eq:string
   CardID.Name.like:string

// Meta data description for endpoint
.description:Count unique and distinct items from your Inventory table in your wotc database

// Type of endpoint
.type:crud-count-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Inventory.InventoryID
   .:Inventory.CardID
   .:Inventory.Quantity
   .:Inventory.PurchasePrice
   .:CardID.Name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=600

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Inventory
         join:Cards
            as:CardID
            type:left
            on
               and
                  Inventory.CardID:CardID.CardID
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
