
/*
 * Updates a single record in the Cards table of the wotc database based on its primary key.
 *
 * Required arguments:
 * - [CardID]: The primary key identifying the record to update (mandatory).
 * - [Name], [SetID], [Rarity]: New values for the respective columns (optional if unchanged).
 * - [recaptcha]: Required only if reCAPTCHA is configured. Used to verify the request is from a human.
 *
 * The endpoint dynamically checks for reCAPTCHA settings and validates the token if enabled.
 * Ensures the caller has 'root' access privileges before proceeding with the update.
 *
 * Uses parameterized logic to assign new values and filter by primary key, ensuring safe and precise targeting.
 * If no record matches the specified CardID, a 404 status is returned.
 * On successful update, returns a 202 (Accepted) status and the number of affected rows.
 */
.arguments
   recaptcha:string

   // CardID column value being primary key of record to update, mandatory argument
   CardID:long

   // Name column's new value
   Name:string

   // SetID column's new value
   SetID:long

   // Rarity column's new value
   Rarity:string

// Meta data description for endpoint
.description:Update one record in your Cards table in your wotc database

// Type of endpoint
.type:crud-update

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/CardID

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.3

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:Cards
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
