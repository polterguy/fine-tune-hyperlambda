
/*
 * Retrieves a list of records from the Inventory table in the wotc database, with support for filtering, sorting, and pagination.
 *
 * Optional arguments:
 * - [limit]: Maximum number of records to return (defaults to 25; -1 returns all).
 * - [offset]: Number of records to skip before starting the result set (used for pagination).
 * - [order]: Fully qualified column name to sort by (e.g., Inventory.Quantity).
 * - [direction]: Sorting direction, either 'asc' or 'desc'.
 *
 * Supports advanced filtering using:
 * - Inventory fields: InventoryID, CardID, Quantity, PurchasePrice
 * - Joined Card fields: CardID.Name (exact or partial match)
 *
 * If reCAPTCHA is enabled in backend configuration, [recaptcha] becomes a required argument and is validated before proceeding.
 * The query includes a LEFT JOIN with the Cards table (aliased as CardID) to enrich the Inventory result set.
 *
 * Authorization is enforced, requiring the user to have one of the following roles: account_manager, admin, guest, or root.
 * Response data is publicly cacheable for up to 10 minutes to optimize performance on repeated queries.
 * Returns a list of Inventory records with related card name information where applicable.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   recaptcha:string
   Inventory.InventoryID.eq:long
   Inventory.CardID.eq:long
   Inventory.Quantity.eq:long
   Inventory.PurchasePrice.eq:double
   CardID.Name.eq:string
   CardID.Name.like:string

// Meta data description for endpoint
.description:Read or list records from your Inventory table in your wotc database

// Type of endpoint
.type:crud-read

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=600

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Inventory
         join:Cards
            as:CardID
            type:left
            on
               and
                  Inventory.CardID:CardID.CardID
      columns
         Inventory.InventoryID
         Inventory.CardID
         Inventory.Quantity
         Inventory.PurchasePrice
         CardID.Name
            as:CardID.Name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
