
/*
 * Returns a single aggregated value (min, max, sum, or avg) from the Customers table in the wotc database.
 *
 * Required arguments:
 * - [aggregate_function]: The type of aggregation to perform. Must be one of: min, max, sum, or avg.
 * - [aggregate_column]: The column to aggregate, must follow the format "Customers.COLUMN_NAME" and is validated against allowed values.
 *
 * Optional filters can be applied to narrow the aggregation scope using:
 * - CustomerID (exact match)
 * - Name (exact or partial match)
 * - Email (exact or partial match)
 *
 * Ensures the caller is authorized before accessing data.
 * The selected aggregate function is dynamically constructed and safely applied to the specified column.
 * Returns the aggregation result as [result].
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Customers.CustomerID.eq:long
   Customers.Name.like:string
   Customers.Name.eq:string
   Customers.Email.like:string
   Customers.Email.eq:string

// Meta data description for endpoint
.description:Returns minimum, maximum, average or sum from your Customers table in your wotc database

// Type of endpoint
.type:crud-aggregate

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Customers.CustomerID
   .:Customers.Name
   .:Customers.Email

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
