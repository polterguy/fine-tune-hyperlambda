
/*
 * Counts the total number of records in the Sets table of the wotc database, with optional filtering.
 *
 * Optional filters:
 * - [SetID]: Exact match on the unique identifier of a set.
 * - [Name]: Supports both exact and partial (LIKE) matching for set names.
 * - [ReleaseDate]: Filters sets by their release date.
 *
 * If reCAPTCHA is configured in the backend, the [recaptcha] token becomes a required field and is validated 
 * to ensure the request is made by a human user.
 *
 * The endpoint enforces role-based authorization, allowing access only to users with roles such as account_manager, admin, guest, or root.
 * A parameterized query ensures safe filtering and accurate counting based on user-provided criteria.
 * Results are publicly cacheable for 10 minutes to enhance performance.
 *
 * Returns the total number of matching records as [count].
 */
.arguments
   recaptcha:string
   Sets.SetID.eq:long
   Sets.Name.like:string
   Sets.Name.eq:string
   Sets.ReleaseDate.eq:date

// Meta data description for endpoint
.description:Counts items from your Sets table in your wotc database

// Type of endpoint
.type:crud-count

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=600

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Sets
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
