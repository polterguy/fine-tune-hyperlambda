
/*
 * Returns grouped aggregate values (min, max, sum, avg, or count) from the Sales table in the wotc database.
 *
 * Required arguments:
 * - [group_column]: Fully qualified column to group the results by (e.g., Sales.SaleDate or CardID.Name), validated against a whitelist.
 * - [aggregate_function]: Aggregation function to apply. Must be one of: min, max, sum, avg, or count.
 * - [aggregate_column]: Column to apply the aggregation to. Must be a valid, fully qualified name from the Sales or joined Cards table.
 *
 * Optional arguments:
 * - [limit]: Number of grouped results to return (defaults to 25; use -1 to return all).
 * - [offset]: Number of records to skip (used for pagination).
 * - [order]: Column to sort the grouped results by (must be fully qualified).
 * - [direction]: Sort direction, either 'asc' or 'desc'.
 *
 * Filtering is supported using:
 * - Sales fields: SaleID, CardID, SaleDate, SalePrice
 * - Joined Card fields: CardID.Name (exact or partial match)
 *
 * If reCAPTCHA is configured in the backend, [recaptcha] becomes a required input and is validated to ensure human access.
 *
 * The query joins the Cards table (aliased as CardID) via LEFT JOIN to support extended filtering and grouping.
 * Authorization is required, restricted to users with roles such as account_manager, admin, guest, or root.
 * Responses are publicly cached for 10 minutes to optimize performance for repeated queries.
 *
 * Returns grouped rows including the [group_column] and the aggregated [result].
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   recaptcha:string
   Sales.SaleID.eq:long
   Sales.CardID.eq:long
   Sales.SaleDate.eq:date
   Sales.SalePrice.eq:double
   CardID.Name.eq:string
   CardID.Name.like:string

// Meta data description for endpoint
.description:Returns minimum, maximum, average, sum or count from your Sales table in your wotc database grouped by a column

// Type of endpoint
.type:crud-group

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Sales.SaleID
   .:Sales.CardID
   .:Sales.SaleDate
   .:Sales.SalePrice
   .:CardID.Name

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Sales.SaleID
   .:Sales.CardID
   .:Sales.SaleDate
   .:Sales.SalePrice
   .:CardID.Name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=600

// Checking reCAPTCHA value if backend is configured with reCAPTCHA configuration settings.
config.get:"magic:auth:recaptcha:key"
config.get:"magic:auth:recaptcha:secret"
if
   and
      neq:x:@config.get
         .
      neq:x:@config.get
         .:
      neq:x:@config.get/@config.get
         .
      neq:x:@config.get/@config.get
         .:
   .lambda

      // reCAPTCHA configuration settings found.
      validators.mandatory:x:@.arguments/*/recaptcha
      validators.recaptcha:x:@.arguments/*/recaptcha/[0,1]
         site-key:x:@config.get/@config.get
         secret:x:@config.get
         min:decimal:0.5

// To remove reCAPTCHA value preventing it from being used as an argument further down in file.
remove-nodes:x:@.arguments/*/recaptcha/[0,1]

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Sales
         join:Cards
            as:CardID
            type:left
            on
               and
                  Sales.CardID:CardID.CardID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
