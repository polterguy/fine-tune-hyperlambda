
/*
 * Returns unique (distinct) values from a specified column in the Cards table of the wotc database.
 *
 * Requires one mandatory argument:
 * - [distinct_column]: Must be a fully qualified column name (e.g., Cards.Name), and is validated against a whitelist.
 *
 * Optional arguments include:
 * - [limit]: Number of records to return (default is 25; -1 returns all).
 * - [offset]: Starting point within the result set.
 * - [order]: Fully qualified column name used for sorting.
 * - [direction]: Sorting direction ('asc' or 'desc').
 *
 * Supports additional filtering by CardID, Name, SetID, and Rarity to constrain distinct value extraction.
 * Authorization is enforced and results are cached with private cache-control headers.
 * Returns a flat list of distinct values.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Cards.CardID.eq:long
   Cards.Name.like:string
   Cards.Name.eq:string
   Cards.SetID.eq:long
   Cards.Rarity.like:string
   Cards.Rarity.eq:string

// Meta data description for endpoint
.description:Returns unique and distinct values from your Cards table in your wotc database

// Type of endpoint
.type:crud-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Cards.CardID
   .:Cards.Name
   .:Cards.SetID
   .:Cards.Rarity

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Cards
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
