
/*
 * Reads or lists records from the Cards table in the wotc database with support for filtering, sorting, and pagination.
 *
 * Optional arguments include:
 * - [limit]: Maximum number of records to return (defaults to 25; -1 returns all).
 * - [offset]: Number of records to skip before starting to return results.
 * - [order]: Column to sort by, must be a fully qualified name (e.g., Cards.Name).
 * - [direction]: Sorting direction, either 'asc' or 'desc'.
 *
 * Supports filtering on CardID, Name, SetID, and Rarity using both exact and pattern-based matching.
 * The endpoint performs role-based access control, allowing access to users with roles such as account_manager, admin, guest, or root.
 * A private Cache-Control header is included to improve performance on repeated reads.
 * Returns a list of matching records from the Cards table.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Cards.CardID.eq:long
   Cards.Name.like:string
   Cards.Name.eq:string
   Cards.SetID.eq:long
   Cards.Rarity.like:string
   Cards.Rarity.eq:string

// Meta data description for endpoint
.description:Read or list records from your Cards table in your wotc database

// Type of endpoint
.type:crud-read

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:private, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Cards
      columns
         Cards.CardID
         Cards.Name
         Cards.SetID
         Cards.Rarity
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
