
/*
 * Returns a list of unique (distinct) values from a specified column in the Customers table of the wotc database.
 *
 * Required argument:
 * - [distinct_column]: Fully qualified column name to extract distinct values from (e.g., Customers.Name).
 *   This value is validated against an approved list of allowed columns.
 *
 * Optional arguments:
 * - [limit]: Limits the number of results returned (defaults to 25; -1 returns all).
 * - [offset]: Skips a number of records before starting to return results.
 * - [order]: Specifies the column used for sorting results (must be fully qualified).
 * - [direction]: Sorting direction, either 'asc' or 'desc'.
 *
 * Additional filters can be applied to narrow the scope of the distinct query using:
 * - CustomerID (exact match)
 * - Name (exact or pattern match)
 * - Email (exact or pattern match)
 *
 * Ensures the user is authorized before accessing the database, and builds a safe and efficient query dynamically.
 * Returns a flat list of unique values for the specified column.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Customers.CustomerID.eq:long
   Customers.Name.like:string
   Customers.Name.eq:string
   Customers.Email.like:string
   Customers.Email.eq:string

// Meta data description for endpoint
.description:Returns unique and distinct values from your Customers table in your wotc database

// Type of endpoint
.type:crud-distinct

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Customers.CustomerID
   .:Customers.Name
   .:Customers.Email

// Verifying user is authorized to access endpoint.
auth.ticket.verify:account_manager,admin,guest,root

// Opening up our database connection.
data.connect:[generic|wotc]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
