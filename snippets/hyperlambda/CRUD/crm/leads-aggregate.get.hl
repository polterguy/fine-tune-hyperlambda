
/*
 * Computes a single aggregate value (MIN, MAX, SUM, or AVG) from a specified column in the "leads" table
 * of your CRM database, with full support for dynamic filtering and client-based join lookups.
 *
 * Required arguments:
 * - [aggregate_function]: One of the legal aggregate operations (min, max, sum, avg).
 * - [aggregate_column]: Fully qualified name of the column to aggregate on (e.g., leads.lead_id).
 *
 * Filtering:
 * - Supports extensive filtering across both lead and client fields including:
 *   [lead_id], [client_id], [source], [status], [created_date], and [client_id.name].
 * - Accepts comparison operators like `.eq`, `.lt`, `.mteq`, `.like`, `.neq`, etc.
 *
 * Implementation:
 * - Validates all mandatory arguments using [validators.mandatory] and ensures values are allowed with [validators.enum].
 * - Constructs the SQL aggregate expression dynamically via [strings.concat] and injects it into the [data.read] call.
 * - Connects to the SQLite CRM database via [data.connect].
 * - Joins the "clients" table using a LEFT JOIN for filtering on related client data.
 * - Applies all specified filters using [get-nodes] and [add].
 * - Returns the final aggregate result as a single node labeled [result].
 * - Caches the result for 5 minutes using the `Cache-Control` response header.
 * - Access is restricted to authenticated "guest" users using [auth.ticket.verify].
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    */
   leads.lead_id.mt:long
   leads.lead_id.lt:long
   leads.lead_id.mteq:long
   leads.lead_id.lteq:long
   leads.lead_id.neq:long
   leads.lead_id.eq:long
   leads.client_id.mt:long
   leads.client_id.lt:long
   leads.client_id.mteq:long
   leads.client_id.lteq:long
   leads.client_id.neq:long
   leads.client_id.eq:long
   leads.source.like:string
   leads.source.mt:string
   leads.source.lt:string
   leads.source.mteq:string
   leads.source.lteq:string
   leads.source.neq:string
   leads.source.eq:string
   leads.status.like:string
   leads.status.mt:string
   leads.status.lt:string
   leads.status.mteq:string
   leads.status.lteq:string
   leads.status.neq:string
   leads.status.eq:string
   leads.created_date.mt:date
   leads.created_date.lt:date
   leads.created_date.mteq:date
   leads.created_date.lteq:date
   leads.created_date.neq:date
   leads.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:leads.lead_id
   .:leads.client_id
   .:leads.source
   .:leads.status
   .:leads.created_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:leads
         join:clients
            as:client_id
            type:left
            on
               and
                  leads.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
