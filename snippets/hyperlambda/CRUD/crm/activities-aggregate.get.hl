
/*
 * Returns minimum, maximum, average or sum from your activities table in your crm database
 *
 * Endpoint takes an [aggregate_function] argument that can be min, max, sum, or avg.
 * In addition it takes an [aggregate_column] value which becomes the column to calculate the aggregate from.
 * The endpoint allows for optional filtering arguments which will filter the rows we aggregate accordingly.
 * It sanity checks what columns we're trying to aggregate on, to make sure the user doesn't execute it
 * trying to aggregate on non-existent columns.
 *
 * It adds 300 seconds of HTTP cache to avoid clients from exhausting the server, and the endpoint can only
 * be executed by guest users.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    */
   activities.activity_id.mt:long
   activities.activity_id.lt:long
   activities.activity_id.mteq:long
   activities.activity_id.lteq:long
   activities.activity_id.neq:long
   activities.activity_id.eq:long
   activities.client_id.mt:long
   activities.client_id.lt:long
   activities.client_id.mteq:long
   activities.client_id.lteq:long
   activities.client_id.neq:long
   activities.client_id.eq:long
   activities.type.like:string
   activities.type.mt:string
   activities.type.lt:string
   activities.type.mteq:string
   activities.type.lteq:string
   activities.type.neq:string
   activities.type.eq:string
   activities.date.mt:date
   activities.date.lt:date
   activities.date.mteq:date
   activities.date.lteq:date
   activities.date.neq:date
   activities.date.eq:date
   activities.notes.like:string
   activities.notes.mt:string
   activities.notes.lt:string
   activities.notes.mteq:string
   activities.notes.lteq:string
   activities.notes.neq:string
   activities.notes.eq:string
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:activities.activity_id
   .:activities.client_id
   .:activities.type
   .:activities.date
   .:activities.notes
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:activities
         join:clients
            as:client_id
            type:left
            on
               and
                  activities.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
