
/*
 * Deletes a single record from the "clients" table in your CRM database based on the provided [client_id].
 *
 * This endpoint requires root-level authorization and is used to permanently remove a client record
 * identified by its primary key. It also notifies connected clients about the deletion through a
 * socket broadcast.
 *
 * - Validates the presence of the [client_id] argument using [validators.mandatory].
 * - Ensures only authorized "root" users can invoke this endpoint via [auth.ticket.verify].
 * - Connects to the SQLite CRM database using [data.connect].
 * - Dynamically builds the WHERE clause using [add] and [get-nodes] to safely inject the primary key.
 * - Deletes the specified record using [data.delete].
 * - Publishes a [crm.clients.delete] socket message containing the deleted client ID,
 *   scoped to "admin" and "root" roles for real-time notification purposes.
 * - Unwraps and returns the number of affected rows under the [affected] node.
 */
.arguments

   // Mandatory primary key of record to delete, mandatory argument
   client_id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Making sure the primary key was specified
validators.mandatory:x:@.arguments/*/client_id

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:clients
      where
         and

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.clients.delete
      args
      roles:admin,root

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
