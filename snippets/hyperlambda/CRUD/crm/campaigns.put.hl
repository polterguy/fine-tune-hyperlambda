
/*
 * Updates an existing record in the "campaigns" table of your CRM database,
 * using the specified [campaign_id] as the primary key.
 *
 * The caller can provide any combination of optional fields to update, including
 * [name], [start_date], [end_date], [budget], and [status]. The endpoint ensures
 * that the record exists before applying the update and broadcasts the update via sockets.
 *
 * - Validates the presence of the [campaign_id] to locate the record.
 * - Authorizes access using [auth.ticket.verify], allowing only "root" and "admin" roles.
 * - Uses [data.connect] to establish a connection to the SQLite CRM database.
 * - Dynamically injects only the provided fields into the [data.update] operation.
 * - If no matching record is found, returns a 404 Not Found response.
 * - On success, sets HTTP status to 202 (Accepted) and returns the number of affected rows.
 * - Publishes a [crm.campaigns.put] socket signal to notify clients of the update,
 *   sharing the updated data and limiting visibility to "admin" and "root" roles.
 */
.arguments

   // Mandatory campaign_id column value being primary key of record to update, mandatory argument
   campaign_id:long

   // Optional name column's new value
   name:string

   // Optional start_date column's new value
   start_date:date

   // Optional end_date column's new value
   end_date:date

   // Optional budget column's new value
   budget:double

   // Optional status column's new value
   status:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/campaign_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:campaigns
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.campaigns.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
