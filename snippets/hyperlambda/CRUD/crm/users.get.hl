
// Read or list records from your users table in your crm database
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   users.user_id.mt:long
   users.user_id.lt:long
   users.user_id.mteq:long
   users.user_id.lteq:long
   users.user_id.neq:long
   users.user_id.eq:long
   users.password.like:string
   users.password.mt:string
   users.password.lt:string
   users.password.mteq:string
   users.password.lteq:string
   users.password.neq:string
   users.password.eq:string
   users.email.like:string
   users.email.mt:string
   users.email.lt:string
   users.email.mteq:string
   users.email.lteq:string
   users.email.neq:string
   users.email.eq:string
   users.role.like:string
   users.role.mt:string
   users.role.lt:string
   users.role.mteq:string
   users.role.lteq:string
   users.role.neq:string
   users.role.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Making sure we retrieve lock value for column.
auth.ticket.get

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:users
      columns
         users.user_id
         users.password
         users.email
         users.role
      where
         and

            // Table is locked on the following field.
            username.eq

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
