
/*
 * Update a record in the [notes] table in the CRM database using [note_id] as the primary key.
 *
 * - Requires [note_id] to be provided (mandatory).
 * - Allows optionally updating [client_id] and [content].
 * - Verifies that the user is either [root] or [admin].
 * - Connects to the [crm] SQLite database and updates the specified record.
 * - Returns HTTP status 404 and a message if no record was updated (i.e., not found).
 * - If successful, sets status to 202 and publishes a socket message to [crm.notes.put].
 * - Returns the number of affected rows in the response payload.
 */
.arguments

   // Mandatory note_id column value being primary key of record to update, mandatory argument
   note_id:long

   // Optional client_id column's new value
   client_id:long

   // Optional content column's new value
   content:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/note_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:notes
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.notes.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
