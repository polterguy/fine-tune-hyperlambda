
/*
 * Retrieves a list of unique and distinct values from a specified column in the "notes" table
 * of your CRM database, with optional filtering, sorting, and pagination support.
 *
 * Required Argument:
 * - [distinct_column]: Fully qualified column name (e.g. "notes.content" or "client_id.name") to return distinct values from.
 *
 * Optional Arguments:
 * - [limit]: Number of distinct records to return (default is 25, -1 returns all).
 * - [offset]: Index into result set from which to begin returning records.
 * - [order]: Column name (in TABLE.COLUMN format) to sort results by.
 * - [direction]: Sorting direction, must be "asc" or "desc".
 *
 * Filtering Support:
 * - Supports advanced filtering on all fields in the "notes" table including:
 *   [note_id], [client_id], [content], and [created_date].
 * - Also allows filtering on joined "clients" table fields such as [client_id.name].
 * - Accepts a wide variety of filter operators including `.eq`, `.neq`, `.lt`, `.like`, etc.
 *
 * Execution Details:
 * - Verifies required input using [validators.mandatory] and [validators.enum].
 * - Connects to the CRM SQLite database using [data.connect].
 * - Constructs a `SELECT DISTINCT` expression dynamically using [strings.concat].
 * - Applies pagination, sorting, and filtering via dynamic argument injection.
 * - Uses a LEFT JOIN with the "clients" table to support filtering on related fields.
 * - Returns the distinct values in a flat result set labeled as ".".
 * - Response includes a public cache control header of 5 minutes using [response.headers.set].
 * - Only authenticated "guest" users can access this endpoint, enforced by [auth.ticket.verify].
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   notes.note_id.mt:long
   notes.note_id.lt:long
   notes.note_id.mteq:long
   notes.note_id.lteq:long
   notes.note_id.neq:long
   notes.note_id.eq:long
   notes.client_id.mt:long
   notes.client_id.lt:long
   notes.client_id.mteq:long
   notes.client_id.lteq:long
   notes.client_id.neq:long
   notes.client_id.eq:long
   notes.content.like:string
   notes.content.mt:string
   notes.content.lt:string
   notes.content.mteq:string
   notes.content.lteq:string
   notes.content.neq:string
   notes.content.eq:string
   notes.created_date.mt:date
   notes.created_date.lt:date
   notes.created_date.mteq:date
   notes.created_date.lteq:date
   notes.created_date.neq:date
   notes.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:notes.note_id
   .:notes.client_id
   .:notes.content
   .:notes.created_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:notes
         join:clients
            as:client_id
            type:left
            on
               and
                  notes.client_id:client_id.client_id
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
