
/*
 * Updates a specific record in the "leads" table of your CRM database based on the provided [lead_id].
 * Only users with the "admin" or "root" role are authorized to perform this operation.
 *
 * The caller may update any combination of the optional fields: [client_id], [source], and [status].
 * If the record does not exist (i.e., no rows were affected), the endpoint returns a 404 Not Found status.
 *
 * Features:
 * - Validates presence of the [lead_id] primary key using [validators.mandatory].
 * - Authorizes access through [auth.ticket.verify] for users with the "root" or "admin" roles.
 * - Connects to the SQLite CRM database using [data.connect].
 * - Dynamically injects only provided updates into [data.update] via [get-nodes].
 * - Applies conditional logic to verify if the update actually affected any rows.
 *   If not, responds with HTTP status 404 and a message indicating the record wasn't found.
 * - On success, sets HTTP status to 202 (Accepted) using [response.status.set].
 * - Publishes a [crm.leads.put] socket signal with the updated payload to "admin" and "root" roles
 *   to notify other systems of the change in real-time.
 * - Returns the number of affected rows in the [affected] field.
 */
.arguments

   // Mandatory lead_id column value being primary key of record to update, mandatory argument
   lead_id:long

   // Optional client_id column's new value
   client_id:long

   // Optional source column's new value
   source:string

   // Optional status column's new value
   status:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/lead_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:leads
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.leads.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
