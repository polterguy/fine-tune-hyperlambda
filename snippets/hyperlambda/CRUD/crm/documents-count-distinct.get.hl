
/*
 * Counts the number of unique and distinct values in a specified column from the "documents" table
 * in your CRM database, supporting optional filters and joins with the "clients" table.
 *
 * The caller must provide the [distinct_column] argument, which must be a fully qualified column name
 * (e.g. "documents.title", "client_id.name").
 *
 * Features:
 * - Validates the presence and correctness of the [distinct_column] using [validators.mandatory] and [validators.enum].
 * - Supports filtering on a wide range of document fields such as [document_id], [client_id], [title],
 *   [file_path], and [uploaded_date], including operators like `.eq`, `.lt`, `.neq`, `.like`, etc.
 * - Enables filtering on related client names via a LEFT JOIN on the "clients" table using [client_id.name].
 * - Constructs a dynamic SQL `count(distinct COLUMN)` query using [strings.concat] and executes it through [data.read].
 * - Connects to a SQLite CRM database via [data.connect].
 * - Dynamically injects all filtering conditions into the WHERE clause using [add] and [get-nodes].
 * - Returns the computed count as a [count] node.
 * - Sets a `Cache-Control` header to cache the response for 5 minutes.
 * - Access is restricted to authenticated users with the "guest" role through [auth.ticket.verify].
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments.
    */
   documents.document_id.mt:long
   documents.document_id.lt:long
   documents.document_id.mteq:long
   documents.document_id.lteq:long
   documents.document_id.neq:long
   documents.document_id.eq:long
   documents.client_id.mt:long
   documents.client_id.lt:long
   documents.client_id.mteq:long
   documents.client_id.lteq:long
   documents.client_id.neq:long
   documents.client_id.eq:long
   documents.title.like:string
   documents.title.mt:string
   documents.title.lt:string
   documents.title.mteq:string
   documents.title.lteq:string
   documents.title.neq:string
   documents.title.eq:string
   documents.file_path.like:string
   documents.file_path.mt:string
   documents.file_path.lt:string
   documents.file_path.mteq:string
   documents.file_path.lteq:string
   documents.file_path.neq:string
   documents.file_path.eq:string
   documents.uploaded_date.mt:date
   documents.uploaded_date.lt:date
   documents.uploaded_date.mteq:date
   documents.uploaded_date.lteq:date
   documents.uploaded_date.neq:date
   documents.uploaded_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:documents.document_id
   .:documents.client_id
   .:documents.title
   .:documents.file_path
   .:documents.uploaded_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:documents
         join:clients
            as:client_id
            type:left
            on
               and
                  documents.client_id:client_id.client_id
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
