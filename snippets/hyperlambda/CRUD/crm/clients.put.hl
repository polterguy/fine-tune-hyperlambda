
/*
 * Updates an existing record in the "clients" table of your CRM database,
 * using the provided [client_id] as the primary key.
 *
 * The endpoint allows updates to the [name], [email], [phone], and [address] fields,
 * and only authorized users with "admin" or "root" roles can perform the operation.
 *
 * - Validates that [client_id] is provided using [validators.mandatory].
 * - Uses [auth.ticket.verify] to restrict access to users with elevated roles.
 * - Connects to the SQLite CRM database using [data.connect].
 * - Dynamically injects all provided field updates into the [data.update] invocation.
 * - Builds a secure WHERE clause using the [client_id] to locate the target record.
 * - Checks the number of affected rows after the update and returns 404 if the record does not exist.
 * - If successful, returns HTTP status code 202 (Accepted).
 * - Publishes a [crm.clients.put] socket signal containing the updated data,
 *   with access limited to "admin" and "root" roles.
 * - Returns the number of affected records under the [affected] node to indicate update success.
 */
.arguments

   // Mandatory client_id column value being primary key of record to update, mandatory argument
   client_id:long

   // Optional name column's new value
   name:string

   // Optional email column's new value
   email:string

   // Optional phone column's new value
   phone:string

   // Optional address column's new value
   address:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/client_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:clients
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.clients.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
