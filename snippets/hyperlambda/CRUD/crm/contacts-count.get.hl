
/*
 * Returns the total number of records in the "contacts" table of your CRM database,
 * with optional filtering across both contact and related client fields.
 *
 * This endpoint calculates a `count(*)` to determine how many contacts match the provided
 * filter criteria. If no filters are given, it returns the total number of contacts.
 *
 * - Supports flexible filtering on [contact_id], [client_id], [name], [email], [phone], [position],
 *   and related [client_id.name] via a LEFT JOIN to the "clients" table.
 * - Accepts a wide variety of comparison operators such as `.eq`, `.lt`, `.like`, `.neq`, etc.
 * - Dynamically builds the WHERE clause using [get-nodes] and [add] for all specified arguments.
 * - Establishes a connection to the SQLite CRM database using [data.connect].
 * - Executes a [data.read] query with `count(*)` and returns the result as a single node named [count].
 * - Applies a LEFT JOIN to include filter support on client data while preserving unmatched contacts.
 * - Adds a `Cache-Control` HTTP header to cache the result for 5 minutes.
 * - Requires authentication for guest users using [auth.ticket.verify].
 */
.arguments

   /*
    * Optional filtering arguments.
    */
   contacts.contact_id.mt:long
   contacts.contact_id.lt:long
   contacts.contact_id.mteq:long
   contacts.contact_id.lteq:long
   contacts.contact_id.neq:long
   contacts.contact_id.eq:long
   contacts.client_id.mt:long
   contacts.client_id.lt:long
   contacts.client_id.mteq:long
   contacts.client_id.lteq:long
   contacts.client_id.neq:long
   contacts.client_id.eq:long
   contacts.name.like:string
   contacts.name.mt:string
   contacts.name.lt:string
   contacts.name.mteq:string
   contacts.name.lteq:string
   contacts.name.neq:string
   contacts.name.eq:string
   contacts.email.like:string
   contacts.email.mt:string
   contacts.email.lt:string
   contacts.email.mteq:string
   contacts.email.lteq:string
   contacts.email.neq:string
   contacts.email.eq:string
   contacts.phone.like:string
   contacts.phone.mt:string
   contacts.phone.lt:string
   contacts.phone.mteq:string
   contacts.phone.lteq:string
   contacts.phone.neq:string
   contacts.phone.eq:string
   contacts.position.like:string
   contacts.position.mt:string
   contacts.position.lt:string
   contacts.position.mteq:string
   contacts.position.lteq:string
   contacts.position.neq:string
   contacts.position.eq:string
   client_id.name.eq:string
   client_id.name.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:contacts
         join:clients
            as:client_id
            type:left
            on
               and
                  contacts.client_id:client_id.client_id
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
