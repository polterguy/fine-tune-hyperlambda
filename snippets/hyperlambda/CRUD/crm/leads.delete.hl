
/*
 * Deletes a single record from the "leads" table in your CRM database based on the provided [lead_id],
 * which serves as the primary key. This operation is restricted to users with "root" access and ensures
 * no accidental deletion of all records by enforcing the presence of [lead_id].
 *
 * Features:
 * - Validates that the [lead_id] argument is provided using [validators.mandatory] to prevent unintended mass deletion.
 * - Ensures only users with the "root" role can execute this action via [auth.ticket.verify].
 * - Connects to the SQLite CRM database using [data.connect].
 * - Injects [lead_id] as a condition into the SQL WHERE clause using [get-nodes] and [add].
 * - Executes the deletion using [data.delete] and removes exactly one record if [lead_id] exists.
 * - Sends a socket signal [crm.leads.delete] with the deleted lead's ID to "admin" and "root" roles
 *   so external systems or UIs can react in real-time.
 * - Returns the number of rows affected (should be 1 if successful) under the [affected] node.
 * - Uses [unwrap] to simplify the response structure.
 */
.arguments

   // Mandatory primary key of record to delete, mandatory argument
   lead_id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// MUST be specified or we'll delete ALL records
validators.mandatory:x:@.arguments/*/lead_id

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:leads
      where
         and

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.leads.delete
      args
      roles:admin,root

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
