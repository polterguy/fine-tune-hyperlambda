
/*
 * Returns the total number of records in the "notes" table of your CRM database,
 * supporting optional filtering on both note and related client fields.
 *
 * Features:
 * - Uses [count(*)] to return the total number of rows matching the filter criteria.
 * - Allows dynamic filtering on all fields in the "notes" table including:
 *   [note_id], [client_id], [content], and [created_date].
 * - Supports LEFT JOIN on the "clients" table to enable filtering by related fields like [client_id.name].
 * - Filters accept advanced comparison operators such as `.eq`, `.neq`, `.lt`, `.gteq`, `.like`, etc.
 *
 * Access Control and Performance:
 * - Endpoint access is restricted to users with the "guest" role, enforced via [auth.ticket.verify].
 * - Applies a public 5-minute caching policy using the `Cache-Control` header.
 * - Dynamically injects filtering conditions using [get-nodes] and [add].
 * - Connects to the SQLite CRM database with [data.connect] and performs the count query using [data.read].
 * - Result is returned as a single field [count] representing the number of matching records.
 */
.arguments

   /*
    * Optional filtering arguments.
    */
   notes.note_id.mt:long
   notes.note_id.lt:long
   notes.note_id.mteq:long
   notes.note_id.lteq:long
   notes.note_id.neq:long
   notes.note_id.eq:long
   notes.client_id.mt:long
   notes.client_id.lt:long
   notes.client_id.mteq:long
   notes.client_id.lteq:long
   notes.client_id.neq:long
   notes.client_id.eq:long
   notes.content.like:string
   notes.content.mt:string
   notes.content.lt:string
   notes.content.mteq:string
   notes.content.lteq:string
   notes.content.neq:string
   notes.content.eq:string
   notes.created_date.mt:date
   notes.created_date.lt:date
   notes.created_date.mteq:date
   notes.created_date.lteq:date
   notes.created_date.neq:date
   notes.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:notes
         join:clients
            as:client_id
            type:left
            on
               and
                  notes.client_id:client_id.client_id
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
