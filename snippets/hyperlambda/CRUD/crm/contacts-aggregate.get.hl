
/*
 * Computes an aggregate value (MIN, MAX, SUM, or AVG) from a specified column in the "contacts" table
 * of your CRM database, optionally filtered by a wide range of fields and joined with the "clients" table.
 *
 * The user must provide:
 * - [aggregate_function]: One of "min", "max", "sum", or "avg".
 * - [aggregate_column]: The column to apply the aggregation on, in the format "TABLE_NAME.COLUMN_NAME".
 *
 * Filtering is supported on both contact and client fields, including:
 * - [contact_id], [client_id], [name], [email], [phone], [position]
 * - [client_id.name] through a LEFT JOIN with the "clients" table
 * - With comparison operators such as `.eq`, `.lt`, `.like`, `.neq`, etc.
 *
 * Features:
 * - Validates required arguments and ensures they are among allowed values using [validators.enum].
 * - Dynamically generates the aggregation SQL expression via [strings.concat].
 * - Applies optional filtering by injecting WHERE clauses using [add] and [get-nodes].
 * - Executes the aggregation using [data.read], returning the result under a node named [result].
 * - Connects to the SQLite CRM database via [data.connect].
 * - Performs a LEFT JOIN to include filters based on related client information.
 * - Adds a `Cache-Control` HTTP header to cache results for 5 minutes.
 * - Ensures only authenticated guest users can access the endpoint via [auth.ticket.verify].
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    */
   contacts.contact_id.mt:long
   contacts.contact_id.lt:long
   contacts.contact_id.mteq:long
   contacts.contact_id.lteq:long
   contacts.contact_id.neq:long
   contacts.contact_id.eq:long
   contacts.client_id.mt:long
   contacts.client_id.lt:long
   contacts.client_id.mteq:long
   contacts.client_id.lteq:long
   contacts.client_id.neq:long
   contacts.client_id.eq:long
   contacts.name.like:string
   contacts.name.mt:string
   contacts.name.lt:string
   contacts.name.mteq:string
   contacts.name.lteq:string
   contacts.name.neq:string
   contacts.name.eq:string
   contacts.email.like:string
   contacts.email.mt:string
   contacts.email.lt:string
   contacts.email.mteq:string
   contacts.email.lteq:string
   contacts.email.neq:string
   contacts.email.eq:string
   contacts.phone.like:string
   contacts.phone.mt:string
   contacts.phone.lt:string
   contacts.phone.mteq:string
   contacts.phone.lteq:string
   contacts.phone.neq:string
   contacts.phone.eq:string
   contacts.position.like:string
   contacts.position.mt:string
   contacts.position.lt:string
   contacts.position.mteq:string
   contacts.position.lteq:string
   contacts.position.neq:string
   contacts.position.eq:string
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:contacts.contact_id
   .:contacts.client_id
   .:contacts.name
   .:contacts.email
   .:contacts.phone
   .:contacts.position
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:contacts
         join:clients
            as:client_id
            type:left
            on
               and
                  contacts.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
