
/*
 * This HTTP Web API endpoint performs grouped aggregation operations on the [activities] table in the [crm] SQLite database.
 *
 * 1. [.arguments]
 *    - Accepts various parameters for grouping, aggregation, pagination, ordering, and filtering.
 *    - Mandatory arguments include:
 *        - [group_column]: The column to group by.
 *        - [aggregate_function]: One of min, max, sum, avg, or count.
 *        - [aggregate_column]: The column to aggregate.
 *    - Also includes filtering options across all available fields in the [activities] table and related [clients] table.
 *
 * 2. [validators]
 *    - Validates mandatory inputs and ensures [aggregate_function], [group_column], and [aggregate_column] are within predefined values.
 *
 * 3. [response.headers.set]
 *    - Adds HTTP cache control to the response with a max-age of 300 seconds to improve frontend performance and reduce load.
 *
 * 4. [auth.ticket.verify]
 *    - Restricts access to the endpoint to guest users only, making it publicly accessible but not writable.
 *
 * 5. [data.connect]
 *    - Opens a connection to the 'crm' SQLite database.
 *
 * 6. [data.read]
 *    - Executes an SQL query with:
 *        - A LEFT JOIN to the [clients] table (aliased as [client_id]).
 *        - Aggregate function applied to [aggregate_column].
 *        - Results grouped by [group_column].
 *        - Filters applied from input arguments.
 *        - Supports [limit], [offset], and [order] with [direction].
 *
 * 7. [return-nodes]
 *    - Returns the aggregated results to the client.
 *
 * This endpoint is ideal for reporting or dashboard purposes, where grouped summary statistics of activities are needed.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    */
   activities.activity_id.mt:long
   activities.activity_id.lt:long
   activities.activity_id.mteq:long
   activities.activity_id.lteq:long
   activities.activity_id.neq:long
   activities.activity_id.eq:long
   activities.client_id.mt:long
   activities.client_id.lt:long
   activities.client_id.mteq:long
   activities.client_id.lteq:long
   activities.client_id.neq:long
   activities.client_id.eq:long
   activities.type.like:string
   activities.type.mt:string
   activities.type.lt:string
   activities.type.mteq:string
   activities.type.lteq:string
   activities.type.neq:string
   activities.type.eq:string
   activities.date.mt:date
   activities.date.lt:date
   activities.date.mteq:date
   activities.date.lteq:date
   activities.date.neq:date
   activities.date.eq:date
   activities.notes.like:string
   activities.notes.mt:string
   activities.notes.lt:string
   activities.notes.mteq:string
   activities.notes.lteq:string
   activities.notes.neq:string
   activities.notes.eq:string
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:activities.activity_id
   .:activities.client_id
   .:activities.type
   .:activities.date
   .:activities.notes
   .:client_id.name

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:activities.activity_id
   .:activities.client_id
   .:activities.type
   .:activities.date
   .:activities.notes
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:activities
         join:clients
            as:client_id
            type:left
            on
               and
                  activities.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
