
/*
 * Counts the number of unique and distinct values in a specified column of the "campaigns" table
 * within your CRM database, with support for optional filtering on campaign-related fields.
 *
 * The caller must supply the [distinct_column] argument in the format "TABLE_NAME.COLUMN_NAME",
 * such as "campaigns.status" or "campaigns.budget". The result will be the number of unique values
 * found in that column across all records that match any supplied filter criteria.
 *
 * - Validates that [distinct_column] is both present and among an allowed set of campaign fields.
 * - Supports dynamic filtering using optional arguments that include numeric, date, and string
 *   comparisons like `.eq`, `.lt`, `.like`, etc.
 * - Constructs a `count(distinct COLUMN)` SQL expression dynamically using [strings.concat].
 * - Uses [data.connect] to establish a connection to a SQLite CRM database.
 * - Applies all filtering arguments to the WHERE clause using [add] and [get-nodes].
 * - Executes a [data.read] query to return a single count of unique values in the specified column.
 * - Sets a "Cache-Control" header to cache the result for 5 minutes.
 * - Verifies the requester is authenticated as a "guest" using [auth.ticket.verify].
 * - Returns the final count as a node named [count] in the response.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments.
    */
   campaigns.campaign_id.mt:long
   campaigns.campaign_id.lt:long
   campaigns.campaign_id.mteq:long
   campaigns.campaign_id.lteq:long
   campaigns.campaign_id.neq:long
   campaigns.campaign_id.eq:long
   campaigns.name.like:string
   campaigns.name.mt:string
   campaigns.name.lt:string
   campaigns.name.mteq:string
   campaigns.name.lteq:string
   campaigns.name.neq:string
   campaigns.name.eq:string
   campaigns.start_date.mt:date
   campaigns.start_date.lt:date
   campaigns.start_date.mteq:date
   campaigns.start_date.lteq:date
   campaigns.start_date.neq:date
   campaigns.start_date.eq:date
   campaigns.end_date.mt:date
   campaigns.end_date.lt:date
   campaigns.end_date.mteq:date
   campaigns.end_date.lteq:date
   campaigns.end_date.neq:date
   campaigns.end_date.eq:date
   campaigns.budget.mt:double
   campaigns.budget.lt:double
   campaigns.budget.mteq:double
   campaigns.budget.lteq:double
   campaigns.budget.neq:double
   campaigns.budget.eq:double
   campaigns.status.like:string
   campaigns.status.mt:string
   campaigns.status.lt:string
   campaigns.status.mteq:string
   campaigns.status.lteq:string
   campaigns.status.neq:string
   campaigns.status.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:campaigns.campaign_id
   .:campaigns.name
   .:campaigns.start_date
   .:campaigns.end_date
   .:campaigns.budget
   .:campaigns.status

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:campaigns
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
