
/*
 * Returns the number of unique and distinct values in a specified column from the "leads" table
 * in your CRM database. This operation supports flexible filtering across both lead and client fields.
 *
 * The caller must provide the [distinct_column] argument, which must be a fully qualified column name
 * such as "leads.status" or "client_id.name".
 *
 * Features:
 * - Validates [distinct_column] is both provided and among allowed values using [validators.mandatory]
 *   and [validators.enum].
 * - Supports comprehensive filtering on [lead_id], [client_id], [source], [status], [created_date],
 *   and related client field [client_id.name].
 * - Accepts operators such as `.eq`, `.lt`, `.like`, `.neq`, `.lteq`, and `.mteq`.
 * - Constructs a `count(distinct COLUMN)` SQL expression dynamically via [strings.concat].
 * - Connects to the CRM database using [data.connect] with SQLite.
 * - Joins with the "clients" table using LEFT JOIN to support cross-table filtering.
 * - Applies all filtering parameters dynamically with [get-nodes] and [add].
 * - Executes the query with [data.read] and returns the distinct count under the [count] node.
 * - Response is cached for 5 minutes using `Cache-Control`.
 * - Access is restricted to authenticated "guest" users via [auth.ticket.verify].
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments.
    */
   leads.lead_id.mt:long
   leads.lead_id.lt:long
   leads.lead_id.mteq:long
   leads.lead_id.lteq:long
   leads.lead_id.neq:long
   leads.lead_id.eq:long
   leads.client_id.mt:long
   leads.client_id.lt:long
   leads.client_id.mteq:long
   leads.client_id.lteq:long
   leads.client_id.neq:long
   leads.client_id.eq:long
   leads.source.like:string
   leads.source.mt:string
   leads.source.lt:string
   leads.source.mteq:string
   leads.source.lteq:string
   leads.source.neq:string
   leads.source.eq:string
   leads.status.like:string
   leads.status.mt:string
   leads.status.lt:string
   leads.status.mteq:string
   leads.status.lteq:string
   leads.status.neq:string
   leads.status.eq:string
   leads.created_date.mt:date
   leads.created_date.lt:date
   leads.created_date.mteq:date
   leads.created_date.lteq:date
   leads.created_date.neq:date
   leads.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:leads.lead_id
   .:leads.client_id
   .:leads.source
   .:leads.status
   .:leads.created_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:leads
         join:clients
            as:client_id
            type:left
            on
               and
                  leads.client_id:client_id.client_id
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
