
/*
 * Perform grouped aggregation from the "notes" table in your CRM database.
 *
 * This endpoint groups records by a specified column and applies an aggregate function
 * such as MIN, MAX, SUM, AVG, or COUNT on another specified column, returning one result per group.
 *
 * Required Arguments:
 * - [group_column]: Column to group results by. Must be in "TABLE.COLUMN" format.
 * - [aggregate_function]: One of: min, max, sum, avg, count.
 * - [aggregate_column]: Column to apply aggregation to. Must also be in "TABLE.COLUMN" format.
 *
 * Optional Arguments:
 * - [limit]: Maximum number of records to return (default is 25, use -1 for no limit).
 * - [offset]: Number of records to skip for pagination purposes.
 * - [order]: Column to sort the grouped result by.
 * - [direction]: Sort direction ("asc" or "desc").
 *
 * Filtering:
 * - Supports complex filtering on fields from the "notes" table such as [note_id], [content], [created_date], etc.
 * - Also allows filtering on related fields from the "clients" table via left join (e.g., [client_id.name]).
 *
 * Implementation Highlights:
 * - Input validation uses [validators.mandatory] and [validators.enum] to ensure required inputs are present and valid.
 * - Establishes a database connection via [data.connect] with "generic|crm" profile.
 * - Dynamically injects the aggregation expression using [set-name] and [strings.concat].
 * - Grouping column is explicitly returned in the output alongside the aggregate value.
 * - Filters, pagination, and sorting are applied dynamically based on arguments provided.
 * - Results are returned in a flat format under the "result" key for the aggregate output.
 * - Allows access to any authenticated "guest" users and sets a 5-minute caching policy on the response.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    */
   notes.note_id.mt:long
   notes.note_id.lt:long
   notes.note_id.mteq:long
   notes.note_id.lteq:long
   notes.note_id.neq:long
   notes.note_id.eq:long
   notes.client_id.mt:long
   notes.client_id.lt:long
   notes.client_id.mteq:long
   notes.client_id.lteq:long
   notes.client_id.neq:long
   notes.client_id.eq:long
   notes.content.like:string
   notes.content.mt:string
   notes.content.lt:string
   notes.content.mteq:string
   notes.content.lteq:string
   notes.content.neq:string
   notes.content.eq:string
   notes.created_date.mt:date
   notes.created_date.lt:date
   notes.created_date.mteq:date
   notes.created_date.lteq:date
   notes.created_date.neq:date
   notes.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:notes.note_id
   .:notes.client_id
   .:notes.content
   .:notes.created_date
   .:client_id.name

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:notes.note_id
   .:notes.client_id
   .:notes.content
   .:notes.created_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:notes
         join:clients
            as:client_id
            type:left
            on
               and
                  notes.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
