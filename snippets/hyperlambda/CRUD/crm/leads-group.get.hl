
/*
 * Performs grouped aggregation on the "leads" table of your CRM database, returning one
 * aggregate value (min, max, sum, avg, or count) per unique value in the specified [group_column].
 *
 * Required arguments:
 * - [group_column]: Fully qualified column name to group by (e.g. leads.source, client_id.name).
 * - [aggregate_function]: Aggregation type (min, max, sum, avg, count).
 * - [aggregate_column]: Column on which to apply the aggregation function.
 *
 * Optional arguments:
 * - [limit] and [offset]: For pagination support.
 * - [order] and [direction]: For sorting results.
 * - Filtering on any combination of lead or related client fields, including:
 *   [lead_id], [client_id], [source], [status], [created_date], and [client_id.name].
 *   Filtering supports comparison operators like `.eq`, `.lt`, `.like`, `.mteq`, `.neq`, etc.
 *
 * Functionality:
 * - Validates required fields and their values using [validators.mandatory] and [validators.enum].
 * - Dynamically builds SQL expressions for both the grouping and the aggregate function using [strings.concat].
 * - Joins the "clients" table using a LEFT JOIN to support grouping or filtering by client data.
 * - Connects to a SQLite CRM database using [data.connect].
 * - Injects filtering, sorting, and pagination parameters dynamically with [add] and [get-nodes].
 * - Returns each group and its corresponding aggregated value, labeled with the name of the aggregate function.
 * - Sets the HTTP caching policy with a 5-minute `Cache-Control` header.
 * - Restricts access to authenticated users with the "guest" role using [auth.ticket.verify].
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    */
   leads.lead_id.mt:long
   leads.lead_id.lt:long
   leads.lead_id.mteq:long
   leads.lead_id.lteq:long
   leads.lead_id.neq:long
   leads.lead_id.eq:long
   leads.client_id.mt:long
   leads.client_id.lt:long
   leads.client_id.mteq:long
   leads.client_id.lteq:long
   leads.client_id.neq:long
   leads.client_id.eq:long
   leads.source.like:string
   leads.source.mt:string
   leads.source.lt:string
   leads.source.mteq:string
   leads.source.lteq:string
   leads.source.neq:string
   leads.source.eq:string
   leads.status.like:string
   leads.status.mt:string
   leads.status.lt:string
   leads.status.mteq:string
   leads.status.lteq:string
   leads.status.neq:string
   leads.status.eq:string
   leads.created_date.mt:date
   leads.created_date.lt:date
   leads.created_date.mteq:date
   leads.created_date.lteq:date
   leads.created_date.neq:date
   leads.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:leads.lead_id
   .:leads.client_id
   .:leads.source
   .:leads.status
   .:leads.created_date
   .:client_id.name

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:leads.lead_id
   .:leads.client_id
   .:leads.source
   .:leads.status
   .:leads.created_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:leads
         join:clients
            as:client_id
            type:left
            on
               and
                  leads.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
