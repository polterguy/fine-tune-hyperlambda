
/*
 * Deletes a single record from the "contacts" table in your CRM database,
 * based on the provided [contact_id] primary key.
 *
 * This endpoint is restricted to users with the "root" role and permanently
 * removes the specified contact from the database. Upon successful deletion,
 * it emits a socket signal to notify relevant systems or clients.
 *
 * - Validates that [contact_id] is provided using [validators.mandatory].
 * - Restricts access to "root" users using [auth.ticket.verify].
 * - Connects to the SQLite-based CRM database via [data.connect].
 * - Dynamically builds the WHERE clause based on the provided ID using [get-nodes] and [add].
 * - Executes the deletion with [data.delete].
 * - Broadcasts a [crm.contacts.delete] socket event to "admin" and "root" roles, carrying the deleted contact's ID.
 * - Returns the number of affected rows via the [affected] node.
 */
.arguments

   // Mandatory primary key of record to delete, mandatory argument
   contact_id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root
validators.mandatory:x:@.arguments/*/contact_id

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:contacts
      where
         and

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.contacts.delete
      args
      roles:admin,root

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
