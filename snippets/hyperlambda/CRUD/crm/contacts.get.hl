
// Read or list records from your contacts table in your crm database
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   contacts.contact_id.mt:long
   contacts.contact_id.lt:long
   contacts.contact_id.mteq:long
   contacts.contact_id.lteq:long
   contacts.contact_id.neq:long
   contacts.contact_id.eq:long
   contacts.client_id.mt:long
   contacts.client_id.lt:long
   contacts.client_id.mteq:long
   contacts.client_id.lteq:long
   contacts.client_id.neq:long
   contacts.client_id.eq:long
   contacts.name.like:string
   contacts.name.mt:string
   contacts.name.lt:string
   contacts.name.mteq:string
   contacts.name.lteq:string
   contacts.name.neq:string
   contacts.name.eq:string
   contacts.email.like:string
   contacts.email.mt:string
   contacts.email.lt:string
   contacts.email.mteq:string
   contacts.email.lteq:string
   contacts.email.neq:string
   contacts.email.eq:string
   contacts.phone.like:string
   contacts.phone.mt:string
   contacts.phone.lt:string
   contacts.phone.mteq:string
   contacts.phone.lteq:string
   contacts.phone.neq:string
   contacts.phone.eq:string
   contacts.position.like:string
   contacts.position.mt:string
   contacts.position.lt:string
   contacts.position.mteq:string
   contacts.position.lteq:string
   contacts.position.neq:string
   contacts.position.eq:string
   client_id.name.eq:string
   client_id.name.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:contacts
         join:clients
            as:client_id
            type:left
            on
               and
                  contacts.client_id:client_id.client_id
      columns
         contacts.contact_id
         contacts.client_id
         contacts.name
         contacts.email
         contacts.phone
         contacts.position
         client_id.name
            as:client_id.name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
