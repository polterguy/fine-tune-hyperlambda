
/*
 * Counts the number of unique and distinct values in a specified column from the "notes" table
 * of your CRM database. Useful for analytics, filtering summaries, and tag cloud generation.
 *
 * Required Arguments:
 * - [distinct_column]: Fully qualified column name to evaluate for uniqueness,
 *   e.g. "notes.client_id" or "client_id.name". This argument is validated against a known whitelist.
 *
 * Optional Filtering:
 * - Supports advanced filtering on all fields in the "notes" table such as:
 *   [note_id], [client_id], [content], and [created_date].
 * - Also supports filtering by joined client fields like [client_id.name].
 * - Comparison operators like `.eq`, `.neq`, `.lt`, `.gteq`, `.like`, etc. are supported on all fields.
 *
 * Functionality:
 * - Access is restricted to users with a verified ticket for the "guest" role using [auth.ticket.verify].
 * - Validates input using [validators.mandatory] and [validators.enum] to ensure correctness.
 * - Connects to the CRM SQLite database with [data.connect].
 * - Joins the "clients" table via a LEFT JOIN to support cross-table filtering.
 * - Builds a SQL query dynamically to compute `count(distinct ...)` using [strings.concat].
 * - Applies filters using [add] and [get-nodes] on WHERE clauses.
 * - Executes the query using [data.read] and returns a single field [count] representing the distinct total.
 * - Adds a `Cache-Control` header to cache the response publicly for 5 minutes.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments.
    */
   notes.note_id.mt:long
   notes.note_id.lt:long
   notes.note_id.mteq:long
   notes.note_id.lteq:long
   notes.note_id.neq:long
   notes.note_id.eq:long
   notes.client_id.mt:long
   notes.client_id.lt:long
   notes.client_id.mteq:long
   notes.client_id.lteq:long
   notes.client_id.neq:long
   notes.client_id.eq:long
   notes.content.like:string
   notes.content.mt:string
   notes.content.lt:string
   notes.content.mteq:string
   notes.content.lteq:string
   notes.content.neq:string
   notes.content.eq:string
   notes.created_date.mt:date
   notes.created_date.lt:date
   notes.created_date.mteq:date
   notes.created_date.lteq:date
   notes.created_date.neq:date
   notes.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:notes.note_id
   .:notes.client_id
   .:notes.content
   .:notes.created_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:notes
         join:clients
            as:client_id
            type:left
            on
               and
                  notes.client_id:client_id.client_id
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
