
/*
 * Returns an aggregate result (min, max, sum, or average) computed on a specified column
 * from the "notes" table in your CRM database. The result is filtered according to optional
 * conditions and joined with the "clients" table to support client-related filters.
 *
 * Required arguments:
 * - [aggregate_function]: Must be one of "min", "max", "sum", or "avg".
 * - [aggregate_column]: Fully qualified column name on which to apply the aggregate function,
 *   such as "notes.note_id" or "notes.created_date".
 *
 * Optional filtering:
 * - Supports filtering on all standard fields in the "notes" table including [note_id], [client_id],
 *   [content], [created_date], and joined fields like [client_id.name].
 * - Filtering supports rich comparison operators such as `.eq`, `.neq`, `.lt`, `.mteq`, `.like`, etc.
 *
 * Functionality:
 * - Validates required parameters and ensures values are within accepted options using [validators.enum].
 * - Dynamically constructs a SQL aggregate expression using [strings.concat].
 * - Injects filtering conditions dynamically using [get-nodes] and [add].
 * - Connects to the CRM SQLite database via [data.connect].
 * - Executes a [data.read] with a LEFT JOIN on "clients" to allow filters on client fields.
 * - Returns the aggregated result as a single value labeled as [result].
 * - Caches the response publicly for 5 minutes using a `Cache-Control` header.
 * - Endpoint access is restricted to authenticated users with the "guest" role via [auth.ticket.verify].
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    */
   notes.note_id.mt:long
   notes.note_id.lt:long
   notes.note_id.mteq:long
   notes.note_id.lteq:long
   notes.note_id.neq:long
   notes.note_id.eq:long
   notes.client_id.mt:long
   notes.client_id.lt:long
   notes.client_id.mteq:long
   notes.client_id.lteq:long
   notes.client_id.neq:long
   notes.client_id.eq:long
   notes.content.like:string
   notes.content.mt:string
   notes.content.lt:string
   notes.content.mteq:string
   notes.content.lteq:string
   notes.content.neq:string
   notes.content.eq:string
   notes.created_date.mt:date
   notes.created_date.lt:date
   notes.created_date.mteq:date
   notes.created_date.lteq:date
   notes.created_date.neq:date
   notes.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:notes.note_id
   .:notes.client_id
   .:notes.content
   .:notes.created_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:notes
         join:clients
            as:client_id
            type:left
            on
               and
                  notes.client_id:client_id.client_id
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
