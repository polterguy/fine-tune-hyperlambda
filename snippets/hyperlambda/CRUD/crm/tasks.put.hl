
// Update one record in your tasks table in your crm database
.arguments

   // task_id column value being primary key of record to update, mandatory argument
   task_id:long

   // user_id column's new value
   user_id:long

   // description column's new value
   description:string

   // due_date column's new value
   due_date:date

   // status column's new value
   status:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/task_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Logging invocation.
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:crm.tasks entry updated
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:tasks
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.tasks.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
