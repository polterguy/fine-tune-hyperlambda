
/*
 * Deletes a single record from the "campaigns" table in your CRM database based on the
 * provided [campaign_id] primary key.
 *
 * This endpoint enforces access control and publishes a socket notification to
 * inform connected clients about the deletion event.
 *
 * - Requires [campaign_id] as a mandatory argument to identify the record to delete.
 * - Enforces "root" access via [auth.ticket.verify].
 * - Uses [data.connect] to establish a connection to the SQLite-backed CRM database.
 * - Constructs a dynamic WHERE clause for deletion based on the provided ID.
 * - Executes the [data.delete] slot to remove the record.
 * - Publishes a socket signal [crm.campaigns.delete] with the deleted record ID,
 *   scoped to "admin" and "root" roles for real-time updates.
 * - Unwraps the result and returns the number of affected rows under the [affected] node.
 */
.arguments

   // Mandatory primary key of record to delete, mandatory argument
   campaign_id:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root
validators.mandatory:x:@.arguments/*/campaign_id

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:campaigns
      where
         and

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.campaigns.delete
      args
      roles:admin,root

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
