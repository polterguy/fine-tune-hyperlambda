
/*
 * Retrieves a paginated list of records from the "leads" table in your CRM database,
 * supporting dynamic filtering, sorting, and pagination. Also includes client name lookup via a JOIN.
 *
 * Optional Arguments:
 * - [limit]: Maximum number of records to return (default is 25; use -1 to return all).
 * - [offset]: Offset into the dataset for pagination.
 * - [order]: Fully qualified column name to sort by (e.g. leads.status).
 * - [direction]: Either 'asc' or 'desc' to define sort order.
 *
 * Filtering:
 * - Allows filtering on all standard lead fields, including [lead_id], [client_id], [source], [status],
 *   and [created_date] using operators like `.eq`, `.lt`, `.like`, `.neq`, `.lteq`, `.mteq`, etc.
 * - Supports filtering on related client fields like [client_id.name] through a LEFT JOIN on the "clients" table.
 *
 * Functionality:
 * - Connects to the SQLite CRM database using [data.connect].
 * - Dynamically injects ordering, paging, and filtering arguments using [get-nodes] and [add].
 * - Retrieves the resulting rows using [data.read], returning the selected columns:
 *   lead ID, client ID, source, status, creation date, and client name.
 * - Applies a LEFT JOIN to include the client's name associated with each lead.
 * - Ensures authenticated access using [auth.ticket.verify] for users with the "guest" role.
 * - Adds an HTTP header to cache the response for 5 minutes using `Cache-Control`.
 * - Returns the results directly as structured nodes from the [data.read] invocation.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   leads.lead_id.mt:long
   leads.lead_id.lt:long
   leads.lead_id.mteq:long
   leads.lead_id.lteq:long
   leads.lead_id.neq:long
   leads.lead_id.eq:long
   leads.client_id.mt:long
   leads.client_id.lt:long
   leads.client_id.mteq:long
   leads.client_id.lteq:long
   leads.client_id.neq:long
   leads.client_id.eq:long
   leads.source.like:string
   leads.source.mt:string
   leads.source.lt:string
   leads.source.mteq:string
   leads.source.lteq:string
   leads.source.neq:string
   leads.source.eq:string
   leads.status.like:string
   leads.status.mt:string
   leads.status.lt:string
   leads.status.mteq:string
   leads.status.lteq:string
   leads.status.neq:string
   leads.status.eq:string
   leads.created_date.mt:date
   leads.created_date.lt:date
   leads.created_date.mteq:date
   leads.created_date.lteq:date
   leads.created_date.neq:date
   leads.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:leads
         join:clients
            as:client_id
            type:left
            on
               and
                  leads.client_id:client_id.client_id
      columns
         leads.lead_id
         leads.client_id
         leads.source
         leads.status
         leads.created_date
         client_id.name
            as:client_id.name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
