
/*
 * Retrieves a list of records from the "campaigns" table in your CRM database,
 * with support for dynamic filtering, pagination, and sorting.
 *
 * The endpoint allows clients to optionally control how records are retrieved using
 * parameters like [limit], [offset], [order], and [direction], as well as a wide range
 * of filtering conditions across all campaign fields.
 *
 * - Supports filtering on [campaign_id], [name], [start_date], [end_date], [budget], and [status]
 *   using various comparison operators such as `.eq`, `.lt`, `.like`, etc.
 * - Allows for custom ordering via the [order] and [direction] arguments using fully qualified column names.
 * - Enables paging using optional [limit] and [offset] arguments.
 * - Dynamically injects filtering, ordering, and pagination parameters into the [data.read] invocation.
 * - Uses [data.connect] to connect to the SQLite-backed CRM database.
 * - Executes a [data.read] query selecting key columns from the "campaigns" table.
 * - Returns the matching campaign records to the client as a list of structured nodes.
 * - Adds a `Cache-Control` header to allow for 5 minutes of public caching.
 * - Requires the user to be authenticated as a guest using [auth.ticket.verify].
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   campaigns.campaign_id.mt:long
   campaigns.campaign_id.lt:long
   campaigns.campaign_id.mteq:long
   campaigns.campaign_id.lteq:long
   campaigns.campaign_id.neq:long
   campaigns.campaign_id.eq:long
   campaigns.name.like:string
   campaigns.name.mt:string
   campaigns.name.lt:string
   campaigns.name.mteq:string
   campaigns.name.lteq:string
   campaigns.name.neq:string
   campaigns.name.eq:string
   campaigns.start_date.mt:date
   campaigns.start_date.lt:date
   campaigns.start_date.mteq:date
   campaigns.start_date.lteq:date
   campaigns.start_date.neq:date
   campaigns.start_date.eq:date
   campaigns.end_date.mt:date
   campaigns.end_date.lt:date
   campaigns.end_date.mteq:date
   campaigns.end_date.lteq:date
   campaigns.end_date.neq:date
   campaigns.end_date.eq:date
   campaigns.budget.mt:double
   campaigns.budget.lt:double
   campaigns.budget.mteq:double
   campaigns.budget.lteq:double
   campaigns.budget.neq:double
   campaigns.budget.eq:double
   campaigns.status.like:string
   campaigns.status.mt:string
   campaigns.status.lt:string
   campaigns.status.mteq:string
   campaigns.status.lteq:string
   campaigns.status.neq:string
   campaigns.status.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:campaigns
      columns
         campaigns.campaign_id
         campaigns.name
         campaigns.start_date
         campaigns.end_date
         campaigns.budget
         campaigns.status
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
