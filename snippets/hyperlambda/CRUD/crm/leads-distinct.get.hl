
/*
 * Retrieves a list of unique and distinct values from a specified column in the "leads" table
 * of your CRM database. Supports filtering, ordering, and pagination, and allows for joined filtering
 * via the related "clients" table.
 *
 * Required:
 * - [distinct_column]: A fully qualified column name in the format "TABLE_NAME.COLUMN_NAME",
 *   such as "leads.source" or "client_id.name".
 *
 * Optional:
 * - [limit]: Number of records to return (defaults to 25; use -1 for no limit).
 * - [offset]: Record offset for pagination.
 * - [order] and [direction]: Sorting based on a fully qualified column and either 'asc' or 'desc'.
 *
 * Filtering:
 * - Supports filtering across lead fields like [lead_id], [client_id], [source], [status], [created_date],
 *   and joined client fields like [client_id.name].
 * - Accepts advanced comparison operators including `.eq`, `.lt`, `.like`, `.neq`, `.lteq`, `.mteq`, etc.
 *
 * Implementation:
 * - Validates the required [distinct_column] and ensures it belongs to the allowed list via [validators.enum].
 * - Dynamically constructs a SQL `distinct(COLUMN)` expression using [strings.concat].
 * - Applies any provided filters using [get-nodes] and [add].
 * - Connects to the CRM database via [data.connect] (SQLite).
 * - Executes a [data.read] query that joins the "clients" table and returns distinct values as flat results.
 * - Uses the `Cache-Control` header to allow public caching of the response for 5 minutes.
 * - Ensures that only authenticated users with the "guest" role can access this endpoint via [auth.ticket.verify].
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   leads.lead_id.mt:long
   leads.lead_id.lt:long
   leads.lead_id.mteq:long
   leads.lead_id.lteq:long
   leads.lead_id.neq:long
   leads.lead_id.eq:long
   leads.client_id.mt:long
   leads.client_id.lt:long
   leads.client_id.mteq:long
   leads.client_id.lteq:long
   leads.client_id.neq:long
   leads.client_id.eq:long
   leads.source.like:string
   leads.source.mt:string
   leads.source.lt:string
   leads.source.mteq:string
   leads.source.lteq:string
   leads.source.neq:string
   leads.source.eq:string
   leads.status.like:string
   leads.status.mt:string
   leads.status.lt:string
   leads.status.mteq:string
   leads.status.lteq:string
   leads.status.neq:string
   leads.status.eq:string
   leads.created_date.mt:date
   leads.created_date.lt:date
   leads.created_date.mteq:date
   leads.created_date.lteq:date
   leads.created_date.neq:date
   leads.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:leads.lead_id
   .:leads.client_id
   .:leads.source
   .:leads.status
   .:leads.created_date
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:leads
         join:clients
            as:client_id
            type:left
            on
               and
                  leads.client_id:client_id.client_id
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
