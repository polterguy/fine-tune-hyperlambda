
/*
 * Retrieves a list of records from the "clients" table in your CRM database,
 * with full support for pagination, sorting, and flexible filtering on all standard fields.
 *
 * This endpoint allows users to customize the query through optional arguments such as:
 * - [limit]: Maximum number of records to return (default 25; -1 returns all).
 * - [offset]: Starting point in the result set.
 * - [order]: Column to sort by, in the format "TABLE_NAME.COLUMN_NAME".
 * - [direction]: Sorting direction, either "asc" or "desc".
 *
 * Filtering:
 * - Supports extensive filtering on all client fields (client_id, name, email, phone, address).
 * - Accepts a wide range of comparison operators: `.eq`, `.neq`, `.lt`, `.mt`, `.lteq`, `.mteq`, `.like`.
 *
 * Implementation:
 * - Applies pagination, sorting, and filtering arguments dynamically using [add] and [get-nodes].
 * - Connects to a SQLite-backed CRM database using [data.connect].
 * - Executes a [data.read] query to fetch the selected client columns.
 * - Returns the result set to the caller as a structured list of client records.
 * - Adds an HTTP `Cache-Control` header to cache the result for 5 minutes.
 * - Requires guest-level authentication via [auth.ticket.verify].
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   clients.client_id.mt:long
   clients.client_id.lt:long
   clients.client_id.mteq:long
   clients.client_id.lteq:long
   clients.client_id.neq:long
   clients.client_id.eq:long
   clients.name.like:string
   clients.name.mt:string
   clients.name.lt:string
   clients.name.mteq:string
   clients.name.lteq:string
   clients.name.neq:string
   clients.name.eq:string
   clients.email.like:string
   clients.email.mt:string
   clients.email.lt:string
   clients.email.mteq:string
   clients.email.lteq:string
   clients.email.neq:string
   clients.email.eq:string
   clients.phone.like:string
   clients.phone.mt:string
   clients.phone.lt:string
   clients.phone.mteq:string
   clients.phone.lteq:string
   clients.phone.neq:string
   clients.phone.eq:string
   clients.address.like:string
   clients.address.mt:string
   clients.address.lt:string
   clients.address.mteq:string
   clients.address.lteq:string
   clients.address.neq:string
   clients.address.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:clients
      columns
         clients.client_id
         clients.name
         clients.email
         clients.phone
         clients.address
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
