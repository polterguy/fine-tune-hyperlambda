
/*
 * Counts the number of unique and distinct values from a specified column in the "contacts" table
 * of your CRM database, with full support for optional filtering and JOIN-based client lookups.
 *
 * The [distinct_column] argument is mandatory and must be a fully qualified column name such as
 * "contacts.email" or "client_id.name". The endpoint returns a single numeric result under the [count] node.
 *
 * - Validates presence and correctness of [distinct_column] using [validators.mandatory] and [validators.enum].
 * - Supports extensive filtering across both "contacts" and related "clients" fields using operators such as
 *   `.eq`, `.lt`, `.like`, `.neq`, etc.
 * - Performs a LEFT JOIN to the "clients" table to support filtering on client attributes like [client_id.name].
 * - Dynamically constructs the `count(distinct COLUMN)` expression via [strings.concat] and injects it into
 *   the [data.read] invocation.
 * - Connects to a SQLite CRM database via [data.connect].
 * - Injects filter criteria dynamically using [get-nodes] and [add].
 * - Returns the final count result under the [count] node to the caller.
 * - Applies a 5-minute public cache via the `Cache-Control` HTTP header.
 * - Restricts access to authenticated guest users using [auth.ticket.verify].
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments.
    */
   contacts.contact_id.mt:long
   contacts.contact_id.lt:long
   contacts.contact_id.mteq:long
   contacts.contact_id.lteq:long
   contacts.contact_id.neq:long
   contacts.contact_id.eq:long
   contacts.client_id.mt:long
   contacts.client_id.lt:long
   contacts.client_id.mteq:long
   contacts.client_id.lteq:long
   contacts.client_id.neq:long
   contacts.client_id.eq:long
   contacts.name.like:string
   contacts.name.mt:string
   contacts.name.lt:string
   contacts.name.mteq:string
   contacts.name.lteq:string
   contacts.name.neq:string
   contacts.name.eq:string
   contacts.email.like:string
   contacts.email.mt:string
   contacts.email.lt:string
   contacts.email.mteq:string
   contacts.email.lteq:string
   contacts.email.neq:string
   contacts.email.eq:string
   contacts.phone.like:string
   contacts.phone.mt:string
   contacts.phone.lt:string
   contacts.phone.mteq:string
   contacts.phone.lteq:string
   contacts.phone.neq:string
   contacts.phone.eq:string
   contacts.position.like:string
   contacts.position.mt:string
   contacts.position.lt:string
   contacts.position.mteq:string
   contacts.position.lteq:string
   contacts.position.neq:string
   contacts.position.eq:string
   client_id.name.eq:string
   client_id.name.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:contacts.contact_id
   .:contacts.client_id
   .:contacts.name
   .:contacts.email
   .:contacts.phone
   .:contacts.position
   .:client_id.name

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:contacts
         join:clients
            as:client_id
            type:left
            on
               and
                  contacts.client_id:client_id.client_id
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
