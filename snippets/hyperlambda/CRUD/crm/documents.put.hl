
/*
 * Updates an existing record in the "documents" table of your CRM database,
 * based on the provided [document_id] primary key.
 *
 * This endpoint allows updating any combination of the optional fields:
 * [client_id], [title], and [file_path]. Only users with "admin" or "root" roles
 * are authorized to invoke this operation. If the target document does not exist,
 * the endpoint returns a 404 Not Found response.
 *
 * Features:
 * - Validates presence of [document_id] using [validators.mandatory].
 * - Authorizes access through [auth.ticket.verify] for "admin" and "root" roles.
 * - Connects to a SQLite-based CRM database using [data.connect].
 * - Dynamically injects only the provided field updates using [get-nodes] and [add].
 * - Applies the update via [data.update] and checks the number of affected rows.
 * - Returns a 404 response if no records were updated, indicating the record was not found.
 * - On success, sets HTTP status to 202 (Accepted) and returns the number of affected rows.
 * - Emits a socket signal [crm.documents.put] with the updated payload to inform
 *   connected systems or interfaces (roles: admin, root).
 */
.arguments

   // Mandatory document_id column value being primary key of record to update, mandatory argument
   document_id:long

   // Optional client_id column's new value
   client_id:long

   // Optional title column's new value
   title:string

   // Optional file_path column's new value
   file_path:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/document_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:documents
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.documents.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
