
/*
 * Retrieves a list of unique and distinct values from a specified column in the "campaigns" table
 * of your CRM database, with support for filtering, sorting, and pagination.
 *
 * The [distinct_column] argument is required and must be a fully qualified column name such as
 * "campaigns.status" or "campaigns.budget". The endpoint returns only the distinct values found
 * in that column across all matching records.
 *
 * - Validates [distinct_column] for both presence and correctness using [validators.enum].
 * - Allows for optional [limit], [offset], [order], and [direction] parameters to control
 *   pagination and result ordering.
 * - Supports a comprehensive set of filter arguments on all major campaign fields, including
 *   comparison operators for numeric, date, and string types.
 * - Constructs a dynamic SQL `distinct()` expression using [strings.concat] and injects it
 *   into the [data.read] operation.
 * - Uses [data.connect] to connect to a SQLite CRM database.
 * - Applies all user-provided filters using [add] and [get-nodes] on the WHERE clause.
 * - Removes control arguments (e.g. [limit], [order]) after processing to simplify logic.
 * - Returns the distinct values to the caller.
 * - Adds a `Cache-Control` header to cache the response for 5 minutes.
 * - Ensures only authenticated guest users can access the endpoint via [auth.ticket.verify].
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   campaigns.campaign_id.mt:long
   campaigns.campaign_id.lt:long
   campaigns.campaign_id.mteq:long
   campaigns.campaign_id.lteq:long
   campaigns.campaign_id.neq:long
   campaigns.campaign_id.eq:long
   campaigns.name.like:string
   campaigns.name.mt:string
   campaigns.name.lt:string
   campaigns.name.mteq:string
   campaigns.name.lteq:string
   campaigns.name.neq:string
   campaigns.name.eq:string
   campaigns.start_date.mt:date
   campaigns.start_date.lt:date
   campaigns.start_date.mteq:date
   campaigns.start_date.lteq:date
   campaigns.start_date.neq:date
   campaigns.start_date.eq:date
   campaigns.end_date.mt:date
   campaigns.end_date.lt:date
   campaigns.end_date.mteq:date
   campaigns.end_date.lteq:date
   campaigns.end_date.neq:date
   campaigns.end_date.eq:date
   campaigns.budget.mt:double
   campaigns.budget.lt:double
   campaigns.budget.mteq:double
   campaigns.budget.lteq:double
   campaigns.budget.neq:double
   campaigns.budget.eq:double
   campaigns.status.like:string
   campaigns.status.mt:string
   campaigns.status.lt:string
   campaigns.status.mteq:string
   campaigns.status.lteq:string
   campaigns.status.neq:string
   campaigns.status.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:campaigns.campaign_id
   .:campaigns.name
   .:campaigns.start_date
   .:campaigns.end_date
   .:campaigns.budget
   .:campaigns.status

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:campaigns
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
