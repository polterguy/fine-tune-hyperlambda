
/*
 * This Hyperlambda endpoint performs a keyword search on the [campaigns] table in the 'crm' database,
 * and returns records that match one or more distinct keywords from a user-supplied [query].
 *
 * 1. [.arguments]
 *    * Accepts user input:
 *      - [query]: Required. Space-separated string of keywords to search.
 *      - [limit]: Optional. Limits number of rows returned. Defaults to 10.
 *      - [offset]: Optional. Used for paginated results.
 *
 * 2. [validators.mandatory]
 *    * Ensures the [query] argument is supplied.
 *
 * 3. [validators.default]
 *    * Defaults the [limit] argument to 10 if not specified by caller.
 *
 * 4. [.words]
 *    * Splits the [query] value into lowercase individual keyword strings, stored in a dynamic node list.
 *
 * 5. [.columns]
 *    * Defines a fixed list of columns to be searched: [name] and [status] from the [campaigns] table.
 *
 * 6. [data.connect]
 *    * Connects to the 'crm' database using the [generic] connection string.
 *
 * 7. [.sql]
 *    * Dynamically constructs a full SQL query with computed fields:
 *      - [keyword_density]: Ratio measuring keyword saturation in the record.
 *      - [keyword_count]: Number of distinct matched keywords.
 *    * Uses dynamic SQL parameters like [@p0], [@p1], etc., to securely pass keywords.
 *    * Adds WHERE condition to exclude rows with no keyword matches.
 *    * Orders by [keyword_count] (descending), then [keyword_density] (descending).
 *    * Optionally applies OFFSET for pagination.
 *
 * 8. [data.select]
 *    * Executes the final dynamic SQL statement against the [campaigns] table.
 *
 * 9. [remove-nodes]
 *    * Removes [keyword_density] and [keyword_count] helper fields before returning the result to keep the response clean.
 *
 * 10. [return-nodes]
 *     * Returns all matching rows to the caller in descending order of relevance.
 *
 * **Use cases:**
 * * CRM systems enabling keyword-based searches across marketing campaigns.
 * * Admin dashboards needing intelligent filters on campaign data.
 * * Exporting matching campaign records based on keyword relevance.
 */
.arguments

   // Mandatory query for records to search for
   query:string

   // Optional number of records to return, defaults to 10 if not specified. Pass in -1 to return all records
   limit:long

   // Optional offset into the dataset of where to start retrieving records
   offset:long

// Make sure the user has provided a query.
validators.mandatory:x:@.arguments/*/query

// Apply defaults if not specified.
validators.default:x:@.arguments
   limit:long:10

// Split the user's query into individual keywords, separated by spaces.
.words
add:x:@.words
   strings.split:x:@.arguments/*/query
      .:" "

// Enforce lower characters for each keyword, and guard against SQL injection.
.no:int:0
for-each:x:@.words/*
   set-value:x:@.dp/#
      strings.to-lower:x:@.dp/#

// Specify which columns to search against.
.columns
   .:name
   .:status

// Connect to the specified database.
data.connect:[generic|crm]
   database-type:sqlite

   // Start building our SQL.
   .sql:select *, (

   // 1) Dynamically create the full text by concatenating all columns we want to search.
   .fields
   for-each:x:@.columns/*
      strings.concat
         .:coalesce(
         get-value:x:@.dp/#
         .:", '')"
      unwrap:x:+/*/*
      add:x:@.fields
         .
            .:x:@strings.concat
   set-value:x:@.fields
      strings.join:x:@.fields/*
         .:" || "
   remove-nodes:x:@.fields/*

   // 2) Keyword density calculation
   .no:int:0
   for-each:x:@.words/*

      // Adding SQL parameter.
      set-name:x:+/+/*/*
         strings.concat
            .:@p
            get-value:x:@.no
      unwrap:x:+/*/*
      add:x:@data.connect/*/data.select
         .
            .:x:@.dp/#

      // Modifying our SQL.
      if
         eq:x:@.no
            .:int:0
         .lambda

            // First keyword => no leading plus
            set-value:x:@.sql
               strings.concat:x:@.sql
                  get-value:x:@.sql
                  .:" (length("
                  get-value:x:@.fields
                  .:) - length(replace(lower(
                  get-value:x:@.fields
                  .:), @p
                  get-value:x:@.no
                  .:", ''))) / length(@p"
                  get-value:x:@.no
                  .:)
      else
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" + (length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)
      math.increment:x:@.no
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:) * 1.0 / length(
         get-value:x:@.fields
         .:) as keyword_density, (

   // 3) Distinct keyword count => For each keyword, 1 if present, 0 if not.
   .no:int:0
   for-each:x:@.words/*
      if
         eq:x:@.no
            .:int:0
         .lambda

            // First keyword => no leading plus
            set-value:x:@.sql
               strings.concat:x:@.sql
                  get-value:x:@.sql
                  .:" CASE WHEN ((length("
                  get-value:x:@.fields
                  .:) - length(replace(lower(
                  get-value:x:@.fields
                  .:), @p
                  get-value:x:@.no
                  .:", ''))) / length(@p"
                  get-value:x:@.no
                  .:)) > 0 THEN 1 ELSE 0 END
      else
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" + CASE WHEN ((length("
               get-value:x:@.fields
               .:) - length(replace(lower(
               get-value:x:@.fields
               .:), @p
               get-value:x:@.no
               .:", ''))) / length(@p"
               get-value:x:@.no
               .:)) > 0 THEN 1 ELSE 0 END
      math.increment:x:@.no

   // Finalize "keyword_count".
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:) as keyword_count

   // 4) Finish SELECT + WHERE
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" from "
         .:campaigns
         .:" where keyword_count > 0"

   // 5) Order by distinct keyword_count (higher means more distinct keywords), then keyword_density.
   set-value:x:@.sql
      strings.concat:x:@.sql
         get-value:x:@.sql
         .:" order by keyword_count desc, keyword_density desc limit "
         get-value:x:@.arguments/*/limit

   // (Optional) offset => pagination
   if
      exists:x:@.arguments/*/offset
      .lambda
         set-value:x:@.sql
            strings.concat:x:@.sql
               get-value:x:@.sql
               .:" offset "
               get-value:x:@.arguments/*/offset

   // Execute the SQL
   data.select:x:@.sql
      database-type:sqlite

   // Remove helper fields if you don't want them in your final JSON
   remove-nodes:x:@data.select/*/*/keyword_density
   remove-nodes:x:@data.select/*/*/keyword_count

   // Return the final result set
   return-nodes:x:@data.select/*
