
// Count unique and distinct items from your clients table in your crm database
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Optional logical operator for filtering arguments, can be either 'or' or 'and'. Defaults to and.
   operator:string

   /*
    * Optional filtering arguments.
    */
   clients.client_id.mt:long
   clients.client_id.lt:long
   clients.client_id.mteq:long
   clients.client_id.lteq:long
   clients.client_id.neq:long
   clients.client_id.eq:long
   clients.name.like:string
   clients.name.mt:string
   clients.name.lt:string
   clients.name.mteq:string
   clients.name.lteq:string
   clients.name.neq:string
   clients.name.eq:string
   clients.email.like:string
   clients.email.mt:string
   clients.email.lt:string
   clients.email.mteq:string
   clients.email.lteq:string
   clients.email.neq:string
   clients.email.eq:string
   clients.phone.like:string
   clients.phone.mt:string
   clients.phone.lt:string
   clients.phone.mteq:string
   clients.phone.lteq:string
   clients.phone.neq:string
   clients.phone.eq:string
   clients.address.like:string
   clients.address.mt:string
   clients.address.lt:string
   clients.address.mteq:string
   clients.address.lteq:string
   clients.address.neq:string
   clients.address.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:clients.client_id
   .:clients.name
   .:clients.email
   .:clients.phone
   .:clients.address

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Sanity checking invocation.
validators.enum:x:@.arguments/*/operator
   .:or
   .:and

/*
 * Checking if user supplied an [operator] argument, and if so
 * changing the boolean operator for comparison operations.
 */
if
   exists:x:@.arguments/*/operator
   .lambda

      // User provided a boolean comparison [operator] argument.
      set-name:x:../*/data.connect/*/data.read/*/where/0
         get-value:x:@.arguments/*/operator
      remove-nodes:x:@.arguments/*/operator

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:clients
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
