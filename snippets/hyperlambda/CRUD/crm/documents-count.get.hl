
/*
 * Returns the total number of records in the "documents" table of your CRM database,
 * supporting optional filtering on document fields and joined client fields.
 *
 * This endpoint executes a `count(*)` query that returns how many document records match
 * the provided filter criteria. If no filters are provided, it returns the total document count.
 *
 * Features:
 * - Supports filtering on all major fields of the "documents" table including:
 *   [document_id], [client_id], [title], [file_path], and [uploaded_date].
 * - Enables filtering on related client fields like [client_id.name] through a LEFT JOIN with the "clients" table.
 * - Accepts a wide range of comparison operators like `.eq`, `.lt`, `.like`, `.neq`, `.mteq`, etc.
 * - Uses [data.connect] to connect to a SQLite-based CRM database.
 * - Dynamically applies all provided filters to the WHERE clause using [add] and [get-nodes].
 * - Executes the query using [data.read] and returns the result under the [count] node.
 * - Adds an HTTP `Cache-Control` header to enable 5-minute public caching.
 * - Ensures the caller is authenticated as a guest using [auth.ticket.verify].
 */
.arguments

   /*
    * Optional filtering arguments.
    */
   documents.document_id.mt:long
   documents.document_id.lt:long
   documents.document_id.mteq:long
   documents.document_id.lteq:long
   documents.document_id.neq:long
   documents.document_id.eq:long
   documents.client_id.mt:long
   documents.client_id.lt:long
   documents.client_id.mteq:long
   documents.client_id.lteq:long
   documents.client_id.neq:long
   documents.client_id.eq:long
   documents.title.like:string
   documents.title.mt:string
   documents.title.lt:string
   documents.title.mteq:string
   documents.title.lteq:string
   documents.title.neq:string
   documents.title.eq:string
   documents.file_path.like:string
   documents.file_path.mt:string
   documents.file_path.lt:string
   documents.file_path.mteq:string
   documents.file_path.lteq:string
   documents.file_path.neq:string
   documents.file_path.eq:string
   documents.uploaded_date.mt:date
   documents.uploaded_date.lt:date
   documents.uploaded_date.mteq:date
   documents.uploaded_date.lteq:date
   documents.uploaded_date.neq:date
   documents.uploaded_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:documents
         join:clients
            as:client_id
            type:left
            on
               and
                  documents.client_id:client_id.client_id
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
