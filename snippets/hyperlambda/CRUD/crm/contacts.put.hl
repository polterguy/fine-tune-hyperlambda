
/*
 * Updates an existing record in the "contacts" table of your CRM database,
 * using the provided [contact_id] as the primary key.
 *
 * The endpoint supports updating any combination of optional fields including
 * [client_id], [name], [email], [phone], and [position], while ensuring the record exists.
 * Only users with "root" or "admin" roles are allowed to perform this operation.
 *
 * - Validates that [contact_id] is provided using [validators.mandatory].
 * - Verifies authorization through [auth.ticket.verify] for "root" or "admin" users.
 * - Connects to the CRM SQLite database using [data.connect].
 * - Dynamically extracts and applies only the fields to update via [get-nodes] and [add].
 * - Builds a WHERE clause to locate the specific record by ID.
 * - Executes the update with [data.update] and checks if the record was found.
 * - If no rows are affected, returns a 404 status with a "Record not found" message.
 * - Returns HTTP 202 status on success.
 * - Publishes a [crm.contacts.put] socket signal containing the updated values,
 *   scoped to "admin" and "root" roles for live UI updates or logging systems.
 * - Returns the number of affected rows to confirm the update via [affected].
 */
.arguments

   // Optional contact_id column value being primary key of record to update, mandatory argument
   contact_id:long

   // Optional client_id column's new value
   client_id:long

   // Optional name column's new value
   name:string

   // Optional email column's new value
   email:string

   // Optional phone column's new value
   phone:string

   // Optional position column's new value
   position:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/contact_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:contacts
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.contacts.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
