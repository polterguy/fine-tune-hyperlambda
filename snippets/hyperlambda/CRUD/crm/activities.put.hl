
/*
 * Updates an existing record in the [activities] table in the CRM database using [activity_id] as primary key.
 *
 * Requires:
 * - [activity_id]: Mandatory, used to identify the record to update.
 *
 * Supports:
 * - Optional updates to [client_id], [type], and [notes] fields.
 * - Separates update values from the primary key filter using [get-nodes] index ranges.
 * - Authorization is restricted to users with [admin] or [root] roles.
 * - Validates that the record exists, returning 404 if not found.
 * - Returns 202 (Accepted) on success and the number of affected rows as [affected].
 * - Broadcasts a [crm.activities.put] WebSocket signal with the updated values to all connected admin/root clients.
 *
 * Intentional: Separates mutable values from primary key to dynamically construct [data.update] payload,
 * and confirms record existence before broadcasting change via WebSocket.
 */
.arguments

   // Mandatory activity_id column value being primary key of record to update, mandatory argument
   activity_id:long

   // Optional client_id column's new value
   client_id:long

   // Optional type column's new value
   type:string

   // Optional notes column's new value
   notes:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/activity_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:activities
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.activities.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
