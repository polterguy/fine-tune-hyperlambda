
/*
 * Updates an existing record in the "activities" table of your CRM database,
 * using the provided [activity_id] as the primary key.
 *
 * The endpoint supports modifying optional fields like [client_id], [type], and [notes],
 * while ensuring that the record exists and the user has the correct access privileges.
 *
 * - Requires the [activity_id] argument to identify the record to be updated.
 * - Applies optional updates to the fields specified by the caller.
 * - Uses [data.connect] to connect to the SQLite CRM database.
 * - Dynamically separates update values from primary key filters using [get-nodes] with index ranges.
 * - Executes [data.update] and checks the number of affected rows to confirm that the record existed.
 * - Returns a 404 status code and error message if no matching record is found.
 * - Returns a 202 Accepted status code upon successful update.
 * - Publishes a [crm.activities.put] socket signal to notify connected clients of the change,
 *   sharing the updated data with "admin" and "root" roles.
 * - Returns the number of affected rows to the caller.
 */
.arguments

   // Mandatory activity_id column value being primary key of record to update, mandatory argument
   activity_id:long

   // Optional client_id column's new value
   client_id:long

   // Optional type column's new value
   type:string

   // Optional notes column's new value
   notes:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/activity_id

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:activities
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:crm.activities.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
