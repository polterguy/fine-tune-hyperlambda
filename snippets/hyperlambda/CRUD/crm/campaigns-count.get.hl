
/*
 * Counts the total number of records in the "campaigns" table of your CRM database,
 * with support for optional filtering across all major campaign fields.
 *
 * This endpoint returns a single numeric value representing how many campaign records
 * match the specified criteria. If no filters are provided, it returns the total count
 * of all campaigns in the database.
 *
 * - Supports dynamic filtering on fields like [campaign_id], [name], [start_date], [end_date],
 *   [budget], and [status], using operators like `.eq`, `.lt`, `.like`, etc.
 * - Uses [data.connect] to establish a connection to a SQLite-based CRM database.
 * - Applies all filter arguments to the WHERE clause using [add] and [get-nodes].
 * - Executes a [data.read] with `count(*)` to retrieve the number of matching records.
 * - Caches the response for 5 minutes using an HTTP `Cache-Control` header.
 * - Ensures the caller is authenticated as a guest using [auth.ticket.verify].
 * - Returns the resulting count in a node named [count].
 */
.arguments

   /*
    * Optional filtering arguments.
    */
   campaigns.campaign_id.mt:long
   campaigns.campaign_id.lt:long
   campaigns.campaign_id.mteq:long
   campaigns.campaign_id.lteq:long
   campaigns.campaign_id.neq:long
   campaigns.campaign_id.eq:long
   campaigns.name.like:string
   campaigns.name.mt:string
   campaigns.name.lt:string
   campaigns.name.mteq:string
   campaigns.name.lteq:string
   campaigns.name.neq:string
   campaigns.name.eq:string
   campaigns.start_date.mt:date
   campaigns.start_date.lt:date
   campaigns.start_date.mteq:date
   campaigns.start_date.lteq:date
   campaigns.start_date.neq:date
   campaigns.start_date.eq:date
   campaigns.end_date.mt:date
   campaigns.end_date.lt:date
   campaigns.end_date.mteq:date
   campaigns.end_date.lteq:date
   campaigns.end_date.neq:date
   campaigns.end_date.eq:date
   campaigns.budget.mt:double
   campaigns.budget.lt:double
   campaigns.budget.mteq:double
   campaigns.budget.lteq:double
   campaigns.budget.neq:double
   campaigns.budget.eq:double
   campaigns.status.like:string
   campaigns.status.mt:string
   campaigns.status.lt:string
   campaigns.status.mteq:string
   campaigns.status.lteq:string
   campaigns.status.neq:string
   campaigns.status.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:campaigns
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
