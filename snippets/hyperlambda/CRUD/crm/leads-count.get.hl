
/*
 * Returns the total number of records in the "leads" table of your CRM database,
 * optionally filtered by any combination of lead and client fields.
 *
 * This endpoint performs a `count(*)` to determine how many lead records match the
 * specified filtering criteria. If no filters are provided, it returns the total
 * number of leads in the system.
 *
 * Features:
 * - Supports filtering across all standard fields in the "leads" table:
 *   [lead_id], [client_id], [source], [status], and [created_date].
 * - Also allows filtering on related client fields like [client_id.name] via a LEFT JOIN
 *   with the "clients" table.
 * - Supports a wide variety of operators including `.eq`, `.lt`, `.mteq`, `.like`, `.neq`, etc.
 * - Dynamically builds WHERE clauses using [get-nodes] and [add] based on user-provided arguments.
 * - Connects to a SQLite-based CRM database using [data.connect].
 * - Executes a [data.read] that joins the "clients" table to support cross-table filtering.
 * - Returns the result as a single node labeled [count].
 * - Adds a `Cache-Control` HTTP header to allow the result to be cached for 5 minutes.
 * - Ensures guest-level authorization using [auth.ticket.verify].
 */
.arguments

   /*
    * Optional filtering arguments.
    */
   leads.lead_id.mt:long
   leads.lead_id.lt:long
   leads.lead_id.mteq:long
   leads.lead_id.lteq:long
   leads.lead_id.neq:long
   leads.lead_id.eq:long
   leads.client_id.mt:long
   leads.client_id.lt:long
   leads.client_id.mteq:long
   leads.client_id.lteq:long
   leads.client_id.neq:long
   leads.client_id.eq:long
   leads.source.like:string
   leads.source.mt:string
   leads.source.lt:string
   leads.source.mteq:string
   leads.source.lteq:string
   leads.source.neq:string
   leads.source.eq:string
   leads.status.like:string
   leads.status.mt:string
   leads.status.lt:string
   leads.status.mteq:string
   leads.status.lteq:string
   leads.status.neq:string
   leads.status.eq:string
   leads.created_date.mt:date
   leads.created_date.lt:date
   leads.created_date.mteq:date
   leads.created_date.lteq:date
   leads.created_date.neq:date
   leads.created_date.eq:date
   client_id.name.eq:string
   client_id.name.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:guest

// Opening up our database connection.
data.connect:[generic|crm]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:leads
         join:clients
            as:client_id
            type:left
            on
               and
                  leads.client_id:client_id.client_id
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
