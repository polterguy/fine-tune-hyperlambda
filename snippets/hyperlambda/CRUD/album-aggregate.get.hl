
/*
 * Generate an API HTTP endpoint allowing me to pass in an aggregate function being min, max, sum, or avg.
 * Let the endpoint use this aggregate function to read from my Album table in my chinook database.
 * Use SQLite as your database type.
 * Add filtering for AlbumId, Title, and ArtistId
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   // Filtering conditions (optional arguments)
   Album.AlbumId.eq:long
   Album.Title.like:string
   Album.Title.eq:string
   Album.ArtistId.eq:long

// Making sure both aggregate function and column was supplied, since both of these are mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Making sure aggregate function is valid.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Making sure aggregate column name is a column we can deal with.
validators.enum:x:@.arguments/*/aggregate_column
   .:Album.AlbumId
   .:Album.Title
   .:Album.ArtistId

// Opening up our database connection by using your 'generic' connection string from your configuration.
data.connect:[generic|chinook]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Album
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of aggregate function to caller.
   return-nodes:x:@data.read/*/*
