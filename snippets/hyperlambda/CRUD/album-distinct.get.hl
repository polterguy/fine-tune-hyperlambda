
/*
 * How do I create an HTTP web API endpoint that returns unique and distinct values from the Album table in the chinook SQLite database.
 *
 * It must support paging, sorting, and filtering on AlbumId, Title, and ArtistId, and it should return only distinct values
 * found in its [distinct_column] column argument.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Optional filtering arguments below.
   Album.AlbumId.eq:long
   Album.Title.like:string
   Album.Title.eq:string
   Album.ArtistId.eq:long

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Album.AlbumId
   .:Album.Title
   .:Album.ArtistId

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Select data from Album.
   data.read
      database-type:sqlite
      table:Album
      columns
         distinct_functor
            as:.
      where
         and

   /*
    * Returning result of above read invocation to caller.
    *
    * Notice, must be on same level (indentation) as our above [data.read] guy.
    */
   return-nodes:x:@data.read/*/*
