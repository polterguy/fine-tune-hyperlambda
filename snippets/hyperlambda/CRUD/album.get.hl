
// Create an API endpoint that allows me to read or list rows from my Album table in my SQLite chinook database with paging and filtering on AlbumId, Title and ArtistId.
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Optional filter arguments
   Album.AlbumId.eq:long
   Album.Title.like:string
   Album.Title.eq:string
   Album.ArtistId.eq:long

// Connecting to 'chinook' using our 'generic' connection string from configuration.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our read invocation with ordering and paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset

   // To avoid adding these into [where] / [and], we remove these arguments from the graph object.
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Since we've removed the filtering and paging arguments, we can simply add ALL arguments as filter conditions
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Album
      columns
         Album.AlbumId
         Album.Title
         Album.ArtistId
      where
         and

   // Returning result as [rows] to caller
   yield
      rows:x:@data.read/*
