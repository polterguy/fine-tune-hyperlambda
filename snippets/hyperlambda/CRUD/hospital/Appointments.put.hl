/*
 * Updates an existing appointment record in the [Appointments] table of the [hospital] database.
 *
 * Required:
 * - [AppointmentID]: Primary key used to identify the appointment to update. Mandatory.
 *
 * Optional Updates:
 * - [PatientID], [DoctorID], [AppointmentDate], [Reason]: Fields that may be modified by the caller.
 *
 * Security:
 * - Only users with [admin] or [root] roles are authorized to update appointments.
 *
 * Intentional:
 * - Logs the update operation using [log.info], capturing both the authenticated username and sanitized arguments.
 * - Auth ticket is retrieved and arguments are serialized with [lambda2hyper] to produce a clean audit trail.
 * - Dynamically separates update fields from the key filter using [get-nodes] with specific index ranges.
 * - Executes [data.update] to apply changes and confirms success by validating affected rows.
 * - Returns HTTP 404 if the specified record does not exist.
 * - Returns HTTP 202 (Accepted) on successful update.
 * - Broadcasts a [hospital.Appointments.put] WebSocket event with updated values to all [admin] and [root] listeners.
 *
 * This endpoint ensures secure and auditable updates to appointment data while supporting real-time UI updates.
 */
.arguments

   // AppointmentID column value being primary key of record to update, mandatory argument
   AppointmentID:long

   // PatientID column's new value
   PatientID:long

   // DoctorID column's new value
   DoctorID:long

   // AppointmentDate column's new value
   AppointmentDate:date

   // Reason column's new value
   Reason:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/AppointmentID

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Logging invocation.
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:hospital.Appointments entry updated
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:Appointments
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:hospital.Appointments.put
      args
      roles:admin,root

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
