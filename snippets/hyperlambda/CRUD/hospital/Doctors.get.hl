
/*
 * This endpoint reads and returns records from the 'Doctors' table in a hospital database, 
 * supporting **dynamic filtering**, pagination, and sorting based on client-supplied arguments.
 *
 * The [.arguments] node includes:
 * - [limit] and [offset] for pagination, allowing clients to control how many records to return 
 *   and from where to start in the dataset.
 * - [order] and [direction] allow sorting of the result set based on a fully qualified column 
 *   (e.g., 'Doctors.LastName') in either ascending or descending order.
 * - A wide range of **optional filtering arguments** (e.g., 'Doctors.Email.like', 
 *   'Doctors.Specialty.eq') that clients can use to constrain the result set.
 *   These arguments are not required, and the query dynamically includes only those that 
 *   are provided.
 *
 * The [response.headers.set] slot configures HTTP response headers to allow public caching 
 * for up to 300 seconds, improving performance for repeated queries.
 *
 * The [auth.ticket.verify] slot restricts access to authenticated users with roles 
 * 'admin', 'guest', or 'root', ensuring data access is secure.
 *
 * The [data.connect] slot opens a connection to the 'hospital' database using the 
 * 'sqlite' engine via the 'generic' connector.
 *
 * Inside the database context:
 * - The first [add] block checks for optional [order] and [direction] parameters 
 *   and, if present, adds them to the [data.read] invocation to enable custom sorting.
 *   These arguments are then removed from the original argument list using [remove-nodes].
 *
 * - The second [add] block does the same for [limit] and [offset], enabling pagination 
 *   of the result set.
 *
 * - The third [add] block dynamically includes all **remaining filtering arguments** 
 *   into the [where] clause of the SQL query. This approach ensures the endpoint applies 
 *   only the filters specified by the client at runtime, resulting in **flexible and adaptive querying**.
 *
 * The [data.read] slot performs the actual SQL query:
 * - It reads from the 'Doctors' table and returns a well-defined set of columns, including 
 *   identifiers, names, specialties, contact details, etc.
 * - The [where] clause starts with an empty [and] node and is dynamically populated with 
 *   any filtering arguments passed to the endpoint.
 *
 * Finally, the [return-nodes] slot returns the matching records from the [data.read] operation 
 * back to the client.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Doctors.DoctorID.eq:long
   Doctors.FirstName.like:string
   Doctors.FirstName.eq:string
   Doctors.LastName.like:string
   Doctors.LastName.eq:string
   Doctors.Specialty.like:string
   Doctors.Specialty.eq:string
   Doctors.PhoneNumber.like:string
   Doctors.PhoneNumber.eq:string
   Doctors.Email.like:string
   Doctors.Email.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Doctors
      columns
         Doctors.DoctorID
         Doctors.FirstName
         Doctors.LastName
         Doctors.Specialty
         Doctors.PhoneNumber
         Doctors.Email
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
