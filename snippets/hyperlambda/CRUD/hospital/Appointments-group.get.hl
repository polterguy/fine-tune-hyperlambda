
/*
 * This endpoint performs grouped aggregation queries (e.g., min, max, avg, sum, count) 
 * on the 'Appointments' table of a hospital database, grouped by a specific column 
 * and enriched with optional pagination, sorting, and filtering capabilities.
 *
 * The [.arguments] node defines a set of input parameters:
 * - [group_column], [aggregate_function], and [aggregate_column] are **mandatory** and 
 *   specify the grouping column, the aggregation function to apply, and the target 
 *   column to aggregate.
 * - [limit], [offset], [order], and [direction] are optional and control pagination 
 *   and sorting behavior for the result set.
 * - A comprehensive set of **optional filtering arguments** are also declared, allowing 
 *   clients to narrow the result set based on values in 'Appointments', 'Patients', 
 *   and 'Doctors' tables.
 *
 * The [validators.mandatory] slots ensure that the three required arguments are 
 * provided by the caller.
 *
 * The [validators.enum] slots validate that [aggregate_function], [group_column], 
 * and [aggregate_column] contain only legal and pre-approved values, maintaining 
 * security and schema consistency.
 *
 * The [response.headers.set] slot adds a 'Cache-Control' HTTP header to cache responses 
 * on the client side for 300 seconds.
 *
 * The [auth.ticket.verify] slot restricts access to users with roles 'admin', 
 * 'guest', or 'root'.
 *
 * The [data.connect] slot initiates a connection to the 'hospital' database using the 
 * 'sqlite' engine via the 'generic' connector.
 *
 * Inside the database context:
 * - [set-name] dynamically sets the [group_column] as the key in the [group] node of 
 *   the [data.read] slot.
 *
 * - A second [set-name] ensures the grouped column is included in the output result, 
 *   and [insert-before] inserts it into the [columns] section to reflect this.
 *
 * - [set-value] updates the alias of the aggregated result to reflect the function 
 *   being used (e.g., "avg", "sum", etc.).
 *
 * - [remove-nodes] cleans up the already processed [group_column] argument, 
 *   simplifying further logic.
 *
 * - [add] then pulls in optional pagination parameters [limit] and [offset] to 
 *   apply result size constraints. These are also removed after use.
 *
 * - Additional [add] and [remove-nodes] pairs handle [order] and [direction] arguments 
 *   to enable runtime sorting of grouped results.
 *
 * - [set-name] creates an [aggregate_functor] node representing the complete 
 *   aggregate function expression using [strings.concat]â€”for example, 
 *   `sum(Appointments.DoctorID)`.
 *
 * - [remove-nodes] cleans up the [aggregate_function] and [aggregate_column] 
 *   arguments after use to keep the structure clean.
 *
 * - Crucially, the [add] slot dynamically injects **only the provided filtering arguments** 
 *   into the [where] clause. Since these arguments are optional and may or may not be present 
 *   in the incoming payload, this mechanism ensures only specified filters are applied.
 *   If no filters are passed, the [where] clause remains an empty [and] block.
 *
 * The [data.read] slot executes the actual SQL query:
 * - It joins the 'Appointments' table with 'Patients' and 'Doctors' using left joins.
 * - It uses the dynamically constructed [aggregate_functor] in the [columns] node 
 *   and groups the data by the [group_column].
 *
 * The [return-nodes] slot returns the final grouped aggregation result to the caller.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Appointments.AppointmentID.eq:long
   Appointments.PatientID.eq:long
   Appointments.DoctorID.eq:long
   Appointments.AppointmentDate.eq:date
   Appointments.Reason.like:string
   Appointments.Reason.eq:string
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string
   DoctorID.FirstName.eq:string
   DoctorID.FirstName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Appointments.AppointmentID
   .:Appointments.PatientID
   .:Appointments.DoctorID
   .:Appointments.AppointmentDate
   .:Appointments.Reason
   .:PatientID.FirstName
   .:DoctorID.FirstName

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Appointments.AppointmentID
   .:Appointments.PatientID
   .:Appointments.DoctorID
   .:Appointments.AppointmentDate
   .:Appointments.Reason
   .:PatientID.FirstName
   .:DoctorID.FirstName

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Appointments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Appointments.PatientID:PatientID.PatientID
         join:Doctors
            as:DoctorID
            type:left
            on
               and
                  Appointments.DoctorID:DoctorID.DoctorID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
