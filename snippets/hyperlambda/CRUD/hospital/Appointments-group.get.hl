
/*
 * Performs grouped aggregation on the [Appointments] table in the [hospital] database,
 * with optional joins to the [Patients] and [Doctors] tables for extended filtering and grouping support.
 *
 * Requires:
 * - [group_column]: Fully qualified column to group results by (e.g., Appointments.AppointmentDate).
 * - [aggregate_function]: One of min, max, sum, avg, or count.
 * - [aggregate_column]: Column to apply the aggregation function to.
 *
 * Optional:
 * - [limit], [offset]: Pagination support.
 * - [order], [direction]: Sorting control.
 * - Filtering across Appointments (e.g. Reason, AppointmentDate), Patients, and Doctors (e.g. FirstName).
 *
 * Intentional:
 * - Validates required parameters and restricts group and aggregation columns to a known safe list.
 * - Dynamically constructs [data.read] to support flexible grouping, ordering, filtering, and pagination.
 * - Uses LEFT JOINs to allow filtering on patient and doctor data while grouping on appointment fields.
 * - Injects group and aggregate column programmatically and safely.
 * - Removes pre-used arguments to simplify WHERE clause generation.
 * - Adds HTTP caching headers for 5-minute public cacheability.
 *
 * Access is allowed for users with [admin], [guest], or [root] roles.
 * Returns aggregated results as [result] alongside the [group_column] value.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Appointments.AppointmentID.eq:long
   Appointments.PatientID.eq:long
   Appointments.DoctorID.eq:long
   Appointments.AppointmentDate.eq:date
   Appointments.Reason.like:string
   Appointments.Reason.eq:string
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string
   DoctorID.FirstName.eq:string
   DoctorID.FirstName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Appointments.AppointmentID
   .:Appointments.PatientID
   .:Appointments.DoctorID
   .:Appointments.AppointmentDate
   .:Appointments.Reason
   .:PatientID.FirstName
   .:DoctorID.FirstName

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Appointments.AppointmentID
   .:Appointments.PatientID
   .:Appointments.DoctorID
   .:Appointments.AppointmentDate
   .:Appointments.Reason
   .:PatientID.FirstName
   .:DoctorID.FirstName

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Appointments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Appointments.PatientID:PatientID.PatientID
         join:Doctors
            as:DoctorID
            type:left
            on
               and
                  Appointments.DoctorID:DoctorID.DoctorID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
