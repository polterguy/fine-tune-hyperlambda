
/*
 * This endpoint performs an aggregation operation (min, max, sum, or avg) on a selected column 
 * in the 'Medications' table of a hospital database, optionally filtered by user-defined conditions.
 *
 * The [.arguments] node includes:
 * - [aggregate_function], a **mandatory** argument that defines the type of aggregation to perform. 
 *   Only the following values are accepted: 'min', 'max', 'sum', or 'avg'.
 * - [aggregate_column], a **mandatory** argument that specifies the column to aggregate. 
 *   This must be in the format 'TABLE_NAME.COLUMN_NAME', such as 'Medications.Dosage'.
 * - A series of **optional filtering arguments** (e.g., 'Medications.MedicationName.eq', 
 *   'PatientID.FirstName.like') that can be used to narrow the dataset before aggregation.
 *   These filters are dynamically applied if provided, and can be omitted entirely.
 *
 * The [validators.mandatory] slots ensure that both [aggregate_function] and [aggregate_column] 
 * are present before continuing.
 *
 * The [validators.enum] slots validate that:
 * - [aggregate_function] is one of the allowed operations ('min', 'max', 'sum', or 'avg').
 * - [aggregate_column] is one of the predefined and safe columns from either the 'Medications' 
 *   or related 'Patients' table.
 *
 * The [response.headers.set] slot configures the HTTP response to allow public caching 
 * for 300 seconds.
 *
 * The [auth.ticket.verify] slot restricts access to authenticated users in roles 
 * 'admin', 'guest', or 'root'.
 *
 * The [data.connect] slot opens a connection to the 'hospital' database using the 
 * 'sqlite' engine through the 'generic' connector.
 *
 * Inside the database connection context:
 * - The [set-name] slot dynamically constructs the aggregate function (e.g., `avg(Medications.Dosage)`) 
 *   using [strings.concat] and stores it under [aggregate_functor] inside the [columns] node.
 *
 * - The [remove-nodes] slot removes the [aggregate_function] and [aggregate_column] arguments 
 *   from the argument list to simplify further logic.
 *
 * - The [add] slot dynamically inserts any **remaining optional filtering arguments** into the 
 *   [where] clause. This mechanism enables **dynamic filtering**, meaning only the provided filters 
 *   are applied at runtime. If no filters are passed, the query aggregates across the entire dataset.
 *
 * The [data.read] slot executes the SQL query:
 * - It reads from the 'Medications' table and performs a left join with the 'Patients' table 
 *   to allow filtering based on patient fields.
 * - The [columns] section contains the dynamically created [aggregate_functor], aliased as [result].
 * - The [where] clause is initialized as an empty [and] block and populated dynamically based on filters.
 * - A [limit] of 1 ensures that only a single aggregated value is returned.
 *
 * The [return-nodes] slot retrieves and returns the result of the aggregation to the caller.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Medications.MedicationID.eq:long
   Medications.PatientID.eq:long
   Medications.MedicationName.like:string
   Medications.MedicationName.eq:string
   Medications.Dosage.like:string
   Medications.Dosage.eq:string
   Medications.StartDate.eq:date
   Medications.EndDate.eq:date
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Medications.MedicationID
   .:Medications.PatientID
   .:Medications.MedicationName
   .:Medications.Dosage
   .:Medications.StartDate
   .:Medications.EndDate
   .:PatientID.FirstName

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Medications
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Medications.PatientID:PatientID.PatientID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
