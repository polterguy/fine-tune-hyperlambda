
/*
 * This endpoint performs **grouped aggregation** on the 'Medications' table in a hospital database, 
 * applying an aggregate function (e.g., min, max, avg, sum, or count) over a specified column, 
 * grouped by another column. It supports dynamic filtering, sorting, and pagination.
 *
 * The [.arguments] node includes:
 * - [group_column], [aggregate_function], and [aggregate_column] — all **mandatory** — which define 
 *   how the data should be grouped, what type of aggregation should be applied, and to which column.
 * - [limit], [offset], [order], and [direction] support optional pagination and sorting.
 * - A variety of **optional filtering arguments** are available, such as 'Medications.MedicationName.eq' 
 *   or 'PatientID.FirstName.like'. These are **dynamically added** to the [where] clause and can be 
 *   omitted entirely, allowing flexible and context-sensitive filtering.
 *
 * The [validators.mandatory] slots ensure that required arguments ([group_column], [aggregate_function], 
 * and [aggregate_column]) are provided.
 *
 * The [validators.enum] slots enforce valid values for:
 * - [aggregate_function] (only allowing 'min', 'max', 'sum', 'avg', or 'count').
 * - [group_column] and [aggregate_column] (restricted to known fields in the 'Medications' and joined 'Patients' tables).
 *
 * The [response.headers.set] slot sets a 'Cache-Control' header to cache the response for 300 seconds.
 *
 * The [auth.ticket.verify] slot ensures access is restricted to users with roles 'admin', 'guest', or 'root'.
 *
 * The [data.connect] slot opens a connection to the 'hospital' database using the 'sqlite' engine via the 'generic' connector.
 *
 * Inside the database context:
 * - The [set-name] slot assigns the [group_column] to the [group] clause of the [data.read] operation.
 * - Another [set-name] ensures the [group_column] is also returned in the results, and [insert-before] inserts it 
 *   at the beginning of the [columns] section for proper display.
 * - [set-value] renames the returned aggregation result using the name of the [aggregate_function].
 *
 * - [remove-nodes] clears [group_column] from the argument list after processing.
 *
 * - [add] pulls in optional [limit] and [offset] for pagination, followed by [remove-nodes] to clean up.
 *
 * - Additional [add] and [remove-nodes] are used for [order] and [direction], enabling optional sorting.
 *
 * - [set-name] dynamically constructs the aggregation expression (e.g., `avg(Medications.Dosage)`) 
 *   using [strings.concat] and assigns it as [aggregate_functor].
 *
 * - [remove-nodes] then clears [aggregate_function] and [aggregate_column] from the argument list.
 *
 * - The final [add] dynamically injects any **remaining arguments** into the [where] clause of the query. 
 *   Since these filters are optional, this mechanism supports **dynamic filtering**, applying only 
 *   filters provided at runtime.
 *
 * The [data.read] slot performs the grouped SQL aggregation query:
 * - It queries the 'Medications' table and left joins the 'Patients' table to allow grouping or filtering 
 *   by patient data.
 * - It includes the grouped column and the aggregated result in the [columns] node.
 * - The [group] node groups the result based on the chosen column.
 * - The [where] clause is initialized with an [and] block and populated based on input filters.
 *
 * Finally, the [return-nodes] slot returns the grouped and aggregated results to the client.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Medications.MedicationID.eq:long
   Medications.PatientID.eq:long
   Medications.MedicationName.like:string
   Medications.MedicationName.eq:string
   Medications.Dosage.like:string
   Medications.Dosage.eq:string
   Medications.StartDate.eq:date
   Medications.EndDate.eq:date
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Medications.MedicationID
   .:Medications.PatientID
   .:Medications.MedicationName
   .:Medications.Dosage
   .:Medications.StartDate
   .:Medications.EndDate
   .:PatientID.FirstName

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Medications.MedicationID
   .:Medications.PatientID
   .:Medications.MedicationName
   .:Medications.Dosage
   .:Medications.StartDate
   .:Medications.EndDate
   .:PatientID.FirstName

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Medications
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Medications.PatientID:PatientID.PatientID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
