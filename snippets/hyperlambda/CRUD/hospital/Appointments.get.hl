
/*
 * This endpoint reads and returns records from the 'Appointments' table in a hospital database, 
 * supporting pagination, sorting, and a wide range of **optional filtering** parameters.
 *
 * The [.arguments] node defines several input parameters:
 * - [limit] and [offset] allow the caller to control pagination by specifying how many records 
 *   to return and where in the result set to start.
 * - [order] and [direction] enable sorting of the returned records by a fully qualified column 
 *   name in either ascending or descending order.
 * - A variety of **optional filter arguments** (e.g., 'Appointments.AppointmentDate.eq', 
 *   'DoctorID.FirstName.like') allow clients to constrain the result set. These filtering 
 *   arguments are not mandatory and can be **dynamically included or omitted**, providing 
 *   flexible query behavior based on client needs.
 *
 * The [response.headers.set] slot adds an HTTP header with 'Cache-Control: public, max-age=300' 
 * to allow client-side caching of the response for 300 seconds.
 *
 * The [auth.ticket.verify] slot ensures only authenticated users with roles 'admin', 'guest', 
 * or 'root' are authorized to use this endpoint.
 *
 * The [data.connect] slot initiates a connection to the 'hospital' database using the 
 * 'sqlite' engine through the 'generic' connector.
 *
 * Inside the database connection context:
 * - The first [add] block extracts [order] and [direction] from the argument set and appends 
 *   them to the [data.read] node to enable runtime sorting. These arguments are then removed 
 *   from the original argument set using [remove-nodes] to prevent duplication.
 *
 * - Similarly, the next [add] block injects [limit] and [offset] for pagination, followed 
 *   by their cleanup with [remove-nodes].
 *
 * - The final [add] block dynamically inserts any **remaining filter arguments** into the 
 *   [where] clause of the upcoming [data.read] operation. This design enables **optional filtering**: 
 *   only the filters provided by the caller are applied, while others are ignored, making the 
 *   filtering behavior dynamic and adaptive to the request.
 *
 * The [data.read] slot performs the actual SQL query:
 * - It queries the 'Appointments' table and joins related 'Patients' and 'Doctors' tables using 
 *   left joins to enrich the returned data.
 * - The [columns] node explicitly lists which fields to return, including the foreign key names 
 *   from joined tables and their aliases.
 * - The [where] clause starts as an empty [and] block and is dynamically populated at runtime 
 *   with any specified filters.
 *
 * Finally, the [return-nodes] slot extracts and returns the result of the [data.read] query 
 * to the client.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Appointments.AppointmentID.eq:long
   Appointments.PatientID.eq:long
   Appointments.DoctorID.eq:long
   Appointments.AppointmentDate.eq:date
   Appointments.Reason.like:string
   Appointments.Reason.eq:string
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string
   DoctorID.FirstName.eq:string
   DoctorID.FirstName.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Appointments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Appointments.PatientID:PatientID.PatientID
         join:Doctors
            as:DoctorID
            type:left
            on
               and
                  Appointments.DoctorID:DoctorID.DoctorID
      columns
         Appointments.AppointmentID
         Appointments.PatientID
         Appointments.DoctorID
         Appointments.AppointmentDate
         Appointments.Reason
         PatientID.FirstName
            as:PatientID.FirstName
         DoctorID.FirstName
            as:DoctorID.FirstName
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
