
/*
 * Reads and lists records from the [Appointments] table in the [hospital] database,
 * with optional joins to [Patients] and [Doctors] tables for enhanced filtering and display.
 *
 * Optional Arguments:
 * - [limit], [offset]: Supports pagination.
 * - [order], [direction]: Supports sorting by any fully qualified column name.
 * - Filter options across:
 *   - [Appointments]: Filter by AppointmentID, PatientID, DoctorID, AppointmentDate, and Reason (both eq and like).
 *   - [Patients]: Filter by FirstName (exact or partial via LIKE).
 *   - [Doctors]: Filter by FirstName (exact or partial via LIKE).
 *
 * Intentional:
 * - Applies pagination, sorting, and filtering dynamically through [get-nodes] for flexible and secure query construction.
 * - Uses LEFT JOINs to enrich appointment records with patient and doctor information.
 * - Ensures filtered values are appended safely to the [where] clause.
 * - Adds HTTP caching headers to improve frontend performance and reduce backend load.
 *
 * Access:
 * - Available to users with the [admin], [guest], or [root] roles.
 *
 * Returns a structured list of appointment records, enriched with related names from the Patients and Doctors tables.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Appointments.AppointmentID.eq:long
   Appointments.PatientID.eq:long
   Appointments.DoctorID.eq:long
   Appointments.AppointmentDate.eq:date
   Appointments.Reason.like:string
   Appointments.Reason.eq:string
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string
   DoctorID.FirstName.eq:string
   DoctorID.FirstName.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Appointments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Appointments.PatientID:PatientID.PatientID
         join:Doctors
            as:DoctorID
            type:left
            on
               and
                  Appointments.DoctorID:DoctorID.DoctorID
      columns
         Appointments.AppointmentID
         Appointments.PatientID
         Appointments.DoctorID
         Appointments.AppointmentDate
         Appointments.Reason
         PatientID.FirstName
            as:PatientID.FirstName
         DoctorID.FirstName
            as:DoctorID.FirstName
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
