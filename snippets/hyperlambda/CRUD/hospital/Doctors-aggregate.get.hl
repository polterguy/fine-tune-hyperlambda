/*
 * Performs an aggregate function on the [Doctors] table in the [hospital] database,
 * returning a single result such as the minimum, maximum, sum, or average of a selected column.
 *
 * Required Arguments:
 * - [aggregate_function]: Must be one of [min], [max], [sum], or [avg].
 * - [aggregate_column]: The column to apply the aggregation on, in TABLE_NAME.COLUMN_NAME format.
 *
 * Optional Filtering:
 * - Supports filtering on all key fields of the [Doctors] table:
 *   - DoctorID, FirstName, LastName, Specialty, PhoneNumber, Email
 *   - Filtering supports both exact matches and LIKE operations.
 *
 * Intentional:
 * - Validates that both aggregation function and column are provided and match a predefined, safe list.
 * - Dynamically builds the SQL aggregate function using [strings.concat] to prevent injection and promote flexibility.
 * - Uses [get-nodes] to apply any additional filter arguments to the WHERE clause.
 * - Adds public caching via HTTP headers for 5 minutes to reduce backend load on repeated queries.
 * - Enforces role-based access control, restricting access to [admin], [guest], and [root] users.
 *
 * Returns:
 * - A single aggregated value labeled as [result], suitable for analytics, reporting, or dashboard summaries.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Doctors.DoctorID.eq:long
   Doctors.FirstName.like:string
   Doctors.FirstName.eq:string
   Doctors.LastName.like:string
   Doctors.LastName.eq:string
   Doctors.Specialty.like:string
   Doctors.Specialty.eq:string
   Doctors.PhoneNumber.like:string
   Doctors.PhoneNumber.eq:string
   Doctors.Email.like:string
   Doctors.Email.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Doctors.DoctorID
   .:Doctors.FirstName
   .:Doctors.LastName
   .:Doctors.Specialty
   .:Doctors.PhoneNumber
   .:Doctors.Email

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Doctors
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
