/*
 * Counts the total number of records in the [Doctors] table of the [hospital] database,
 * optionally filtered by any combination of columns like [FirstName], [LastName], [Specialty], [PhoneNumber], or [Email].
 *
 * Filtering Capabilities:
 * - Supports both exact match [.eq] and pattern match [.like] on key doctor fields:
 *   - DoctorID, FirstName, LastName, Specialty, PhoneNumber, and Email.
 *
 * Intentional:
 * - Uses [get-nodes] to dynamically inject filters into the WHERE clause, providing flexible query customization.
 * - Applies a COUNT(*) aggregation with a LIMIT 1 to ensure a single result row.
 * - Adds a public cache header with 5-minute expiration to improve frontend responsiveness and reduce load.
 * - Protects the endpoint using role-based access control for [admin], [guest], and [root] users.
 *
 * Returns:
 * - A single JSON object containing the [count] of matched records.
 * - Ideal for summary statistics, dashboard tiles, or analytics requiring total counts of doctor entries.
 */
.arguments
   Doctors.DoctorID.eq:long
   Doctors.FirstName.like:string
   Doctors.FirstName.eq:string
   Doctors.LastName.like:string
   Doctors.LastName.eq:string
   Doctors.Specialty.like:string
   Doctors.Specialty.eq:string
   Doctors.PhoneNumber.like:string
   Doctors.PhoneNumber.eq:string
   Doctors.Email.like:string
   Doctors.Email.eq:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Doctors
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
