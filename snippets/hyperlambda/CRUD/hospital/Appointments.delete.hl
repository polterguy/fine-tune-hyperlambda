
/*
 * This endpoint deletes a **single record** from the 'Appointments' table in a hospital database 
 * based on a unique identifier.
 *
 * The [.arguments] node defines one **mandatory** input parameter: [AppointmentID], which serves 
 * as the primary key of the record to be deleted.
 *
 * The [auth.ticket.verify] slot ensures that only users with the 'root' role have permission 
 * to execute this deletion operation, enforcing strict access control for data modification.
 *
 * The [auth.ticket.get] slot retrieves the identity of the currently authenticated user.
 *
 * The [lambda2hyper] slot converts the argument payload into Hyperlambda structure, which is 
 * then passed to the [log.info] slot. This logs a message indicating that an 'Appointments' 
 * entry was deleted, including both the username and the arguments for traceability and auditing.
 *
 * The [validators.mandatory] slot guarantees that [AppointmentID] is provided before continuing 
 * with the deletion logic.
 *
 * The [data.connect] slot establishes a connection to the 'hospital' database using the 
 * 'sqlite' engine via the 'generic' connector.
 *
 * Inside the database context:
 * - The [add] slot dynamically inserts the deletion condition (i.e., the [AppointmentID] argument) 
 *   into the [where] clause of the upcoming [data.delete] operation.
 *
 * - The [data.delete] slot performs the actual deletion from the 'Appointments' table, 
 *   using an [and] clause under [where] to safely apply filtersâ€”though only [AppointmentID] 
 *   is expected in this case.
 *
 * - After deletion, a [sockets.signal] is triggered to notify connected clients (with roles 
 *   'admin' or 'root') that an 'Appointments' record has been deleted. This includes all 
 *   original arguments via [add] under [args].
 *
 * - Finally, the [unwrap] slot ensures the result of the [data.delete] operation is made 
 *   accessible to the [return] slot, which returns the number of affected records 
 *   under the key [affected].
 */
.arguments

   // Primary key of record to delete, mandatory argument
   AppointmentID:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Logging invocation.
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:hospital.Appointments entry deleted
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper
validators.mandatory:x:@.arguments/*/AppointmentID

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:Appointments
      where
         and

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:hospital.Appointments.delete
      args
      roles:admin,root

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
