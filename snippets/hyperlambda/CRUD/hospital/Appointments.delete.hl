
/*
 * Deletes a record from the [Appointments] table in the [hospital] database using the primary key [AppointmentID].
 *
 * Requires:
 * - [AppointmentID]: Mandatory argument used to identify the appointment record to be deleted.
 *
 * Security:
 * - Only users with the [root] role are authorized to invoke this endpoint.
 *
 * Intentional:
 * - Logs the delete action with full argument payload using [log.info], capturing the invoking username.
 * - Retrieves current authentication ticket to associate the log entry with the initiating user.
 * - Safely parameterizes the delete invocation using [get-nodes] to construct the WHERE clause.
 * - Publishes a [hospital.Appointments.delete] WebSocket signal to notify subscribed [admin] and [root] roles of the deletion event.
 *
 * Returns:
 * - The number of affected rows via [affected] after the record has been deleted.
 */
.arguments

   // Primary key of record to delete, mandatory argument
   AppointmentID:long

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Logging invocation.
auth.ticket.get
lambda2hyper:x:@.arguments/*
log.info:hospital.Appointments entry deleted
   username:x:@auth.ticket.get
   arguments:x:@lambda2hyper
validators.mandatory:x:@.arguments/*/AppointmentID

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Parametrising our delete invocation.
   add:x:./*/data.delete/*/where/*/and
      get-nodes:x:@.arguments/*

   // Deleting item from database.
   data.delete
      database-type:sqlite
      table:Appointments
      where
         and

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   sockets.signal:hospital.Appointments.delete
      args
      roles:admin,root

   // Returning result of above invocation to caller.
   unwrap:x:+/*
   return
      affected:x:@data.delete
