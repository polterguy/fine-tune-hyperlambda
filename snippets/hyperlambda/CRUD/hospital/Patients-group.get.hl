
/*
 * This endpoint returns grouped aggregation results (e.g., min, max, avg, sum, or count) 
 * from the 'Patients' table in a hospital database. It supports grouping by a specified column, 
 * and allows dynamic filtering, sorting, and pagination.
 *
 * The [.arguments] node includes:
 * - [group_column], [aggregate_function], and [aggregate_column] are **mandatory** arguments:
 *   - [group_column] defines the column by which to group the data (e.g., 'Patients.Gender').
 *   - [aggregate_function] specifies the operation to perform ('min', 'max', 'sum', 'avg', or 'count').
 *   - [aggregate_column] specifies the column to apply the aggregation on (e.g., 'Patients.AdmissionDate').
 * - [limit], [offset], [order], and [direction] allow optional pagination and result sorting.
 * - A wide variety of **optional filtering arguments** (like 'Patients.Email.eq', 'Patients.Gender.like', etc.)
 *   can be supplied. These are **dynamically added** to the [where] clause if provided, enabling 
 *   flexible filtering of the grouped dataset.
 *
 * The [validators.mandatory] slots enforce the presence of all required arguments.
 *
 * The [validators.enum] slots ensure that:
 * - [aggregate_function] is one of the supported operations.
 * - [group_column] and [aggregate_column] are safe, known column names from the 'Patients' table.
 *
 * The [response.headers.set] slot sets 'Cache-Control' for client-side caching (300 seconds).
 *
 * The [auth.ticket.verify] slot restricts access to users with roles 'admin', 'guest', or 'root'.
 *
 * The [data.connect] slot connects to the 'hospital' database using the 'sqlite' engine.
 *
 * Inside the connection context:
 * - [set-name] assigns the [group_column] to the [group] clause in the [data.read] operation.
 * - Another [set-name] ensures the grouped column is included in the output, and [insert-before] 
 *   places it at the beginning of the [columns] list.
 * - [set-value] renames the result of the aggregation using the [aggregate_function] as alias.
 *
 * - [remove-nodes] removes the [group_column] after it's used to streamline the remaining logic.
 *
 * - [add] pulls in [limit] and [offset] for pagination and then removes them.
 * - Additional [add] and [remove-nodes] apply [order] and [direction] for optional sorting.
 *
 * - [set-name] dynamically constructs the full aggregation expression 
 *   (e.g., `avg(Patients.AdmissionDate)`) and stores it as [aggregate_functor] in the [columns] node.
 * - [remove-nodes] then removes [aggregate_function] and [aggregate_column] after they are processed.
 *
 * - The final [add] dynamically inserts any remaining **optional filtering arguments** 
 *   into the [where] clause. This enables **dynamic filtering**, so only provided filters are applied at runtime.
 *
 * The [data.read] slot runs the actual SQL query:
 * - It reads from the 'Patients' table.
 * - It returns the grouped column and the aggregated result using the [aggregate_functor].
 * - Filters are applied under an [and] clause in the [where] node.
 * - Grouping is based on the provided [group_column].
 *
 * Finally, the [return-nodes] slot returns the grouped and aggregated results to the caller.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string
   Patients.PatientID.eq:long
   Patients.FirstName.like:string
   Patients.FirstName.eq:string
   Patients.LastName.like:string
   Patients.LastName.eq:string
   Patients.DateOfBirth.eq:date
   Patients.Gender.like:string
   Patients.Gender.eq:string
   Patients.Address.like:string
   Patients.Address.eq:string
   Patients.PhoneNumber.like:string
   Patients.PhoneNumber.eq:string
   Patients.Email.like:string
   Patients.Email.eq:string
   Patients.EmergencyContactName.like:string
   Patients.EmergencyContactName.eq:string
   Patients.EmergencyContactPhone.like:string
   Patients.EmergencyContactPhone.eq:string
   Patients.AdmissionDate.eq:date
   Patients.DischargeDate.eq:date

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Patients.PatientID
   .:Patients.FirstName
   .:Patients.LastName
   .:Patients.DateOfBirth
   .:Patients.Gender
   .:Patients.Address
   .:Patients.PhoneNumber
   .:Patients.Email
   .:Patients.EmergencyContactName
   .:Patients.EmergencyContactPhone
   .:Patients.AdmissionDate
   .:Patients.DischargeDate

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Patients.PatientID
   .:Patients.FirstName
   .:Patients.LastName
   .:Patients.DateOfBirth
   .:Patients.Gender
   .:Patients.Address
   .:Patients.PhoneNumber
   .:Patients.Email
   .:Patients.EmergencyContactName
   .:Patients.EmergencyContactPhone
   .:Patients.AdmissionDate
   .:Patients.DischargeDate

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Patients
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
