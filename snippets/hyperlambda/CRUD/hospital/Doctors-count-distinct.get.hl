/*
 * Counts the number of unique (distinct) values from a specified column in the [Doctors] table of the [hospital] database.
 *
 * Required Argument:
 * - [distinct_column]: The column to evaluate for distinct values. Must be provided in TABLE_NAME.COLUMN_NAME format.
 *
 * Optional Filtering:
 * - Supports filtering on all major fields in the [Doctors] table:
 *   - DoctorID, FirstName, LastName, Specialty, PhoneNumber, Email
 *   - Each filter supports exact match [.eq] and partial match [.like] variants.
 *
 * Intentional:
 * - Performs validation to ensure the [distinct_column] is passed and is among allowed values.
 * - Constructs a safe SQL statement using [strings.concat] to dynamically create a COUNT(DISTINCT ...) operation.
 * - Filters are included via [get-nodes] into the WHERE clause, allowing precise result control.
 * - Public caching is enabled for 5 minutes to optimize repeated frontend queries.
 * - Access is restricted to users with [admin], [guest], or [root] roles for security.
 *
 * Returns:
 * - A JSON object containing the total count of distinct values found, labeled as [count].
 * - Ideal for visualizing categorical data distribution in reporting or dashboard contexts.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string
   Doctors.DoctorID.eq:long
   Doctors.FirstName.like:string
   Doctors.FirstName.eq:string
   Doctors.LastName.like:string
   Doctors.LastName.eq:string
   Doctors.Specialty.like:string
   Doctors.Specialty.eq:string
   Doctors.PhoneNumber.like:string
   Doctors.PhoneNumber.eq:string
   Doctors.Email.like:string
   Doctors.Email.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Doctors.DoctorID
   .:Doctors.FirstName
   .:Doctors.LastName
   .:Doctors.Specialty
   .:Doctors.PhoneNumber
   .:Doctors.Email

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Doctors
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
