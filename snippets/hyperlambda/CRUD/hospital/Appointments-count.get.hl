
/*
 * Counts the total number of appointment records in the [Appointments] table of the [hospital] database,
 * with optional filtering on joined [Patients] and [Doctors] tables.
 *
 * Optional filters include:
 * - [Appointments]: AppointmentID, PatientID, DoctorID, AppointmentDate, and Reason (with exact or partial matching).
 * - [Patients]: FirstName (supports both exact and LIKE matches via [PatientID] join).
 * - [Doctors]: FirstName (supports both exact and LIKE matches via [DoctorID] join).
 *
 * Intentional:
 * - Dynamically injects all filtering criteria into the WHERE clause via [get-nodes].
 * - Performs LEFT JOINs on both [Patients] and [Doctors] to enable cross-table filtering.
 * - Aggregates results using [count(*)] to return a single integer representing the total number of matching records.
 * - Applies HTTP caching for 5 minutes to improve performance in read-heavy environments.
 *
 * Only users with the [admin], [guest], or [root] roles are allowed to access this endpoint.
 * Returns the result as [count].
 */
.arguments
   Appointments.AppointmentID.eq:long
   Appointments.PatientID.eq:long
   Appointments.DoctorID.eq:long
   Appointments.AppointmentDate.eq:date
   Appointments.Reason.like:string
   Appointments.Reason.eq:string
   PatientID.FirstName.eq:string
   PatientID.FirstName.like:string
   DoctorID.FirstName.eq:string
   DoctorID.FirstName.like:string

// Adding Cache-Control HTTP header.
response.headers.set
   Cache-Control:public, max-age=300

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin,guest,root

// Opening up our database connection.
data.connect:[generic|hospital]
   database-type:sqlite
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Appointments
         join:Patients
            as:PatientID
            type:left
            on
               and
                  Appointments.PatientID:PatientID.PatientID
         join:Doctors
            as:DoctorID
            type:left
            on
               and
                  Appointments.DoctorID:DoctorID.DoctorID
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
