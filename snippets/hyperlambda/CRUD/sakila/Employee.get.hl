
// Read or list records from your Employee table in your chinook database
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Employee.EmployeeId.eq:long
   Employee.LastName.like:string
   Employee.LastName.eq:string
   Employee.FirstName.like:string
   Employee.FirstName.eq:string
   Employee.Title.like:string
   Employee.Title.eq:string
   Employee.ReportsTo.eq:long
   Employee.BirthDate.eq:date
   Employee.HireDate.eq:date
   Employee.Address.like:string
   Employee.Address.eq:string
   Employee.City.like:string
   Employee.City.eq:string
   Employee.State.like:string
   Employee.State.eq:string
   Employee.Country.like:string
   Employee.Country.eq:string
   Employee.PostalCode.like:string
   Employee.PostalCode.eq:string
   Employee.Phone.like:string
   Employee.Phone.eq:string
   Employee.Fax.like:string
   Employee.Fax.eq:string
   Employee.Email.like:string
   Employee.Email.eq:string
   ReportsTo.LastName.eq:string
   ReportsTo.LastName.like:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Employee
         join:Employee
            as:ReportsTo
            type:left
            on
               and
                  Employee.ReportsTo:ReportsTo.EmployeeId
      columns
         Employee.EmployeeId
         Employee.LastName
         Employee.FirstName
         Employee.Title
         Employee.ReportsTo
         Employee.BirthDate
         Employee.HireDate
         Employee.Address
         Employee.City
         Employee.State
         Employee.Country
         Employee.PostalCode
         Employee.Phone
         Employee.Fax
         Employee.Email
         ReportsTo.LastName
            as:ReportsTo.LastName
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
