
// Read or list records from your Track table in your chinook database
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string
   Track.TrackId.eq:long
   Track.Name.like:string
   Track.Name.eq:string
   Track.AlbumId.eq:long
   Track.MediaTypeId.eq:long
   Track.GenreId.eq:long
   Track.Composer.like:string
   Track.Composer.eq:string
   Track.Milliseconds.eq:long
   Track.Bytes.eq:long
   Track.UnitPrice.eq:decimal
   AlbumId.Title.eq:string
   AlbumId.Title.like:string
   MediaTypeId.Name.eq:string
   MediaTypeId.Name.like:string
   GenreId.Name.eq:string
   GenreId.Name.like:string

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|chinook]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Track
         join:Album
            as:AlbumId
            type:left
            on
               and
                  Track.AlbumId:AlbumId.AlbumId
         join:MediaType
            as:MediaTypeId
            type:left
            on
               and
                  Track.MediaTypeId:MediaTypeId.MediaTypeId
         join:Genre
            as:GenreId
            type:left
            on
               and
                  Track.GenreId:GenreId.GenreId
      columns
         Track.TrackId
         Track.Name
         Track.AlbumId
         Track.MediaTypeId
         Track.GenreId
         Track.Composer
         Track.Milliseconds
         Track.Bytes
         Track.UnitPrice
         AlbumId.Title
            as:AlbumId.Title
         MediaTypeId.Name
            as:MediaTypeId.Name
         GenreId.Name
            as:GenreId.Name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
