
// Count unique and distinct items from your CustomerDemographics table in your northwind database
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   CustomerDemographics.CustomerTypeID.like:string
   CustomerDemographics.CustomerTypeID.mt:string
   CustomerDemographics.CustomerTypeID.lt:string
   CustomerDemographics.CustomerTypeID.mteq:string
   CustomerDemographics.CustomerTypeID.lteq:string
   CustomerDemographics.CustomerTypeID.neq:string
   CustomerDemographics.CustomerTypeID.eq:string
   CustomerDemographics.CustomerDesc.like:string
   CustomerDemographics.CustomerDesc.mt:string
   CustomerDemographics.CustomerDesc.lt:string
   CustomerDemographics.CustomerDesc.mteq:string
   CustomerDemographics.CustomerDesc.lteq:string
   CustomerDemographics.CustomerDesc.neq:string
   CustomerDemographics.CustomerDesc.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:CustomerDemographics.CustomerTypeID
   .:CustomerDemographics.CustomerDesc

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerDemographics
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
