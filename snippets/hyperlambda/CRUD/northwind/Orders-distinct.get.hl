
/*
 * This API endpoint returns a list of unique values from a specified column in the "Orders" table 
 * of the Northwind database. It supports sorting, paging, and filtering, making it ideal for UI elements 
 * like dropdowns or faceted search components.
 * 
 * The client must specify the column from which to extract distinct values. Optional arguments include 
 * page limit, offset for pagination, ordering column, and sort direction (ascending or descending).
 * 
 * Additional filters can be applied across a wide range of fields from the "Orders" table, and 
 * related columns from the "Employees" and "Shippers" tables via SQL joins. The filtering logic 
 * supports a rich variety of operators including comparison (.eq, .neq, .mt, .lt, etc.) and 
 * pattern-based matching (.like).
 * 
 * After building the query dynamically with the specified parameters and filters, the endpoint 
 * executes the SQL and returns only the distinct values from the requested column.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Orders.OrderID.mt:long
   Orders.OrderID.lt:long
   Orders.OrderID.mteq:long
   Orders.OrderID.lteq:long
   Orders.OrderID.neq:long
   Orders.OrderID.eq:long
   Orders.CustomerID.like:string
   Orders.CustomerID.mt:string
   Orders.CustomerID.lt:string
   Orders.CustomerID.mteq:string
   Orders.CustomerID.lteq:string
   Orders.CustomerID.neq:string
   Orders.CustomerID.eq:string
   Orders.EmployeeID.mt:long
   Orders.EmployeeID.lt:long
   Orders.EmployeeID.mteq:long
   Orders.EmployeeID.lteq:long
   Orders.EmployeeID.neq:long
   Orders.EmployeeID.eq:long
   Orders.OrderDate.mt:date
   Orders.OrderDate.lt:date
   Orders.OrderDate.mteq:date
   Orders.OrderDate.lteq:date
   Orders.OrderDate.neq:date
   Orders.OrderDate.eq:date
   Orders.RequiredDate.mt:date
   Orders.RequiredDate.lt:date
   Orders.RequiredDate.mteq:date
   Orders.RequiredDate.lteq:date
   Orders.RequiredDate.neq:date
   Orders.RequiredDate.eq:date
   Orders.ShippedDate.mt:date
   Orders.ShippedDate.lt:date
   Orders.ShippedDate.mteq:date
   Orders.ShippedDate.lteq:date
   Orders.ShippedDate.neq:date
   Orders.ShippedDate.eq:date
   Orders.ShipVia.mt:long
   Orders.ShipVia.lt:long
   Orders.ShipVia.mteq:long
   Orders.ShipVia.lteq:long
   Orders.ShipVia.neq:long
   Orders.ShipVia.eq:long
   Orders.Freight.mt:decimal
   Orders.Freight.lt:decimal
   Orders.Freight.mteq:decimal
   Orders.Freight.lteq:decimal
   Orders.Freight.neq:decimal
   Orders.Freight.eq:decimal
   Orders.ShipName.like:string
   Orders.ShipName.mt:string
   Orders.ShipName.lt:string
   Orders.ShipName.mteq:string
   Orders.ShipName.lteq:string
   Orders.ShipName.neq:string
   Orders.ShipName.eq:string
   Orders.ShipAddress.like:string
   Orders.ShipAddress.mt:string
   Orders.ShipAddress.lt:string
   Orders.ShipAddress.mteq:string
   Orders.ShipAddress.lteq:string
   Orders.ShipAddress.neq:string
   Orders.ShipAddress.eq:string
   Orders.ShipCity.like:string
   Orders.ShipCity.mt:string
   Orders.ShipCity.lt:string
   Orders.ShipCity.mteq:string
   Orders.ShipCity.lteq:string
   Orders.ShipCity.neq:string
   Orders.ShipCity.eq:string
   Orders.ShipRegion.like:string
   Orders.ShipRegion.mt:string
   Orders.ShipRegion.lt:string
   Orders.ShipRegion.mteq:string
   Orders.ShipRegion.lteq:string
   Orders.ShipRegion.neq:string
   Orders.ShipRegion.eq:string
   Orders.ShipPostalCode.like:string
   Orders.ShipPostalCode.mt:string
   Orders.ShipPostalCode.lt:string
   Orders.ShipPostalCode.mteq:string
   Orders.ShipPostalCode.lteq:string
   Orders.ShipPostalCode.neq:string
   Orders.ShipPostalCode.eq:string
   Orders.ShipCountry.like:string
   Orders.ShipCountry.mt:string
   Orders.ShipCountry.lt:string
   Orders.ShipCountry.mteq:string
   Orders.ShipCountry.lteq:string
   Orders.ShipCountry.neq:string
   Orders.ShipCountry.eq:string
   EmployeeID.LastName.eq:string
   EmployeeID.LastName.like:string
   ShipVia.CompanyName.eq:string
   ShipVia.CompanyName.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Orders.OrderID
   .:Orders.CustomerID
   .:Orders.EmployeeID
   .:Orders.OrderDate
   .:Orders.RequiredDate
   .:Orders.ShippedDate
   .:Orders.ShipVia
   .:Orders.Freight
   .:Orders.ShipName
   .:Orders.ShipAddress
   .:Orders.ShipCity
   .:Orders.ShipRegion
   .:Orders.ShipPostalCode
   .:Orders.ShipCountry
   .:EmployeeID.LastName
   .:ShipVia.CompanyName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Orders
         join:Employees
            as:EmployeeID
            type:left
            on
               and
                  Orders.EmployeeID:EmployeeID.EmployeeID
         join:Shippers
            as:ShipVia
            type:left
            on
               and
                  Orders.ShipVia:ShipVia.ShipperID
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
