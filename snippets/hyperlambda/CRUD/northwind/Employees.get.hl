
/*
 * This is an HTTP API endpoint that lists or reads employee records from the Employees table in the Northwind database.
 *
 * 1. Accepts optional arguments for pagination (`limit`, `offset`) and sorting (`order`, `direction`).
 * 2. Supports an extensive set of dynamic filtering options using suffix-based filters like `.eq`, `.lt`, `.like`, etc.,
 *    on almost all columns of the Employees table, including `ReportsTo.LastName` from a self-referencing join.
 * 3. Establishes a database connection to the Northwind SQLite database using `[data.connect]`.
 * 4. Conditionally adds sorting, pagination, and filtering arguments to the `[data.read]` invocation using `[add]`.
 * 5. Performs a LEFT JOIN on the `Employees` table to allow access to the name of a supervisor (`ReportsTo.LastName`).
 * 6. Specifies the columns to retrieve in the query including direct employee data and their supervisor's last name.
 * 7. Executes the read operation via `[data.read]` and returns the result set as JSON using `[return-nodes]`.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Employees.EmployeeID.mt:long
   Employees.EmployeeID.lt:long
   Employees.EmployeeID.mteq:long
   Employees.EmployeeID.lteq:long
   Employees.EmployeeID.neq:long
   Employees.EmployeeID.eq:long
   Employees.LastName.like:string
   Employees.LastName.mt:string
   Employees.LastName.lt:string
   Employees.LastName.mteq:string
   Employees.LastName.lteq:string
   Employees.LastName.neq:string
   Employees.LastName.eq:string
   Employees.FirstName.like:string
   Employees.FirstName.mt:string
   Employees.FirstName.lt:string
   Employees.FirstName.mteq:string
   Employees.FirstName.lteq:string
   Employees.FirstName.neq:string
   Employees.FirstName.eq:string
   Employees.Title.like:string
   Employees.Title.mt:string
   Employees.Title.lt:string
   Employees.Title.mteq:string
   Employees.Title.lteq:string
   Employees.Title.neq:string
   Employees.Title.eq:string
   Employees.TitleOfCourtesy.like:string
   Employees.TitleOfCourtesy.mt:string
   Employees.TitleOfCourtesy.lt:string
   Employees.TitleOfCourtesy.mteq:string
   Employees.TitleOfCourtesy.lteq:string
   Employees.TitleOfCourtesy.neq:string
   Employees.TitleOfCourtesy.eq:string
   Employees.BirthDate.mt:date
   Employees.BirthDate.lt:date
   Employees.BirthDate.mteq:date
   Employees.BirthDate.lteq:date
   Employees.BirthDate.neq:date
   Employees.BirthDate.eq:date
   Employees.HireDate.mt:date
   Employees.HireDate.lt:date
   Employees.HireDate.mteq:date
   Employees.HireDate.lteq:date
   Employees.HireDate.neq:date
   Employees.HireDate.eq:date
   Employees.Address.like:string
   Employees.Address.mt:string
   Employees.Address.lt:string
   Employees.Address.mteq:string
   Employees.Address.lteq:string
   Employees.Address.neq:string
   Employees.Address.eq:string
   Employees.City.like:string
   Employees.City.mt:string
   Employees.City.lt:string
   Employees.City.mteq:string
   Employees.City.lteq:string
   Employees.City.neq:string
   Employees.City.eq:string
   Employees.Region.like:string
   Employees.Region.mt:string
   Employees.Region.lt:string
   Employees.Region.mteq:string
   Employees.Region.lteq:string
   Employees.Region.neq:string
   Employees.Region.eq:string
   Employees.PostalCode.like:string
   Employees.PostalCode.mt:string
   Employees.PostalCode.lt:string
   Employees.PostalCode.mteq:string
   Employees.PostalCode.lteq:string
   Employees.PostalCode.neq:string
   Employees.PostalCode.eq:string
   Employees.Country.like:string
   Employees.Country.mt:string
   Employees.Country.lt:string
   Employees.Country.mteq:string
   Employees.Country.lteq:string
   Employees.Country.neq:string
   Employees.Country.eq:string
   Employees.HomePhone.like:string
   Employees.HomePhone.mt:string
   Employees.HomePhone.lt:string
   Employees.HomePhone.mteq:string
   Employees.HomePhone.lteq:string
   Employees.HomePhone.neq:string
   Employees.HomePhone.eq:string
   Employees.Extension.like:string
   Employees.Extension.mt:string
   Employees.Extension.lt:string
   Employees.Extension.mteq:string
   Employees.Extension.lteq:string
   Employees.Extension.neq:string
   Employees.Extension.eq:string
   Employees.Photo.like:string
   Employees.Photo.mt:string
   Employees.Photo.lt:string
   Employees.Photo.mteq:string
   Employees.Photo.lteq:string
   Employees.Photo.neq:string
   Employees.Photo.eq:string
   Employees.Notes.like:string
   Employees.Notes.mt:string
   Employees.Notes.lt:string
   Employees.Notes.mteq:string
   Employees.Notes.lteq:string
   Employees.Notes.neq:string
   Employees.Notes.eq:string
   Employees.ReportsTo.mt:long
   Employees.ReportsTo.lt:long
   Employees.ReportsTo.mteq:long
   Employees.ReportsTo.lteq:long
   Employees.ReportsTo.neq:long
   Employees.ReportsTo.eq:long
   Employees.PhotoPath.like:string
   Employees.PhotoPath.mt:string
   Employees.PhotoPath.lt:string
   Employees.PhotoPath.mteq:string
   Employees.PhotoPath.lteq:string
   Employees.PhotoPath.neq:string
   Employees.PhotoPath.eq:string
   ReportsTo.LastName.eq:string
   ReportsTo.LastName.like:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Employees
         join:Employees
            as:ReportsTo
            type:left
            on
               and
                  Employees.ReportsTo:ReportsTo.EmployeeID
      columns
         Employees.EmployeeID
         Employees.LastName
         Employees.FirstName
         Employees.Title
         Employees.TitleOfCourtesy
         Employees.BirthDate
         Employees.HireDate
         Employees.Address
         Employees.City
         Employees.Region
         Employees.PostalCode
         Employees.Country
         Employees.HomePhone
         Employees.Extension
         Employees.Photo
         Employees.Notes
         Employees.ReportsTo
         Employees.PhotoPath
         ReportsTo.LastName
            as:ReportsTo.LastName
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
