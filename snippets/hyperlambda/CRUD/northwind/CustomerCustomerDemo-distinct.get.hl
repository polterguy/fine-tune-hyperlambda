
/*
 * This Hyperlambda endpoint retrieves unique values from a specific column in the [CustomerCustomerDemo] table of the [Northwind] database.
 *
 * ## Slot Documentation
 *
 * - [validators.mandatory]
 *   Ensures the required [distinct_column] is provided, which is crucial since this defines what column to extract unique values from.
 *
 * - [validators.enum]
 *   Validates that [distinct_column] is a valid column name from the [CustomerCustomerDemo] table. This avoids runtime errors and potential injection.
 *
 * - [data.connect]
 *   Opens a connection to the Northwind SQLite database using the connection alias [generic].
 *
 * - [set-name]
 *   Dynamically creates a SQL expression to select distinct values using `distinct(...)`. This is wrapped inside a [distinct_functor] column node to be used later in the query.
 *
 * - [remove-nodes]
 *   Cleans up the [distinct_column], [order], [direction], [limit], and [offset] arguments after they've been processed, to avoid duplicate or conflicting data.
 *
 * - [add]
 *   Injects the pagination ([limit], [offset]) and sorting ([order], [direction]) parameters into the [data.read] node.
 *   Also merges all filter parameters (e.g., [.eq], [.lt], [.like]) defined under [.arguments] into the [where] clause of the read query.
 *
 * - [data.read]
 *   Executes the query that retrieves distinct values for the selected column. If filters, sorting, or pagination parameters were provided, they are applied here.
 *
 * - [return-nodes]
 *   Returns each distinct value as a separate node to the client.
 *
 * ## Summary
 * This endpoint gives a clean and efficient way to retrieve unique entries from [CustomerCustomerDemo] columns,
 * with flexible support for sorting, filtering, and pagination â€” ideal for dropdown lists, filters, or validation sets.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   CustomerCustomerDemo.CustomerID.like:string
   CustomerCustomerDemo.CustomerID.mt:string
   CustomerCustomerDemo.CustomerID.lt:string
   CustomerCustomerDemo.CustomerID.mteq:string
   CustomerCustomerDemo.CustomerID.lteq:string
   CustomerCustomerDemo.CustomerID.neq:string
   CustomerCustomerDemo.CustomerID.eq:string
   CustomerCustomerDemo.CustomerTypeID.like:string
   CustomerCustomerDemo.CustomerTypeID.mt:string
   CustomerCustomerDemo.CustomerTypeID.lt:string
   CustomerCustomerDemo.CustomerTypeID.mteq:string
   CustomerCustomerDemo.CustomerTypeID.lteq:string
   CustomerCustomerDemo.CustomerTypeID.neq:string
   CustomerCustomerDemo.CustomerTypeID.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:CustomerCustomerDemo.CustomerID
   .:CustomerCustomerDemo.CustomerTypeID

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerCustomerDemo
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
