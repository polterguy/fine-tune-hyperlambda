/*
 * Returns unique and distinct values from the [CustomerCustomerDemo] table in the [northwind] database.
 *
 * üéØ Intentional Purpose:
 * This endpoint is designed to extract a **distinct list of values** from a specified column,
 * supporting a variety of filtering, sorting, and pagination options. It‚Äôs ideal for dropdowns,
 * filter controls, or deduplicating values in the frontend.
 *
 * üîç Query Logic:
 * - The [distinct_column] argument defines which column to target for distinct value extraction.
 * - Supports full SQL-style filtering on both [CustomerID] and [CustomerTypeID] using:
 *    - [eq], [neq], [lt], [lteq], [mt], [mteq], and [like] suffixes.
 * - Supports pagination through [limit] and [offset], and sorting with [order] and [direction].
 *
 * ‚úÖ Safety & Validation:
 * - Requires [distinct_column] as a mandatory argument.
 * - Uses [validators.enum] to restrict it to known, safe values.
 * - All query parameters are safely added using [get-nodes], ensuring SQL injection protection.
 *
 * üß† Technical Details:
 * - The SQL query is dynamically constructed using the [distinct()] function.
 * - Result set includes only distinct values from the specified column.
 * - Final output is trimmed to remove helper arguments, returning a clean, flat result list.
 *
 * üß© Use Cases:
 * - Populating unique tags, types, or filters from reference data.
 * - Visualizing column diversity for reporting tools.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   CustomerCustomerDemo.CustomerID.like:string
   CustomerCustomerDemo.CustomerID.mt:string
   CustomerCustomerDemo.CustomerID.lt:string
   CustomerCustomerDemo.CustomerID.mteq:string
   CustomerCustomerDemo.CustomerID.lteq:string
   CustomerCustomerDemo.CustomerID.neq:string
   CustomerCustomerDemo.CustomerID.eq:string
   CustomerCustomerDemo.CustomerTypeID.like:string
   CustomerCustomerDemo.CustomerTypeID.mt:string
   CustomerCustomerDemo.CustomerTypeID.lt:string
   CustomerCustomerDemo.CustomerTypeID.mteq:string
   CustomerCustomerDemo.CustomerTypeID.lteq:string
   CustomerCustomerDemo.CustomerTypeID.neq:string
   CustomerCustomerDemo.CustomerTypeID.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:CustomerCustomerDemo.CustomerID
   .:CustomerCustomerDemo.CustomerTypeID

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerCustomerDemo
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
