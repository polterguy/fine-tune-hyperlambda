
/*
 * Perform an aggregation query on the Categories table in the Northwind database.
 * 
 * Accepts a mandatory [aggregate_function] (min, max, sum, avg) and a [aggregate_column] in TABLE.COLUMN format.
 * Optionally filters results based on dynamic WHERE conditions such as eq, lt, like, etc.
 * Returns the result of the aggregation using an alias named [result].
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Categories.CategoryID.mt:long
   Categories.CategoryID.lt:long
   Categories.CategoryID.mteq:long
   Categories.CategoryID.lteq:long
   Categories.CategoryID.neq:long
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.mt:string
   Categories.CategoryName.lt:string
   Categories.CategoryName.mteq:string
   Categories.CategoryName.lteq:string
   Categories.CategoryName.neq:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.mt:string
   Categories.Description.lt:string
   Categories.Description.mteq:string
   Categories.Description.lteq:string
   Categories.Description.neq:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.mt:string
   Categories.Picture.lt:string
   Categories.Picture.mteq:string
   Categories.Picture.lteq:string
   Categories.Picture.neq:string
   Categories.Picture.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Categories.CategoryID
   .:Categories.CategoryName
   .:Categories.Description
   .:Categories.Picture

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
