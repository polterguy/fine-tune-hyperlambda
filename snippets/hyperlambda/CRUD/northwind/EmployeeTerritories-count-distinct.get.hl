
/*
 * This is an API endpoint that returns the count of unique and distinct values from a specified column 
 * in the EmployeeTerritories table of the Northwind database. The user must specify the target column 
 * using the `distinct_column` argument, which is validated to ensure it matches an allowed set of 
 * fully-qualified table column names such as EmployeeTerritories.EmployeeID, EmployeeTerritories.TerritoryID, 
 * or EmployeeID.LastName.
 *
 * Before executing the query, the code verifies that the distinct_column is both present and valid 
 * through mandatory and enum validators. After validation, the code opens a connection to the 
 * SQLite-based Northwind database using [data.connect].
 *
 * The SQL query is dynamically built by creating a `count(distinct [COLUMN])` expression via 
 * [strings.concat], which is assigned to a node named `distinct_functor`. This node will be used as 
 * the selected column in the final query.
 *
 * The `distinct_column` node is removed from the arguments to clean up the payload before further 
 * processing. Any additional filter parameters passed to the endpoint are extracted and added into 
 * the WHERE clause using [add] and [get-nodes], allowing flexible filtering of the rows prior to 
 * aggregation.
 *
 * The core database operation is handled by [data.read], which joins the EmployeeTerritories table 
 * with the Employees table using a LEFT JOIN on EmployeeID. This allows the query to filter or 
 * aggregate based on joined data, such as Employee last names.
 *
 * The resulting count of distinct values is aliased as `count` and returned to the client using 
 * [return-nodes].
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   EmployeeTerritories.EmployeeID.mt:long
   EmployeeTerritories.EmployeeID.lt:long
   EmployeeTerritories.EmployeeID.mteq:long
   EmployeeTerritories.EmployeeID.lteq:long
   EmployeeTerritories.EmployeeID.neq:long
   EmployeeTerritories.EmployeeID.eq:long
   EmployeeTerritories.TerritoryID.like:string
   EmployeeTerritories.TerritoryID.mt:string
   EmployeeTerritories.TerritoryID.lt:string
   EmployeeTerritories.TerritoryID.mteq:string
   EmployeeTerritories.TerritoryID.lteq:string
   EmployeeTerritories.TerritoryID.neq:string
   EmployeeTerritories.TerritoryID.eq:string
   EmployeeID.LastName.eq:string
   EmployeeID.LastName.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:EmployeeTerritories.EmployeeID
   .:EmployeeTerritories.TerritoryID
   .:EmployeeID.LastName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:EmployeeTerritories
         join:Employees
            as:EmployeeID
            type:left
            on
               and
                  EmployeeTerritories.EmployeeID:EmployeeID.EmployeeID
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
