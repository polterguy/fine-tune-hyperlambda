
/*
 * This API endpoint counts the total number of records in the "Order Details" table from the Northwind
 * SQLite database. It supports a wide range of optional filtering arguments that allow clients to limit
 * the counted records based on complex conditions across related tables.
 *
 * The logic allows filtering on fields in the main "Order Details" table, as well as joined fields from
 * the "Orders" and "Products" tables (joined as OrderID and ProductID respectively). Filtering supports
 * comparison operations such as greater than, less than, equals, not equals, and SQL-style LIKE expressions.
 *
 * Once all filtering conditions are applied, the logic performs a read operation that executes a COUNT(*)
 * query. The result is returned to the client in a JSON structure, where the count is labeled as "count".
 * This endpoint is typically used for pagination, analytics, or conditional logic based on dataset size.
 */
.arguments

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Order Details.OrderID.mt:long
   Order Details.OrderID.lt:long
   Order Details.OrderID.mteq:long
   Order Details.OrderID.lteq:long
   Order Details.OrderID.neq:long
   Order Details.OrderID.eq:long
   Order Details.ProductID.mt:long
   Order Details.ProductID.lt:long
   Order Details.ProductID.mteq:long
   Order Details.ProductID.lteq:long
   Order Details.ProductID.neq:long
   Order Details.ProductID.eq:long
   Order Details.UnitPrice.mt:decimal
   Order Details.UnitPrice.lt:decimal
   Order Details.UnitPrice.mteq:decimal
   Order Details.UnitPrice.lteq:decimal
   Order Details.UnitPrice.neq:decimal
   Order Details.UnitPrice.eq:decimal
   Order Details.Quantity.mt:long
   Order Details.Quantity.lt:long
   Order Details.Quantity.mteq:long
   Order Details.Quantity.lteq:long
   Order Details.Quantity.neq:long
   Order Details.Quantity.eq:long
   Order Details.Discount.mt:double
   Order Details.Discount.lt:double
   Order Details.Discount.mteq:double
   Order Details.Discount.lteq:double
   Order Details.Discount.neq:double
   Order Details.Discount.eq:double
   OrderID.CustomerID.eq:string
   OrderID.CustomerID.like:string
   ProductID.ProductName.eq:string
   ProductID.ProductName.like:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Order Details
         join:Orders
            as:OrderID
            type:left
            on
               and
                  Order Details.OrderID:OrderID.OrderID
         join:Products
            as:ProductID
            type:left
            on
               and
                  Order Details.ProductID:ProductID.ProductID
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
