
/*
 * This Hyperlambda endpoint returns grouped aggregate data from the [Categories] table in the [northwind] database.
 * 
 * The endpoint allows clients to retrieve summaries using SQL aggregate functions like [min], [max], [sum], [avg], and [count].
 * Results are grouped by a specified column and support optional filtering, sorting, and pagination.
 *
 * 1. [.arguments]
 *    * Accepts:
 *      - [group_column]: Mandatory column name for grouping (must be TABLE.COLUMN format).
 *      - [aggregate_column]: Mandatory column name to aggregate on.
 *      - [aggregate_function]: One of [min], [max], [sum], [avg], [count].
 *      - [limit], [offset]: Optional for paging.
 *      - [order], [direction]: Optional for sorting.
 *      - Multiple [Categories.*] filters for flexible conditionals.
 *
 * 2. [validators.enum], [validators.mandatory]
 *    * Validates required and enumerated argument values to ensure safe SQL execution.
 *
 * 3. [data.read] and [aggregate_functor]
 *    * Dynamically constructs SQL using the aggregate function and selected columns.
 *    * Uses [group_column] for the SQL GROUP BY clause.
 *    * Builds WHERE clause based on dynamic argument filters (e.g., eq, neq, mt).
 *    * Applies limit/offset/order if provided.
 *
 * 4. [.insert-before], [.set-name], [.remove-nodes]
 *    * Dynamically modifies nodes to insert grouping and rename the returned column from the aggregate.
 *    * Strips parameters after use to prevent duplication and clutter in execution graph.
 *
 * 5. [return-nodes]
 *    * Returns aggregated dataset with optional renamed column depending on selected function.
 *
 * Use Cases:
 * * Dashboard analytics and reporting interfaces.
 * * Extracting summary statistics grouped by categories.
 * * Paging and sorting grouped values for frontend charts or reports.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Categories.CategoryID.mt:long
   Categories.CategoryID.lt:long
   Categories.CategoryID.mteq:long
   Categories.CategoryID.lteq:long
   Categories.CategoryID.neq:long
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.mt:string
   Categories.CategoryName.lt:string
   Categories.CategoryName.mteq:string
   Categories.CategoryName.lteq:string
   Categories.CategoryName.neq:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.mt:string
   Categories.Description.lt:string
   Categories.Description.mteq:string
   Categories.Description.lteq:string
   Categories.Description.neq:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.mt:string
   Categories.Picture.lt:string
   Categories.Picture.mteq:string
   Categories.Picture.lteq:string
   Categories.Picture.neq:string
   Categories.Picture.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Categories.CategoryID
   .:Categories.CategoryName
   .:Categories.Description
   .:Categories.Picture

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Categories.CategoryID
   .:Categories.CategoryName
   .:Categories.Description
   .:Categories.Picture

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
