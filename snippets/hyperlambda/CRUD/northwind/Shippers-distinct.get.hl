
/*
 * HTTP API endpoint that returns **distinct (unique) values** from a specified column
 * in the `Shippers` table of the Northwind database. This endpoint supports filtering,
 * ordering, and pagination, allowing clients to retrieve tailored subsets of unique data.
 *
 * It is particularly useful for populating dropdown lists, building advanced search filters,
 * or presenting deduplicated summaries of categorical fields.
 *
 * Detailed explanation of what the endpoint does:
 *
 * 1. **Input Parameters**:
 *    - **Required**:
 *      - `distinct_column`: Fully qualified column name to retrieve distinct values from (e.g., `Shippers.Phone`).
 *        Must be one of the allowed columns: `Shippers.ShipperID`, `Shippers.CompanyName`, or `Shippers.Phone`.
 *    - **Optional**:
 *      - `limit`: Number of records to return (default is 25; `-1` means return all).
 *      - `offset`: Number of records to skip from the start of the result set.
 *      - `order`: Column name to order by (must be in `TABLE_NAME.COLUMN_NAME` format).
 *      - `direction`: Ordering direction; must be `asc` or `desc`.
 *      - Filtering conditions on `ShipperID`, `CompanyName`, and `Phone` using suffixes like `.mt`, `.lt`, `.eq`, `.like`, etc.
 *
 * 2. **Validation**:
 *    - Ensures that `distinct_column` is provided and belongs to the list of permitted columns.
 *
 * 3. **Database Connection**:
 *    - Opens a connection to the Northwind SQLite database via the `[generic|northwind]` data source.
 *
 * 4. **Query Construction**:
 *    - Constructs the SQL query dynamically using `distinct(<column>)` for the selected field.
 *    - Applies optional `limit`, `offset`, `order`, and `direction` arguments to manage pagination and sorting.
 *    - Removes the distinct-specific and pagination arguments from the input argument tree once processed.
 *    - Adds all filtering arguments to the SQL `WHERE` clause using logical `AND`.
 *
 * 5. **Data Retrieval**:
 *    - Executes the query with a `data.read` invocation, retrieving distinct values from the specified column,
 *      filtered, sorted, and paginated as per the input arguments.
 *
 * 6. **Response**:
 *    - Returns the list of unique values to the client with no additional wrappingâ€”just the values themselves.
 *
 * This endpoint is a **powerful and flexible API tool** for obtaining deduplicated data views from
 * a structured dataset, supporting advanced filtering and client-side control over how results are presented.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   Shippers.ShipperID.mt:long
   Shippers.ShipperID.lt:long
   Shippers.ShipperID.mteq:long
   Shippers.ShipperID.lteq:long
   Shippers.ShipperID.neq:long
   Shippers.ShipperID.eq:long
   Shippers.CompanyName.like:string
   Shippers.CompanyName.mt:string
   Shippers.CompanyName.lt:string
   Shippers.CompanyName.mteq:string
   Shippers.CompanyName.lteq:string
   Shippers.CompanyName.neq:string
   Shippers.CompanyName.eq:string
   Shippers.Phone.like:string
   Shippers.Phone.mt:string
   Shippers.Phone.lt:string
   Shippers.Phone.mteq:string
   Shippers.Phone.lteq:string
   Shippers.Phone.neq:string
   Shippers.Phone.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Shippers.ShipperID
   .:Shippers.CompanyName
   .:Shippers.Phone

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Shippers
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
