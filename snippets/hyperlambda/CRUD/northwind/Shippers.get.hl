
/*
 * HTTP API endpoint for **reading or listing records** from the `Shippers` table
 * in the Northwind database. It supports pagination, sorting, and flexible filtering,
 * making it suitable for data browsing, search interfaces, and management dashboards.
 *
 * The endpoint begins by parsing optional arguments for pagination (`limit`, `offset`), sorting (`order`, `direction`),
 * and filtering criteria across the `ShipperID`, `CompanyName`, and `Phone` columns. These filters support a wide
 * range of operators including `.mt`, `.lt`, `.eq`, `.neq`, `.like`, `.mteq`, and `.lteq`, enabling both numeric and string-based comparisons.
 *
 * After collecting and removing the processed arguments from the input set, the endpoint opens a connection
 * to the Northwind SQLite database via the `[generic|northwind]` data source.
 *
 * The final SQL query is dynamically constructed using `data.read`, incorporating:
 * - Filter conditions via a `WHERE AND` clause
 * - Optional ordering by the specified column and direction
 * - Optional pagination using `limit` and `offset`
 *
 * The query explicitly selects the `ShipperID`, `CompanyName`, and `Phone` columns from the `Shippers` table.
 *
 * Once executed, the result set is returned directly to the client in JSON format.
 *
 * This endpoint delivers a **versatile and optimized data listing interface** that can serve as a backbone
 * for frontend table views, API data feeds, or administrative tools requiring searchable and paginated access
 * to the shipper records.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   Shippers.ShipperID.mt:long
   Shippers.ShipperID.lt:long
   Shippers.ShipperID.mteq:long
   Shippers.ShipperID.lteq:long
   Shippers.ShipperID.neq:long
   Shippers.ShipperID.eq:long
   Shippers.CompanyName.like:string
   Shippers.CompanyName.mt:string
   Shippers.CompanyName.lt:string
   Shippers.CompanyName.mteq:string
   Shippers.CompanyName.lteq:string
   Shippers.CompanyName.neq:string
   Shippers.CompanyName.eq:string
   Shippers.Phone.like:string
   Shippers.Phone.mt:string
   Shippers.Phone.lt:string
   Shippers.Phone.mteq:string
   Shippers.Phone.lteq:string
   Shippers.Phone.neq:string
   Shippers.Phone.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Shippers
      columns
         Shippers.ShipperID
         Shippers.CompanyName
         Shippers.Phone
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
