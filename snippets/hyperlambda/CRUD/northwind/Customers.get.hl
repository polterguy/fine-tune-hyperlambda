
/*
 * Read or list records from the Customers table in the Northwind database.
 *
 * This endpoint supports pagination, ordering, and filtering on any column of the Customers table.
 * Below is an ordered breakdown of each step in the logic:
 *
 * 1. **Defines input arguments**:
 *    - `limit` and `offset` control pagination.
 *    - `order` and `direction` determine sorting.
 *    - Filtering arguments (e.g., `.eq`, `.like`, `.mt`) allow the caller to narrow the result set on any field.
 *
 * 2. **Establishes database connection**:
 *    - Connects to the `northwind` database using the `[data.connect]` slot, with `sqlite` as the backend.
 *
 * 3. **Adds ordering parameters**:
 *    - If `order` and `direction` are provided, they're injected into the `[data.read]` invocation to sort the result.
 *    - These arguments are removed afterward to prevent duplication during later steps.
 *
 * 4. **Adds pagination parameters**:
 *    - `limit` and `offset` are conditionally added to `[data.read]` for limiting how many records to return and where to start.
 *    - These are also removed from arguments post-injection.
 *
 * 5. **Adds filtering conditions**:
 *    - All filtering-related arguments are added to the `where` clause of the `[data.read]` invocation using `[add]` and `[get-nodes]`.
 *    - This enables dynamic SQL WHERE clauses to be constructed based on client input.
 *
 * 6. **Reads from database**:
 *    - Executes `[data.read]` targeting the `Customers` table.
 *    - Specifies which columns to return: `CustomerID`, `CompanyName`, `ContactName`, `ContactTitle`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `Phone`, and `Fax`.
 *    - All filtering conditions are evaluated inside the `where -> and` clause.
 *
 * 7. **Returns the results**:
 *    - Uses `[return-nodes]` to send the query result back to the client.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Customers.CustomerID.like:string
   Customers.CustomerID.mt:string
   Customers.CustomerID.lt:string
   Customers.CustomerID.mteq:string
   Customers.CustomerID.lteq:string
   Customers.CustomerID.neq:string
   Customers.CustomerID.eq:string
   Customers.CompanyName.like:string
   Customers.CompanyName.mt:string
   Customers.CompanyName.lt:string
   Customers.CompanyName.mteq:string
   Customers.CompanyName.lteq:string
   Customers.CompanyName.neq:string
   Customers.CompanyName.eq:string
   Customers.ContactName.like:string
   Customers.ContactName.mt:string
   Customers.ContactName.lt:string
   Customers.ContactName.mteq:string
   Customers.ContactName.lteq:string
   Customers.ContactName.neq:string
   Customers.ContactName.eq:string
   Customers.ContactTitle.like:string
   Customers.ContactTitle.mt:string
   Customers.ContactTitle.lt:string
   Customers.ContactTitle.mteq:string
   Customers.ContactTitle.lteq:string
   Customers.ContactTitle.neq:string
   Customers.ContactTitle.eq:string
   Customers.Address.like:string
   Customers.Address.mt:string
   Customers.Address.lt:string
   Customers.Address.mteq:string
   Customers.Address.lteq:string
   Customers.Address.neq:string
   Customers.Address.eq:string
   Customers.City.like:string
   Customers.City.mt:string
   Customers.City.lt:string
   Customers.City.mteq:string
   Customers.City.lteq:string
   Customers.City.neq:string
   Customers.City.eq:string
   Customers.Region.like:string
   Customers.Region.mt:string
   Customers.Region.lt:string
   Customers.Region.mteq:string
   Customers.Region.lteq:string
   Customers.Region.neq:string
   Customers.Region.eq:string
   Customers.PostalCode.like:string
   Customers.PostalCode.mt:string
   Customers.PostalCode.lt:string
   Customers.PostalCode.mteq:string
   Customers.PostalCode.lteq:string
   Customers.PostalCode.neq:string
   Customers.PostalCode.eq:string
   Customers.Country.like:string
   Customers.Country.mt:string
   Customers.Country.lt:string
   Customers.Country.mteq:string
   Customers.Country.lteq:string
   Customers.Country.neq:string
   Customers.Country.eq:string
   Customers.Phone.like:string
   Customers.Phone.mt:string
   Customers.Phone.lt:string
   Customers.Phone.mteq:string
   Customers.Phone.lteq:string
   Customers.Phone.neq:string
   Customers.Phone.eq:string
   Customers.Fax.like:string
   Customers.Fax.mt:string
   Customers.Fax.lt:string
   Customers.Fax.mteq:string
   Customers.Fax.lteq:string
   Customers.Fax.neq:string
   Customers.Fax.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         Customers.CustomerID
         Customers.CompanyName
         Customers.ContactName
         Customers.ContactTitle
         Customers.Address
         Customers.City
         Customers.Region
         Customers.PostalCode
         Customers.Country
         Customers.Phone
         Customers.Fax
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
