
// Returns unique and distinct values from your Territories table in your northwind database
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments.
    */
   Territories.TerritoryID.like:string
   Territories.TerritoryID.mt:string
   Territories.TerritoryID.lt:string
   Territories.TerritoryID.mteq:string
   Territories.TerritoryID.lteq:string
   Territories.TerritoryID.neq:string
   Territories.TerritoryID.eq:string
   Territories.TerritoryDescription.like:string
   Territories.TerritoryDescription.mt:string
   Territories.TerritoryDescription.lt:string
   Territories.TerritoryDescription.mteq:string
   Territories.TerritoryDescription.lteq:string
   Territories.TerritoryDescription.neq:string
   Territories.TerritoryDescription.eq:string
   Territories.RegionID.mt:long
   Territories.RegionID.lt:long
   Territories.RegionID.mteq:long
   Territories.RegionID.lteq:long
   Territories.RegionID.neq:long
   Territories.RegionID.eq:long
   RegionID.RegionDescription.eq:string
   RegionID.RegionDescription.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Territories.TerritoryID
   .:Territories.TerritoryDescription
   .:Territories.RegionID
   .:RegionID.RegionDescription

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Territories
         join:Regions
            as:RegionID
            type:left
            on
               and
                  Territories.RegionID:RegionID.RegionID
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
