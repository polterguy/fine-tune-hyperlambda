
/*
 * This code defines an HTTP API endpoint that counts all rows in the EmployeeTerritories table 
 * of the Northwind SQLite database, optionally applying filters to limit which rows are included.
 *
 * The endpoint accepts optional filtering arguments on both the EmployeeTerritories and related 
 * Employees tables. Filters support a variety of operators such as `.eq`, `.neq`, `.lt`, `.gt`, and `.like`, 
 * allowing highly flexible and dynamic querying of the dataset.
 *
 * A connection to the Northwind database is established using [data.connect], targeting SQLite.
 *
 * All provided filter arguments are extracted from the `.arguments` node and added to the WHERE clause 
 * of the SQL query using [add] and [get-nodes]. These filters are inserted under a logical `and` group, 
 * meaning all conditions must be satisfied for a row to be included.
 *
 * The query uses a LEFT JOIN between EmployeeTerritories and Employees (aliased as EmployeeID) to 
 * enable filtering based on fields in the related Employees table, such as EmployeeID.LastName.
 *
 * The SQL operation executed is a [data.read], which returns a single column—`count(*)`—to count 
 * the total number of rows that match the filtering criteria. The result is aliased as `count` 
 * and limited to one record using `limit:long:1` for performance.
 *
 * The final result is returned to the client using [return-nodes], delivering the computed row count 
 * as a JSON response.
 */
.arguments

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   EmployeeTerritories.EmployeeID.mt:long
   EmployeeTerritories.EmployeeID.lt:long
   EmployeeTerritories.EmployeeID.mteq:long
   EmployeeTerritories.EmployeeID.lteq:long
   EmployeeTerritories.EmployeeID.neq:long
   EmployeeTerritories.EmployeeID.eq:long
   EmployeeTerritories.TerritoryID.like:string
   EmployeeTerritories.TerritoryID.mt:string
   EmployeeTerritories.TerritoryID.lt:string
   EmployeeTerritories.TerritoryID.mteq:string
   EmployeeTerritories.TerritoryID.lteq:string
   EmployeeTerritories.TerritoryID.neq:string
   EmployeeTerritories.TerritoryID.eq:string
   EmployeeID.LastName.eq:string
   EmployeeID.LastName.like:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:EmployeeTerritories
         join:Employees
            as:EmployeeID
            type:left
            on
               and
                  EmployeeTerritories.EmployeeID:EmployeeID.EmployeeID
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
