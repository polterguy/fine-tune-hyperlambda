
/*
 * This Hyperlambda endpoint retrieves distinct values from a specific column in the [Customers] table in the [Northwind] database.
 *
 * ## Slot Documentation
 *
 * - [validators.mandatory]
 *   Ensures the required [distinct_column] argument is present. This is critical since the slot cannot operate without knowing what column to extract distinct values from.
 *
 * - [validators.enum]
 *   Validates that the provided [distinct_column] value is one of the explicitly allowed columns in the [Customers] table. This provides safety against malformed or invalid column names.
 *
 * - [data.connect]
 *   Connects to the Northwind database using the [generic] connection configuration. This slot must be invoked before any database-related operations such as [data.read].
 *
 * - [set-name]
 *   Constructs a SQL function for distinct selection using the [distinct(...)] function. The result is set as the name of a node within the [data.read] columns collection, ensuring that the generated SQL retrieves unique values.
 *
 * - [remove-nodes]
 *   Removes previously handled arguments such as [distinct_column], [limit], [offset], [order], and [direction] from the argument tree to prevent conflicts during query construction.
 *
 * - [add]
 *   Dynamically injects optional pagination ([limit], [offset]), ordering ([order], [direction]), and filtering arguments into the [data.read] slot. The [where] clause is constructed based on any applicable filter fields provided by the caller.
 *
 * - [data.read]
 *   Executes the query to retrieve the distinct values from the selected column, applying any optional filter, sort, or pagination constraints.
 *
 * - [return-nodes]
 *   Returns the results of the [data.read] query to the caller. Each result will contain one unique value for the selected column.
 *
 * ## Summary
 * This endpoint is designed for dropdowns, unique value validations, or user-defined grouping options.
 * It provides robust safety checks, filter flexibility, and clean output for frontend or API consumers.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Customers.CustomerID.like:string
   Customers.CustomerID.mt:string
   Customers.CustomerID.lt:string
   Customers.CustomerID.mteq:string
   Customers.CustomerID.lteq:string
   Customers.CustomerID.neq:string
   Customers.CustomerID.eq:string
   Customers.CompanyName.like:string
   Customers.CompanyName.mt:string
   Customers.CompanyName.lt:string
   Customers.CompanyName.mteq:string
   Customers.CompanyName.lteq:string
   Customers.CompanyName.neq:string
   Customers.CompanyName.eq:string
   Customers.ContactName.like:string
   Customers.ContactName.mt:string
   Customers.ContactName.lt:string
   Customers.ContactName.mteq:string
   Customers.ContactName.lteq:string
   Customers.ContactName.neq:string
   Customers.ContactName.eq:string
   Customers.ContactTitle.like:string
   Customers.ContactTitle.mt:string
   Customers.ContactTitle.lt:string
   Customers.ContactTitle.mteq:string
   Customers.ContactTitle.lteq:string
   Customers.ContactTitle.neq:string
   Customers.ContactTitle.eq:string
   Customers.Address.like:string
   Customers.Address.mt:string
   Customers.Address.lt:string
   Customers.Address.mteq:string
   Customers.Address.lteq:string
   Customers.Address.neq:string
   Customers.Address.eq:string
   Customers.City.like:string
   Customers.City.mt:string
   Customers.City.lt:string
   Customers.City.mteq:string
   Customers.City.lteq:string
   Customers.City.neq:string
   Customers.City.eq:string
   Customers.Region.like:string
   Customers.Region.mt:string
   Customers.Region.lt:string
   Customers.Region.mteq:string
   Customers.Region.lteq:string
   Customers.Region.neq:string
   Customers.Region.eq:string
   Customers.PostalCode.like:string
   Customers.PostalCode.mt:string
   Customers.PostalCode.lt:string
   Customers.PostalCode.mteq:string
   Customers.PostalCode.lteq:string
   Customers.PostalCode.neq:string
   Customers.PostalCode.eq:string
   Customers.Country.like:string
   Customers.Country.mt:string
   Customers.Country.lt:string
   Customers.Country.mteq:string
   Customers.Country.lteq:string
   Customers.Country.neq:string
   Customers.Country.eq:string
   Customers.Phone.like:string
   Customers.Phone.mt:string
   Customers.Phone.lt:string
   Customers.Phone.mteq:string
   Customers.Phone.lteq:string
   Customers.Phone.neq:string
   Customers.Phone.eq:string
   Customers.Fax.like:string
   Customers.Fax.mt:string
   Customers.Fax.lt:string
   Customers.Fax.mteq:string
   Customers.Fax.lteq:string
   Customers.Fax.neq:string
   Customers.Fax.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Customers.CustomerID
   .:Customers.CompanyName
   .:Customers.ContactName
   .:Customers.ContactTitle
   .:Customers.Address
   .:Customers.City
   .:Customers.Region
   .:Customers.PostalCode
   .:Customers.Country
   .:Customers.Phone
   .:Customers.Fax

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
