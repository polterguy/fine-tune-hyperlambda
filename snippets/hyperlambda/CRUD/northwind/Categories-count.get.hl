
/*
 * Count all rows from the Categories table in the Northwind database,
 * optionally filtered using comparison arguments like .eq, .lt, .like, etc.
 * 
 * Returns the total count using [count] as an alias.
 */
.arguments

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Categories.CategoryID.mt:long
   Categories.CategoryID.lt:long
   Categories.CategoryID.mteq:long
   Categories.CategoryID.lteq:long
   Categories.CategoryID.neq:long
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.mt:string
   Categories.CategoryName.lt:string
   Categories.CategoryName.mteq:string
   Categories.CategoryName.lteq:string
   Categories.CategoryName.neq:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.mt:string
   Categories.Description.lt:string
   Categories.Description.mteq:string
   Categories.Description.lteq:string
   Categories.Description.neq:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.mt:string
   Categories.Picture.lt:string
   Categories.Picture.mteq:string
   Categories.Picture.lteq:string
   Categories.Picture.neq:string
   Categories.Picture.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
