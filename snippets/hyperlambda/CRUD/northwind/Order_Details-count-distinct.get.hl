
/*
 * This API endpoint calculates the number of unique values for a specified column in the "Order Details"
 * table within the Northwind SQLite database. It requires a fully qualified column name to be passed
 * as input and verifies that this column name is one of the allowed fields from "Order Details", "Orders",
 * or "Products".
 *
 * The logic first validates that the distinct column is provided and that its name is within an approved list.
 * It then constructs a SQL expression to count the number of distinct values in that column.
 *
 * Optional filtering conditions can be supplied, supporting comparison operators like greater than,
 * less than, equals, and pattern matching. These filters apply across all related tables joined into
 * the query including "Orders" (joined as OrderID) and "Products" (joined as ProductID).
 *
 * After assembling the necessary parameters and filters, the system performs the read operation,
 * computes the count of distinct values, and returns the result labeled as "count" to the client.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Order Details.OrderID.mt:long
   Order Details.OrderID.lt:long
   Order Details.OrderID.mteq:long
   Order Details.OrderID.lteq:long
   Order Details.OrderID.neq:long
   Order Details.OrderID.eq:long
   Order Details.ProductID.mt:long
   Order Details.ProductID.lt:long
   Order Details.ProductID.mteq:long
   Order Details.ProductID.lteq:long
   Order Details.ProductID.neq:long
   Order Details.ProductID.eq:long
   Order Details.UnitPrice.mt:decimal
   Order Details.UnitPrice.lt:decimal
   Order Details.UnitPrice.mteq:decimal
   Order Details.UnitPrice.lteq:decimal
   Order Details.UnitPrice.neq:decimal
   Order Details.UnitPrice.eq:decimal
   Order Details.Quantity.mt:long
   Order Details.Quantity.lt:long
   Order Details.Quantity.mteq:long
   Order Details.Quantity.lteq:long
   Order Details.Quantity.neq:long
   Order Details.Quantity.eq:long
   Order Details.Discount.mt:double
   Order Details.Discount.lt:double
   Order Details.Discount.mteq:double
   Order Details.Discount.lteq:double
   Order Details.Discount.neq:double
   Order Details.Discount.eq:double
   OrderID.CustomerID.eq:string
   OrderID.CustomerID.like:string
   ProductID.ProductName.eq:string
   ProductID.ProductName.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Order Details.OrderID
   .:Order Details.ProductID
   .:Order Details.UnitPrice
   .:Order Details.Quantity
   .:Order Details.Discount
   .:OrderID.CustomerID
   .:ProductID.ProductName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Order Details
         join:Orders
            as:OrderID
            type:left
            on
               and
                  Order Details.OrderID:OrderID.OrderID
         join:Products
            as:ProductID
            type:left
            on
               and
                  Order Details.ProductID:ProductID.ProductID
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
