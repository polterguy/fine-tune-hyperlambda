
/*
 * Counts items from your CustomerCustomerDemo table in your northwind database.
 *
 * Supports optional filtering on both CustomerID and CustomerTypeID using SQL-style conditions like eq, neq, like, lt, etc.
 * Returns a single count value as [count].
 */
.arguments

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   CustomerCustomerDemo.CustomerID.like:string
   CustomerCustomerDemo.CustomerID.mt:string
   CustomerCustomerDemo.CustomerID.lt:string
   CustomerCustomerDemo.CustomerID.mteq:string
   CustomerCustomerDemo.CustomerID.lteq:string
   CustomerCustomerDemo.CustomerID.neq:string
   CustomerCustomerDemo.CustomerID.eq:string
   CustomerCustomerDemo.CustomerTypeID.like:string
   CustomerCustomerDemo.CustomerTypeID.mt:string
   CustomerCustomerDemo.CustomerTypeID.lt:string
   CustomerCustomerDemo.CustomerTypeID.mteq:string
   CustomerCustomerDemo.CustomerTypeID.lteq:string
   CustomerCustomerDemo.CustomerTypeID.neq:string
   CustomerCustomerDemo.CustomerTypeID.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerCustomerDemo
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
