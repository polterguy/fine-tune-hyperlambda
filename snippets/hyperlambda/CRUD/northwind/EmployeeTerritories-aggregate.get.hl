
/*
 * This is an HTTP API endpoint for performing an aggregate query (min, max, sum, or avg) on the EmployeeTerritories table in the Northwind database.
 * It supports optional filtering and allows joining with related employee data through a LEFT JOIN on the Employees table.
 *
 * 1. Accepts two mandatory arguments:
 *    - `aggregate_function`: One of min, max, sum, or avg to determine the aggregation method.
 *    - `aggregate_column`: The column to apply the aggregation on, in TABLE.COLUMN format.
 * 2. Validates that both mandatory arguments are provided and that they match expected values using `[validators.mandatory]` and `[validators.enum]`.
 * 3. Connects to the Northwind SQLite database using `[data.connect]`.
 * 4. Constructs a dynamic SQL aggregate expression by combining the function and column using `[strings.concat]`.
 * 5. Removes the validated aggregate arguments to simplify later processing.
 * 6. Adds any optional filtering arguments (e.g., `EmployeeID.gt`, `TerritoryID.like`, etc.) into the SQL `WHERE` clause.
 * 7. Executes a `[data.read]` operation that:
 *    - Selects from the `EmployeeTerritories` table.
 *    - Performs a LEFT JOIN to the `Employees` table using `EmployeeID` for extended filtering.
 *    - Projects the aggregated result as `result`.
 *    - Limits the result to a single record.
 * 8. Returns the aggregated result to the client using `[return-nodes]`.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   EmployeeTerritories.EmployeeID.mt:long
   EmployeeTerritories.EmployeeID.lt:long
   EmployeeTerritories.EmployeeID.mteq:long
   EmployeeTerritories.EmployeeID.lteq:long
   EmployeeTerritories.EmployeeID.neq:long
   EmployeeTerritories.EmployeeID.eq:long
   EmployeeTerritories.TerritoryID.like:string
   EmployeeTerritories.TerritoryID.mt:string
   EmployeeTerritories.TerritoryID.lt:string
   EmployeeTerritories.TerritoryID.mteq:string
   EmployeeTerritories.TerritoryID.lteq:string
   EmployeeTerritories.TerritoryID.neq:string
   EmployeeTerritories.TerritoryID.eq:string
   EmployeeID.LastName.eq:string
   EmployeeID.LastName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:EmployeeTerritories.EmployeeID
   .:EmployeeTerritories.TerritoryID
   .:EmployeeID.LastName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:EmployeeTerritories
         join:Employees
            as:EmployeeID
            type:left
            on
               and
                  EmployeeTerritories.EmployeeID:EmployeeID.EmployeeID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
