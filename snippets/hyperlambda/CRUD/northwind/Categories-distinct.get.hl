
/*
 * This Hyperlambda endpoint returns distinct values from a specified column in the [Categories] table of the [Northwind] database.
 *
 * ## Slot Documentation
 *
 * - [validators.mandatory]
 *   Ensures the [distinct_column] argument is supplied. This is critical because the endpoint cannot function without it.
 *
 * - [validators.enum]
 *   Restricts the [distinct_column] argument to valid column names from the [Categories] table. Prevents SQL injection or typos.
 *
 * - [data.connect]
 *   Opens a connection to the [Northwind] SQLite database using the [generic] connection string alias.
 *
 * - [set-name]
 *   Dynamically generates the distinct SQL function using [distinct(...)] around the user-specified column name. This expression is assigned to a [distinct_functor] node for use in [data.read].
 *
 * - [remove-nodes]
 *   Removes used arguments ([distinct_column], [limit], [offset], [order], [direction]) from the input to avoid polluting the remaining nodes before merging them into [data.read].
 *
 * - [add]
 *   Adds relevant arguments for pagination and sorting ([limit], [offset], [order], [direction]) into the [data.read] node.
 *   Also adds all filtering conditions defined under [.arguments] (e.g., [.like], [.eq], [.lt], etc.) to the [where] clause.
 *
 * - [data.read]
 *   Performs the SQL read operation, using the specified [distinct] function and any optional filters, sort, and pagination rules.
 *
 * - [return-nodes]
 *   Returns the resulting distinct values back to the client as a list of objects, each containing a single key corresponding to the distinct values retrieved.
 *
 * ## Summary
 * This endpoint enables a flexible way to retrieve all unique values for any specified column in the [Categories] table, while allowing for advanced query capabilities such as filtering and paging.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Categories.CategoryID.mt:long
   Categories.CategoryID.lt:long
   Categories.CategoryID.mteq:long
   Categories.CategoryID.lteq:long
   Categories.CategoryID.neq:long
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.mt:string
   Categories.CategoryName.lt:string
   Categories.CategoryName.mteq:string
   Categories.CategoryName.lteq:string
   Categories.CategoryName.neq:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.mt:string
   Categories.Description.lt:string
   Categories.Description.mteq:string
   Categories.Description.lteq:string
   Categories.Description.neq:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.mt:string
   Categories.Picture.lt:string
   Categories.Picture.mteq:string
   Categories.Picture.lteq:string
   Categories.Picture.neq:string
   Categories.Picture.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Categories.CategoryID
   .:Categories.CategoryName
   .:Categories.Description
   .:Categories.Picture

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
