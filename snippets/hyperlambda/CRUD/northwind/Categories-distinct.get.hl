/*
 * Retrieves a list of distinct values from a specified column in the [Categories] table of the [northwind] database.
 *
 * Intentional:
 * - This endpoint is designed to power filter dropdowns, auto-complete inputs, or deduplicated views.
 * - Uses a dynamic [distinct()] SQL expression to return unique values based on the specified column.
 * - Provides advanced filtering options with support for comparison (.mt, .lt, .mteq, .lteq, .eq, .neq) and pattern matching (.like).
 * - Supports pagination using [limit] and [offset], and result ordering via [order] and [direction] arguments.
 *
 * Security & Performance:
 * - Enforces the presence of [distinct_column] using [validators.mandatory].
 * - Ensures only whitelisted columns can be passed to avoid SQL injection through [validators.enum].
 * - Uses [data.connect] to access a SQLite [northwind] database and composes SQL dynamically but safely.
 *
 * Returns:
 * - An array of unique values from the specified column, optionally filtered, ordered, and paginated.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Categories.CategoryID.mt:long
   Categories.CategoryID.lt:long
   Categories.CategoryID.mteq:long
   Categories.CategoryID.lteq:long
   Categories.CategoryID.neq:long
   Categories.CategoryID.eq:long
   Categories.CategoryName.like:string
   Categories.CategoryName.mt:string
   Categories.CategoryName.lt:string
   Categories.CategoryName.mteq:string
   Categories.CategoryName.lteq:string
   Categories.CategoryName.neq:string
   Categories.CategoryName.eq:string
   Categories.Description.like:string
   Categories.Description.mt:string
   Categories.Description.lt:string
   Categories.Description.mteq:string
   Categories.Description.lteq:string
   Categories.Description.neq:string
   Categories.Description.eq:string
   Categories.Picture.like:string
   Categories.Picture.mt:string
   Categories.Picture.lt:string
   Categories.Picture.mteq:string
   Categories.Picture.lteq:string
   Categories.Picture.neq:string
   Categories.Picture.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Categories.CategoryID
   .:Categories.CategoryName
   .:Categories.Description
   .:Categories.Picture

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Categories
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
