
/*
 * How can you calculate aggregated values (like min, max, sum, avg, or count) grouped by a specified column in the Employees table,
 * supporting pagination, sorting, filtering, and joining with a self-referenced ReportsTo table?
 *
 * 1. **Argument validation**:
 *    - Ensures `group_column`, `aggregate_function`, and `aggregate_column` are provided.
 *    - Validates that `aggregate_function` is one of the supported options.
 *    - Checks that both `group_column` and `aggregate_column` are legal column names.
 *
 * 2. **Database connection**:
 *    - Establishes a connection to the `northwind` SQLite database using `[data.connect]`.
 *
 * 3. **Group column configuration**:
 *    - Sets the name of the `group_column` in the `group` section of `[data.read]`.
 *    - Ensures the group column appears in the output by inserting it into the `columns` list before the first column.
 *
 * 4. **Labeling the aggregate column**:
 *    - Renames the result of the aggregate function to match the function name (e.g., "avg", "sum").
 *
 * 5. **Clean up processed arguments**:
 *    - Removes `group_column`, `limit`, `offset`, `order`, `direction`, and aggregate-specific arguments to streamline processing.
 *
 * 6. **Query modification**:
 *    - Adds pagination controls using `limit` and `offset`.
 *    - Adds ordering parameters if `order` and `direction` are present.
 *    - Dynamically constructs the aggregate function expression (e.g., `avg(Employees.Salary)`).
 *
 * 7. **Filtering support**:
 *    - Attaches all remaining filtering arguments to the `where` clause of `[data.read]` as a logical `and` block.
 *
 * 8. **Read operation with join**:
 *    - Executes a `[data.read]` call on the `Employees` table.
 *    - Performs a `left join` on itself (aliased as `ReportsTo`) to enable access to supervisor names.
 *    - Aggregates results grouped by the specified column.
 *
 * 9. **Returning results**:
 *    - Outputs the resulting grouped and aggregated dataset to the caller using `[return-nodes]`.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Employees.EmployeeID.mt:long
   Employees.EmployeeID.lt:long
   Employees.EmployeeID.mteq:long
   Employees.EmployeeID.lteq:long
   Employees.EmployeeID.neq:long
   Employees.EmployeeID.eq:long
   Employees.LastName.like:string
   Employees.LastName.mt:string
   Employees.LastName.lt:string
   Employees.LastName.mteq:string
   Employees.LastName.lteq:string
   Employees.LastName.neq:string
   Employees.LastName.eq:string
   Employees.FirstName.like:string
   Employees.FirstName.mt:string
   Employees.FirstName.lt:string
   Employees.FirstName.mteq:string
   Employees.FirstName.lteq:string
   Employees.FirstName.neq:string
   Employees.FirstName.eq:string
   Employees.Title.like:string
   Employees.Title.mt:string
   Employees.Title.lt:string
   Employees.Title.mteq:string
   Employees.Title.lteq:string
   Employees.Title.neq:string
   Employees.Title.eq:string
   Employees.TitleOfCourtesy.like:string
   Employees.TitleOfCourtesy.mt:string
   Employees.TitleOfCourtesy.lt:string
   Employees.TitleOfCourtesy.mteq:string
   Employees.TitleOfCourtesy.lteq:string
   Employees.TitleOfCourtesy.neq:string
   Employees.TitleOfCourtesy.eq:string
   Employees.BirthDate.mt:date
   Employees.BirthDate.lt:date
   Employees.BirthDate.mteq:date
   Employees.BirthDate.lteq:date
   Employees.BirthDate.neq:date
   Employees.BirthDate.eq:date
   Employees.HireDate.mt:date
   Employees.HireDate.lt:date
   Employees.HireDate.mteq:date
   Employees.HireDate.lteq:date
   Employees.HireDate.neq:date
   Employees.HireDate.eq:date
   Employees.Address.like:string
   Employees.Address.mt:string
   Employees.Address.lt:string
   Employees.Address.mteq:string
   Employees.Address.lteq:string
   Employees.Address.neq:string
   Employees.Address.eq:string
   Employees.City.like:string
   Employees.City.mt:string
   Employees.City.lt:string
   Employees.City.mteq:string
   Employees.City.lteq:string
   Employees.City.neq:string
   Employees.City.eq:string
   Employees.Region.like:string
   Employees.Region.mt:string
   Employees.Region.lt:string
   Employees.Region.mteq:string
   Employees.Region.lteq:string
   Employees.Region.neq:string
   Employees.Region.eq:string
   Employees.PostalCode.like:string
   Employees.PostalCode.mt:string
   Employees.PostalCode.lt:string
   Employees.PostalCode.mteq:string
   Employees.PostalCode.lteq:string
   Employees.PostalCode.neq:string
   Employees.PostalCode.eq:string
   Employees.Country.like:string
   Employees.Country.mt:string
   Employees.Country.lt:string
   Employees.Country.mteq:string
   Employees.Country.lteq:string
   Employees.Country.neq:string
   Employees.Country.eq:string
   Employees.HomePhone.like:string
   Employees.HomePhone.mt:string
   Employees.HomePhone.lt:string
   Employees.HomePhone.mteq:string
   Employees.HomePhone.lteq:string
   Employees.HomePhone.neq:string
   Employees.HomePhone.eq:string
   Employees.Extension.like:string
   Employees.Extension.mt:string
   Employees.Extension.lt:string
   Employees.Extension.mteq:string
   Employees.Extension.lteq:string
   Employees.Extension.neq:string
   Employees.Extension.eq:string
   Employees.Photo.like:string
   Employees.Photo.mt:string
   Employees.Photo.lt:string
   Employees.Photo.mteq:string
   Employees.Photo.lteq:string
   Employees.Photo.neq:string
   Employees.Photo.eq:string
   Employees.Notes.like:string
   Employees.Notes.mt:string
   Employees.Notes.lt:string
   Employees.Notes.mteq:string
   Employees.Notes.lteq:string
   Employees.Notes.neq:string
   Employees.Notes.eq:string
   Employees.ReportsTo.mt:long
   Employees.ReportsTo.lt:long
   Employees.ReportsTo.mteq:long
   Employees.ReportsTo.lteq:long
   Employees.ReportsTo.neq:long
   Employees.ReportsTo.eq:long
   Employees.PhotoPath.like:string
   Employees.PhotoPath.mt:string
   Employees.PhotoPath.lt:string
   Employees.PhotoPath.mteq:string
   Employees.PhotoPath.lteq:string
   Employees.PhotoPath.neq:string
   Employees.PhotoPath.eq:string
   ReportsTo.LastName.eq:string
   ReportsTo.LastName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Employees.EmployeeID
   .:Employees.LastName
   .:Employees.FirstName
   .:Employees.Title
   .:Employees.TitleOfCourtesy
   .:Employees.BirthDate
   .:Employees.HireDate
   .:Employees.Address
   .:Employees.City
   .:Employees.Region
   .:Employees.PostalCode
   .:Employees.Country
   .:Employees.HomePhone
   .:Employees.Extension
   .:Employees.Photo
   .:Employees.Notes
   .:Employees.ReportsTo
   .:Employees.PhotoPath
   .:ReportsTo.LastName

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Employees.EmployeeID
   .:Employees.LastName
   .:Employees.FirstName
   .:Employees.Title
   .:Employees.TitleOfCourtesy
   .:Employees.BirthDate
   .:Employees.HireDate
   .:Employees.Address
   .:Employees.City
   .:Employees.Region
   .:Employees.PostalCode
   .:Employees.Country
   .:Employees.HomePhone
   .:Employees.Extension
   .:Employees.Photo
   .:Employees.Notes
   .:Employees.ReportsTo
   .:Employees.PhotoPath
   .:ReportsTo.LastName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Employees
         join:Employees
            as:ReportsTo
            type:left
            on
               and
                  Employees.ReportsTo:ReportsTo.EmployeeID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
