
/*
 * This endpoint implements an API operation to retrieve an aggregate result
 * (minimum, maximum, average, or sum) from the "Order Details" table in the
 * Northwind SQLite database. It is configurable through the use of arguments,
 * which determine both the type of aggregation and the column to aggregate on.
 *
 * The user must specify the name of the aggregation function (e.g., "sum") 
 * and the target column in a fully qualified format like "Order Details.Quantity".
 * The system enforces strict validation on both parameters to ensure they are present
 * and within an approved set of values.
 *
 * Additional optional filter arguments are available for refining the dataset before 
 * aggregation. These include numerical and textual conditions such as greater than (mt),
 * equals (eq), or string pattern matching (like), and can be applied across columns
 * from the "Order Details", "Orders", and "Products" tables.
 *
 * A left join is performed to bring in related data from "Orders" (aliased as OrderID)
 * and "Products" (aliased as ProductID) to support filtering on related fields such as
 * OrderID.CustomerID and ProductID.ProductName.
 *
 * The system dynamically constructs the aggregation function and applies it to the dataset,
 * returning only the aggregated result as a single row. The result is wrapped with an alias
 * named "result" and returned to the client.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Order Details.OrderID.mt:long
   Order Details.OrderID.lt:long
   Order Details.OrderID.mteq:long
   Order Details.OrderID.lteq:long
   Order Details.OrderID.neq:long
   Order Details.OrderID.eq:long
   Order Details.ProductID.mt:long
   Order Details.ProductID.lt:long
   Order Details.ProductID.mteq:long
   Order Details.ProductID.lteq:long
   Order Details.ProductID.neq:long
   Order Details.ProductID.eq:long
   Order Details.UnitPrice.mt:decimal
   Order Details.UnitPrice.lt:decimal
   Order Details.UnitPrice.mteq:decimal
   Order Details.UnitPrice.lteq:decimal
   Order Details.UnitPrice.neq:decimal
   Order Details.UnitPrice.eq:decimal
   Order Details.Quantity.mt:long
   Order Details.Quantity.lt:long
   Order Details.Quantity.mteq:long
   Order Details.Quantity.lteq:long
   Order Details.Quantity.neq:long
   Order Details.Quantity.eq:long
   Order Details.Discount.mt:double
   Order Details.Discount.lt:double
   Order Details.Discount.mteq:double
   Order Details.Discount.lteq:double
   Order Details.Discount.neq:double
   Order Details.Discount.eq:double
   OrderID.CustomerID.eq:string
   OrderID.CustomerID.like:string
   ProductID.ProductName.eq:string
   ProductID.ProductName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Order Details.OrderID
   .:Order Details.ProductID
   .:Order Details.UnitPrice
   .:Order Details.Quantity
   .:Order Details.Discount
   .:OrderID.CustomerID
   .:ProductID.ProductName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Order Details
         join:Orders
            as:OrderID
            type:left
            on
               and
                  Order Details.OrderID:OrderID.OrderID
         join:Products
            as:ProductID
            type:left
            on
               and
                  Order Details.ProductID:ProductID.ProductID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
