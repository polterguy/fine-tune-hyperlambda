
/*
 * HTTP endpoint that reads and lists records from the "Orders" table in the Northwind database.
 *
 * The endpoint supports optional pagination using [limit] and [offset], allowing the caller to
 * control how many records are returned and from which position in the dataset.
 * 
 * Sorting can be applied by specifying the [order] and [direction] arguments. These must follow
 * the format TABLE_NAME.COLUMN_NAME and can order results in ascending or descending order.
 *
 * The endpoint allows a rich set of optional filtering arguments targeting various columns in the
 * Orders table and its joined tables. These filters support comparison types such as more than,
 * less than, equal to, not equal to, and LIKE for text pattern matching.
 *
 * Internally, the endpoint establishes a connection to the SQLite-backed Northwind database,
 * dynamically constructs WHERE clauses based on provided filters, and executes the query.
 * It joins additional information from the Employees and Shippers tables, exposing human-readable
 * fields like the employee's last name and the shipping companyâ€™s name.
 *
 * Finally, the matched records are returned to the caller as a structured response.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Orders.OrderID.mt:long
   Orders.OrderID.lt:long
   Orders.OrderID.mteq:long
   Orders.OrderID.lteq:long
   Orders.OrderID.neq:long
   Orders.OrderID.eq:long
   Orders.CustomerID.like:string
   Orders.CustomerID.mt:string
   Orders.CustomerID.lt:string
   Orders.CustomerID.mteq:string
   Orders.CustomerID.lteq:string
   Orders.CustomerID.neq:string
   Orders.CustomerID.eq:string
   Orders.EmployeeID.mt:long
   Orders.EmployeeID.lt:long
   Orders.EmployeeID.mteq:long
   Orders.EmployeeID.lteq:long
   Orders.EmployeeID.neq:long
   Orders.EmployeeID.eq:long
   Orders.OrderDate.mt:date
   Orders.OrderDate.lt:date
   Orders.OrderDate.mteq:date
   Orders.OrderDate.lteq:date
   Orders.OrderDate.neq:date
   Orders.OrderDate.eq:date
   Orders.RequiredDate.mt:date
   Orders.RequiredDate.lt:date
   Orders.RequiredDate.mteq:date
   Orders.RequiredDate.lteq:date
   Orders.RequiredDate.neq:date
   Orders.RequiredDate.eq:date
   Orders.ShippedDate.mt:date
   Orders.ShippedDate.lt:date
   Orders.ShippedDate.mteq:date
   Orders.ShippedDate.lteq:date
   Orders.ShippedDate.neq:date
   Orders.ShippedDate.eq:date
   Orders.ShipVia.mt:long
   Orders.ShipVia.lt:long
   Orders.ShipVia.mteq:long
   Orders.ShipVia.lteq:long
   Orders.ShipVia.neq:long
   Orders.ShipVia.eq:long
   Orders.Freight.mt:decimal
   Orders.Freight.lt:decimal
   Orders.Freight.mteq:decimal
   Orders.Freight.lteq:decimal
   Orders.Freight.neq:decimal
   Orders.Freight.eq:decimal
   Orders.ShipName.like:string
   Orders.ShipName.mt:string
   Orders.ShipName.lt:string
   Orders.ShipName.mteq:string
   Orders.ShipName.lteq:string
   Orders.ShipName.neq:string
   Orders.ShipName.eq:string
   Orders.ShipAddress.like:string
   Orders.ShipAddress.mt:string
   Orders.ShipAddress.lt:string
   Orders.ShipAddress.mteq:string
   Orders.ShipAddress.lteq:string
   Orders.ShipAddress.neq:string
   Orders.ShipAddress.eq:string
   Orders.ShipCity.like:string
   Orders.ShipCity.mt:string
   Orders.ShipCity.lt:string
   Orders.ShipCity.mteq:string
   Orders.ShipCity.lteq:string
   Orders.ShipCity.neq:string
   Orders.ShipCity.eq:string
   Orders.ShipRegion.like:string
   Orders.ShipRegion.mt:string
   Orders.ShipRegion.lt:string
   Orders.ShipRegion.mteq:string
   Orders.ShipRegion.lteq:string
   Orders.ShipRegion.neq:string
   Orders.ShipRegion.eq:string
   Orders.ShipPostalCode.like:string
   Orders.ShipPostalCode.mt:string
   Orders.ShipPostalCode.lt:string
   Orders.ShipPostalCode.mteq:string
   Orders.ShipPostalCode.lteq:string
   Orders.ShipPostalCode.neq:string
   Orders.ShipPostalCode.eq:string
   Orders.ShipCountry.like:string
   Orders.ShipCountry.mt:string
   Orders.ShipCountry.lt:string
   Orders.ShipCountry.mteq:string
   Orders.ShipCountry.lteq:string
   Orders.ShipCountry.neq:string
   Orders.ShipCountry.eq:string
   EmployeeID.LastName.eq:string
   EmployeeID.LastName.like:string
   ShipVia.CompanyName.eq:string
   ShipVia.CompanyName.like:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Orders
         join:Employees
            as:EmployeeID
            type:left
            on
               and
                  Orders.EmployeeID:EmployeeID.EmployeeID
         join:Shippers
            as:ShipVia
            type:left
            on
               and
                  Orders.ShipVia:ShipVia.ShipperID
      columns
         Orders.OrderID
         Orders.CustomerID
         Orders.EmployeeID
         Orders.OrderDate
         Orders.RequiredDate
         Orders.ShippedDate
         Orders.ShipVia
         Orders.Freight
         Orders.ShipName
         Orders.ShipAddress
         Orders.ShipCity
         Orders.ShipRegion
         Orders.ShipPostalCode
         Orders.ShipCountry
         EmployeeID.LastName
            as:EmployeeID.LastName
         ShipVia.CompanyName
            as:ShipVia.CompanyName
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
