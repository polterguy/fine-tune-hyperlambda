
/*
 * HTTP API endpoint for **reading or listing records** from the `Regions` table
 * in the Northwind database. This endpoint allows clients to retrieve paginated and filtered
 * data with optional sorting capabilities, making it suitable for data exploration, administration panels,
 * or dropdown population in UI components.
 *
 * The following outlines the complete functionality and logic flow of this endpoint:
 *
 * 1. **Input Parameters**:
 *    - **Optional**:
 *      - `limit`: Number of records to return (defaults to 25). Use `-1` to return all records.
 *      - `offset`: Number of records to skip from the start of the result set.
 *      - `order`: Column name to sort by (must be in the format `TABLE_NAME.COLUMN_NAME`).
 *      - `direction`: Sort direction; can be `asc` (ascending) or `desc` (descending).
 *    - **Filtering Parameters**:
 *      - Supports a full range of conditional filters on `Regions.RegionID` and `Regions.RegionDescription`,
 *        using operators such as `.mt`, `.lt`, `.eq`, `.neq`, `.like`, `.mteq`, and `.lteq` to build dynamic SQL `WHERE` clauses.
 *
 * 2. **Database Connection Initialization**:
 *    - Establishes a connection to the Northwind database via the `[generic|northwind]` data source using SQLite as the backend engine.
 *
 * 3. **Query Parametrization**:
 *    - Dynamically injects sorting arguments (`order`, `direction`) if provided.
 *    - Applies pagination parameters (`limit`, `offset`) to control the number of records and starting point.
 *    - Collects all filter conditions and adds them to the `WHERE` clause to restrict which rows are returned.
 *
 * 4. **Data Retrieval**:
 *    - Executes the `data.read` operation against the `Regions` table.
 *    - Returns both `RegionID` and `RegionDescription` columns as part of the result set.
 *
 * 5. **Response Construction**:
 *    - Returns the filtered, sorted, and paginated list of records to the HTTP client.
 *
 * This endpoint provides a **versatile and client-configurable interface** for retrieving data,
 * empowering consumers to control the shape, size, and scope of the result set based on their needs.
 */
.arguments

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments
    */
   Regions.RegionID.mt:long
   Regions.RegionID.lt:long
   Regions.RegionID.mteq:long
   Regions.RegionID.lteq:long
   Regions.RegionID.neq:long
   Regions.RegionID.eq:long
   Regions.RegionDescription.like:string
   Regions.RegionDescription.mt:string
   Regions.RegionDescription.lt:string
   Regions.RegionDescription.mteq:string
   Regions.RegionDescription.lteq:string
   Regions.RegionDescription.neq:string
   Regions.RegionDescription.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Regions
      columns
         Regions.RegionID
         Regions.RegionDescription
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
