
/*
 * HTTP API endpoint for counting the number of **distinct (unique)** values in a specified column
 * from the `Regions` table in the Northwind database.
 *
 * This endpoint enables the caller to dynamically select a column and retrieve the count of unique entries,
 * while optionally applying conditional filters to narrow down the set of rows evaluated.
 *
 * Below is a breakdown of the key operations performed by the endpoint:
 *
 * 1. **Input Parameter Handling**:
 *    - Accepts a **mandatory** argument:
 *      - `distinct_column`: Specifies which column from the `Regions` table to evaluate for distinct values.
 *        The only legal values are `Regions.RegionID` and `Regions.RegionDescription`.
 *    - Supports a set of **optional filtering arguments** using suffix-based operators like `.mt`, `.lt`, `.like`, etc.,
 *      to allow precise row filtering before the distinct operation is applied.
 *
 * 2. **Validation Logic**:
 *    - Confirms that the `distinct_column` argument is provided.
 *    - Validates that the provided column is among the allowed set of columns for distinct counting.
 *
 * 3. **Database Connection**:
 *    - Opens a connection to the Northwind database through the `[generic|northwind]` data source using SQLite.
 *
 * 4. **Query Preparation**:
 *    - Dynamically constructs a SQL expression of the form `count(distinct <column>)` and stores it as a column alias named `count`.
 *    - Removes the `distinct_column` argument to isolate filtering parameters.
 *    - Adds all valid filtering arguments to the SQL `WHERE` clause using logical `AND` conditions.
 *
 * 5. **Query Execution**:
 *    - Executes a `data.read` operation that performs the distinct count on the specified column while applying all applicable filters.
 *
 * 6. **Response Construction**:
 *    - Returns the resulting distinct count back to the client under the key `count`.
 *
 * This endpoint offers a clean, configurable API to expose server-side logic for distinct counting,
 * empowering clients to retrieve deduplicated counts from specific fields, with optional fine-grained filters.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Regions.RegionID.mt:long
   Regions.RegionID.lt:long
   Regions.RegionID.mteq:long
   Regions.RegionID.lteq:long
   Regions.RegionID.neq:long
   Regions.RegionID.eq:long
   Regions.RegionDescription.like:string
   Regions.RegionDescription.mt:string
   Regions.RegionDescription.lt:string
   Regions.RegionDescription.mteq:string
   Regions.RegionDescription.lteq:string
   Regions.RegionDescription.neq:string
   Regions.RegionDescription.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Regions.RegionID
   .:Regions.RegionDescription

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Regions
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
