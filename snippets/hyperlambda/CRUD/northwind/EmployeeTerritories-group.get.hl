
/*
 * This file implements an HTTP API endpoint for retrieving grouped and aggregated data from the 
 * EmployeeTerritories table in the Northwind database. It allows the caller to specify one column 
 * to group the records by, and another column to aggregate with a mathematical function such as 
 * min, max, sum, avg, or count.
 *
 * The implementation begins by validating that the group column, aggregation function, and 
 * aggregation column are all provided and contain legal values. These values must correspond to 
 * known columns in either the EmployeeTerritories table or the joined Employees table.
 *
 * Once the required parameters are verified, a connection to the SQLite-based Northwind database 
 * is established. The group-by column is then injected into the group clause of the read query, 
 * and explicitly included in the result set to ensure it is returned to the caller.
 *
 * The result column's name is adjusted to reflect the name of the aggregation function selected 
 * by the user. At this point, arguments used to configure grouping and aggregation are removed to 
 * reduce clutter and avoid duplication when building the final query.
 *
 * Pagination and sorting options are appended to the query if provided. These may include 
 * offset, limit, and ordering by a specific column in ascending or descending order.
 *
 * Filter conditions are gathered from the input and added to the WHERE clause to narrow the scope 
 * of the aggregation to relevant records only.
 *
 * The final SQL read operation groups the EmployeeTerritories data (with an optional LEFT JOIN on 
 * the Employees table), applies the requested aggregation function on the specified column, and 
 * returns the grouped result to the client as structured data.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   EmployeeTerritories.EmployeeID.mt:long
   EmployeeTerritories.EmployeeID.lt:long
   EmployeeTerritories.EmployeeID.mteq:long
   EmployeeTerritories.EmployeeID.lteq:long
   EmployeeTerritories.EmployeeID.neq:long
   EmployeeTerritories.EmployeeID.eq:long
   EmployeeTerritories.TerritoryID.like:string
   EmployeeTerritories.TerritoryID.mt:string
   EmployeeTerritories.TerritoryID.lt:string
   EmployeeTerritories.TerritoryID.mteq:string
   EmployeeTerritories.TerritoryID.lteq:string
   EmployeeTerritories.TerritoryID.neq:string
   EmployeeTerritories.TerritoryID.eq:string
   EmployeeID.LastName.eq:string
   EmployeeID.LastName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:EmployeeTerritories.EmployeeID
   .:EmployeeTerritories.TerritoryID
   .:EmployeeID.LastName

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:EmployeeTerritories.EmployeeID
   .:EmployeeTerritories.TerritoryID
   .:EmployeeID.LastName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:EmployeeTerritories
         join:Employees
            as:EmployeeID
            type:left
            on
               and
                  EmployeeTerritories.EmployeeID:EmployeeID.EmployeeID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
