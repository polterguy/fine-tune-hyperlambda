
/*
 * Count unique and distinct items from your CustomerCustomerDemo table in your northwind database.
 *
 * Requires [distinct_column] in the format of TABLE_NAME.COLUMN_NAME.
 * Optionally supports filtering using all available conditions on both CustomerID and CustomerTypeID.
 * Returns a single count result as [count].
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   CustomerCustomerDemo.CustomerID.like:string
   CustomerCustomerDemo.CustomerID.mt:string
   CustomerCustomerDemo.CustomerID.lt:string
   CustomerCustomerDemo.CustomerID.mteq:string
   CustomerCustomerDemo.CustomerID.lteq:string
   CustomerCustomerDemo.CustomerID.neq:string
   CustomerCustomerDemo.CustomerID.eq:string
   CustomerCustomerDemo.CustomerTypeID.like:string
   CustomerCustomerDemo.CustomerTypeID.mt:string
   CustomerCustomerDemo.CustomerTypeID.lt:string
   CustomerCustomerDemo.CustomerTypeID.mteq:string
   CustomerCustomerDemo.CustomerTypeID.lteq:string
   CustomerCustomerDemo.CustomerTypeID.neq:string
   CustomerCustomerDemo.CustomerTypeID.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:CustomerCustomerDemo.CustomerID
   .:CustomerCustomerDemo.CustomerTypeID

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerCustomerDemo
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
