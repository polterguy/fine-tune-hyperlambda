
/*
 * This API endpoint retrieves a unique and distinct set of values from the EmployeeTerritories 
 * table in the Northwind SQLite database. It allows clients to specify which column to extract 
 * distinct values from, including support for ordering, pagination, and flexible filtering options.
 *
 * The endpoint begins by validating that the required `distinct_column` argument is provided and 
 * belongs to an allowed list of column names, including fields from both EmployeeTerritories and 
 * joined Employees data.
 *
 * A database connection is established using [data.connect], targeting the Northwind SQLite database.
 *
 * The `distinct_column` argument is transformed into a valid SQL expression using [strings.concat], 
 * and removed from the arguments list to streamline query construction.
 *
 * Optional pagination (`limit` and `offset`) and ordering (`order` and `direction`) arguments are 
 * added to the query, then removed from `.arguments` after being incorporated.
 *
 * Filter conditions based on both EmployeeTerritories and Employees fields are collected from 
 * `.arguments` and added to the SQL WHERE clause, using [add] and [get-nodes] to include all 
 * user-specified constraints.
 *
 * A [data.read] operation is executed to retrieve the unique values from the specified column. 
 * A LEFT JOIN with the Employees table is used to allow distinct queries across both tables.
 *
 * The result of the query is returned to the client as a JSON array via [return-nodes].
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   EmployeeTerritories.EmployeeID.mt:long
   EmployeeTerritories.EmployeeID.lt:long
   EmployeeTerritories.EmployeeID.mteq:long
   EmployeeTerritories.EmployeeID.lteq:long
   EmployeeTerritories.EmployeeID.neq:long
   EmployeeTerritories.EmployeeID.eq:long
   EmployeeTerritories.TerritoryID.like:string
   EmployeeTerritories.TerritoryID.mt:string
   EmployeeTerritories.TerritoryID.lt:string
   EmployeeTerritories.TerritoryID.mteq:string
   EmployeeTerritories.TerritoryID.lteq:string
   EmployeeTerritories.TerritoryID.neq:string
   EmployeeTerritories.TerritoryID.eq:string
   EmployeeID.LastName.eq:string
   EmployeeID.LastName.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:EmployeeTerritories.EmployeeID
   .:EmployeeTerritories.TerritoryID
   .:EmployeeID.LastName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:EmployeeTerritories
         join:Employees
            as:EmployeeID
            type:left
            on
               and
                  EmployeeTerritories.EmployeeID:EmployeeID.EmployeeID
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
