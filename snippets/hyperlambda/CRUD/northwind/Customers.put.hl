/*
 * This file defines a secure and parameterized update operation for modifying records in the `Customers` table
 * within the Northwind SQLite database.
 *
 * The primary purpose is to allow authorized users to update customer information while ensuring that:
 * - the target record is uniquely identified,
 * - only authenticated administrators can perform the update,
 * - and downstream systems can react to changes via real-time socket signaling.
 *
 * Core features and logic:
 *
 * - Requires the `CustomerID` argument as the primary key to identify which record to update.
 * - Accepts new values for all editable fields: CompanyName, ContactName, ContactTitle, Address, City, Region,
 *   PostalCode, Country, Phone, and Fax.
 * - Validates that `CustomerID` is provided using `validators.mandatory` to avoid unsafe or incomplete updates.
 * - Access is restricted to users with the `admin` role using `auth.ticket.verify`.
 * - Dynamically constructs the SQL `UPDATE` statement by mapping all provided fields into the `values` clause,
 *   and generating a `WHERE` clause using the primary key.
 * - Executes the update operation via `data.update`, and immediately checks whether a matching record was found.
 *     - If no records were updated, a `404 Not Found` status is returned.
 *     - Otherwise, a `202 Accepted` status is returned to indicate successful processing.
 * - Publishes a socket message named `northwind.Customers.put`, including the updated data and user roles,
 *   enabling real-time notifications to other system components or clients.
 * - Returns the number of affected records as the final response.
 *
 * This workflow is designed to support safe, auditable, and reactive updates to customer data
 * in enterprise environments with strict authorization and real-time monitoring needs.
 */
.arguments

   // CustomerID column value being primary key of record to update, mandatory argument
   CustomerID:string

   // CompanyName column's new value
   CompanyName:string

   // ContactName column's new value
   ContactName:string

   // ContactTitle column's new value
   ContactTitle:string

   // Address column's new value
   Address:string

   // City column's new value
   City:string

   // Region column's new value
   Region:string

   // PostalCode column's new value
   PostalCode:string

   // Country column's new value
   Country:string

   // Phone column's new value
   Phone:string

   // Fax column's new value
   Fax:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/CustomerID

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:Customers
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   add:x:./*/sockets.signal
      get-nodes:x:@auth.ticket.verify
   set-name:x:./*/sockets.signal/*/auth.ticket.verify
      .:roles
   sockets.signal:northwind.Customers.put
      args

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
