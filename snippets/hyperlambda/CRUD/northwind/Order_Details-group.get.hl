
/*
 * This HTTP API endpoint returns grouped aggregation results from the "Order Details" table in the Northwind
 * SQLite database. It supports aggregate functions such as min, max, sum, avg, and count, grouped by a specified column.
 *
 * The client must specify a grouping column and an aggregate function, along with the column to apply the function to.
 * All column names must be in fully qualified TABLE_NAME.COLUMN_NAME format. The endpoint verifies that only supported
 * column names and aggregation types are allowed, to ensure safe and meaningful queries.
 *
 * Pagination is supported via [limit] and [offset] arguments, and the result set can be ordered using the
 * [order] and [direction] arguments. These control how many records to return, where to start from, and the sort order.
 *
 * The logic constructs a query that includes a group by clause, applies any optional filters (e.g., range comparisons,
 * equality, LIKE matches), and computes the aggregated result for each group.
 *
 * The final response includes the group column and the computed aggregate result, returned to the caller in JSON format.
 * The implementation joins with the "Orders" and "Products" tables to enable filtering and grouping on fields from those tables.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Order Details.OrderID.mt:long
   Order Details.OrderID.lt:long
   Order Details.OrderID.mteq:long
   Order Details.OrderID.lteq:long
   Order Details.OrderID.neq:long
   Order Details.OrderID.eq:long
   Order Details.ProductID.mt:long
   Order Details.ProductID.lt:long
   Order Details.ProductID.mteq:long
   Order Details.ProductID.lteq:long
   Order Details.ProductID.neq:long
   Order Details.ProductID.eq:long
   Order Details.UnitPrice.mt:decimal
   Order Details.UnitPrice.lt:decimal
   Order Details.UnitPrice.mteq:decimal
   Order Details.UnitPrice.lteq:decimal
   Order Details.UnitPrice.neq:decimal
   Order Details.UnitPrice.eq:decimal
   Order Details.Quantity.mt:long
   Order Details.Quantity.lt:long
   Order Details.Quantity.mteq:long
   Order Details.Quantity.lteq:long
   Order Details.Quantity.neq:long
   Order Details.Quantity.eq:long
   Order Details.Discount.mt:double
   Order Details.Discount.lt:double
   Order Details.Discount.mteq:double
   Order Details.Discount.lteq:double
   Order Details.Discount.neq:double
   Order Details.Discount.eq:double
   OrderID.CustomerID.eq:string
   OrderID.CustomerID.like:string
   ProductID.ProductName.eq:string
   ProductID.ProductName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Order Details.OrderID
   .:Order Details.ProductID
   .:Order Details.UnitPrice
   .:Order Details.Quantity
   .:Order Details.Discount
   .:OrderID.CustomerID
   .:ProductID.ProductName

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Order Details.OrderID
   .:Order Details.ProductID
   .:Order Details.UnitPrice
   .:Order Details.Quantity
   .:Order Details.Discount
   .:OrderID.CustomerID
   .:ProductID.ProductName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Order Details
         join:Orders
            as:OrderID
            type:left
            on
               and
                  Order Details.OrderID:OrderID.OrderID
         join:Products
            as:ProductID
            type:left
            on
               and
                  Order Details.ProductID:ProductID.ProductID
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
