
/*
 * HTTP API endpoint for retrieving **aggregated values grouped by a specified column**
 * from the `Regions` table in the Northwind database. This endpoint supports aggregation functions such as `min`, `max`, `sum`, `avg`, and `count`,
 * while also allowing result ordering, pagination, and row filtering.
 *
 * The endpoint is ideal for summarizing data across categories, such as totals or averages grouped by region.
 *
 * Here's a detailed breakdown of what this endpoint does:
 *
 * 1. **Input Parameters**:
 *    - **Mandatory**:
 *      - `group_column`: Column to group the data by (must be in `TABLE_NAME.COLUMN_NAME` format).
 *      - `aggregate_function`: Aggregation to applyâ€”must be one of `min`, `max`, `sum`, `avg`, or `count`.
 *      - `aggregate_column`: Column on which the aggregation function is performed.
 *    - **Optional**:
 *      - `limit`: Maximum number of grouped results to return (default is 25; `-1` returns all).
 *      - `offset`: Number of grouped records to skip from the result set.
 *      - `order`: Column used to sort the grouped results.
 *      - `direction`: Sort direction, either `asc` or `desc`.
 *      - Filter conditions on `Regions.RegionID` and `Regions.RegionDescription`, using suffixes like `.mt`, `.lt`, `.eq`, `.like`, etc.
 *
 * 2. **Validation Logic**:
 *    - Ensures all required arguments are present.
 *    - Validates that `group_column`, `aggregate_column`, and `aggregate_function` use supported values.
 *
 * 3. **Database Connection**:
 *    - Connects to the Northwind database using `[generic|northwind]`, with SQLite as the backend engine.
 *
 * 4. **Query Construction**:
 *    - Sets up grouping using the `group_column` and includes it in the final result.
 *    - Dynamically builds the aggregation expression (e.g., `avg(Regions.RegionID)`) and aliases it to the function name (`avg`, `sum`, etc.).
 *    - Inserts the grouping column explicitly into the result set to ensure visibility in output.
 *    - Removes processed arguments from the input list to prevent redundancy.
 *    - Adds pagination and ordering logic if the corresponding arguments are provided.
 *    - Incorporates all filter conditions into the `WHERE` clause using `AND` logic.
 *
 * 5. **Data Retrieval**:
 *    - Executes the SQL query using `data.read`, grouping the data and applying the aggregate function to each group.
 *
 * 6. **Response Construction**:
 *    - Returns the grouped aggregation results back to the client.
 *    - Each record includes the group identifier and the calculated aggregate value.
 *
 * This endpoint is particularly useful for analytics, reporting, and dashboards where clients need categorized summaries of data
 * with full control over filtering, ordering, and paging.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    */
   Regions.RegionID.mt:long
   Regions.RegionID.lt:long
   Regions.RegionID.mteq:long
   Regions.RegionID.lteq:long
   Regions.RegionID.neq:long
   Regions.RegionID.eq:long
   Regions.RegionDescription.like:string
   Regions.RegionDescription.mt:string
   Regions.RegionDescription.lt:string
   Regions.RegionDescription.mteq:string
   Regions.RegionDescription.lteq:string
   Regions.RegionDescription.neq:string
   Regions.RegionDescription.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Regions.RegionID
   .:Regions.RegionDescription

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Regions.RegionID
   .:Regions.RegionDescription

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Regions
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
