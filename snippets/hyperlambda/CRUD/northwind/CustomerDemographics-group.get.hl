
/*
 * This Hyperlambda endpoint returns grouped aggregate data from the [CustomerDemographics] table in the [northwind] database.
 *
 * It provides the ability to:
 * - Group records by a column ([group_column]) using SQL GROUP BY
 * - Perform an aggregation ([aggregate_function]) such as [min], [max], [sum], [avg], or [count] on [aggregate_column]
 * - Filter records dynamically using flexible condition operators (like [eq], [lt], [gt], [like], etc.)
 * - Sort and paginate result sets with [order], [direction], [limit], and [offset]
 *
 * 1. [.arguments]
 *    - [group_column], [aggregate_function], and [aggregate_column] are required.
 *    - Accepts optional paging ([limit], [offset]) and sorting ([order], [direction]).
 *    - Filtering is supported for all fields in [CustomerDemographics].
 *
 * 2. [validators.mandatory], [validators.enum]
 *    - Ensures valid input combinations for safe and expected SQL execution.
 *
 * 3. [data.read]
 *    - Uses dynamic expression handling to generate GROUP BY and aggregate functions.
 *    - Builds WHERE clauses from dynamically provided filters.
 *    - Wraps column metadata to maintain consistency in naming and structure.
 *    - Injects runtime order and pagination based on provided args.
 *
 * 4. [remove-nodes], [insert-before], [set-name]
 *    - Used to clean, reorder, and manipulate the execution graph for proper evaluation.
 *    - Aggregated values are aliased to match the aggregation function (e.g., [avg], [count]).
 *
 * 5. [return-nodes]
 *    - Outputs the final grouped and aggregated dataset.
 *
 * Example Use Cases:
 * - CRM analytics and demographic summarization.
 * - UI dashboards displaying customer segments by category.
 * - Advanced reporting tools aggregating on customer meta information.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   CustomerDemographics.CustomerTypeID.like:string
   CustomerDemographics.CustomerTypeID.mt:string
   CustomerDemographics.CustomerTypeID.lt:string
   CustomerDemographics.CustomerTypeID.mteq:string
   CustomerDemographics.CustomerTypeID.lteq:string
   CustomerDemographics.CustomerTypeID.neq:string
   CustomerDemographics.CustomerTypeID.eq:string
   CustomerDemographics.CustomerDesc.like:string
   CustomerDemographics.CustomerDesc.mt:string
   CustomerDemographics.CustomerDesc.lt:string
   CustomerDemographics.CustomerDesc.mteq:string
   CustomerDemographics.CustomerDesc.lteq:string
   CustomerDemographics.CustomerDesc.neq:string
   CustomerDemographics.CustomerDesc.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:CustomerDemographics.CustomerTypeID
   .:CustomerDemographics.CustomerDesc

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:CustomerDemographics.CustomerTypeID
   .:CustomerDemographics.CustomerDesc

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:CustomerDemographics
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
