
/*
 * HTTP API endpoint that counts the **total number of rows** in the `Regions` table
 * of the Northwind database, with support for optional row filtering based on column values.
 *
 * This endpoint is ideal for retrieving the number of matching records in the table,
 * either for reporting purposes or conditional logic in client applications.
 *
 * The following is a detailed explanation of the endpointâ€™s functionality:
 *
 * 1. **Filtering Input Parameters**:
 *    - Accepts multiple **optional filtering arguments**, based on the fields in the `Regions` table:
 *      - `Regions.RegionID`: numeric filters with operators like `.mt`, `.lt`, `.eq`, `.neq`, `.mteq`, `.lteq`.
 *      - `Regions.RegionDescription`: text and string-based filters, including `.like`, `.eq`, `.neq`, and value comparisons.
 *    - These filtering arguments determine which rows are counted by forming SQL `WHERE` conditions.
 *
 * 2. **Database Connection Initialization**:
 *    - Establishes a connection to the Northwind database using the `[generic|northwind]` data source.
 *    - SQLite is used as the backend database engine.
 *
 * 3. **SQL Query Construction**:
 *    - All filtering arguments are dynamically injected into a `WHERE` clause.
 *    - The `data.read` slot performs a `SELECT count(*)` query on the `Regions` table, aliased as `count`.
 *    - The `limit` is set to `1` since only a single aggregated value is expected as a result.
 *
 * 4. **Response Construction**:
 *    - Returns the result of the query to the HTTP caller with a single key, `count`, representing the total number of rows matching the applied filters.
 *
 * This endpoint provides a lightweight yet powerful mechanism for counting rows in the database,
 * supporting both numeric and string-based conditions to fine-tune what gets included in the count.
 */
.arguments

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Regions.RegionID.mt:long
   Regions.RegionID.lt:long
   Regions.RegionID.mteq:long
   Regions.RegionID.lteq:long
   Regions.RegionID.neq:long
   Regions.RegionID.eq:long
   Regions.RegionDescription.like:string
   Regions.RegionDescription.mt:string
   Regions.RegionDescription.lt:string
   Regions.RegionDescription.mteq:string
   Regions.RegionDescription.lteq:string
   Regions.RegionDescription.neq:string
   Regions.RegionDescription.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Regions
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
