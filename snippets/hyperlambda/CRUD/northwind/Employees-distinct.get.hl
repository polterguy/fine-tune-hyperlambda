
/*
 * How can you retrieve a list of unique and distinct values from the Employees table in the Northwind database,
 * with support for filtering, ordering, and pagination, including self-referencing joins?
 *
 * 1. **Input validation**:
 *    - Validates that the `distinct_column` argument is present.
 *    - Ensures that `distinct_column` has an allowed value via `[validators.enum]`.
 *
 * 2. **Database connection**:
 *    - Connects to the `northwind` SQLite database using `[data.connect]`.
 *
 * 3. **Distinct column transformation**:
 *    - Builds a `distinct(...)` SQL expression dynamically and assigns it to `distinct_functor`.
 *
 * 4. **Removes processed input arguments**:
 *    - Removes `distinct_column`, `limit`, `offset`, `order`, and `direction` from the input arguments
 *      to simplify further handling.
 *
 * 5. **Adds query modifiers**:
 *    - Adds `limit`, `offset`, `order`, and `direction` to `[data.read]` using [add] based on the input.
 *
 * 6. **Applies filtering**:
 *    - Applies optional filters on `Employees` or `ReportsTo` fields using [add].
 *
 * 7. **Read from database**:
 *    - Performs a `[data.read]` with a **left join** on the `Employees` table to resolve `ReportsTo.LastName`.
 *    - Selects the dynamic `distinct_functor` column as the result.
 *    - Filters are applied in an `and` block.
 *
 * 8. **Returns the result**:
 *    - Outputs the result of the query using `[return-nodes]`, delivering the unique values.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Employees.EmployeeID.mt:long
   Employees.EmployeeID.lt:long
   Employees.EmployeeID.mteq:long
   Employees.EmployeeID.lteq:long
   Employees.EmployeeID.neq:long
   Employees.EmployeeID.eq:long
   Employees.LastName.like:string
   Employees.LastName.mt:string
   Employees.LastName.lt:string
   Employees.LastName.mteq:string
   Employees.LastName.lteq:string
   Employees.LastName.neq:string
   Employees.LastName.eq:string
   Employees.FirstName.like:string
   Employees.FirstName.mt:string
   Employees.FirstName.lt:string
   Employees.FirstName.mteq:string
   Employees.FirstName.lteq:string
   Employees.FirstName.neq:string
   Employees.FirstName.eq:string
   Employees.Title.like:string
   Employees.Title.mt:string
   Employees.Title.lt:string
   Employees.Title.mteq:string
   Employees.Title.lteq:string
   Employees.Title.neq:string
   Employees.Title.eq:string
   Employees.TitleOfCourtesy.like:string
   Employees.TitleOfCourtesy.mt:string
   Employees.TitleOfCourtesy.lt:string
   Employees.TitleOfCourtesy.mteq:string
   Employees.TitleOfCourtesy.lteq:string
   Employees.TitleOfCourtesy.neq:string
   Employees.TitleOfCourtesy.eq:string
   Employees.BirthDate.mt:date
   Employees.BirthDate.lt:date
   Employees.BirthDate.mteq:date
   Employees.BirthDate.lteq:date
   Employees.BirthDate.neq:date
   Employees.BirthDate.eq:date
   Employees.HireDate.mt:date
   Employees.HireDate.lt:date
   Employees.HireDate.mteq:date
   Employees.HireDate.lteq:date
   Employees.HireDate.neq:date
   Employees.HireDate.eq:date
   Employees.Address.like:string
   Employees.Address.mt:string
   Employees.Address.lt:string
   Employees.Address.mteq:string
   Employees.Address.lteq:string
   Employees.Address.neq:string
   Employees.Address.eq:string
   Employees.City.like:string
   Employees.City.mt:string
   Employees.City.lt:string
   Employees.City.mteq:string
   Employees.City.lteq:string
   Employees.City.neq:string
   Employees.City.eq:string
   Employees.Region.like:string
   Employees.Region.mt:string
   Employees.Region.lt:string
   Employees.Region.mteq:string
   Employees.Region.lteq:string
   Employees.Region.neq:string
   Employees.Region.eq:string
   Employees.PostalCode.like:string
   Employees.PostalCode.mt:string
   Employees.PostalCode.lt:string
   Employees.PostalCode.mteq:string
   Employees.PostalCode.lteq:string
   Employees.PostalCode.neq:string
   Employees.PostalCode.eq:string
   Employees.Country.like:string
   Employees.Country.mt:string
   Employees.Country.lt:string
   Employees.Country.mteq:string
   Employees.Country.lteq:string
   Employees.Country.neq:string
   Employees.Country.eq:string
   Employees.HomePhone.like:string
   Employees.HomePhone.mt:string
   Employees.HomePhone.lt:string
   Employees.HomePhone.mteq:string
   Employees.HomePhone.lteq:string
   Employees.HomePhone.neq:string
   Employees.HomePhone.eq:string
   Employees.Extension.like:string
   Employees.Extension.mt:string
   Employees.Extension.lt:string
   Employees.Extension.mteq:string
   Employees.Extension.lteq:string
   Employees.Extension.neq:string
   Employees.Extension.eq:string
   Employees.Photo.like:string
   Employees.Photo.mt:string
   Employees.Photo.lt:string
   Employees.Photo.mteq:string
   Employees.Photo.lteq:string
   Employees.Photo.neq:string
   Employees.Photo.eq:string
   Employees.Notes.like:string
   Employees.Notes.mt:string
   Employees.Notes.lt:string
   Employees.Notes.mteq:string
   Employees.Notes.lteq:string
   Employees.Notes.neq:string
   Employees.Notes.eq:string
   Employees.ReportsTo.mt:long
   Employees.ReportsTo.lt:long
   Employees.ReportsTo.mteq:long
   Employees.ReportsTo.lteq:long
   Employees.ReportsTo.neq:long
   Employees.ReportsTo.eq:long
   Employees.PhotoPath.like:string
   Employees.PhotoPath.mt:string
   Employees.PhotoPath.lt:string
   Employees.PhotoPath.mteq:string
   Employees.PhotoPath.lteq:string
   Employees.PhotoPath.neq:string
   Employees.PhotoPath.eq:string
   ReportsTo.LastName.eq:string
   ReportsTo.LastName.like:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Employees.EmployeeID
   .:Employees.LastName
   .:Employees.FirstName
   .:Employees.Title
   .:Employees.TitleOfCourtesy
   .:Employees.BirthDate
   .:Employees.HireDate
   .:Employees.Address
   .:Employees.City
   .:Employees.Region
   .:Employees.PostalCode
   .:Employees.Country
   .:Employees.HomePhone
   .:Employees.Extension
   .:Employees.Photo
   .:Employees.Notes
   .:Employees.ReportsTo
   .:Employees.PhotoPath
   .:ReportsTo.LastName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Employees
         join:Employees
            as:ReportsTo
            type:left
            on
               and
                  Employees.ReportsTo:ReportsTo.EmployeeID
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
