
/*
 * Calculates an aggregate value (min, max, sum, or avg) on a column from the Employees table in the Northwind database.
 *
 * The following ordered steps explain the logic:
 *
 * 1. **Input arguments**:
 *    - Requires `aggregate_function` (min, max, sum, avg).
 *    - Requires `aggregate_column` in the format `TABLE_NAME.COLUMN_NAME` (e.g., `Employees.HireDate`).
 *    - Optional filtering arguments support various operators like `.eq`, `.like`, `.lt`, `.mt`, etc.
 *
 * 2. **Validation**:
 *    - Ensures both required arguments are present using `[validators.mandatory]`.
 *    - Validates the function and column names against allowed values using `[validators.enum]`.
 *
 * 3. **Database connection**:
 *    - Opens a connection to the `northwind` database via `[data.connect]` with SQLite backend.
 *
 * 4. **Prepare the SQL aggregate function**:
 *    - Uses `[strings.concat]` to build the aggregate SQL expression, such as `avg(Employees.HireDate)`.
 *    - Renames the resulting node to `aggregate_functor`, which will be interpreted as SQL code.
 *
 * 5. **Cleanup**:
 *    - Removes the processed `aggregate_function` and `aggregate_column` from the arguments list.
 *    - Simplifies further filtering by removing already-handled inputs.
 *
 * 6. **Apply filters**:
 *    - Dynamically adds remaining arguments as filter conditions to the SQL `WHERE` clause.
 *
 * 7. **SQL JOIN logic**:
 *    - Performs a self-join on the `Employees` table:
 *      - Joins `Employees` as `ReportsTo` using a LEFT JOIN.
 *      - On condition: `Employees.ReportsTo = ReportsTo.EmployeeID`.
 *
 * 8. **Read operation**:
 *    - Executes `[data.read]` with the specified aggregate column and filters.
 *    - Limits the result to a single row.
 *
 * 9. **Return result**:
 *    - The final result (e.g., `min(HireDate)`) is returned under the field `result`.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Employees.EmployeeID.mt:long
   Employees.EmployeeID.lt:long
   Employees.EmployeeID.mteq:long
   Employees.EmployeeID.lteq:long
   Employees.EmployeeID.neq:long
   Employees.EmployeeID.eq:long
   Employees.LastName.like:string
   Employees.LastName.mt:string
   Employees.LastName.lt:string
   Employees.LastName.mteq:string
   Employees.LastName.lteq:string
   Employees.LastName.neq:string
   Employees.LastName.eq:string
   Employees.FirstName.like:string
   Employees.FirstName.mt:string
   Employees.FirstName.lt:string
   Employees.FirstName.mteq:string
   Employees.FirstName.lteq:string
   Employees.FirstName.neq:string
   Employees.FirstName.eq:string
   Employees.Title.like:string
   Employees.Title.mt:string
   Employees.Title.lt:string
   Employees.Title.mteq:string
   Employees.Title.lteq:string
   Employees.Title.neq:string
   Employees.Title.eq:string
   Employees.TitleOfCourtesy.like:string
   Employees.TitleOfCourtesy.mt:string
   Employees.TitleOfCourtesy.lt:string
   Employees.TitleOfCourtesy.mteq:string
   Employees.TitleOfCourtesy.lteq:string
   Employees.TitleOfCourtesy.neq:string
   Employees.TitleOfCourtesy.eq:string
   Employees.BirthDate.mt:date
   Employees.BirthDate.lt:date
   Employees.BirthDate.mteq:date
   Employees.BirthDate.lteq:date
   Employees.BirthDate.neq:date
   Employees.BirthDate.eq:date
   Employees.HireDate.mt:date
   Employees.HireDate.lt:date
   Employees.HireDate.mteq:date
   Employees.HireDate.lteq:date
   Employees.HireDate.neq:date
   Employees.HireDate.eq:date
   Employees.Address.like:string
   Employees.Address.mt:string
   Employees.Address.lt:string
   Employees.Address.mteq:string
   Employees.Address.lteq:string
   Employees.Address.neq:string
   Employees.Address.eq:string
   Employees.City.like:string
   Employees.City.mt:string
   Employees.City.lt:string
   Employees.City.mteq:string
   Employees.City.lteq:string
   Employees.City.neq:string
   Employees.City.eq:string
   Employees.Region.like:string
   Employees.Region.mt:string
   Employees.Region.lt:string
   Employees.Region.mteq:string
   Employees.Region.lteq:string
   Employees.Region.neq:string
   Employees.Region.eq:string
   Employees.PostalCode.like:string
   Employees.PostalCode.mt:string
   Employees.PostalCode.lt:string
   Employees.PostalCode.mteq:string
   Employees.PostalCode.lteq:string
   Employees.PostalCode.neq:string
   Employees.PostalCode.eq:string
   Employees.Country.like:string
   Employees.Country.mt:string
   Employees.Country.lt:string
   Employees.Country.mteq:string
   Employees.Country.lteq:string
   Employees.Country.neq:string
   Employees.Country.eq:string
   Employees.HomePhone.like:string
   Employees.HomePhone.mt:string
   Employees.HomePhone.lt:string
   Employees.HomePhone.mteq:string
   Employees.HomePhone.lteq:string
   Employees.HomePhone.neq:string
   Employees.HomePhone.eq:string
   Employees.Extension.like:string
   Employees.Extension.mt:string
   Employees.Extension.lt:string
   Employees.Extension.mteq:string
   Employees.Extension.lteq:string
   Employees.Extension.neq:string
   Employees.Extension.eq:string
   Employees.Photo.like:string
   Employees.Photo.mt:string
   Employees.Photo.lt:string
   Employees.Photo.mteq:string
   Employees.Photo.lteq:string
   Employees.Photo.neq:string
   Employees.Photo.eq:string
   Employees.Notes.like:string
   Employees.Notes.mt:string
   Employees.Notes.lt:string
   Employees.Notes.mteq:string
   Employees.Notes.lteq:string
   Employees.Notes.neq:string
   Employees.Notes.eq:string
   Employees.ReportsTo.mt:long
   Employees.ReportsTo.lt:long
   Employees.ReportsTo.mteq:long
   Employees.ReportsTo.lteq:long
   Employees.ReportsTo.neq:long
   Employees.ReportsTo.eq:long
   Employees.PhotoPath.like:string
   Employees.PhotoPath.mt:string
   Employees.PhotoPath.lt:string
   Employees.PhotoPath.mteq:string
   Employees.PhotoPath.lteq:string
   Employees.PhotoPath.neq:string
   Employees.PhotoPath.eq:string
   ReportsTo.LastName.eq:string
   ReportsTo.LastName.like:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Employees.EmployeeID
   .:Employees.LastName
   .:Employees.FirstName
   .:Employees.Title
   .:Employees.TitleOfCourtesy
   .:Employees.BirthDate
   .:Employees.HireDate
   .:Employees.Address
   .:Employees.City
   .:Employees.Region
   .:Employees.PostalCode
   .:Employees.Country
   .:Employees.HomePhone
   .:Employees.Extension
   .:Employees.Photo
   .:Employees.Notes
   .:Employees.ReportsTo
   .:Employees.PhotoPath
   .:ReportsTo.LastName

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Employees
         join:Employees
            as:ReportsTo
            type:left
            on
               and
                  Employees.ReportsTo:ReportsTo.EmployeeID
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
