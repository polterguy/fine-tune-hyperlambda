
/*
 * Counts items from your Customers table in your northwind database.
 *
 * 1. Accepts **optional filtering arguments** for all major fields in the `Customers` table.
 *    - Each field supports logical operators like `.eq`, `.like`, `.lt`, `.gt`, `.mteq`, etc.
 *    - These allow narrowing down which records should be included in the count.
 *
 * 2. Establishes a connection to the SQLite `northwind` database:
 *    - Uses [data.connect] with provider `[generic]`.
 *    - Ensures that the database context is properly opened before executing any query logic.
 *
 * 3. Collects and applies all filtering arguments:
 *    - Uses [get-nodes:x:@.arguments/*] to extract any provided filters.
 *    - Applies these under the [where/and] clause of the SQL query dynamically using [add].
 *
 * 4. Performs the count operation using [data.read]:
 *    - Target table is `Customers`.
 *    - Column selected is `count(*)`, aliased to `count`.
 *    - Filtering logic is applied via the generated `where/and` clause.
 *    - Includes `limit:1` since weâ€™re only returning one value.
 *
 * 5. Returns the result to the client:
 *    - Uses [return-nodes:x:@data.read/*/*] to send back the result.
 *    - This will produce a single object with the property `count` containing the number of matching records.
 */
.arguments

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Customers.CustomerID.like:string
   Customers.CustomerID.mt:string
   Customers.CustomerID.lt:string
   Customers.CustomerID.mteq:string
   Customers.CustomerID.lteq:string
   Customers.CustomerID.neq:string
   Customers.CustomerID.eq:string
   Customers.CompanyName.like:string
   Customers.CompanyName.mt:string
   Customers.CompanyName.lt:string
   Customers.CompanyName.mteq:string
   Customers.CompanyName.lteq:string
   Customers.CompanyName.neq:string
   Customers.CompanyName.eq:string
   Customers.ContactName.like:string
   Customers.ContactName.mt:string
   Customers.ContactName.lt:string
   Customers.ContactName.mteq:string
   Customers.ContactName.lteq:string
   Customers.ContactName.neq:string
   Customers.ContactName.eq:string
   Customers.ContactTitle.like:string
   Customers.ContactTitle.mt:string
   Customers.ContactTitle.lt:string
   Customers.ContactTitle.mteq:string
   Customers.ContactTitle.lteq:string
   Customers.ContactTitle.neq:string
   Customers.ContactTitle.eq:string
   Customers.Address.like:string
   Customers.Address.mt:string
   Customers.Address.lt:string
   Customers.Address.mteq:string
   Customers.Address.lteq:string
   Customers.Address.neq:string
   Customers.Address.eq:string
   Customers.City.like:string
   Customers.City.mt:string
   Customers.City.lt:string
   Customers.City.mteq:string
   Customers.City.lteq:string
   Customers.City.neq:string
   Customers.City.eq:string
   Customers.Region.like:string
   Customers.Region.mt:string
   Customers.Region.lt:string
   Customers.Region.mteq:string
   Customers.Region.lteq:string
   Customers.Region.neq:string
   Customers.Region.eq:string
   Customers.PostalCode.like:string
   Customers.PostalCode.mt:string
   Customers.PostalCode.lt:string
   Customers.PostalCode.mteq:string
   Customers.PostalCode.lteq:string
   Customers.PostalCode.neq:string
   Customers.PostalCode.eq:string
   Customers.Country.like:string
   Customers.Country.mt:string
   Customers.Country.lt:string
   Customers.Country.mteq:string
   Customers.Country.lteq:string
   Customers.Country.neq:string
   Customers.Country.eq:string
   Customers.Phone.like:string
   Customers.Phone.mt:string
   Customers.Phone.lt:string
   Customers.Phone.mteq:string
   Customers.Phone.lteq:string
   Customers.Phone.neq:string
   Customers.Phone.eq:string
   Customers.Fax.like:string
   Customers.Fax.mt:string
   Customers.Fax.lt:string
   Customers.Fax.mteq:string
   Customers.Fax.lteq:string
   Customers.Fax.neq:string
   Customers.Fax.eq:string

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         count(*)
            as:count
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
