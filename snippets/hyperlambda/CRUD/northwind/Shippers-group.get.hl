
/*
 * HTTP API endpoint for retrieving **grouped aggregate results** from the `Shippers` table
 * in the Northwind database. This endpoint supports aggregation functions such as `min`, `max`, `sum`, `avg`, and `count`,
 * grouped by a user-defined column, and includes optional filtering, ordering, and pagination capabilities.
 *
 * This type of endpoint is ideal for analytics and dashboards where data needs to be summarized across categories,
 * such as counting shippers by company or finding the average shipper ID grouped by phone number.
 *
 * Hereâ€™s a detailed breakdown of its functionality:
 *
 * 1. **Input Parameters**:
 *    - **Mandatory**:
 *      - `group_column`: Column by which the results should be grouped. Must be fully qualified (e.g., `Shippers.CompanyName`) and one of the allowed fields.
 *      - `aggregate_function`: The aggregation function to apply, restricted to `min`, `max`, `sum`, `avg`, or `count`.
 *      - `aggregate_column`: The column to apply the aggregation function to, must be in `TABLE_NAME.COLUMN_NAME` format.
 *    - **Optional**:
 *      - `limit`: Limits the number of grouped results returned (default is 25, `-1` returns all).
 *      - `offset`: Skips a number of grouped rows in the result set.
 *      - `order`: Specifies which column to order the grouped results by.
 *      - `direction`: Sort order, must be either `asc` or `desc`.
 *      - Filtering arguments on `ShipperID`, `CompanyName`, and `Phone`, supporting `.mt`, `.lt`, `.mteq`, `.lteq`, `.eq`, `.neq`, and `.like`.
 *
 * 2. **Validation**:
 *    - Validates that all mandatory fields are present and contain supported values.
 *    - Ensures the `group_column` and `aggregate_column` belong to an approved list of fields from the `Shippers` table.
 *    - Confirms the aggregation function is one of the allowed keywords.
 *
 * 3. **Database Connection Setup**:
 *    - Establishes a connection to the Northwind SQLite database via the `[generic|northwind]` connector.
 *
 * 4. **Query Construction**:
 *    - Constructs a SQL `GROUP BY` query with a dynamic aggregation clause (e.g., `avg(Shippers.ShipperID)`).
 *    - Ensures the grouping column is explicitly included in the result set.
 *    - Applies aliasing to the aggregated result for clarity (`as:result`).
 *    - Injects optional arguments like `limit`, `offset`, `order`, and `direction` to support pagination and sorting.
 *    - Removes used arguments to prevent re-processing and simplify the query context.
 *    - All valid filtering arguments are applied as `WHERE` conditions using logical `AND`.
 *
 * 5. **Query Execution**:
 *    - Executes a `data.read` command on the `Shippers` table using the dynamically generated group and aggregate configuration.
 *
 * 6. **Response**:
 *    - Returns the grouped results to the client, each containing the grouping key and its corresponding aggregated value.
 *
 * This endpoint provides a **robust and configurable aggregation utility**, enabling advanced reporting and grouped summaries
 * over categorical and numerical fields in the `Shippers` dataset.
 */
.arguments

   // Mandatory argument being column to group by and must be in the format of TABLE_NAME.COLUMN_NAME
   group_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum, avg or count
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments.
    */
   Shippers.ShipperID.mt:long
   Shippers.ShipperID.lt:long
   Shippers.ShipperID.mteq:long
   Shippers.ShipperID.lteq:long
   Shippers.ShipperID.neq:long
   Shippers.ShipperID.eq:long
   Shippers.CompanyName.like:string
   Shippers.CompanyName.mt:string
   Shippers.CompanyName.lt:string
   Shippers.CompanyName.mteq:string
   Shippers.CompanyName.lteq:string
   Shippers.CompanyName.neq:string
   Shippers.CompanyName.eq:string
   Shippers.Phone.like:string
   Shippers.Phone.mt:string
   Shippers.Phone.lt:string
   Shippers.Phone.mteq:string
   Shippers.Phone.lteq:string
   Shippers.Phone.neq:string
   Shippers.Phone.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/group_column
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg
   .:count

// Sanity checking group column.
validators.enum:x:@.arguments/*/group_column
   .:Shippers.ShipperID
   .:Shippers.CompanyName
   .:Shippers.Phone

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Shippers.ShipperID
   .:Shippers.CompanyName
   .:Shippers.Phone

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using the correct group column
   set-name:x:@data.connect/*/data.read/*/group/*/group_column
      get-value:x:@.arguments/*/group_column

   // Making sure we return group column as a part of the result
   set-name:x:+/*/*
      get-value:x:@.arguments/*/group_column
   insert-before:x:@data.connect/*/data.read/*/columns/0
      .
         group_column

   // Changing name of aggregate column returned to caller.
   set-value:x:@data.connect/*/data.read/*/columns/1/*/as
      get-value:x:@.arguments/*/aggregate_function

   // Removing group column to simplify adding other arguments
   remove-nodes:x:@.arguments/*/group_column

   // Adding paging arguments
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:./*/data.read/*/where/*/and
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Shippers
      columns
         aggregate_functor
            as:result
      where
         and
      group
         group_column

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
