
/*
 * Count unique and distinct items from your Customers table in your northwind database.
 *
 * 1. Accepts one **mandatory argument**:
 *    - `distinct_column`: Must be a fully qualified column name like `Customers.Country`.
 *
 * 2. Supports **optional filtering arguments**:
 *    - Includes all columns from the `Customers` table with operators like `.eq`, `.like`, `.lt`, `.gteq`, etc.
 *    - These allow fine-grained filtering of the rows that should be considered during the count.
 *
 * 3. Applies validation using [validators.mandatory] to ensure:
 *    - `distinct_column` is provided.
 *
 * 4. Applies enumeration validation using [validators.enum] to ensure:
 *    - The provided `distinct_column` matches one of the accepted column names from the `Customers` table.
 *
 * 5. Opens a connection to the **SQLite Northwind database** using [data.connect] with the `[generic]` provider.
 *
 * 6. Constructs the aggregation SQL dynamically:
 *    - Uses [strings.concat] to produce a SQL fragment like `count(distinct Customers.City)`.
 *    - This is assigned to the node `distinct_functor`, which [data.read] later executes as part of the SQL.
 *
 * 7. Removes the original `distinct_column` argument using [remove-nodes] to avoid redundant or invalid data in the invocation.
 *
 * 8. Adds any optional filtering arguments into the `where` clause using [add] + [get-nodes].
 *
 * 9. Executes the query using [data.read] against the `Customers` table with:
 *    - The dynamic aggregate column `distinct_functor` returned as `count`.
 *    - All filters applied under the `where/and` node.
 *
 * 10. Returns the result of the read invocation using [return-nodes], returning the distinct count under `count`.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Customers.CustomerID.like:string
   Customers.CustomerID.mt:string
   Customers.CustomerID.lt:string
   Customers.CustomerID.mteq:string
   Customers.CustomerID.lteq:string
   Customers.CustomerID.neq:string
   Customers.CustomerID.eq:string
   Customers.CompanyName.like:string
   Customers.CompanyName.mt:string
   Customers.CompanyName.lt:string
   Customers.CompanyName.mteq:string
   Customers.CompanyName.lteq:string
   Customers.CompanyName.neq:string
   Customers.CompanyName.eq:string
   Customers.ContactName.like:string
   Customers.ContactName.mt:string
   Customers.ContactName.lt:string
   Customers.ContactName.mteq:string
   Customers.ContactName.lteq:string
   Customers.ContactName.neq:string
   Customers.ContactName.eq:string
   Customers.ContactTitle.like:string
   Customers.ContactTitle.mt:string
   Customers.ContactTitle.lt:string
   Customers.ContactTitle.mteq:string
   Customers.ContactTitle.lteq:string
   Customers.ContactTitle.neq:string
   Customers.ContactTitle.eq:string
   Customers.Address.like:string
   Customers.Address.mt:string
   Customers.Address.lt:string
   Customers.Address.mteq:string
   Customers.Address.lteq:string
   Customers.Address.neq:string
   Customers.Address.eq:string
   Customers.City.like:string
   Customers.City.mt:string
   Customers.City.lt:string
   Customers.City.mteq:string
   Customers.City.lteq:string
   Customers.City.neq:string
   Customers.City.eq:string
   Customers.Region.like:string
   Customers.Region.mt:string
   Customers.Region.lt:string
   Customers.Region.mteq:string
   Customers.Region.lteq:string
   Customers.Region.neq:string
   Customers.Region.eq:string
   Customers.PostalCode.like:string
   Customers.PostalCode.mt:string
   Customers.PostalCode.lt:string
   Customers.PostalCode.mteq:string
   Customers.PostalCode.lteq:string
   Customers.PostalCode.neq:string
   Customers.PostalCode.eq:string
   Customers.Country.like:string
   Customers.Country.mt:string
   Customers.Country.lt:string
   Customers.Country.mteq:string
   Customers.Country.lteq:string
   Customers.Country.neq:string
   Customers.Country.eq:string
   Customers.Phone.like:string
   Customers.Phone.mt:string
   Customers.Phone.lt:string
   Customers.Phone.mteq:string
   Customers.Phone.lteq:string
   Customers.Phone.neq:string
   Customers.Phone.eq:string
   Customers.Fax.like:string
   Customers.Fax.mt:string
   Customers.Fax.lt:string
   Customers.Fax.mteq:string
   Customers.Fax.lteq:string
   Customers.Fax.neq:string
   Customers.Fax.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Customers.CustomerID
   .:Customers.CompanyName
   .:Customers.ContactName
   .:Customers.ContactTitle
   .:Customers.Address
   .:Customers.City
   .:Customers.Region
   .:Customers.PostalCode
   .:Customers.Country
   .:Customers.Phone
   .:Customers.Fax

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
