
/*
 * HTTP API endpoint that performs a **count of unique (distinct) values** from a specified column
 * in the `Shippers` table of the Northwind database. The endpoint also supports optional filtering conditions
 * to control which records are included in the count.
 *
 * This is ideal for analytics and reporting scenarios where deduplication of column values is needed,
 * such as counting the number of unique phone numbers or company names among shippers.
 *
 * Here's a detailed breakdown of the logic and flow:
 *
 * 1. **Input Parameters**:
 *    - **Required**:
 *      - `distinct_column`: Specifies the fully qualified column name (e.g., `Shippers.CompanyName`) to perform the distinct count on.
 *        Only `Shippers.ShipperID`, `Shippers.CompanyName`, and `Shippers.Phone` are allowed.
 *    - **Optional Filtering**:
 *      - A wide variety of filters are supported for `ShipperID`, `CompanyName`, and `Phone` using suffix-based operators:
 *        - `.mt`, `.lt`, `.mteq`, `.lteq`, `.eq`, `.neq` for numeric and string comparisons.
 *        - `.like` for SQL LIKE-style pattern matching on string fields.
 *
 * 2. **Validation**:
 *    - Ensures that the `distinct_column` argument is provided.
 *    - Validates that the provided column is within the accepted list for distinct counting.
 *
 * 3. **Database Connection Setup**:
 *    - Establishes a connection to the Northwind database using the `[generic|northwind]` connector with SQLite backend.
 *
 * 4. **Query Assembly**:
 *    - Dynamically creates a SQL expression in the form `count(distinct <column>)`.
 *    - Removes the `distinct_column` from the arguments list to prevent overlap with filtering logic.
 *    - Incorporates all filtering arguments into the `WHERE` clause using logical `AND`.
 *
 * 5. **Execution**:
 *    - Executes a `data.read` call against the `Shippers` table, retrieving a single result
 *      with the alias `count` representing the number of unique values found.
 *
 * 6. **Response**:
 *    - Returns the final count to the caller under the `count` key.
 *
 * This endpoint provides a **streamlined and flexible way** to compute distinct counts from the database,
 * making it highly useful for UI components, validation routines, or reporting dashboards.
 */
.arguments

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   /*
    * Optional filtering arguments.
    */
   Shippers.ShipperID.mt:long
   Shippers.ShipperID.lt:long
   Shippers.ShipperID.mteq:long
   Shippers.ShipperID.lteq:long
   Shippers.ShipperID.neq:long
   Shippers.ShipperID.eq:long
   Shippers.CompanyName.like:string
   Shippers.CompanyName.mt:string
   Shippers.CompanyName.lt:string
   Shippers.CompanyName.mteq:string
   Shippers.CompanyName.lteq:string
   Shippers.CompanyName.neq:string
   Shippers.CompanyName.eq:string
   Shippers.Phone.like:string
   Shippers.Phone.mt:string
   Shippers.Phone.lt:string
   Shippers.Phone.mteq:string
   Shippers.Phone.lteq:string
   Shippers.Phone.neq:string
   Shippers.Phone.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Shippers.ShipperID
   .:Shippers.CompanyName
   .:Shippers.Phone

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:"count(distinct "
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Shippers
      columns
         distinct_functor
            as:count
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
