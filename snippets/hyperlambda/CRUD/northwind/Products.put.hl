
/*
 * HTTP endpoint that updates an existing product record in the "Products" table
 * in the Northwind database.
 *
 * The endpoint requires a valid `ProductID` to identify the record to update.
 * Additional arguments allow updating the product name, supplier ID, category ID,
 * and quantity per unit. These arguments are optional, but only fields provided
 * in the request will be updated.
 *
 * The request is authorized by ensuring the user has the "admin" role.
 *
 * A connection is established to the database, and a conditional update is performed
 * using the given primary key. If no records are affected, the server responds with
 * a 404 Not Found, indicating the product doesn't exist.
 *
 * On successful update, a 202 Accepted HTTP status code is returned, and a socket signal
 * is emitted with metadata to notify consumers of the update.
 *
 * The response payload includes the number of records affected by the update.
 */
.arguments

   // ProductID column value being primary key of record to update, mandatory argument
   ProductID:long

   // ProductName column's new value
   ProductName:string

   // SupplierID column's new value
   SupplierID:long

   // CategoryID column's new value
   CategoryID:long

   // QuantityPerUnit column's new value
   QuantityPerUnit:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/ProductID

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:Products
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   add:x:./*/sockets.signal
      get-nodes:x:@auth.ticket.verify
   set-name:x:./*/sockets.signal/*/auth.ticket.verify
      .:roles
   sockets.signal:northwind.Products.put
      args

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
