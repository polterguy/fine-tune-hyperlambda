
/*
 * Returns minimum, maximum, average or sum from your Customers table in your northwind database.
 *
 * 1. Accepts two **mandatory arguments**:
 *    - `aggregate_function`: Must be one of `min`, `max`, `sum`, or `avg`.
 *    - `aggregate_column`: Must be a fully qualified column name in the format `Customers.ColumnName`.
 *
 * 2. Performs validation:
 *    - Ensures that both `aggregate_function` and `aggregate_column` are provided using [validators.mandatory].
 *    - Validates allowed values using [validators.enum] for:
 *      - `aggregate_function`: Can only be one of `min`, `max`, `sum`, or `avg`.
 *      - `aggregate_column`: Must be one of the permitted columns from the `Customers` table.
 *
 * 3. Establishes a connection to the SQLite `northwind` database using [data.connect] and the `[generic]` provider.
 *
 * 4. Constructs a valid SQL aggregate expression using:
 *    - [strings.concat] to dynamically generate the SQL function: e.g., `avg(Customers.PostalCode)`.
 *    - Stores the result in the node named `aggregate_functor` inside the [data.read] invocation.
 *
 * 5. Removes the original aggregate function and column arguments using [remove-nodes] to clean up the invocation.
 *
 * 6. Adds any optional filter arguments (e.g., `.eq`, `.like`, `.lt`, etc.) into the `where` clause to restrict which rows to aggregate.
 *
 * 7. Invokes [data.read] to perform the actual aggregation:
 *    - From the `Customers` table.
 *    - Adds the dynamic aggregate column as `result`.
 *    - Applies filtering conditions via the `where` clause.
 *    - Limits the result set to 1 record using `limit:long:1`.
 *
 * 8. Returns the result of the aggregation to the caller using [return-nodes], outputting the value as `result`.
 */
.arguments

   // Function to aggregate upon. Argument is mandatory and legal values are min, max, sum or avg
   aggregate_function:string

   // Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME.
   aggregate_column:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    *
    * - .mt implies 'more than'
    * - .lt implies 'less than'
    * - .eq implies 'equal to'
    * - .neq implies 'not equal to'
    * - .mteq implies 'more than or equal to'
    * - .lteq implies 'less than or equal to'
    * - .like becomes a LIKE SQL condition
    */
   Customers.CustomerID.like:string
   Customers.CustomerID.mt:string
   Customers.CustomerID.lt:string
   Customers.CustomerID.mteq:string
   Customers.CustomerID.lteq:string
   Customers.CustomerID.neq:string
   Customers.CustomerID.eq:string
   Customers.CompanyName.like:string
   Customers.CompanyName.mt:string
   Customers.CompanyName.lt:string
   Customers.CompanyName.mteq:string
   Customers.CompanyName.lteq:string
   Customers.CompanyName.neq:string
   Customers.CompanyName.eq:string
   Customers.ContactName.like:string
   Customers.ContactName.mt:string
   Customers.ContactName.lt:string
   Customers.ContactName.mteq:string
   Customers.ContactName.lteq:string
   Customers.ContactName.neq:string
   Customers.ContactName.eq:string
   Customers.ContactTitle.like:string
   Customers.ContactTitle.mt:string
   Customers.ContactTitle.lt:string
   Customers.ContactTitle.mteq:string
   Customers.ContactTitle.lteq:string
   Customers.ContactTitle.neq:string
   Customers.ContactTitle.eq:string
   Customers.Address.like:string
   Customers.Address.mt:string
   Customers.Address.lt:string
   Customers.Address.mteq:string
   Customers.Address.lteq:string
   Customers.Address.neq:string
   Customers.Address.eq:string
   Customers.City.like:string
   Customers.City.mt:string
   Customers.City.lt:string
   Customers.City.mteq:string
   Customers.City.lteq:string
   Customers.City.neq:string
   Customers.City.eq:string
   Customers.Region.like:string
   Customers.Region.mt:string
   Customers.Region.lt:string
   Customers.Region.mteq:string
   Customers.Region.lteq:string
   Customers.Region.neq:string
   Customers.Region.eq:string
   Customers.PostalCode.like:string
   Customers.PostalCode.mt:string
   Customers.PostalCode.lt:string
   Customers.PostalCode.mteq:string
   Customers.PostalCode.lteq:string
   Customers.PostalCode.neq:string
   Customers.PostalCode.eq:string
   Customers.Country.like:string
   Customers.Country.mt:string
   Customers.Country.lt:string
   Customers.Country.mteq:string
   Customers.Country.lteq:string
   Customers.Country.neq:string
   Customers.Country.eq:string
   Customers.Phone.like:string
   Customers.Phone.mt:string
   Customers.Phone.lt:string
   Customers.Phone.mteq:string
   Customers.Phone.lteq:string
   Customers.Phone.neq:string
   Customers.Phone.eq:string
   Customers.Fax.like:string
   Customers.Fax.mt:string
   Customers.Fax.lt:string
   Customers.Fax.mteq:string
   Customers.Fax.lteq:string
   Customers.Fax.neq:string
   Customers.Fax.eq:string

// Sanity checking mandatory arguments.
validators.mandatory:x:@.arguments/*/aggregate_function
validators.mandatory:x:@.arguments/*/aggregate_column

// Sanity checking name of aggregate function.
validators.enum:x:@.arguments/*/aggregate_function
   .:min
   .:max
   .:sum
   .:avg

// Sanity checking agggregate column name.
validators.enum:x:@.arguments/*/aggregate_column
   .:Customers.CustomerID
   .:Customers.CompanyName
   .:Customers.ContactName
   .:Customers.ContactTitle
   .:Customers.Address
   .:Customers.City
   .:Customers.Region
   .:Customers.PostalCode
   .:Customers.Country
   .:Customers.Phone
   .:Customers.Fax

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct aggregate function.
   set-name:x:./*/data.read/*/columns/*/aggregate_functor
      strings.concat
         get-value:x:@.arguments/*/aggregate_function
         .:(
         get-value:x:@.arguments/*/aggregate_column
         .:)

   // Removing aggregate arguments to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/[0,2]

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Customers
      columns
         aggregate_functor
            as:result
      where
         and
      limit:long:1

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
