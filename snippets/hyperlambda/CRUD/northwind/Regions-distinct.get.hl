
/*
 * HTTP API endpoint that retrieves **distinct (unique) values** from a specified column in the `Regions` table
 * of the Northwind database. This endpoint supports filtering, pagination, and sorting for flexible client-side consumption.
 *
 * It is designed to return a deduplicated list of values from a given column, making it ideal for populating dropdowns,
 * building filter panels, or exploring categorical data from the database.
 *
 * Below is a detailed explanation of the main operations performed by the endpoint:
 *
 * 1. **Input Parameters**:
 *    - **Required**:
 *      - `distinct_column`: Specifies the fully qualified column (e.g., `Regions.RegionID`) to return distinct values for.
 *        Only `Regions.RegionID` and `Regions.RegionDescription` are allowed.
 *    - **Optional**:
 *      - `limit`: Specifies how many records to return. Defaults to 25 if not explicitly set. Pass `-1` to return all results.
 *      - `offset`: Indicates how many records to skip from the beginning of the result set.
 *      - `order`: Column to sort by, must be in `TABLE_NAME.COLUMN_NAME` format.
 *      - `direction`: Sort direction, must be either `asc` or `desc`.
 *      - Filtering conditions on both `RegionID` (numeric) and `RegionDescription` (text) using operators like `.mt`, `.lt`, `.eq`, `.like`, etc.
 *
 * 2. **Validation**:
 *    - Verifies that `distinct_column` is provided.
 *    - Ensures that `distinct_column` is one of the allowed columns (`Regions.RegionID`, `Regions.RegionDescription`).
 *
 * 3. **Database Connection**:
 *    - Opens a connection to the Northwind database using the `[generic|northwind]` data connector with SQLite backend.
 *
 * 4. **Query Construction**:
 *    - Dynamically builds the `SELECT distinct(<column>)` SQL expression.
 *    - Removes `distinct_column` from the argument list to avoid confusion during filtering and query assembly.
 *    - Injects `limit`, `offset`, `order`, and `direction` arguments directly into the query.
 *    - Applies all available filter arguments into the `WHERE` clause using `AND` logic.
 *
 * 5. **Database Query Execution**:
 *    - Executes a `data.read` operation that returns a list of unique values for the specified column.
 *    - Supports result pagination and custom sorting based on provided input parameters.
 *
 * 6. **Response Handling**:
 *    - Returns the list of distinct values as-is to the HTTP client.
 *
 * This endpoint offers a powerful and reusable mechanism to expose column-level distinct data from a database table,
 * while remaining fully filterable, sortable, and pageable, ensuring efficient and tailored data retrieval.
 */
.arguments

   // Name of column to return unique and distinct values for. Argument is mandatory and must be in the format of TABLE_NAME.COLUMN_NAME
   distinct_column:string

   // Number of records to return, defaults to 25 if not specified. Pass in -1 to return all records.
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // Fully qualified name of column to order by, must be in TABLE_NAME.COLUMN_NAME format
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   /*
    * Optional filtering arguments, allowing you to filter what rows to consider.
    */
   Regions.RegionID.mt:long
   Regions.RegionID.lt:long
   Regions.RegionID.mteq:long
   Regions.RegionID.lteq:long
   Regions.RegionID.neq:long
   Regions.RegionID.eq:long
   Regions.RegionDescription.like:string
   Regions.RegionDescription.mt:string
   Regions.RegionDescription.lt:string
   Regions.RegionDescription.mteq:string
   Regions.RegionDescription.lteq:string
   Regions.RegionDescription.neq:string
   Regions.RegionDescription.eq:string

// Sanity checking that distinct column was passed in.
validators.mandatory:x:@.arguments/*/distinct_column

// Sanity checking distinct column's name.
validators.enum:x:@.arguments/*/distinct_column
   .:Regions.RegionID
   .:Regions.RegionDescription

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Making sure we're using correct function.
   set-name:x:./*/data.read/*/columns/*/distinct_functor
      strings.concat
         .:distinct(
         get-value:x:@.arguments/*/distinct_column
         .:)

   // Removing distinct argument to simplify adding other arguments.
   remove-nodes:x:@.arguments/*/distinct_column

   // Adding [limit] and [offset] arguments
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Adding filtering arguments.
   add:x:+/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:Regions
      columns
         distinct_functor
            as:.
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*/*
