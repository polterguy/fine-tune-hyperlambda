
/*
 * Update one record in your CustomerDemographics table in your northwind database.
 *
 * 1. Accepts two arguments:
 *    - `CustomerTypeID` (required): The primary key used to identify the record.
 *    - `CustomerDesc` (optional): The new description value to update.
 *
 * 2. Validates that the `CustomerTypeID` argument is provided using [validators.mandatory].
 *
 * 3. Authorizes the user by requiring a valid ticket with 'admin' role using [auth.ticket.verify].
 *
 * 4. Opens a connection to the Northwind SQLite database using [data.connect] and the [generic] connection.
 *
 * 5. Prepares the values to update and the where condition:
 *    - Adds all non-primary key arguments to the [values] part of [data.update].
 *    - Adds the primary key (`CustomerTypeID`) to the [where] condition.
 *
 * 6. Executes [data.update] to apply changes in the CustomerDemographics table.
 *
 * 7. If no records were affected (i.e., the record doesn't exist), returns a 404 HTTP status with a "Record not found" message.
 *
 * 8. If the update succeeds:
 *    - Returns HTTP status 202 (Accepted).
 *    - Publishes a [sockets.signal] message named `northwind.CustomerDemographics.put`, containing:
 *      - The arguments used for the update
 *      - The roles from the current authorization ticket.
 *
 * 9. Unwraps the update result and returns the number of affected rows as `affected`.
 */
.arguments

   // CustomerTypeID column value being primary key of record to update, mandatory argument
   CustomerTypeID:string

   // CustomerDesc column's new value
   CustomerDesc:string

// Sanity checking invocation, making sure primary key(s) are specified.
validators.mandatory:x:@.arguments/*/CustomerTypeID

// Verifying user is authorized to access endpoint.
auth.ticket.verify:admin

// Opening up our database connection.
data.connect:[generic|northwind]
   database-type:sqlite

   // Parametrising our invocation.
   add:x:./*/data.update/*/values
      get-nodes:x:@.arguments/*/[1,1000]
   add:x:./*/data.update/*/where/*/and
      get-nodes:x:@.arguments/*/[0,1]

   // Invoking our update slot.
   data.update
      database-type:sqlite
      table:CustomerDemographics
      values
      where
         and

   // Verifying record exists.
   if
      eq
         get-value:x:@data.update
         .:int:0
      .lambda
         response.status.set:404
         return
            result:Record not found

   // Returning the correct status code.
   response.status.set:202

   // Publishing socket message.
   add:x:./*/sockets.signal/*/args
      get-nodes:x:@.arguments/*
   add:x:./*/sockets.signal
      get-nodes:x:@auth.ticket.verify
   set-name:x:./*/sockets.signal/*/auth.ticket.verify
      .:roles
   sockets.signal:northwind.CustomerDemographics.put
      args

   // Returning success to caller.
   unwrap:x:+/*
   return
      affected:x:@data.update
