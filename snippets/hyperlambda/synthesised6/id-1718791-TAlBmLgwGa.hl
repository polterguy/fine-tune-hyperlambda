
// Iterate through each child node of the [disallow] node inside [.arguments], and for each node, evaluate the following: Unwrap all of its children, then invoke the [.match] slot with [url] set to the value of the first element in [sort], and [pattern] to the value of the currently iterated node by reference. If the result of [invoke] is true, set [.allowed] to boolean false. Then, for each child node of the [allow] node inside [.arguments], unwrap all its children, invoke [.match] with the same [url] and [pattern] as above, and if [invoke] returns true, set [.allowed] to boolean true.
for-each:x:@.arguments/*/disallow/*
   unwrap:x:+/*
   invoke:x:@.match
      url:x:@sort/0
      pattern:x:@.dp/#
   if
      get-value:x:@invoke
      .lambda
         set-value:x:@.allowed
            .:bool:false
         for-each:x:@.arguments/*/allow/*
            unwrap:x:+/*
            invoke:x:@.match
               url:x:@sort/0
               pattern:x:@.dp/#
            if
               get-value:x:@invoke
               .lambda
                  set-value:x:@.allowed
                     .:bool:true
