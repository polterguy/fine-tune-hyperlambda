
/*
 * Create a conditional block that processes [.dp/#] if it is not null and not empty. Replace all carriage returns, newlines, tabs, and double spaces in the value of [.dp/#] with single spaces, chaining the result through multiple [strings.replace] invocations. If the name of the parent node of [.dp/#] is "a", and an "@href" attribute exists and is not null on the parent node, then further process the "@href" value:  
 * - If "@href" starts with "/", concatenate [.base] and the "@href" value and assign to [.url].
 * - Else if "@href" does not start with "http://" or "https://", concatenate [.base], "/", and the "@href" value and assign to [.url].
 * - Else, use the "@href" value directly as [.url].
 * Then, append to [.completion] the current value of [.completion], a space, an opening square bracket, the trimmed value of the most recent [strings.replace], an opening parenthesis, the [.url] value, a closing parenthesis, and a space.  
 * If the parent node is not an "a" tag with an "@href", append to [.completion] the current value of [.completion], the trimmed result of the most recent [strings.replace], and a space. Use [strings.trim] and [strings.replace] to clean up whitespace and non-breaking spaces as shown.
 */
if
   and
      not-null:x:@.dp/#
      neq:x:@.dp/#
         .:
   .lambda
      strings.replace:x:@.dp/#
         .:"\r"
         .:" "
      strings.replace:x:@strings.replace
         .:"\n"
         .:" "
      strings.replace:x:@strings.replace
         .:"\t"
         .:" "
      strings.replace:x:@strings.replace
         .:"  "
         .:" "
      if
         and
            eq
               get-name:x:@.dp/#/.
               .:a
            exists:x:"@.dp/#/./*/\\@href/[0,1]"
            not-null:x:"@.dp/#/./*/\\@href/[0,1]"
         .lambda
            .url
            if
               strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                  .:/
               .lambda
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.base
                        get-value:x:"@.dp/#/./*/\\@href/[0,1]"
            else-if
               and
                  not
                     strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                        .:"http://"
                  not
                     strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                        .:"https://"
               .lambda
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.base
                        .:/
                        get-value:x:"@.dp/#/./*/\\@href/[0,1]"
            else
               set-value:x:@.url
                  get-value:x:"@.dp/#/./*/\\@href/[0,1]"
            set-value:x:@.completion
               strings.concat
                  get-value:x:@.completion
                  .:" "
                  .:[
                  strings.trim:x:@strings.replace
                     .:@"  
	"
                  .:](
                  get-value:x:@.url
                  .:)
                  .:" "
      else
         set-value:x:@.completion
            strings.concat
               get-value:x:@.completion
               strings.trim:x:@strings.replace
                  .:@"  
	"
               .:" "
