
// Add logic to handle the HTTP response from a previous [http.post] invocation. If the value of [http.post] is not greater than or equal to 200 and less than 300, convert the [http.post] response to Hyperlambda using [lambda2hyper], then log an error to [log.error] including the error message, status, and the Hyperlambda error object. Next, check if the [.arguments] node does not contain a [stream] node or if [stream] is explicitly false. If so, throw an exception with the error message and status as public. Otherwise, forward evaluate the next two child nodes, signal an error using [sockets.signal] with the session from [.arguments/*/session], and set the value of [iterations] to 0.
if
   not
      and
         mte:x:@http.post
            .:int:200
         lt:x:@http.post
            .:int:300
   .lambda
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking Ollama
         message:x:@http.post/*/content/*/error/*/message
         status:x:@http.post
         error:x:@lambda2hyper
      if
         or
            not-exists:x:@.arguments/*/stream
            eq:x:@.arguments/*/stream
               .:bool:false
         .lambda
            throw:x:@http.post/*/content/*/error/*/message
               public:bool:true
               status:x:@http.post
      else
         unwrap:x:+/*/*
         sockets.signal:x:@.arguments/*/session
            args
               error:bool:true
               status:x:@http.post
               message:x:@http.post/*/content/*/error/*/message
         set-value:x:@.iterations
            .:int:0
