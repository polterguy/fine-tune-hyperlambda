
/*
 * Write conditional Hyperlambda logic to construct a full URL from a base and a relative path found in [@.dp/#/*/\@src/[0,1]], handling various cases:
 * - If the path does not start with "http://" or "https://", check if it starts with "://", "/", or neither.
 *   - If it starts with "://", split [.base] at "://", then concatenate the protocol, ":", and the path to form the URL and set [.url].
 *   - If it starts with "/", concatenate [.base] and the path directly and set [.url].
 *   - Otherwise, concatenate [.base], "/", and the path, and set [.url].
 */
if
   and
      not
         strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
            .:"http://"
      not
         strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
            .:"https://"
   .lambda
      if
         strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
            .://
         .lambda
            strings.split:x:@.base
               .:"://"
            set-value:x:@.url
               strings.concat
                  get-value:x:@strings.split/0
                  .:":"
                  get-value:x:"@.dp/#/*/\\@src/[0,1]"
      else-if
         strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
            .:/
         .lambda
            set-value:x:@.url
               strings.concat
                  get-value:x:@.base
                  get-value:x:"@.dp/#/*/\\@src/[0,1]"
      else
         set-value:x:@.url
            strings.concat
               get-value:x:@.base
               .:/
               get-value:x:"@.dp/#/*/\\@src/[0,1]"
