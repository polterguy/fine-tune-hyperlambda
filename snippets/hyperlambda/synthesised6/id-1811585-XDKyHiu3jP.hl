
// Iterate through all [#text] descendant nodes in the node referenced by [.dp] using [for-each]. For each such node, if it is not null and not empty, replace all carriage returns, line feeds, tabs, and double spaces with a single space using consecutive [strings.replace] calls. Then, if the parent element is an [a] tag and it has a non-null [@href] attribute, build a URL by combining the [.base] node with the [@href] value, handling absolute and relative cases. After constructing the URL, append the trimmed text in the format `[text](url)` to the [.completion] node. If the [#text] node is not inside an [a] tag with a valid [@href], simply trim and append the text followed by a space to [.completion].
for-each:x:"@.dp/#/**/\\#text"
   if
      and
         not-null:x:@.dp/#
         neq:x:@.dp/#
            .:
      .lambda
         strings.replace:x:@.dp/#
            .:"\r"
            .:" "
         strings.replace:x:@strings.replace
            .:"\n"
            .:" "
         strings.replace:x:@strings.replace
            .:"\t"
            .:" "
         strings.replace:x:@strings.replace
            .:"  "
            .:" "
         if
            and
               eq
                  get-name:x:@.dp/#/.
                  .:a
               exists:x:"@.dp/#/./*/\\@href/[0,1]"
               not-null:x:"@.dp/#/./*/\\@href/[0,1]"
            .lambda
               .url
               if
                  strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                     .:/
                  .lambda
                     set-value:x:@.url
                        strings.concat
                           get-value:x:@.base
                           get-value:x:"@.dp/#/./*/\\@href/[0,1]"
               else-if
                  and
                     not
                        strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                           .:"http://"
                     not
                        strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                           .:"https://"
                  .lambda
                     set-value:x:@.url
                        strings.concat
                           get-value:x:@.base
                           .:/
                           get-value:x:"@.dp/#/./*/\\@href/[0,1]"
               else
                  set-value:x:@.url
                     get-value:x:"@.dp/#/./*/\\@href/[0,1]"
               set-value:x:@.completion
                  strings.concat
                     get-value:x:@.completion
                     .:" "
                     .:[
                     strings.trim:x:@strings.replace
                        .:@"  
	"
                     .:](
                     get-value:x:@.url
                     .:)
                     .:" "
         else
            set-value:x:@.completion
               strings.concat
                  get-value:x:@.completion
                  strings.trim:x:@strings.replace
                     .:@"  
	"
                  .:" "
