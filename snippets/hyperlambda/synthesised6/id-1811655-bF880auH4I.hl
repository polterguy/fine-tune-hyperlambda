
// Create a loop that continues as long as there are nodes in [.urls] and the count of [.done] is less than the value of [.arguments/*/max]. Each iteration should: send an info signal to the feedback channel, sleep for 100 milliseconds, unwrap the next sibling nodes, signal [magic.ai.url.scrape] for the first URL in [.urls] with parameters from [.arguments], add the processed URL to [.done], remove it from [.urls], and for each result in [signal], check if it does not already exist in [.done] or [.urls] and starts with the given argument URL; if so, add it to [.urls]. Then, concatenate a waiting message indicating the delay, unwrap the result, send another info signal, sleep for 100 milliseconds, and finally sleep for the configured delay amount.
while
   and
      exists:x:@.urls/*
      lt
         get-count:x:@.done/*
         get-value:x:@.arguments/*/max
   .lambda
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:------------------------------------------------------------------------------------------------------------------------
            type:info
      sleep:100
      unwrap:x:+/*
      signal:magic.ai.url.scrape
         url:x:@.urls/0
         type:x:@.arguments/*/type
         images:bool:true
         code:bool:true
         lists:bool:true
         main:bool:true
         empty-completion:bool:false
         threshold:x:@.arguments/*/threshold
         summarize:x:@.arguments/*/summarize
         feedback-channel:x:@.arguments/*/feedback-channel
      add:x:@.done
         get-nodes:x:@.urls/0
      remove-nodes:x:@.urls/0
      for-each:x:@signal/*
         if
            and
               not-exists:x:"@.done/*/\"={@.dp/#}\""
               not-exists:x:"@.urls/*/\"={@.dp/#}\""
               strings.starts-with:x:@.dp/#
                  get-value:x:@.arguments/*/url
            .lambda
               add:x:@.urls
                  get-nodes:x:@.dp/#
      strings.concat
         .:"Waiting for "
         math.divide:x:@.arguments/*/delay
            .:int:1000
         .:" seconds to avoid exhausting web server"
      unwrap:x:+/**
      sockets.signal:x:@.arguments/*/feedback-channel
         args
            message:x:@strings.concat
            type:info
      sleep:100
      sleep:x:@.arguments/*/delay
