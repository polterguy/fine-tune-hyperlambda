
/*
 * If the previous condition does not match, execute the [magic.ai.functions.invoke] slot, passing in the value of the [.type], [.session], [.user-id], and the current [.dp/#] as the [invocation] argument. Then, convert the [result] node(s) returned from the [execute] slot to JSON using [lambda2json], enabling formatting by setting [format] to true.
 * 
 * Next, check if the token count of the generated JSON (using [openai.tokenize] on [lambda2json]) is greater than the [max_context_tokens] argument from [.arguments]. If it is, throw an exception with status 400 and a public error message indicating the result is too large.
 * 
 * Retrieve a success message from configuration using [config.get] with the key "magic:chat:functions:success-message", defaulting to "Success!". Unwrap the result of the previous configuration retrieval, and send a signal via [sockets.signal] to the session specified by [.session], including the function result, the invocation JSON, and the workflow file.
 * 
 * If the [execute] result contains children nodes, set the value of [.new-prompt] by concatenating its previous value with a formatted response message, including the workflow name and the JSON-formatted result. Also, set [.function-result] to the value of [lambda2json].
 * 
 * If the [execute] result does not contain children, set [.new-prompt] by concatenating its previous value with a simple success message referencing the workflow name.
 */
else
   execute:magic.ai.functions.invoke
      type:x:@.type
      session:x:@.session
      user-id:x:@.user-id
      invocation:x:@.dp/#
   lambda2json:x:@execute/*/result/*
      format:true
   if
      mt
         openai.tokenize:x:@lambda2json
         get-value:x:@.arguments/@.arguments/*/max_context_tokens
      .lambda
         throw:Result too large, try to limit your result
            status:int:400
            public:bool:true
   config.get:"magic:chat:functions:success-message"
      .:Success!
   unwrap:x:+/*/*
   sockets.signal:x:@.session
      args
         function_result:x:@config.get
         invocation:x:@execute/*/json
         file:x:@execute/*/workflow
   if
      exists:x:@execute/*/result/*
      .lambda
         set-value:x:@.new-prompt
            strings.concat
               get-value:x:@.new-prompt
               .:"Response from '"
               get-value:x:@execute/*/workflow
               .:@"' was:
```json
"
               get-value:x:@lambda2json
               .:@"
"
               .:```
               .:@"
"
               .:@"
"
         set-value:x:@.function-result
            get-value:x:@lambda2json
   else
      set-value:x:@.new-prompt
         strings.concat
            get-value:x:@.new-prompt
            .:"Invocation of '"
            get-value:x:@execute/*/workflow
            .:"' was a success."
            .:@"
"
            .:@"
"
