
// Create a Hyperlambda loop that processes a list of nodes referenced by [@sort/0] while [@.arguments/*/max] is greater than 0 and [@sort/0] exists. For each iteration, set [.allowed] to true, then for each pattern in [.arguments/*/disallow/*], check if the current node's URL matches the pattern (using [invoke:x:@.match]), and if so, set [.allowed] to false. If a match is found in [.arguments/*/disallow/*], iterate through [.arguments/*/allow/*] and set [.allowed] back to true if any allow pattern matches. If [.arguments/*/filter-on-url] is true, [.arguments/*/url] exists and is not null or empty, and the current URL in [@sort/0] does not start with [.arguments/*/url], set [.allowed] to false. If [.allowed] is true, add the current node to [.return] and decrement [.arguments/*/max]; otherwise, increment [.ignored]. Finally, remove the current node from [@sort/0] in each iteration.
while
   and
      mt:x:@.arguments/*/max
         .:int:0
      exists:x:@sort/0
   .lambda
      .allowed:bool:true
      for-each:x:@.arguments/*/disallow/*
         unwrap:x:+/*
         invoke:x:@.match
            url:x:@sort/0
            pattern:x:@.dp/#
         if
            get-value:x:@invoke
            .lambda
               set-value:x:@.allowed
                  .:bool:false
               for-each:x:@.arguments/*/allow/*
                  unwrap:x:+/*
                  invoke:x:@.match
                     url:x:@sort/0
                     pattern:x:@.dp/#
                  if
                     get-value:x:@invoke
                     .lambda
                        set-value:x:@.allowed
                           .:bool:true
      if
         and
            get-value:x:@.arguments/*/filter-on-url
            exists:x:@.arguments/*/url
            not-null:x:@.arguments/*/url
            neq:x:@.arguments/*/url
               .:
            not
               strings.starts-with:x:@sort/0
                  get-value:x:@.arguments/*/url
         .lambda
            set-value:x:@.allowed
               .:bool:false
      if
         eq:x:@.allowed
            .:bool:true
         .lambda
            add:x:@.return
               get-nodes:x:@sort/0
            math.decrement:x:@.arguments/*/max
      else
         math.increment:x:@.ignored
      remove-nodes:x:@sort/0
