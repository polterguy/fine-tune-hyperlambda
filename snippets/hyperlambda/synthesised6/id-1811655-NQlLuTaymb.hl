
/*
 * Create an [else] block to handle the case where no valid sitemaps are found. In this block, initialize [.urls] and [.done] nodes, then use [unwrap:x:+/*/*] to evaluate all expressions under the current node. Add the main [.arguments/*/url] to [.urls], and use [sockets.signal] to send warning and info messages to the feedback channel, with [sleep] pauses between signals.
 * 
 * Next, implement a [while] loop that continues as long as [.urls] has children and the count of [.done] is less than [.arguments/*/max]. Inside the loop, send a separator info message via [sockets.signal], pause with [sleep], and unwrap all child expressions. Use [signal:magic.ai.url.scrape] to crawl the first URL in [.urls], passing in relevant arguments from [.arguments]. After each crawl, add the processed URL to [.done], remove it from [.urls], and for each result in [signal/*], check if it's not already present in [.done] or [.urls] and if it starts with the original URL; if so, add it to [.urls].
 * 
 * Concatenate a waiting message using [strings.concat] and [math.divide] to convert the delay to seconds, unwrap the result, signal it to the feedback channel, and sleep for both a short and the specified delay. 
 * 
 * After the loop, send a separator message, wait, then signal completion with the total count of scraped URLs using [strings.concat] and [unwrap]. Finally, log the completion with [log.info], and if an [.onafter] handler exists in [.arguments], evaluate it.
 */
else
   .urls
   .done
   unwrap:x:+/*/*
   add:x:@.urls
      .
         .:x:@.arguments/*/url
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:Could not find any valid sitemaps
         type:warning
   sleep:100
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:Trying to crawl site even though we did not find a valid sitemap
         type:info
   sleep:100
   while
      and
         exists:x:@.urls/*
         lt
            get-count:x:@.done/*
            get-value:x:@.arguments/*/max
      .lambda
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:------------------------------------------------------------------------------------------------------------------------
               type:info
         sleep:100
         unwrap:x:+/*
         signal:magic.ai.url.scrape
            url:x:@.urls/0
            type:x:@.arguments/*/type
            images:bool:true
            code:bool:true
            lists:bool:true
            main:bool:true
            empty-completion:bool:false
            threshold:x:@.arguments/*/threshold
            summarize:x:@.arguments/*/summarize
            feedback-channel:x:@.arguments/*/feedback-channel
         add:x:@.done
            get-nodes:x:@.urls/0
         remove-nodes:x:@.urls/0
         for-each:x:@signal/*
            if
               and
                  not-exists:x:"@.done/*/\"={@.dp/#}\""
                  not-exists:x:"@.urls/*/\"={@.dp/#}\""
                  strings.starts-with:x:@.dp/#
                     get-value:x:@.arguments/*/url
               .lambda
                  add:x:@.urls
                     get-nodes:x:@.dp/#
         strings.concat
            .:"Waiting for "
            math.divide:x:@.arguments/*/delay
               .:int:1000
            .:" seconds to avoid exhausting web server"
         unwrap:x:+/**
         sockets.signal:x:@.arguments/*/feedback-channel
            args
               message:x:@strings.concat
               type:info
         sleep:100
         sleep:x:@.arguments/*/delay
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:------------------------------------------------------------------------------------------------------------------------
         type:info
   sleep:100
   strings.concat
      .:"Done scraping "
      get-count:x:@.done/*
      .:" URLs"
   unwrap:x:+/**
   sockets.signal:x:@.arguments/*/feedback-channel
      args
         message:x:@strings.concat
         type:info
   sleep:100
   log.info:OpenAI training data successfully created
      url:x:@.arguments/*/url
      type:x:@.arguments/*/type
   if
      exists:x:@.arguments/*/.onafter
      .lambda
         eval:x:@.arguments/*/.onafter
