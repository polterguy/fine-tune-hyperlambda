
/*
 * Create a conditional block that checks if the current [.dp] node has a [completion] child node that is not null. If this is true, then check if the length of the [completion] value is greater than the [threshold] argument. If this second condition is also true, add the [type] argument to the next sibling node, trigger the [magic.ai.can-create-snippet] signal, and construct a concatenated string that includes the [completion] value, two linebreaks, and the phrase "This information was taken from [this URL](" followed by a percent character. Then, query the [ml_training_snippets] table for rows where the [type] matches the argument and [completion] is either exactly equal to or similar to the concatenated string. 
 * 
 * If no such row exists, and if the [insert_url] argument is true, append the [url] value to the [completion] string in the same format and insert a new row into [ml_training_snippets] with the given [type], [url], [prompt], [completion], and a [meta] value of "AINIRO-Website-Crawler". 
 * 
 * If a matching row exists and its [prompt] is "Common", increment the [.already-exists] counter. 
 * 
 * If a row exists but its [prompt] does not match the current [prompt], increment the [.similar] counter and update the row's [prompt] to "Common" using its [id]. 
 * 
 * If the [completion] length does not exceed the threshold, increment the [.below-threshold] counter.
 */
if
   and
      exists:x:@.dp/#/*/completion
      not-null:x:@.dp/#/*/completion
   .lambda
      if
         mt
            strings.length:x:@.dp/#/*/completion
            get-value:x:@.arguments/*/threshold
         .lambda
            add:x:+
               get-nodes:x:@.arguments/*/type
            try-signal:magic.ai.can-create-snippet
            strings.concat
               get-value:x:@.dp/#/*/completion
               .:@"
"
               .:@"
"
               .:This information was taken from [this URL](
               .:%
            data.read
               table:ml_training_snippets
               columns
                  id
                  prompt
                  completion
                  uri
               where
                  and
                     type.eq:x:@.arguments/*/type
                     or
                        completion.eq:x:@.dp/#/*/completion
                        completion.like:x:@strings.concat
            if
               not-exists:x:@data.read/*
               .lambda
                  if:x:@.arguments/*/insert_url
                     set-value:x:@.dp/#/*/completion
                        strings.concat
                           get-value:x:@.dp/#/*/completion
                           .:@"
"
                           .:@"
"
                           .:This information was taken from [this URL](
                           get-value:x:@.arguments/*/url
                           .:)
                  data.create
                     table:ml_training_snippets
                     values
                        type:x:@.arguments/*/type
                        uri:x:@.arguments/*/url
                        prompt:x:@.dp/#/*/prompt
                        completion:x:@.dp/#/*/completion
                        meta:AINIRO-Website-Crawler
            else-if
               eq:x:@data.read/0/*/prompt
                  .:Common
               .lambda
                  math.increment:x:@.already-exists
            else-if
               not
                  eq:x:@data.read/*/*/prompt
                     get-value:x:@.dp/#/*/prompt
               .lambda
                  math.increment:x:@.similar
                  data.update
                     table:ml_training_snippets
                     values
                        prompt:Common
                     where
                        and
                           id.eq:x:@data.read/0/*/id
      else
         math.increment:x:@.below-threshold
