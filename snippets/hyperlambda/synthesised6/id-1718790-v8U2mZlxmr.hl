
/*
 * Handle the [case] where the node name is "crawl-delay":  
 * - First, sanitize the value in [.value] by replacing any characters not in "0123456789" with an empty string using [strings.replace-not-of], and assign the result back to [.value].
 * - If both [.relevant] is true and [.value] is not empty, then:
 *   - Try to set [.crawl-delay] to the integer value of [.value] multiplied by 1000 (converting seconds to milliseconds).
 *   - If [.crawl-delay] is more than 60000 (60 seconds), send a warning message through the feedback channel using [sockets.signal] and set [.crawl-delay] to 60000.
 *   - If an exception occurs (e.g., [.value] is not a valid integer), catch it, send a warning message through the feedback channel, and set [.crawl-delay] to 10000 (10 seconds).
 */
case:crawl-delay
   set-value:x:@.value
      strings.replace-not-of:x:@.value
         .:0123456789
         .:
   if
      and
         eq:x:@.relevant
            .:bool:true
         neq:x:@.value
            .:
      .lambda
         try
            set-value:x:@.crawl-delay
               math.multiply
                  .:int:1000
                  convert:x:@.value
                     type:int
            if
               mt:x:@.crawl-delay
                  .:int:60000
               .lambda
                  sockets.signal:x:@.arguments/*/feedback-channel
                     args
                        message:Crawl-Delay was more than 60 seconds, using 60 seconds as our value
                        type:warning
                  set-value:x:@.crawl-delay
                     .:int:60000
         .catch
            sockets.signal:x:@.arguments/*/feedback-channel
               args
                  message:Crawl-Delay was not a valid integer value, using 10 seconds as our value
                  type:warning
            set-value:x:@.crawl-delay
               .:int:10000
