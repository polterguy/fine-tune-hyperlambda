
// Create a [while] loop that continues as long as the value of the [.cont] node is true. Inside the loop, use [lambda2hyper] to convert all children of the [.session] node to lambda, and check if the sum of the [max_tokens] argument, the number of tokens from [openai.tokenize] on the converted lambda, and the value of [.extra-tokens] is less than the [model_size] argument. If this condition is true, set [.cont] to false. Otherwise, concatenate the [.session] path with the value from [.fixed] using [strings.concat], then call [set-x] on the [remove-nodes] sibling node, passing in the result of converting the concatenated string to type "x". Finally, remove the corresponding nodes using [remove-nodes].
while:x:@.cont
   lambda2hyper:x:@.session/*
   if
      lt
         math.add
            get-value:x:@.arguments/*/max_tokens
            openai.tokenize:x:@lambda2hyper
            get-value:x:@.extra-tokens
         get-value:x:@.arguments/*/model_size
      .lambda
         set-value:x:@.cont
            .:bool:false
   else
      strings.concat
         .:@.session/
         get-value:x:@.fixed
      set-x:x:./*/remove-nodes
         convert:x:@strings.concat
            type:x
      remove-nodes
