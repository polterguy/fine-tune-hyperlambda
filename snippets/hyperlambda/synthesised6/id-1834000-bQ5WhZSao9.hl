
// Create a Hyperlambda script that, after parsing a Hyperlambda file using [hyper2lambda], checks whether the root node's name is "..". If it is, extract the prompt from [hyper2lambda/0], remove this node, and use [lambda2hyper] (with comments preserved) to convert the remaining lambda structure back to Hyperlambda text. Then, if the first remaining node is "data.read" and the second is "yield", "return-nodes", or "return", delete the file. Otherwise, perform validation checks including a randomized check based on the value of [.no] and the presence of specific strings in the file's content. Determine if the file is synthesised by checking for "/synthesised" in its content. Attempt to insert the prompt and code into a "hyperlambda" table if it does not already exist, incrementing [.no] on success. If duplicate deletion is required (indicated by [.delete_duplicates]), delete the file.
if
   eq
      get-name:x:@hyper2lambda/0
      .:..
   .lambda
      .prompt
      set-value:x:-
         get-value:x:@hyper2lambda/0
      remove-nodes:x:@hyper2lambda/0
      lambda2hyper:x:@hyper2lambda/*
         comments:true
      if
         and
            eq
               get-name:x:@hyper2lambda/0
               .:data.read
            eq
               get-count:x:@hyper2lambda/*
               .:int:2
            or
               eq
                  get-name:x:@hyper2lambda/1
                  .:yield
               eq
                  get-name:x:@hyper2lambda/1
                  .:return-nodes
               eq
                  get-name:x:@hyper2lambda/1
                  .:return
         .lambda
            io.file.delete:x:@.dp/#
      else
         .validation:int:0
         if
            and
               eq:x:@.arguments/*/randomize
                  .:int:1
               eq
                  math.modulo:x:@.no
                     .:int:8
                  .:int:0
            .lambda
               set-value:x:@.validation
                  .:int:1
         else-if
            strings.contains:x:@.dp/#
               .:/validation/
            .lambda
               set-value:x:@.validation
                  .:int:1
         .synthesised:int:0
         if
            strings.contains:x:@.dp/#
               .:/synthesised
            .lambda
               set-value:x:@.synthesised
                  .:int:1
         data.connect:fine-tune
            .exists:bool:false
            data.read
               table:hyperlambda
               where
                  and
                     code.eq:x:@lambda2hyper
               limit:1
            if
               not-exists:x:@data.read/*
               .lambda
                  data.create
                     table:hyperlambda
                     values
                        prompt:x:@.prompt
                        code:x:@lambda2hyper
                        validation:x:@.validation
                        synthesised:x:@.synthesised
                  math.increment:x:@.no
            else-if:x:@.delete_duplicates
               io.file.delete:x:@.dp/#
