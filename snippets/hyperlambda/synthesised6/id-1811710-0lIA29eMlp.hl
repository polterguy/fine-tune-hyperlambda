
// Check if the [.arguments/*/session] node exists, is not null, and is not equal to an empty value using [and], [exists], [not-null], and [neq] as conditions for an [if] statement. If all conditions are true, retrieve the cached session with [cache.get] using the value of [.arguments/*/session]. If the retrieved value is not null, convert [.arguments/*/max_session_items] to an integer, transform the cached session value from Hyperlambda to a lambda object using [hyper2lambda], and while the number of nodes in the result is greater than the converted maximum, remove the first node. Finally, add all nodes from the [hyper2lambda] result to the [.session] node.
if
   and
      exists:x:@.arguments/*/session
      not-null:x:@.arguments/*/session
      neq:x:@.arguments/*/session
         .:
   .lambda
      cache.get:x:@.arguments/*/session
      if
         not-null:x:@cache.get
         .lambda
            convert:x:@.arguments/*/max_session_items
               type:int
            hyper2lambda:x:@cache.get
            while
               mt
                  get-count:x:@hyper2lambda/*
                  get-value:x:@convert
               .lambda
                  remove-nodes:x:@hyper2lambda/0
            add:x:@.session
               get-nodes:x:@hyper2lambda/*
