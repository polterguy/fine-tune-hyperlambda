
// Implement an [else] block that initializes [.validation] to 0, then checks if both [.arguments/*/randomize] is 1 and the modulo of [.no] by 8 is 0; if so, sets [.validation] to 1. If not, check if [.dp/#] contains "/validation/" and, if true, set [.validation] to 1. Then, initialize [.synthesised] to 0 and check if [.dp/#] contains "/synthesised"; if so, set [.synthesised] to 1. Next, connect to the "fine-tune" datasource and attempt to read from the "hyperlambda" table with a condition based on [lambda2hyper]; if no record exists, create a new record using [.prompt], [lambda2hyper], [.validation], and [.synthesised], and increment [.no]. If [.delete_duplicates] is true, delete the file at the path given by [.dp/#].
else
   .validation:int:0
   if
      and
         eq:x:@.arguments/*/randomize
            .:int:1
         eq
            math.modulo:x:@.no
               .:int:8
            .:int:0
      .lambda
         set-value:x:@.validation
            .:int:1
   else-if
      strings.contains:x:@.dp/#
         .:/validation/
      .lambda
         set-value:x:@.validation
            .:int:1
   .synthesised:int:0
   if
      strings.contains:x:@.dp/#
         .:/synthesised
      .lambda
         set-value:x:@.synthesised
            .:int:1
   data.connect:fine-tune
      .exists:bool:false
      data.read
         table:hyperlambda
         where
            and
               code.eq:x:@lambda2hyper
         limit:1
      if
         not-exists:x:@data.read/*
         .lambda
            data.create
               table:hyperlambda
               values
                  prompt:x:@.prompt
                  code:x:@lambda2hyper
                  validation:x:@.validation
                  synthesised:x:@.synthesised
            math.increment:x:@.no
      else-if:x:@.delete_duplicates
         io.file.delete:x:@.dp/#
