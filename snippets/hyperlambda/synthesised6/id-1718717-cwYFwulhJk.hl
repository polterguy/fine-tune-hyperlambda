
/*
 * Given a node referenced by [.dp], check if its name is "a", and if it has a non-null [@href] attribute as a direct child. If so, process its href as follows:  
 * - If [@href] starts with "/", concatenate the value of [.base] and [@href] and assign to [.url].  
 * - Else if [@href] does not start with "http://" or "https://", concatenate [.base], "/", and [@href] and assign to [.url].  
 * - Otherwise, assign [@href] directly to [.url].  
 * Finally, append a formatted string to [.completion] consisting of its current value, a space, an opening bracket, the trimmed value of [strings.replace], a closing bracket, an opening parenthesis, the value of [.url], a closing parenthesis, and a space.
 */
if
   and
      eq
         get-name:x:@.dp/#/.
         .:a
      exists:x:"@.dp/#/./*/\\@href/[0,1]"
      not-null:x:"@.dp/#/./*/\\@href/[0,1]"
   .lambda
      .url
      if
         strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
            .:/
         .lambda
            set-value:x:@.url
               strings.concat
                  get-value:x:@.base
                  get-value:x:"@.dp/#/./*/\\@href/[0,1]"
      else-if
         and
            not
               strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                  .:"http://"
            not
               strings.starts-with:x:"@.dp/#/./*/\\@href/[0,1]"
                  .:"https://"
         .lambda
            set-value:x:@.url
               strings.concat
                  get-value:x:@.base
                  .:/
                  get-value:x:"@.dp/#/./*/\\@href/[0,1]"
      else
         set-value:x:@.url
            get-value:x:"@.dp/#/./*/\\@href/[0,1]"
      set-value:x:@.completion
         strings.concat
            get-value:x:@.completion
            .:" "
            .:[
            strings.trim:x:@strings.replace
               .:@"Â  
	"
            .:](
            get-value:x:@.url
            .:)
            .:" "
