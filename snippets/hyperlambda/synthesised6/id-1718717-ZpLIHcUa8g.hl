
/*
 * Given a node set where you want to generate Markdown image links from a [src] property, implement the following logic:
 * 
 * 1. If a [src] property exists, is not null, and is not an empty string, process it to create a valid image URL:
 *     - If the [src] does not start with "http://" or "https://", check if it starts with "//", "/", or is a relative path:
 *         - If [src] starts with "//", split the [base] URL at "://", then concatenate the protocol, ":", and [src].
 *         - If [src] starts with "/", concatenate [base] and [src].
 *         - Otherwise, concatenate [base], "/", and [src].
 *     - If [src] starts with "http://" or "https://", use it as is.
 * 2. If a [completion] node exists in [.snippets/0/-/*], append a Markdown image link to it, using [alt] text if available, or defaulting to "Image ".
 * 3. If no [completion] node exists, create a new [completion] node in [.snippets/0/-] with the Markdown image link using [alt] text if available or defaulting to "Image " and the constructed URL.
 * 
 * The Markdown image link should have the form: `![alt](url)`. Use [get-first-value] for [alt], and handle all string concatenations and node creations as needed.
 */
if
   and
      exists:x:"@.dp/#/*/\\@src/[0,1]"
      not-null:x:"@.dp/#/*/\\@src/[0,1]"
      neq:x:"@.dp/#/*/\\@src/[0,1]"
         .:
   .lambda
      .url
      if
         and
            not
               strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
                  .:"http://"
            not
               strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
                  .:"https://"
         .lambda
            if
               strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
                  .://
               .lambda
                  strings.split:x:@.base
                     .:"://"
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@strings.split/0
                        .:":"
                        get-value:x:"@.dp/#/*/\\@src/[0,1]"
            else-if
               strings.starts-with:x:"@.dp/#/*/\\@src/[0,1]"
                  .:/
               .lambda
                  set-value:x:@.url
                     strings.concat
                        get-value:x:@.base
                        get-value:x:"@.dp/#/*/\\@src/[0,1]"
            else
               set-value:x:@.url
                  strings.concat
                     get-value:x:@.base
                     .:/
                     get-value:x:"@.dp/#/*/\\@src/[0,1]"
      else
         set-value:x:@.url
            get-value:x:"@.dp/#/*/\\@src/[0,1]"
      if
         exists:x:@.snippets/0/-/*/completion
         .lambda
            set-value:x:@.snippets/0/-/*/completion
               strings.concat
                  get-value:x:@.snippets/0/-/*/completion
                  .:@"

!["
                  get-first-value
                     get-value:x:"@.dp/#/*/\\@alt/[0,1]"
                     .:"Image "
                  .:](
                  get-value:x:@.url
                  .:)
      else
         strings.concat
            .:![
            get-first-value
               get-value:x:"@.dp/#/*/\\@alt/[0,1]"
               .:"Image "
            .:](
            get-value:x:@.url
            .:)
         unwrap:x:+/*/*
         add:x:@.snippets/0/-
            .
               completion:x:@strings.concat
