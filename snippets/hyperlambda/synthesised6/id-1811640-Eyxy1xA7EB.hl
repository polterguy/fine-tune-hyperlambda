
// Create a conditional block using [if] to check if the node at [@json2lambda/*/choices/0/*/delta/*/content] is not null and not equal to an empty string. If true, append its value to [.result] using [strings.concat]. Then, use a nested [if] to check if [.result] does not contain the substring "___" with [strings.contains] and [not]; if so, unwrap the next node and send a [sockets.signal] to [@.session] with a [message] argument containing the relevant content. Otherwise, if [.result] contains "FUNCTION_INVOCATION[" and [.has-sent-waiting] is not true, use [else-if] to send a [sockets.signal] with [function_waiting:bool:true] and set [.has-sent-waiting] to true.
if
   and
      not-null:x:@json2lambda/*/choices/0/*/delta/*/content
      neq:x:@json2lambda/*/choices/0/*/delta/*/content
         .:
   .lambda
      set-value:x:@.result
         strings.concat
            get-value:x:@.result
            get-value:x:@json2lambda/*/choices/0/*/delta/*/content
      if
         not
            strings.contains:x:@.result
               .:___
         .lambda
            unwrap:x:+/*/*
            sockets.signal:x:@.session
               args
                  message:x:@json2lambda/*/choices/0/*/delta/*/content
      else-if
         and
            strings.contains:x:@.result
               .:FUNCTION_INVOCATION[
            neq:x:@.has-sent-waiting
               .:bool:true
         .lambda
            sockets.signal:x:@.session
               args
                  function_waiting:bool:true
            set-value:x:@.has-sent-waiting
               .:bool:true
