
// Retrieve a record from the [ml_types] table in the "magic" database using [data.connect] and [data.read], filtering by the [type] argument from [.arguments]. Select a detailed set of columns. If no record exists for the given type, attempt to retrieve the row where [type] is "default". If neither is found, throw a 400 public error stating that no such type and no default were found. In both cases where a record is found, add all returned fields to the [.model] node, and if the default is used, update the [type] in [.arguments] to "default".
data.connect:[generic|magic]
   data.read
      table:ml_types
      columns
         model
         max_tokens
         max_context_tokens
         max_request_tokens
         temperature
         recaptcha
         auth
         supervised
         cached
         prefix
         use_embeddings
         threshold
         vector_model
         contact_us
         lead_email
         api_key
         webhook_incoming
         webhook_outgoing
         webhook_incoming_url
         webhook_outgoing_url
         system_message
         initial_questionnaire
         no_requests
         max_requests
         session_timeout
         search_postfix
         max_function_invocations
         max_session_items
         completion_slot
      where
         and
            type.eq:x:@.arguments/*/type
   if
      not-exists:x:@data.read/*
      .lambda
         data.read
            table:ml_types
            columns
               model
               max_tokens
               max_context_tokens
               max_request_tokens
               temperature
               recaptcha
               auth
               supervised
               cached
               prefix
               use_embeddings
               threshold
               vector_model
               contact_us
               lead_email
               api_key
               webhook_incoming
               webhook_outgoing
               webhook_incoming_url
               webhook_outgoing_url
               system_message
               initial_questionnaire
               no_requests
               max_requests
               session_timeout
               search_postfix
               max_function_invocations
               max_session_items
               completion_slot
            where
               and
                  type.eq:default
         if
            not-exists:x:@data.read/*
            .lambda
               throw:No such type, and no default type was found
                  status:int:400
                  public:bool:true
         add:x:@.model
            get-nodes:x:@data.read/*/*
         set-value:x:@.arguments/*/type
            .:default
   else
      add:x:@.model
         get-nodes:x:@data.read/*/*
