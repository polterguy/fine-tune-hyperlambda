
// Iterate through each child node of the [disallow] node inside [.arguments], and for each, evaluate an expression by unwrapping all its children, then invoke a [.match] slot using the first element of the [sort] node as the "url" argument and the current [disallow] node as the "pattern". If the result of the invocation is true, set [.allowed] to false, and then iterate through each child of the [allow] node inside [.arguments], unwrap its children, invoke [.match] with the same url and each current [allow] node as the "pattern", and if the invocation returns true, set [.allowed] to true.
for-each:x:@.arguments/*/disallow/*
   unwrap:x:+/*
   invoke:x:@.match
      url:x:@sort/0
      pattern:x:@.dp/#
   if
      get-value:x:@invoke
      .lambda
         set-value:x:@.allowed
            .:bool:false
         for-each:x:@.arguments/*/allow/*
            unwrap:x:+/*
            invoke:x:@.match
               url:x:@sort/0
               pattern:x:@.dp/#
            if
               get-value:x:@invoke
               .lambda
                  set-value:x:@.allowed
                     .:bool:true
